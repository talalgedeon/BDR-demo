
/Users/talalagedeon/Desktop/particle-coding/Air-quality/target/1.5.0/boron/Air-quality.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004b50  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000d8b70  000d8b70  00008b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000d8b78  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  2003e3bc  000d8b7c  0001e3bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000003c8  2003e428  2003e428  0002e428  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000d8be8  000d8be8  00028be8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000d8c10  000d8c10  00028c10  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000e946f  00000000  00000000  00028c14  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000131e9  00000000  00000000  00112083  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00021002  00000000  00000000  0012526c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002760  00000000  00000000  0014626e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00004b48  00000000  00000000  001489ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000396d3  00000000  00000000  0014d516  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0003035a  00000000  00000000  00186be9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00109876  00000000  00000000  001b6f43  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000d79c  00000000  00000000  002c07bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f004 faf9 	bl	d8628 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f004 fafe 	bl	d863e <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e3bc 	.word	0x2003e3bc
   d404c:	000d8b7c 	.word	0x000d8b7c
   d4050:	2003e428 	.word	0x2003e428
   d4054:	2003e428 	.word	0x2003e428
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f001 ffa5 	bl	d5fac <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d8b70 	.word	0x000d8b70
   d4084:	000d8b2c 	.word	0x000d8b2c

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b816 	b.w	d40b8 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 f95b 	bl	d4348 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f001 bf4b 	b.w	d5f30 <_post_loop>

000d409a <_Znwj>:
   d409a:	f001 b8af 	b.w	d51fc <malloc>

000d409e <_ZdlPv>:
   d409e:	f001 b8b5 	b.w	d520c <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f001 b8b3 	b.w	d520c <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <setup>:
unsigned long duration;

float ratio = 0;
float concentration = 0;

void setup() {
   d40b8:	b508      	push	{r3, lr}
  Serial.begin(9600);
   d40ba:	f001 fef5 	bl	d5ea8 <_Z16_fetch_usbserialv>
   d40be:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40c2:	f001 fee5 	bl	d5e90 <_ZN9USBSerial5beginEl>

  pinMode( DUST_SENSOR_PIN, INPUT);
   d40c6:	2100      	movs	r1, #0
   d40c8:	2004      	movs	r0, #4
   d40ca:	f001 ffbd 	bl	d6048 <pinMode>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d40ce:	f000 fea9 	bl	d4e24 <HAL_Timer_Get_Milli_Seconds>
  lastInterval = millis();
   d40d2:	4b0f      	ldr	r3, [pc, #60]	; (d4110 <setup+0x58>)
   d40d4:	6018      	str	r0, [r3, #0]

  if (aqSensor.init())
   d40d6:	480f      	ldr	r0, [pc, #60]	; (d4114 <setup+0x5c>)
   d40d8:	f000 f99f 	bl	d441a <_ZN16AirQualitySensor4initEv>
   d40dc:	b118      	cbz	r0, d40e6 <setup+0x2e>
 {
   Serial.println("Air Quality Sensor ready.");
   d40de:	f001 fee3 	bl	d5ea8 <_Z16_fetch_usbserialv>
   d40e2:	490d      	ldr	r1, [pc, #52]	; (d4118 <setup+0x60>)
   d40e4:	e002      	b.n	d40ec <setup+0x34>
 }
 else
 {
   Serial.println("Air Quality Sensor ERROR!");
   d40e6:	f001 fedf 	bl	d5ea8 <_Z16_fetch_usbserialv>
   d40ea:	490c      	ldr	r1, [pc, #48]	; (d411c <setup+0x64>)
   d40ec:	f001 fbfb 	bl	d58e6 <_ZN5Print7printlnEPKc>
 }

 if (bme.begin())
   d40f0:	480b      	ldr	r0, [pc, #44]	; (d4120 <setup+0x68>)
   d40f2:	f000 fcf9 	bl	d4ae8 <_ZN15Adafruit_BME2805beginEv>
   d40f6:	b118      	cbz	r0, d4100 <setup+0x48>
{
 Serial.println("BME280 Sensor ready.");
   d40f8:	f001 fed6 	bl	d5ea8 <_Z16_fetch_usbserialv>
   d40fc:	4909      	ldr	r1, [pc, #36]	; (d4124 <setup+0x6c>)
   d40fe:	e002      	b.n	d4106 <setup+0x4e>
}
else
{
 Serial.println("BME280 Sensor ERROR!");
   d4100:	f001 fed2 	bl	d5ea8 <_Z16_fetch_usbserialv>
   d4104:	4908      	ldr	r1, [pc, #32]	; (d4128 <setup+0x70>)
}

}
   d4106:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
 Serial.println("BME280 Sensor ready.");
}
else
{
 Serial.println("BME280 Sensor ERROR!");
   d410a:	f001 bbec 	b.w	d58e6 <_ZN5Print7printlnEPKc>
   d410e:	bf00      	nop
   d4110:	2003e4a0 	.word	0x2003e4a0
   d4114:	2003e484 	.word	0x2003e484
   d4118:	000d86c4 	.word	0x000d86c4
   d411c:	000d86de 	.word	0x000d86de
   d4120:	2003e440 	.word	0x2003e440
   d4124:	000d86f8 	.word	0x000d86f8
   d4128:	000d870d 	.word	0x000d870d

000d412c <_Z13getAirQualityv>:
    lastInterval = millis();

  }
}
String getAirQuality()
{
   d412c:	b538      	push	{r3, r4, r5, lr}
   d412e:	4604      	mov	r4, r0
 int quality = aqSensor.slope();
   d4130:	4811      	ldr	r0, [pc, #68]	; (d4178 <_Z13getAirQualityv+0x4c>)
   d4132:	f000 f99f 	bl	d4474 <_ZN16AirQualitySensor5slopeEv>
 String qual = "None";
   d4136:	4911      	ldr	r1, [pc, #68]	; (d417c <_Z13getAirQualityv+0x50>)

  }
}
String getAirQuality()
{
 int quality = aqSensor.slope();
   d4138:	4605      	mov	r5, r0
 String qual = "None";
   d413a:	4620      	mov	r0, r4
   d413c:	f001 fd5f 	bl	d5bfe <_ZN6StringC1EPK19__FlashStringHelper>

 if (quality == AirQualitySensor::FORCE_SIGNAL)
   d4140:	4b0f      	ldr	r3, [pc, #60]	; (d4180 <_Z13getAirQualityv+0x54>)
   d4142:	681b      	ldr	r3, [r3, #0]
   d4144:	429d      	cmp	r5, r3
   d4146:	d101      	bne.n	d414c <_Z13getAirQualityv+0x20>
 {
   qual = "Danger";
   d4148:	490e      	ldr	r1, [pc, #56]	; (d4184 <_Z13getAirQualityv+0x58>)
   d414a:	e010      	b.n	d416e <_Z13getAirQualityv+0x42>
 }
 else if (quality == AirQualitySensor::HIGH_POLLUTION)
   d414c:	4b0e      	ldr	r3, [pc, #56]	; (d4188 <_Z13getAirQualityv+0x5c>)
   d414e:	681b      	ldr	r3, [r3, #0]
   d4150:	429d      	cmp	r5, r3
   d4152:	d101      	bne.n	d4158 <_Z13getAirQualityv+0x2c>
 {
   qual = "High Pollution";
   d4154:	490d      	ldr	r1, [pc, #52]	; (d418c <_Z13getAirQualityv+0x60>)
   d4156:	e00a      	b.n	d416e <_Z13getAirQualityv+0x42>
 }
 else if (quality == AirQualitySensor::LOW_POLLUTION)
   d4158:	4b0d      	ldr	r3, [pc, #52]	; (d4190 <_Z13getAirQualityv+0x64>)
   d415a:	681b      	ldr	r3, [r3, #0]
   d415c:	429d      	cmp	r5, r3
   d415e:	d101      	bne.n	d4164 <_Z13getAirQualityv+0x38>
 {
   qual = "Low Pollution";
   d4160:	490c      	ldr	r1, [pc, #48]	; (d4194 <_Z13getAirQualityv+0x68>)
   d4162:	e004      	b.n	d416e <_Z13getAirQualityv+0x42>
 }
 else if (quality == AirQualitySensor::FRESH_AIR)
   d4164:	4b0c      	ldr	r3, [pc, #48]	; (d4198 <_Z13getAirQualityv+0x6c>)
   d4166:	681b      	ldr	r3, [r3, #0]
   d4168:	429d      	cmp	r5, r3
   d416a:	d103      	bne.n	d4174 <_Z13getAirQualityv+0x48>
 {
   qual = "Fresh Air";
   d416c:	490b      	ldr	r1, [pc, #44]	; (d419c <_Z13getAirQualityv+0x70>)
   d416e:	4620      	mov	r0, r4
   d4170:	f001 fd58 	bl	d5c24 <_ZN6StringaSEPKc>
 }

 return qual;
}
   d4174:	4620      	mov	r0, r4
   d4176:	bd38      	pop	{r3, r4, r5, pc}
   d4178:	2003e484 	.word	0x2003e484
   d417c:	000d8722 	.word	0x000d8722
   d4180:	000d87c0 	.word	0x000d87c0
   d4184:	000d8727 	.word	0x000d8727
   d4188:	000d87bc 	.word	0x000d87bc
   d418c:	000d872e 	.word	0x000d872e
   d4190:	000d87b4 	.word	0x000d87b4
   d4194:	000d873d 	.word	0x000d873d
   d4198:	000d87b8 	.word	0x000d87b8
   d419c:	000d874b 	.word	0x000d874b

000d41a0 <_Z12getBMEValuesRiS_S_>:

int getBMEValues(int &temp, int &pressure, int &humidity)
{
   d41a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 temp = (int)bme.readTemperature();
   d41a2:	4c0f      	ldr	r4, [pc, #60]	; (d41e0 <_Z12getBMEValuesRiS_S_+0x40>)

 return qual;
}

int getBMEValues(int &temp, int &pressure, int &humidity)
{
   d41a4:	4607      	mov	r7, r0
 temp = (int)bme.readTemperature();
   d41a6:	4620      	mov	r0, r4

 return qual;
}

int getBMEValues(int &temp, int &pressure, int &humidity)
{
   d41a8:	460e      	mov	r6, r1
   d41aa:	4615      	mov	r5, r2
 temp = (int)bme.readTemperature();
   d41ac:	f000 fcb0 	bl	d4b10 <_ZN15Adafruit_BME28015readTemperatureEv>
   d41b0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 pressure = (int)(bme.readPressure() / 100.0F);
   d41b4:	4620      	mov	r0, r4
 return qual;
}

int getBMEValues(int &temp, int &pressure, int &humidity)
{
 temp = (int)bme.readTemperature();
   d41b6:	ed87 0a00 	vstr	s0, [r7]
 pressure = (int)(bme.readPressure() / 100.0F);
   d41ba:	f000 fcd7 	bl	d4b6c <_ZN15Adafruit_BME28012readPressureEv>
   d41be:	eddf 7a09 	vldr	s15, [pc, #36]	; d41e4 <_Z12getBMEValuesRiS_S_+0x44>
   d41c2:	ee80 0a27 	vdiv.f32	s0, s0, s15
 humidity = (int)bme.readHumidity();
   d41c6:	4620      	mov	r0, r4
}

int getBMEValues(int &temp, int &pressure, int &humidity)
{
 temp = (int)bme.readTemperature();
 pressure = (int)(bme.readPressure() / 100.0F);
   d41c8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d41cc:	ed86 0a00 	vstr	s0, [r6]
 humidity = (int)bme.readHumidity();
   d41d0:	f000 fdaa 	bl	d4d28 <_ZN15Adafruit_BME28012readHumidityEv>
   d41d4:	eebd 0ac0 	vcvt.s32.f32	s0, s0

 return 1;
}
   d41d8:	2001      	movs	r0, #1

int getBMEValues(int &temp, int &pressure, int &humidity)
{
 temp = (int)bme.readTemperature();
 pressure = (int)(bme.readPressure() / 100.0F);
 humidity = (int)bme.readHumidity();
   d41da:	ed85 0a00 	vstr	s0, [r5]

 return 1;
}
   d41de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d41e0:	2003e440 	.word	0x2003e440
   d41e4:	42c80000 	.word	0x42c80000

000d41e8 <_Z21getDustSensorReadingsv>:

void getDustSensorReadings()
{
   d41e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d41ec:	ed2d 8b02 	vpush	{d8}
  // This particular dust sensor returns 0s often, so let's filter them out by making sure we only
  // capture and use non-zero LPO values for our calculations once we get a good reading.
  if (lowpulseoccupancy == 0)
   d41f0:	4c4d      	ldr	r4, [pc, #308]	; (d4328 <_Z21getDustSensorReadingsv+0x140>)
   d41f2:	4b4e      	ldr	r3, [pc, #312]	; (d432c <_Z21getDustSensorReadingsv+0x144>)
   d41f4:	6822      	ldr	r2, [r4, #0]

 return 1;
}

void getDustSensorReadings()
{
   d41f6:	b084      	sub	sp, #16
  // This particular dust sensor returns 0s often, so let's filter them out by making sure we only
  // capture and use non-zero LPO values for our calculations once we get a good reading.
  if (lowpulseoccupancy == 0)
   d41f8:	b912      	cbnz	r2, d4200 <_Z21getDustSensorReadingsv+0x18>
  {
    lowpulseoccupancy = last_lpo;
   d41fa:	681b      	ldr	r3, [r3, #0]
   d41fc:	6023      	str	r3, [r4, #0]
   d41fe:	e000      	b.n	d4202 <_Z21getDustSensorReadingsv+0x1a>
  }
  else
  {
    last_lpo = lowpulseoccupancy;
   d4200:	601a      	str	r2, [r3, #0]
  }

  ratio = lowpulseoccupancy / (SENSOR_READING_INTERVAL * 10.0);                   // Integer percentage 0=>100
   d4202:	6820      	ldr	r0, [r4, #0]
   d4204:	4d4a      	ldr	r5, [pc, #296]	; (d4330 <_Z21getDustSensorReadingsv+0x148>)
  concentration = 1.1 * pow(ratio, 3) - 3.8 * pow(ratio, 2) + 520 * ratio + 0.62; // using spec sheet curve
   d4206:	f8df a13c 	ldr.w	sl, [pc, #316]	; d4344 <_Z21getDustSensorReadingsv+0x15c>
  else
  {
    last_lpo = lowpulseoccupancy;
  }

  ratio = lowpulseoccupancy / (SENSOR_READING_INTERVAL * 10.0);                   // Integer percentage 0=>100
   d420a:	f003 fbb7 	bl	d797c <__aeabi_ui2d>
   d420e:	a33c      	add	r3, pc, #240	; (adr r3, d4300 <_Z21getDustSensorReadingsv+0x118>)
   d4210:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4214:	f003 fd52 	bl	d7cbc <__aeabi_ddiv>
   d4218:	f003 fed6 	bl	d7fc8 <__aeabi_d2f>
   d421c:	6028      	str	r0, [r5, #0]
  concentration = 1.1 * pow(ratio, 3) - 3.8 * pow(ratio, 2) + 520 * ratio + 0.62; // using spec sheet curve
   d421e:	f003 fbcf 	bl	d79c0 <__aeabi_f2d>
   d4222:	ed9f 1b39 	vldr	d1, [pc, #228]	; d4308 <_Z21getDustSensorReadingsv+0x120>
   d4226:	ec41 0b10 	vmov	d0, r0, r1
   d422a:	f002 f92d 	bl	d6488 <pow>
   d422e:	ed95 8a00 	vldr	s16, [r5]
   d4232:	ee18 0a10 	vmov	r0, s16
   d4236:	ed8d 0b02 	vstr	d0, [sp, #8]
   d423a:	f003 fbc1 	bl	d79c0 <__aeabi_f2d>
   d423e:	ed9d 0b02 	vldr	d0, [sp, #8]
   d4242:	4680      	mov	r8, r0
   d4244:	4689      	mov	r9, r1
   d4246:	a332      	add	r3, pc, #200	; (adr r3, d4310 <_Z21getDustSensorReadingsv+0x128>)
   d4248:	e9d3 2300 	ldrd	r2, r3, [r3]
   d424c:	ec51 0b10 	vmov	r0, r1, d0
   d4250:	f003 fc0a 	bl	d7a68 <__aeabi_dmul>
   d4254:	4642      	mov	r2, r8
   d4256:	4606      	mov	r6, r0
   d4258:	460f      	mov	r7, r1
   d425a:	464b      	mov	r3, r9
   d425c:	4640      	mov	r0, r8
   d425e:	4649      	mov	r1, r9
   d4260:	f003 fc02 	bl	d7a68 <__aeabi_dmul>
   d4264:	a32c      	add	r3, pc, #176	; (adr r3, d4318 <_Z21getDustSensorReadingsv+0x130>)
   d4266:	e9d3 2300 	ldrd	r2, r3, [r3]
   d426a:	f003 fbfd 	bl	d7a68 <__aeabi_dmul>
   d426e:	4602      	mov	r2, r0
   d4270:	460b      	mov	r3, r1
   d4272:	4630      	mov	r0, r6
   d4274:	4639      	mov	r1, r7
   d4276:	f003 fa43 	bl	d7700 <__aeabi_dsub>
   d427a:	eddf 7a2e 	vldr	s15, [pc, #184]	; d4334 <_Z21getDustSensorReadingsv+0x14c>
   d427e:	ee68 7a27 	vmul.f32	s15, s16, s15
   d4282:	4606      	mov	r6, r0
   d4284:	ee17 0a90 	vmov	r0, s15
   d4288:	460f      	mov	r7, r1
   d428a:	f003 fb99 	bl	d79c0 <__aeabi_f2d>
   d428e:	4602      	mov	r2, r0
   d4290:	460b      	mov	r3, r1
   d4292:	4630      	mov	r0, r6
   d4294:	4639      	mov	r1, r7
   d4296:	f003 fa35 	bl	d7704 <__adddf3>
   d429a:	a321      	add	r3, pc, #132	; (adr r3, d4320 <_Z21getDustSensorReadingsv+0x138>)
   d429c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d42a0:	f003 fa30 	bl	d7704 <__adddf3>
   d42a4:	f003 fe90 	bl	d7fc8 <__aeabi_d2f>
   d42a8:	f8ca 0000 	str.w	r0, [sl]

  Serial.printlnf("LPO: %d", lowpulseoccupancy);
   d42ac:	f001 fdfc 	bl	d5ea8 <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d42b0:	6823      	ldr	r3, [r4, #0]
   d42b2:	4a21      	ldr	r2, [pc, #132]	; (d4338 <_Z21getDustSensorReadingsv+0x150>)
   d42b4:	2101      	movs	r1, #1
   d42b6:	f001 fb40 	bl	d593a <_ZN5Print11printf_implEbPKcz>
  Serial.printlnf("Ratio: %f%%", ratio);
   d42ba:	f001 fdf5 	bl	d5ea8 <_Z16_fetch_usbserialv>
   d42be:	4604      	mov	r4, r0
   d42c0:	6828      	ldr	r0, [r5, #0]
   d42c2:	f003 fb7d 	bl	d79c0 <__aeabi_f2d>
   d42c6:	4a1d      	ldr	r2, [pc, #116]	; (d433c <_Z21getDustSensorReadingsv+0x154>)
   d42c8:	e9cd 0100 	strd	r0, r1, [sp]
   d42cc:	2101      	movs	r1, #1
   d42ce:	4620      	mov	r0, r4
   d42d0:	f001 fb33 	bl	d593a <_ZN5Print11printf_implEbPKcz>
  Serial.printlnf("Concentration: %f pcs/L", concentration);
   d42d4:	f001 fde8 	bl	d5ea8 <_Z16_fetch_usbserialv>
   d42d8:	4604      	mov	r4, r0
   d42da:	f8da 0000 	ldr.w	r0, [sl]
   d42de:	f003 fb6f 	bl	d79c0 <__aeabi_f2d>
   d42e2:	4a17      	ldr	r2, [pc, #92]	; (d4340 <_Z21getDustSensorReadingsv+0x158>)
   d42e4:	e9cd 0100 	strd	r0, r1, [sp]
   d42e8:	2101      	movs	r1, #1
   d42ea:	4620      	mov	r0, r4
   d42ec:	f001 fb25 	bl	d593a <_ZN5Print11printf_implEbPKcz>
}
   d42f0:	b004      	add	sp, #16
   d42f2:	ecbd 8b02 	vpop	{d8}
   d42f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d42fa:	bf00      	nop
   d42fc:	f3af 8000 	nop.w
   d4300:	00000000 	.word	0x00000000
   d4304:	41124f80 	.word	0x41124f80
   d4308:	00000000 	.word	0x00000000
   d430c:	40080000 	.word	0x40080000
   d4310:	9999999a 	.word	0x9999999a
   d4314:	3ff19999 	.word	0x3ff19999
   d4318:	66666666 	.word	0x66666666
   d431c:	400e6666 	.word	0x400e6666
   d4320:	3d70a3d7 	.word	0x3d70a3d7
   d4324:	3fe3d70a 	.word	0x3fe3d70a
   d4328:	2003e430 	.word	0x2003e430
   d432c:	2003e438 	.word	0x2003e438
   d4330:	2003e43c 	.word	0x2003e43c
   d4334:	44020000 	.word	0x44020000
   d4338:	000d8755 	.word	0x000d8755
   d433c:	000d875d 	.word	0x000d875d
   d4340:	000d8769 	.word	0x000d8769
   d4344:	2003e42c 	.word	0x2003e42c

000d4348 <loop>:
}

}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d4348:	b530      	push	{r4, r5, lr}
  int temp, pressure, humidity;

  duration = pulseIn( DUST_SENSOR_PIN, LOW);
   d434a:	2100      	movs	r1, #0
}

}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d434c:	b089      	sub	sp, #36	; 0x24
  int temp, pressure, humidity;

  duration = pulseIn( DUST_SENSOR_PIN, LOW);
   d434e:	2004      	movs	r0, #4
   d4350:	f001 fece 	bl	d60f0 <pulseIn>
  lowpulseoccupancy = lowpulseoccupancy + duration;
   d4354:	4c1f      	ldr	r4, [pc, #124]	; (d43d4 <loop+0x8c>)

// loop() runs over and over again, as quickly as it can execute.
void loop() {
  int temp, pressure, humidity;

  duration = pulseIn( DUST_SENSOR_PIN, LOW);
   d4356:	4b20      	ldr	r3, [pc, #128]	; (d43d8 <loop+0x90>)
  lowpulseoccupancy = lowpulseoccupancy + duration;

  if ((millis() - lastInterval) > SENSOR_READING_INTERVAL)
   d4358:	4d20      	ldr	r5, [pc, #128]	; (d43dc <loop+0x94>)

// loop() runs over and over again, as quickly as it can execute.
void loop() {
  int temp, pressure, humidity;

  duration = pulseIn( DUST_SENSOR_PIN, LOW);
   d435a:	6018      	str	r0, [r3, #0]
  lowpulseoccupancy = lowpulseoccupancy + duration;
   d435c:	6823      	ldr	r3, [r4, #0]
   d435e:	4418      	add	r0, r3
   d4360:	6020      	str	r0, [r4, #0]
   d4362:	f000 fd5f 	bl	d4e24 <HAL_Timer_Get_Milli_Seconds>

  if ((millis() - lastInterval) > SENSOR_READING_INTERVAL)
   d4366:	682b      	ldr	r3, [r5, #0]
   d4368:	1ac0      	subs	r0, r0, r3
   d436a:	f247 5330 	movw	r3, #30000	; 0x7530
   d436e:	4298      	cmp	r0, r3
   d4370:	d92d      	bls.n	d43ce <loop+0x86>
  {
    String quality = getAirQuality();
   d4372:	a804      	add	r0, sp, #16
   d4374:	f7ff feda 	bl	d412c <_Z13getAirQualityv>
    Serial.printlnf("Air Quality: %s", quality.c_str());
   d4378:	f001 fd96 	bl	d5ea8 <_Z16_fetch_usbserialv>
   d437c:	9b04      	ldr	r3, [sp, #16]
   d437e:	4a18      	ldr	r2, [pc, #96]	; (d43e0 <loop+0x98>)
   d4380:	2101      	movs	r1, #1
   d4382:	f001 fada 	bl	d593a <_ZN5Print11printf_implEbPKcz>

    getBMEValues(temp, pressure, humidity);
   d4386:	aa03      	add	r2, sp, #12
   d4388:	a902      	add	r1, sp, #8
   d438a:	a801      	add	r0, sp, #4
   d438c:	f7ff ff08 	bl	d41a0 <_Z12getBMEValuesRiS_S_>
    Serial.printlnf("Temp: %d", temp);
   d4390:	f001 fd8a 	bl	d5ea8 <_Z16_fetch_usbserialv>
   d4394:	9b01      	ldr	r3, [sp, #4]
   d4396:	4a13      	ldr	r2, [pc, #76]	; (d43e4 <loop+0x9c>)
   d4398:	2101      	movs	r1, #1
   d439a:	f001 face 	bl	d593a <_ZN5Print11printf_implEbPKcz>
    Serial.printlnf("Pressure: %d", pressure);
   d439e:	f001 fd83 	bl	d5ea8 <_Z16_fetch_usbserialv>
   d43a2:	9b02      	ldr	r3, [sp, #8]
   d43a4:	4a10      	ldr	r2, [pc, #64]	; (d43e8 <loop+0xa0>)
   d43a6:	2101      	movs	r1, #1
   d43a8:	f001 fac7 	bl	d593a <_ZN5Print11printf_implEbPKcz>
    Serial.printlnf("Humidity: %d", humidity);
   d43ac:	f001 fd7c 	bl	d5ea8 <_Z16_fetch_usbserialv>
   d43b0:	9b03      	ldr	r3, [sp, #12]
   d43b2:	4a0e      	ldr	r2, [pc, #56]	; (d43ec <loop+0xa4>)
   d43b4:	2101      	movs	r1, #1
   d43b6:	f001 fac0 	bl	d593a <_ZN5Print11printf_implEbPKcz>

    getDustSensorReadings();
   d43ba:	f7ff ff15 	bl	d41e8 <_Z21getDustSensorReadingsv>

    lowpulseoccupancy =0;
   d43be:	2300      	movs	r3, #0
   d43c0:	6023      	str	r3, [r4, #0]
   d43c2:	f000 fd2f 	bl	d4e24 <HAL_Timer_Get_Milli_Seconds>
    lastInterval = millis();
   d43c6:	6028      	str	r0, [r5, #0]
  duration = pulseIn( DUST_SENSOR_PIN, LOW);
  lowpulseoccupancy = lowpulseoccupancy + duration;

  if ((millis() - lastInterval) > SENSOR_READING_INTERVAL)
  {
    String quality = getAirQuality();
   d43c8:	a804      	add	r0, sp, #16
   d43ca:	f001 fbd1 	bl	d5b70 <_ZN6StringD1Ev>

    lowpulseoccupancy =0;
    lastInterval = millis();

  }
}
   d43ce:	b009      	add	sp, #36	; 0x24
   d43d0:	bd30      	pop	{r4, r5, pc}
   d43d2:	bf00      	nop
   d43d4:	2003e430 	.word	0x2003e430
   d43d8:	2003e434 	.word	0x2003e434
   d43dc:	2003e4a0 	.word	0x2003e4a0
   d43e0:	000d8781 	.word	0x000d8781
   d43e4:	000d8791 	.word	0x000d8791
   d43e8:	000d879a 	.word	0x000d879a
   d43ec:	000d87a7 	.word	0x000d87a7

000d43f0 <_GLOBAL__sub_I_aqSensor>:
  concentration = 1.1 * pow(ratio, 3) - 3.8 * pow(ratio, 2) + 520 * ratio + 0.62; // using spec sheet curve

  Serial.printlnf("LPO: %d", lowpulseoccupancy);
  Serial.printlnf("Ratio: %f%%", ratio);
  Serial.printlnf("Concentration: %f pcs/L", concentration);
}
   d43f0:	b508      	push	{r3, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d43f2:	f000 fd1f 	bl	d4e34 <HAL_Pin_Map>
#define AQS_PIN A2
#include <math.h>
#include "Air_Quality_Sensor.h"
#include "Adafruit_BME280.h"

AirQualitySensor aqSensor(AQS_PIN);
   d43f6:	2111      	movs	r1, #17
   d43f8:	4803      	ldr	r0, [pc, #12]	; (d4408 <_GLOBAL__sub_I_aqSensor+0x18>)
   d43fa:	f000 f809 	bl	d4410 <_ZN16AirQualitySensorC1Ei>
Adafruit_BME280 bme;
   d43fe:	4803      	ldr	r0, [pc, #12]	; (d440c <_GLOBAL__sub_I_aqSensor+0x1c>)
  concentration = 1.1 * pow(ratio, 3) - 3.8 * pow(ratio, 2) + 520 * ratio + 0.62; // using spec sheet curve

  Serial.printlnf("LPO: %d", lowpulseoccupancy);
  Serial.printlnf("Ratio: %f%%", ratio);
  Serial.printlnf("Concentration: %f pcs/L", concentration);
}
   d4400:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#include <math.h>
#include "Air_Quality_Sensor.h"
#include "Adafruit_BME280.h"

AirQualitySensor aqSensor(AQS_PIN);
Adafruit_BME280 bme;
   d4404:	f000 b892 	b.w	d452c <_ZN15Adafruit_BME280C1Ev>
   d4408:	2003e484 	.word	0x2003e484
   d440c:	2003e440 	.word	0x2003e440

000d4410 <_ZN16AirQualitySensorC1Ei>:
const int AirQualitySensor::HIGH_POLLUTION = 1;
const int AirQualitySensor::LOW_POLLUTION  = 2;
const int AirQualitySensor::FRESH_AIR      = 3;

AirQualitySensor::AirQualitySensor(int pin) 
: _pin(pin), _voltageSum(0), _volSumCount(0) {
   d4410:	2200      	movs	r2, #0
   d4412:	6001      	str	r1, [r0, #0]
   d4414:	6102      	str	r2, [r0, #16]
   d4416:	6142      	str	r2, [r0, #20]
    // do nothing
}
   d4418:	4770      	bx	lr

000d441a <_ZN16AirQualitySensor4initEv>:

bool AirQualitySensor::init(void) {
   d441a:	b510      	push	{r4, lr}
   d441c:	4604      	mov	r4, r0
    int initVoltage = analogRead(_pin);
   d441e:	8800      	ldrh	r0, [r0, #0]
   d4420:	f001 fe4f 	bl	d60c2 <analogRead>

    if (10 < initVoltage && initVoltage < 798) {
   d4424:	f240 3312 	movw	r3, #786	; 0x312
   d4428:	f1a0 020b 	sub.w	r2, r0, #11
   d442c:	429a      	cmp	r2, r3
   d442e:	d807      	bhi.n	d4440 <_ZN16AirQualitySensor4initEv+0x26>
        _currentVoltage = initVoltage;
   d4430:	60a0      	str	r0, [r4, #8]
        _lastVoltage = _currentVoltage;
   d4432:	6060      	str	r0, [r4, #4]

        _standardVoltage = initVoltage;
   d4434:	60e0      	str	r0, [r4, #12]
   d4436:	f000 fcf5 	bl	d4e24 <HAL_Timer_Get_Milli_Seconds>
        _lastStdVolUpdated = millis();
   d443a:	61a0      	str	r0, [r4, #24]

        return true;
   d443c:	2001      	movs	r0, #1
   d443e:	bd10      	pop	{r4, pc}
    }
    else {
        return false;
   d4440:	2000      	movs	r0, #0
    }
}
   d4442:	bd10      	pop	{r4, pc}

000d4444 <_ZN16AirQualitySensor21updateStandardVoltageEv>:

int AirQualitySensor::getValue(void) {
    return _currentVoltage;
}

void AirQualitySensor::updateStandardVoltage(void) {
   d4444:	b510      	push	{r4, lr}
   d4446:	4604      	mov	r4, r0
   d4448:	f000 fcec 	bl	d4e24 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - _lastStdVolUpdated > 500000) {
   d444c:	69a3      	ldr	r3, [r4, #24]
   d444e:	1ac0      	subs	r0, r0, r3
   d4450:	4b07      	ldr	r3, [pc, #28]	; (d4470 <_ZN16AirQualitySensor21updateStandardVoltageEv+0x2c>)
   d4452:	4298      	cmp	r0, r3
   d4454:	d90a      	bls.n	d446c <_ZN16AirQualitySensor21updateStandardVoltageEv+0x28>
        _standardVoltage = _voltageSum / _volSumCount;
   d4456:	6923      	ldr	r3, [r4, #16]
   d4458:	6962      	ldr	r2, [r4, #20]
   d445a:	fb93 f3f2 	sdiv	r3, r3, r2
   d445e:	60e3      	str	r3, [r4, #12]
   d4460:	f000 fce0 	bl	d4e24 <HAL_Timer_Get_Milli_Seconds>
        _lastStdVolUpdated = millis();

        _voltageSum = 0;
   d4464:	2300      	movs	r3, #0
}

void AirQualitySensor::updateStandardVoltage(void) {
    if (millis() - _lastStdVolUpdated > 500000) {
        _standardVoltage = _voltageSum / _volSumCount;
        _lastStdVolUpdated = millis();
   d4466:	61a0      	str	r0, [r4, #24]

        _voltageSum = 0;
   d4468:	6123      	str	r3, [r4, #16]
        _volSumCount = 0;
   d446a:	6163      	str	r3, [r4, #20]
   d446c:	bd10      	pop	{r4, pc}
   d446e:	bf00      	nop
   d4470:	0007a120 	.word	0x0007a120

000d4474 <_ZN16AirQualitySensor5slopeEv>:
    else {
        return false;
    }
}

int AirQualitySensor::slope(void) {
   d4474:	b510      	push	{r4, lr}
    _lastVoltage = _currentVoltage;
   d4476:	6883      	ldr	r3, [r0, #8]
   d4478:	6043      	str	r3, [r0, #4]
    else {
        return false;
    }
}

int AirQualitySensor::slope(void) {
   d447a:	4604      	mov	r4, r0
    _lastVoltage = _currentVoltage;
    _currentVoltage = analogRead(_pin);
   d447c:	8800      	ldrh	r0, [r0, #0]
   d447e:	f001 fe20 	bl	d60c2 <analogRead>

    _voltageSum += _currentVoltage;
   d4482:	6923      	ldr	r3, [r4, #16]
    }
}

int AirQualitySensor::slope(void) {
    _lastVoltage = _currentVoltage;
    _currentVoltage = analogRead(_pin);
   d4484:	60a0      	str	r0, [r4, #8]

    _voltageSum += _currentVoltage;
   d4486:	4418      	add	r0, r3
    _volSumCount += 1;
   d4488:	6963      	ldr	r3, [r4, #20]

int AirQualitySensor::slope(void) {
    _lastVoltage = _currentVoltage;
    _currentVoltage = analogRead(_pin);

    _voltageSum += _currentVoltage;
   d448a:	6120      	str	r0, [r4, #16]
    _volSumCount += 1;
   d448c:	3301      	adds	r3, #1
   d448e:	6163      	str	r3, [r4, #20]

    updateStandardVoltage();
   d4490:	4620      	mov	r0, r4
   d4492:	f7ff ffd7 	bl	d4444 <_ZN16AirQualitySensor21updateStandardVoltageEv>
    if (_currentVoltage - _lastVoltage > 400 || _currentVoltage > 700) {
   d4496:	68a2      	ldr	r2, [r4, #8]
   d4498:	6861      	ldr	r1, [r4, #4]
   d449a:	1a51      	subs	r1, r2, r1
   d449c:	f5b1 7fc8 	cmp.w	r1, #400	; 0x190
   d44a0:	dc10      	bgt.n	d44c4 <_ZN16AirQualitySensor5slopeEv+0x50>
   d44a2:	f5b2 7f2f 	cmp.w	r2, #700	; 0x2bc
   d44a6:	dc0d      	bgt.n	d44c4 <_ZN16AirQualitySensor5slopeEv+0x50>
        return AirQualitySensor::FORCE_SIGNAL;
    }
    else if ((_currentVoltage - _lastVoltage > 400 && _currentVoltage < 700)
             || _currentVoltage - _standardVoltage > 150) {
   d44a8:	68e3      	ldr	r3, [r4, #12]
   d44aa:	1ad3      	subs	r3, r2, r3
   d44ac:	2b96      	cmp	r3, #150	; 0x96
   d44ae:	dc0b      	bgt.n	d44c8 <_ZN16AirQualitySensor5slopeEv+0x54>
        return AirQualitySensor::HIGH_POLLUTION;
    }
    else if ((_currentVoltage - _lastVoltage > 200 && _currentVoltage < 700)
   d44b0:	29c8      	cmp	r1, #200	; 0xc8
   d44b2:	dd02      	ble.n	d44ba <_ZN16AirQualitySensor5slopeEv+0x46>
   d44b4:	f5b2 7f2f 	cmp.w	r2, #700	; 0x2bc
   d44b8:	d108      	bne.n	d44cc <_ZN16AirQualitySensor5slopeEv+0x58>
             || _currentVoltage - _standardVoltage > 50) {
        return AirQualitySensor::LOW_POLLUTION;
    }
    else {
        return AirQualitySensor::FRESH_AIR;
   d44ba:	2b32      	cmp	r3, #50	; 0x32
   d44bc:	bfcc      	ite	gt
   d44be:	2002      	movgt	r0, #2
   d44c0:	2003      	movle	r0, #3
   d44c2:	bd10      	pop	{r4, pc}
    _voltageSum += _currentVoltage;
    _volSumCount += 1;

    updateStandardVoltage();
    if (_currentVoltage - _lastVoltage > 400 || _currentVoltage > 700) {
        return AirQualitySensor::FORCE_SIGNAL;
   d44c4:	2000      	movs	r0, #0
   d44c6:	bd10      	pop	{r4, pc}
    }
    else if ((_currentVoltage - _lastVoltage > 400 && _currentVoltage < 700)
             || _currentVoltage - _standardVoltage > 150) {
        return AirQualitySensor::HIGH_POLLUTION;
   d44c8:	2001      	movs	r0, #1
   d44ca:	bd10      	pop	{r4, pc}
    }
    else if ((_currentVoltage - _lastVoltage > 200 && _currentVoltage < 700)
             || _currentVoltage - _standardVoltage > 50) {
        return AirQualitySensor::LOW_POLLUTION;
   d44cc:	2002      	movs	r0, #2
    else {
        return AirQualitySensor::FRESH_AIR;
    }

    return -1;
}
   d44ce:	bd10      	pop	{r4, pc}

000d44d0 <_GLOBAL__sub_I__ZN16AirQualitySensor12FORCE_SIGNALE>:
   d44d0:	f000 bcb0 	b.w	d4e34 <HAL_Pin_Map>

000d44d4 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d44d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d44d6:	4602      	mov	r2, r0
   d44d8:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d44da:	7913      	ldrb	r3, [r2, #4]
   d44dc:	6895      	ldr	r5, [r2, #8]
   d44de:	b133      	cbz	r3, d44ee <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d44e0:	b93d      	cbnz	r5, d44f2 <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d44e2:	490c      	ldr	r1, [pc, #48]	; (d4514 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d44e4:	b004      	add	sp, #16
   d44e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d44ea:	f001 b9e9 	b.w	d58c0 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d44ee:	4b0a      	ldr	r3, [pc, #40]	; (d4518 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d44f0:	e000      	b.n	d44f4 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d44f2:	4b0a      	ldr	r3, [pc, #40]	; (d451c <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d44f4:	7b16      	ldrb	r6, [r2, #12]
   d44f6:	4c0a      	ldr	r4, [pc, #40]	; (d4520 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d44f8:	490a      	ldr	r1, [pc, #40]	; (d4524 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d44fa:	7b52      	ldrb	r2, [r2, #13]
   d44fc:	9202      	str	r2, [sp, #8]
   d44fe:	2e01      	cmp	r6, #1
   d4500:	bf08      	it	eq
   d4502:	4621      	moveq	r1, r4
   d4504:	9101      	str	r1, [sp, #4]
   d4506:	9500      	str	r5, [sp, #0]
   d4508:	4a07      	ldr	r2, [pc, #28]	; (d4528 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d450a:	2100      	movs	r1, #0
   d450c:	f001 fa15 	bl	d593a <_ZN5Print11printf_implEbPKcz>
  }
   d4510:	b004      	add	sp, #16
   d4512:	bd70      	pop	{r4, r5, r6, pc}
   d4514:	000d87e1 	.word	0x000d87e1
   d4518:	000d8960 	.word	0x000d8960
   d451c:	000d87d0 	.word	0x000d87d0
   d4520:	000d87d9 	.word	0x000d87d9
   d4524:	000d87dd 	.word	0x000d87dd
   d4528:	000d87f7 	.word	0x000d87f7

000d452c <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   d452c:	22ff      	movs	r2, #255	; 0xff
   d452e:	7402      	strb	r2, [r0, #16]
   d4530:	7442      	strb	r2, [r0, #17]
   d4532:	7482      	strb	r2, [r0, #18]
   d4534:	74c2      	strb	r2, [r0, #19]
{ }
   d4536:	4770      	bx	lr

000d4538 <_ZN15Adafruit_BME2807spixferEh>:
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d4538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
   d453c:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4540:	3301      	adds	r3, #1
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d4542:	4605      	mov	r5, r0
   d4544:	460f      	mov	r7, r1
    // hardware SPI
    if (_sck == -1)
   d4546:	d106      	bne.n	d4556 <_ZN15Adafruit_BME2807spixferEh+0x1e>
        return SPI.transfer(x);
   d4548:	f001 fe14 	bl	d6174 <_ZN8particle7globals11instanceSpiEv>
   d454c:	4639      	mov	r1, r7
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d454e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
    // hardware SPI
    if (_sck == -1)
        return SPI.transfer(x);
   d4552:	f001 baf7 	b.w	d5b44 <_ZN8SPIClass8transferEh>
   d4556:	2607      	movs	r6, #7
   d4558:	2400      	movs	r4, #0
    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
   d455a:	f04f 0801 	mov.w	r8, #1

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
        digitalWrite(_sck, LOW);
   d455e:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d4562:	2100      	movs	r1, #0
   d4564:	b280      	uxth	r0, r0
   d4566:	f001 fd80 	bl	d606a <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   d456a:	f995 0011 	ldrsb.w	r0, [r5, #17]
   d456e:	fa08 f106 	lsl.w	r1, r8, r6
   d4572:	4039      	ands	r1, r7
   d4574:	b280      	uxth	r0, r0
   d4576:	f001 fd78 	bl	d606a <digitalWrite>
        digitalWrite(_sck, HIGH);
   d457a:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d457e:	2101      	movs	r1, #1
   d4580:	b280      	uxth	r0, r0
   d4582:	f001 fd72 	bl	d606a <digitalWrite>
        if (digitalRead(_miso))
   d4586:	f995 0012 	ldrsb.w	r0, [r5, #18]
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
   d458a:	0064      	lsls	r4, r4, #1
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
   d458c:	b280      	uxth	r0, r0
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
   d458e:	b2e4      	uxtb	r4, r4
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
   d4590:	f001 fd84 	bl	d609c <digitalRead>
   d4594:	b108      	cbz	r0, d459a <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   d4596:	f044 0401 	orr.w	r4, r4, #1
    if (_sck == -1)
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
   d459a:	f116 36ff 	adds.w	r6, r6, #4294967295	; 0xffffffff
   d459e:	d2de      	bcs.n	d455e <_ZN15Adafruit_BME2807spixferEh+0x26>
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d45a0:	4620      	mov	r0, r4
   d45a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d45a8 <_ZN15Adafruit_BME2806write8Ehh>:
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   d45a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   d45aa:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d45ae:	3301      	adds	r3, #1
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   d45b0:	4604      	mov	r4, r0
   d45b2:	460e      	mov	r6, r1
   d45b4:	4615      	mov	r5, r2
    if (_cs == -1) {
   d45b6:	d111      	bne.n	d45dc <_ZN15Adafruit_BME2806write8Ehh+0x34>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d45b8:	7901      	ldrb	r1, [r0, #4]
   d45ba:	6800      	ldr	r0, [r0, #0]
   d45bc:	f000 ff6f 	bl	d549e <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d45c0:	6820      	ldr	r0, [r4, #0]
   d45c2:	6803      	ldr	r3, [r0, #0]
   d45c4:	4631      	mov	r1, r6
   d45c6:	689b      	ldr	r3, [r3, #8]
   d45c8:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   d45ca:	6820      	ldr	r0, [r4, #0]
   d45cc:	6803      	ldr	r3, [r0, #0]
   d45ce:	4629      	mov	r1, r5
   d45d0:	689b      	ldr	r3, [r3, #8]
   d45d2:	4798      	blx	r3
        _wire -> endTransmission();
   d45d4:	6820      	ldr	r0, [r4, #0]
   d45d6:	f000 ff6a 	bl	d54ae <_ZN7TwoWire15endTransmissionEv>
   d45da:	e031      	b.n	d4640 <_ZN15Adafruit_BME2806write8Ehh+0x98>
    } else {
        if (_sck == -1)
   d45dc:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d45e0:	3301      	adds	r3, #1
   d45e2:	d110      	bne.n	d4606 <_ZN15Adafruit_BME2806write8Ehh+0x5e>
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d45e4:	f001 fdc6 	bl	d6174 <_ZN8particle7globals11instanceSpiEv>
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
   d45e8:	4b16      	ldr	r3, [pc, #88]	; (d4644 <_ZN15Adafruit_BME2806write8Ehh+0x9c>)
   d45ea:	4a17      	ldr	r2, [pc, #92]	; (d4648 <_ZN15Adafruit_BME2806write8Ehh+0xa0>)
   d45ec:	9300      	str	r3, [sp, #0]
   d45ee:	9202      	str	r2, [sp, #8]
   d45f0:	2300      	movs	r3, #0
   d45f2:	2201      	movs	r2, #1
   d45f4:	4669      	mov	r1, sp
   d45f6:	f88d 3004 	strb.w	r3, [sp, #4]
   d45fa:	f88d 200c 	strb.w	r2, [sp, #12]
   d45fe:	f88d 300d 	strb.w	r3, [sp, #13]
   d4602:	f001 fa2f 	bl	d5a64 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
        digitalWrite(_cs, LOW);
   d4606:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d460a:	2100      	movs	r1, #0
   d460c:	b280      	uxth	r0, r0
   d460e:	f001 fd2c 	bl	d606a <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   d4612:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   d4616:	4620      	mov	r0, r4
   d4618:	f7ff ff8e 	bl	d4538 <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   d461c:	4629      	mov	r1, r5
   d461e:	4620      	mov	r0, r4
   d4620:	f7ff ff8a 	bl	d4538 <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   d4624:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4628:	2101      	movs	r1, #1
   d462a:	b280      	uxth	r0, r0
   d462c:	f001 fd1d 	bl	d606a <digitalWrite>
    if (_sck == -1)
   d4630:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4634:	3301      	adds	r3, #1
   d4636:	d103      	bne.n	d4640 <_ZN15Adafruit_BME2806write8Ehh+0x98>
        SPI.endTransaction(); // release the SPI bus
   d4638:	f001 fd9c 	bl	d6174 <_ZN8particle7globals11instanceSpiEv>
   d463c:	f001 f9f9 	bl	d5a32 <_ZN8SPIClass14endTransactionEv>
    }
}
   d4640:	b004      	add	sp, #16
   d4642:	bd70      	pop	{r4, r5, r6, pc}
   d4644:	000d87cc 	.word	0x000d87cc
   d4648:	0007a120 	.word	0x0007a120

000d464c <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d464c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.mode     = mode;
   d464e:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d4652:	f89d 6018 	ldrb.w	r6, [sp, #24]
   d4656:	f89d e01c 	ldrb.w	lr, [sp, #28]
   d465a:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _measReg.mode     = mode;
   d465e:	f361 1587 	bfi	r5, r1, #6, #2
    _measReg.osrs_t   = tempSampling;
   d4662:	f362 0502 	bfi	r5, r2, #0, #3
    _measReg.osrs_p   = pressSampling;
   d4666:	f363 05c5 	bfi	r5, r3, #3, #3
        
    
    _humReg.osrs_h    = humSampling;
   d466a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
    _measReg.mode     = mode;
    _measReg.osrs_t   = tempSampling;
    _measReg.osrs_p   = pressSampling;
   d466e:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
        
    
    _humReg.osrs_h    = humSampling;
   d4672:	f366 1347 	bfi	r3, r6, #5, #3
   d4676:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.filter = filter;
   d467a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   d467e:	f36e 03c5 	bfi	r3, lr, #3, #3
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d4682:	4604      	mov	r4, r0
    _measReg.osrs_p   = pressSampling;
        
    
    _humReg.osrs_h    = humSampling;
    _configReg.filter = filter;
    _configReg.t_sb   = duration;
   d4684:	f367 0302 	bfi	r3, r7, #0, #3
   d4688:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    
    // you must make sure to also set REGISTER_CONTROL after setting the
    // CONTROLHUMID register, otherwise the values won't be applied (see DS 5.4.3)
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   d468c:	f006 0207 	and.w	r2, r6, #7
   d4690:	21f2      	movs	r1, #242	; 0xf2
   d4692:	f7ff ff89 	bl	d45a8 <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   d4696:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   d469a:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d469e:	f002 0107 	and.w	r1, r2, #7
   d46a2:	009b      	lsls	r3, r3, #2
   d46a4:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   d46a8:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   d46ac:	4620      	mov	r0, r4
   d46ae:	21f5      	movs	r1, #245	; 0xf5
   d46b0:	f7ff ff7a 	bl	d45a8 <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   d46b4:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d46b8:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d46bc:	f002 0107 	and.w	r1, r2, #7
   d46c0:	009b      	lsls	r3, r3, #2
   d46c2:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   d46c6:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   d46ca:	4620      	mov	r0, r4
   d46cc:	21f4      	movs	r1, #244	; 0xf4
}
   d46ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    
    // you must make sure to also set REGISTER_CONTROL after setting the
    // CONTROLHUMID register, otherwise the values won't be applied (see DS 5.4.3)
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
    write8(BME280_REGISTER_CONFIG, _configReg.get());
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d46d2:	f7ff bf69 	b.w	d45a8 <_ZN15Adafruit_BME2806write8Ehh>
	...

000d46d8 <_ZN15Adafruit_BME2805read8Eh>:
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   d46d8:	b530      	push	{r4, r5, lr}
    uint8_t value;
    
    if (_cs == -1) {
   d46da:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d46de:	3301      	adds	r3, #1
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   d46e0:	b085      	sub	sp, #20
   d46e2:	4604      	mov	r4, r0
   d46e4:	460d      	mov	r5, r1
    uint8_t value;
    
    if (_cs == -1) {
   d46e6:	d116      	bne.n	d4716 <_ZN15Adafruit_BME2805read8Eh+0x3e>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d46e8:	7901      	ldrb	r1, [r0, #4]
   d46ea:	6800      	ldr	r0, [r0, #0]
   d46ec:	f000 fed7 	bl	d549e <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d46f0:	6820      	ldr	r0, [r4, #0]
   d46f2:	6803      	ldr	r3, [r0, #0]
   d46f4:	4629      	mov	r1, r5
   d46f6:	689b      	ldr	r3, [r3, #8]
   d46f8:	4798      	blx	r3
        _wire -> endTransmission();
   d46fa:	6820      	ldr	r0, [r4, #0]
   d46fc:	f000 fed7 	bl	d54ae <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   d4700:	2201      	movs	r2, #1
   d4702:	7921      	ldrb	r1, [r4, #4]
   d4704:	6820      	ldr	r0, [r4, #0]
   d4706:	f000 fec7 	bl	d5498 <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   d470a:	6820      	ldr	r0, [r4, #0]
   d470c:	6803      	ldr	r3, [r0, #0]
   d470e:	695b      	ldr	r3, [r3, #20]
   d4710:	4798      	blx	r3
   d4712:	b2c5      	uxtb	r5, r0
   d4714:	e032      	b.n	d477c <_ZN15Adafruit_BME2805read8Eh+0xa4>
    } else {
        if (_sck == -1)
   d4716:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d471a:	3301      	adds	r3, #1
   d471c:	d110      	bne.n	d4740 <_ZN15Adafruit_BME2805read8Eh+0x68>
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d471e:	f001 fd29 	bl	d6174 <_ZN8particle7globals11instanceSpiEv>
   d4722:	4b18      	ldr	r3, [pc, #96]	; (d4784 <_ZN15Adafruit_BME2805read8Eh+0xac>)
   d4724:	4a18      	ldr	r2, [pc, #96]	; (d4788 <_ZN15Adafruit_BME2805read8Eh+0xb0>)
   d4726:	9300      	str	r3, [sp, #0]
   d4728:	9202      	str	r2, [sp, #8]
   d472a:	2300      	movs	r3, #0
   d472c:	2201      	movs	r2, #1
   d472e:	4669      	mov	r1, sp
   d4730:	f88d 3004 	strb.w	r3, [sp, #4]
   d4734:	f88d 200c 	strb.w	r2, [sp, #12]
   d4738:	f88d 300d 	strb.w	r3, [sp, #13]
   d473c:	f001 f992 	bl	d5a64 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
        digitalWrite(_cs, LOW);
   d4740:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4744:	2100      	movs	r1, #0
   d4746:	b280      	uxth	r0, r0
   d4748:	f001 fc8f 	bl	d606a <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d474c:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d4750:	4620      	mov	r0, r4
   d4752:	f7ff fef1 	bl	d4538 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d4756:	2100      	movs	r1, #0
   d4758:	4620      	mov	r0, r4
   d475a:	f7ff feed 	bl	d4538 <_ZN15Adafruit_BME2807spixferEh>
   d475e:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   d4760:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4764:	2101      	movs	r1, #1
   d4766:	b280      	uxth	r0, r0
   d4768:	f001 fc7f 	bl	d606a <digitalWrite>
        if (_sck == -1)
   d476c:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4770:	3301      	adds	r3, #1
   d4772:	d103      	bne.n	d477c <_ZN15Adafruit_BME2805read8Eh+0xa4>
            SPI.endTransaction(); // release the SPI bus
   d4774:	f001 fcfe 	bl	d6174 <_ZN8particle7globals11instanceSpiEv>
   d4778:	f001 f95b 	bl	d5a32 <_ZN8SPIClass14endTransactionEv>
    }
    return value;
}
   d477c:	4628      	mov	r0, r5
   d477e:	b005      	add	sp, #20
   d4780:	bd30      	pop	{r4, r5, pc}
   d4782:	bf00      	nop
   d4784:	000d87cc 	.word	0x000d87cc
   d4788:	0007a120 	.word	0x0007a120

000d478c <_ZN15Adafruit_BME2806read16Eh>:
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
   d478c:	b530      	push	{r4, r5, lr}
    uint16_t value;

    if (_cs == -1) {
   d478e:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d4792:	3301      	adds	r3, #1
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
   d4794:	b085      	sub	sp, #20
   d4796:	4604      	mov	r4, r0
   d4798:	460d      	mov	r5, r1
    uint16_t value;

    if (_cs == -1) {
   d479a:	d11d      	bne.n	d47d8 <_ZN15Adafruit_BME2806read16Eh+0x4c>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d479c:	7901      	ldrb	r1, [r0, #4]
   d479e:	6800      	ldr	r0, [r0, #0]
   d47a0:	f000 fe7d 	bl	d549e <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d47a4:	6820      	ldr	r0, [r4, #0]
   d47a6:	6803      	ldr	r3, [r0, #0]
   d47a8:	4629      	mov	r1, r5
   d47aa:	689b      	ldr	r3, [r3, #8]
   d47ac:	4798      	blx	r3
        _wire -> endTransmission();
   d47ae:	6820      	ldr	r0, [r4, #0]
   d47b0:	f000 fe7d 	bl	d54ae <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   d47b4:	2202      	movs	r2, #2
   d47b6:	7921      	ldrb	r1, [r4, #4]
   d47b8:	6820      	ldr	r0, [r4, #0]
   d47ba:	f000 fe6d 	bl	d5498 <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   d47be:	6820      	ldr	r0, [r4, #0]
   d47c0:	6803      	ldr	r3, [r0, #0]
   d47c2:	695b      	ldr	r3, [r3, #20]
   d47c4:	4798      	blx	r3
   d47c6:	4605      	mov	r5, r0
   d47c8:	6820      	ldr	r0, [r4, #0]
   d47ca:	6803      	ldr	r3, [r0, #0]
   d47cc:	695b      	ldr	r3, [r3, #20]
   d47ce:	4798      	blx	r3
   d47d0:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d47d4:	b285      	uxth	r5, r0
   d47d6:	e039      	b.n	d484c <_ZN15Adafruit_BME2806read16Eh+0xc0>
    } else {
        if (_sck == -1)
   d47d8:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d47dc:	3301      	adds	r3, #1
   d47de:	d110      	bne.n	d4802 <_ZN15Adafruit_BME2806read16Eh+0x76>
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d47e0:	f001 fcc8 	bl	d6174 <_ZN8particle7globals11instanceSpiEv>
   d47e4:	4b1b      	ldr	r3, [pc, #108]	; (d4854 <_ZN15Adafruit_BME2806read16Eh+0xc8>)
   d47e6:	4a1c      	ldr	r2, [pc, #112]	; (d4858 <_ZN15Adafruit_BME2806read16Eh+0xcc>)
   d47e8:	9300      	str	r3, [sp, #0]
   d47ea:	9202      	str	r2, [sp, #8]
   d47ec:	2300      	movs	r3, #0
   d47ee:	2201      	movs	r2, #1
   d47f0:	4669      	mov	r1, sp
   d47f2:	f88d 3004 	strb.w	r3, [sp, #4]
   d47f6:	f88d 200c 	strb.w	r2, [sp, #12]
   d47fa:	f88d 300d 	strb.w	r3, [sp, #13]
   d47fe:	f001 f931 	bl	d5a64 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
        digitalWrite(_cs, LOW);
   d4802:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4806:	2100      	movs	r1, #0
   d4808:	b280      	uxth	r0, r0
   d480a:	f001 fc2e 	bl	d606a <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d480e:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d4812:	4620      	mov	r0, r4
   d4814:	f7ff fe90 	bl	d4538 <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   d4818:	2100      	movs	r1, #0
   d481a:	4620      	mov	r0, r4
   d481c:	f7ff fe8c 	bl	d4538 <_ZN15Adafruit_BME2807spixferEh>
   d4820:	2100      	movs	r1, #0
   d4822:	4605      	mov	r5, r0
   d4824:	4620      	mov	r0, r4
   d4826:	f7ff fe87 	bl	d4538 <_ZN15Adafruit_BME2807spixferEh>
   d482a:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d482e:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   d4830:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4834:	2101      	movs	r1, #1
   d4836:	b280      	uxth	r0, r0
   d4838:	f001 fc17 	bl	d606a <digitalWrite>
        if (_sck == -1)
   d483c:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4840:	3301      	adds	r3, #1
   d4842:	d103      	bne.n	d484c <_ZN15Adafruit_BME2806read16Eh+0xc0>
            SPI.endTransaction(); // release the SPI bus
   d4844:	f001 fc96 	bl	d6174 <_ZN8particle7globals11instanceSpiEv>
   d4848:	f001 f8f3 	bl	d5a32 <_ZN8SPIClass14endTransactionEv>
    }

    return value;
}
   d484c:	4628      	mov	r0, r5
   d484e:	b005      	add	sp, #20
   d4850:	bd30      	pop	{r4, r5, pc}
   d4852:	bf00      	nop
   d4854:	000d87cc 	.word	0x000d87cc
   d4858:	0007a120 	.word	0x0007a120

000d485c <_ZN15Adafruit_BME2809read16_LEEh>:
    @brief  Reads a signed 16 bit little endian value over I2C or SPI
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   d485c:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   d485e:	f7ff ff95 	bl	d478c <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   d4862:	ba40      	rev16	r0, r0
}
   d4864:	b280      	uxth	r0, r0
   d4866:	bd08      	pop	{r3, pc}

000d4868 <_ZN15Adafruit_BME2806read24Eh>:
    @param reg the register address to read from
    @returns the 24 bit data value read from the device
*/
/**************************************************************************/
uint32_t Adafruit_BME280::read24(byte reg)
{
   d4868:	b530      	push	{r4, r5, lr}
    uint32_t value;

    if (_cs == -1) {
   d486a:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d486e:	3301      	adds	r3, #1
    @param reg the register address to read from
    @returns the 24 bit data value read from the device
*/
/**************************************************************************/
uint32_t Adafruit_BME280::read24(byte reg)
{
   d4870:	b085      	sub	sp, #20
   d4872:	4604      	mov	r4, r0
   d4874:	460d      	mov	r5, r1
    uint32_t value;

    if (_cs == -1) {
   d4876:	d121      	bne.n	d48bc <_ZN15Adafruit_BME2806read24Eh+0x54>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4878:	7901      	ldrb	r1, [r0, #4]
   d487a:	6800      	ldr	r0, [r0, #0]
   d487c:	f000 fe0f 	bl	d549e <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4880:	6820      	ldr	r0, [r4, #0]
   d4882:	6803      	ldr	r3, [r0, #0]
   d4884:	4629      	mov	r1, r5
   d4886:	689b      	ldr	r3, [r3, #8]
   d4888:	4798      	blx	r3
        _wire -> endTransmission();
   d488a:	6820      	ldr	r0, [r4, #0]
   d488c:	f000 fe0f 	bl	d54ae <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)3);
   d4890:	2203      	movs	r2, #3
   d4892:	7921      	ldrb	r1, [r4, #4]
   d4894:	6820      	ldr	r0, [r4, #0]
   d4896:	f000 fdff 	bl	d5498 <_ZN7TwoWire11requestFromEhj>

        value = _wire -> read();
   d489a:	6820      	ldr	r0, [r4, #0]
   d489c:	6803      	ldr	r3, [r0, #0]
   d489e:	695b      	ldr	r3, [r3, #20]
   d48a0:	4798      	blx	r3
        value <<= 8;
   d48a2:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d48a4:	6820      	ldr	r0, [r4, #0]
   d48a6:	6803      	ldr	r3, [r0, #0]
   d48a8:	695b      	ldr	r3, [r3, #20]
   d48aa:	4798      	blx	r3
   d48ac:	4328      	orrs	r0, r5
        value <<= 8;
   d48ae:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d48b0:	6820      	ldr	r0, [r4, #0]
   d48b2:	6803      	ldr	r3, [r0, #0]
   d48b4:	695b      	ldr	r3, [r3, #20]
   d48b6:	4798      	blx	r3
   d48b8:	4305      	orrs	r5, r0
   d48ba:	e03d      	b.n	d4938 <_ZN15Adafruit_BME2806read24Eh+0xd0>
    } else {
        if (_sck == -1)
   d48bc:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d48c0:	3301      	adds	r3, #1
   d48c2:	d110      	bne.n	d48e6 <_ZN15Adafruit_BME2806read24Eh+0x7e>
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d48c4:	f001 fc56 	bl	d6174 <_ZN8particle7globals11instanceSpiEv>
   d48c8:	4b1d      	ldr	r3, [pc, #116]	; (d4940 <_ZN15Adafruit_BME2806read24Eh+0xd8>)
   d48ca:	4a1e      	ldr	r2, [pc, #120]	; (d4944 <_ZN15Adafruit_BME2806read24Eh+0xdc>)
   d48cc:	9300      	str	r3, [sp, #0]
   d48ce:	9202      	str	r2, [sp, #8]
   d48d0:	2300      	movs	r3, #0
   d48d2:	2201      	movs	r2, #1
   d48d4:	4669      	mov	r1, sp
   d48d6:	f88d 3004 	strb.w	r3, [sp, #4]
   d48da:	f88d 200c 	strb.w	r2, [sp, #12]
   d48de:	f88d 300d 	strb.w	r3, [sp, #13]
   d48e2:	f001 f8bf 	bl	d5a64 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
        digitalWrite(_cs, LOW);
   d48e6:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d48ea:	2100      	movs	r1, #0
   d48ec:	b280      	uxth	r0, r0
   d48ee:	f001 fbbc 	bl	d606a <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d48f2:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d48f6:	4620      	mov	r0, r4
   d48f8:	f7ff fe1e 	bl	d4538 <_ZN15Adafruit_BME2807spixferEh>

        value = spixfer(0);
   d48fc:	2100      	movs	r1, #0
   d48fe:	4620      	mov	r0, r4
   d4900:	f7ff fe1a 	bl	d4538 <_ZN15Adafruit_BME2807spixferEh>
        value <<= 8;
        value |= spixfer(0);
   d4904:	2100      	movs	r1, #0
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
        digitalWrite(_cs, LOW);
        spixfer(reg | 0x80); // read, bit 7 high

        value = spixfer(0);
        value <<= 8;
   d4906:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d4908:	4620      	mov	r0, r4
   d490a:	f7ff fe15 	bl	d4538 <_ZN15Adafruit_BME2807spixferEh>
   d490e:	4328      	orrs	r0, r5
        value <<= 8;
   d4910:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d4912:	2100      	movs	r1, #0
   d4914:	4620      	mov	r0, r4
   d4916:	f7ff fe0f 	bl	d4538 <_ZN15Adafruit_BME2807spixferEh>
   d491a:	4305      	orrs	r5, r0

        digitalWrite(_cs, HIGH);
   d491c:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4920:	2101      	movs	r1, #1
   d4922:	b280      	uxth	r0, r0
   d4924:	f001 fba1 	bl	d606a <digitalWrite>
        if (_sck == -1)
   d4928:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d492c:	3301      	adds	r3, #1
   d492e:	d103      	bne.n	d4938 <_ZN15Adafruit_BME2806read24Eh+0xd0>
            SPI.endTransaction(); // release the SPI bus
   d4930:	f001 fc20 	bl	d6174 <_ZN8particle7globals11instanceSpiEv>
   d4934:	f001 f87d 	bl	d5a32 <_ZN8SPIClass14endTransactionEv>
    }

    return value;
}
   d4938:	4628      	mov	r0, r5
   d493a:	b005      	add	sp, #20
   d493c:	bd30      	pop	{r4, r5, pc}
   d493e:	bf00      	nop
   d4940:	000d87cc 	.word	0x000d87cc
   d4944:	0007a120 	.word	0x0007a120

000d4948 <_ZN15Adafruit_BME28016readCoefficientsEv>:
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
   d4948:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d494a:	2188      	movs	r1, #136	; 0x88
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
   d494c:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d494e:	f7ff ff85 	bl	d485c <_ZN15Adafruit_BME2809read16_LEEh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4952:	218a      	movs	r1, #138	; 0x8a
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d4954:	82a0      	strh	r0, [r4, #20]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4956:	4620      	mov	r0, r4
   d4958:	f7ff ff80 	bl	d485c <_ZN15Adafruit_BME2809read16_LEEh>
   d495c:	218c      	movs	r1, #140	; 0x8c
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   d495e:	82e0      	strh	r0, [r4, #22]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4960:	4620      	mov	r0, r4
   d4962:	f7ff ff7b 	bl	d485c <_ZN15Adafruit_BME2809read16_LEEh>
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d4966:	218e      	movs	r1, #142	; 0x8e
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   d4968:	8320      	strh	r0, [r4, #24]

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d496a:	4620      	mov	r0, r4
   d496c:	f7ff ff76 	bl	d485c <_ZN15Adafruit_BME2809read16_LEEh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4970:	2190      	movs	r1, #144	; 0x90
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d4972:	8360      	strh	r0, [r4, #26]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4974:	4620      	mov	r0, r4
   d4976:	f7ff ff71 	bl	d485c <_ZN15Adafruit_BME2809read16_LEEh>
   d497a:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   d497c:	83a0      	strh	r0, [r4, #28]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d497e:	4620      	mov	r0, r4
   d4980:	f7ff ff6c 	bl	d485c <_ZN15Adafruit_BME2809read16_LEEh>
   d4984:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   d4986:	83e0      	strh	r0, [r4, #30]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4988:	4620      	mov	r0, r4
   d498a:	f7ff ff67 	bl	d485c <_ZN15Adafruit_BME2809read16_LEEh>
   d498e:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   d4990:	8420      	strh	r0, [r4, #32]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4992:	4620      	mov	r0, r4
   d4994:	f7ff ff62 	bl	d485c <_ZN15Adafruit_BME2809read16_LEEh>
   d4998:	2198      	movs	r1, #152	; 0x98

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   d499a:	8460      	strh	r0, [r4, #34]	; 0x22
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d499c:	4620      	mov	r0, r4
   d499e:	f7ff ff5d 	bl	d485c <_ZN15Adafruit_BME2809read16_LEEh>
   d49a2:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   d49a4:	84a0      	strh	r0, [r4, #36]	; 0x24
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d49a6:	4620      	mov	r0, r4
   d49a8:	f7ff ff58 	bl	d485c <_ZN15Adafruit_BME2809read16_LEEh>
   d49ac:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   d49ae:	84e0      	strh	r0, [r4, #38]	; 0x26
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d49b0:	4620      	mov	r0, r4
   d49b2:	f7ff ff53 	bl	d485c <_ZN15Adafruit_BME2809read16_LEEh>
   d49b6:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   d49b8:	8520      	strh	r0, [r4, #40]	; 0x28
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d49ba:	4620      	mov	r0, r4
   d49bc:	f7ff ff4e 	bl	d485c <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d49c0:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   d49c2:	8560      	strh	r0, [r4, #42]	; 0x2a

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d49c4:	4620      	mov	r0, r4
   d49c6:	f7ff fe87 	bl	d46d8 <_ZN15Adafruit_BME2805read8Eh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d49ca:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d49cc:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d49d0:	4620      	mov	r0, r4
   d49d2:	f7ff ff43 	bl	d485c <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d49d6:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   d49d8:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d49da:	4620      	mov	r0, r4
   d49dc:	f7ff fe7c 	bl	d46d8 <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d49e0:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d49e2:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d49e6:	4620      	mov	r0, r4
   d49e8:	f7ff fe76 	bl	d46d8 <_ZN15Adafruit_BME2805read8Eh>
   d49ec:	21e5      	movs	r1, #229	; 0xe5
   d49ee:	4605      	mov	r5, r0
   d49f0:	4620      	mov	r0, r4
   d49f2:	f7ff fe71 	bl	d46d8 <_ZN15Adafruit_BME2805read8Eh>
   d49f6:	f000 000f 	and.w	r0, r0, #15
   d49fa:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
   d49fe:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   d4a00:	21e6      	movs	r1, #230	; 0xe6
   d4a02:	4620      	mov	r0, r4
   d4a04:	f7ff fe68 	bl	d46d8 <_ZN15Adafruit_BME2805read8Eh>
   d4a08:	21e5      	movs	r1, #229	; 0xe5
   d4a0a:	4605      	mov	r5, r0
   d4a0c:	4620      	mov	r0, r4
   d4a0e:	f7ff fe63 	bl	d46d8 <_ZN15Adafruit_BME2805read8Eh>
   d4a12:	1100      	asrs	r0, r0, #4
   d4a14:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
   d4a18:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   d4a1a:	21e7      	movs	r1, #231	; 0xe7
   d4a1c:	4620      	mov	r0, r4
   d4a1e:	f7ff fe5b 	bl	d46d8 <_ZN15Adafruit_BME2805read8Eh>
   d4a22:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
   d4a26:	bd38      	pop	{r3, r4, r5, pc}

000d4a28 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
    @brief return true if chip is busy reading cal data
    @returns true if reading calibration, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::isReadingCalibration(void)
{
   d4a28:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   d4a2a:	21f3      	movs	r1, #243	; 0xf3
   d4a2c:	f7ff fe54 	bl	d46d8 <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
   d4a30:	f000 0001 	and.w	r0, r0, #1
   d4a34:	bd08      	pop	{r3, pc}

000d4a36 <_ZN15Adafruit_BME2804initEv>:
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::init()
{
   d4a36:	b530      	push	{r4, r5, lr}
   d4a38:	4604      	mov	r4, r0
    // init I2C or SPI sensor interface
    if (_cs == -1) {
   d4a3a:	f990 0010 	ldrsb.w	r0, [r0, #16]
   d4a3e:	1c42      	adds	r2, r0, #1
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::init()
{
   d4a40:	b085      	sub	sp, #20
    // init I2C or SPI sensor interface
    if (_cs == -1) {
   d4a42:	d103      	bne.n	d4a4c <_ZN15Adafruit_BME2804initEv+0x16>
        // I2C
        _wire -> begin();
   d4a44:	6820      	ldr	r0, [r4, #0]
   d4a46:	f000 fcf3 	bl	d5430 <_ZN7TwoWire5beginEv>
   d4a4a:	e022      	b.n	d4a92 <_ZN15Adafruit_BME2804initEv+0x5c>
    } else {
        digitalWrite(_cs, HIGH);
   d4a4c:	2101      	movs	r1, #1
   d4a4e:	b280      	uxth	r0, r0
   d4a50:	f001 fb0b 	bl	d606a <digitalWrite>
        pinMode(_cs, OUTPUT);
   d4a54:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4a58:	2101      	movs	r1, #1
   d4a5a:	b280      	uxth	r0, r0
   d4a5c:	f001 faf4 	bl	d6048 <pinMode>
        if (_sck == -1) {
   d4a60:	f994 0013 	ldrsb.w	r0, [r4, #19]
   d4a64:	1c43      	adds	r3, r0, #1
   d4a66:	d104      	bne.n	d4a72 <_ZN15Adafruit_BME2804initEv+0x3c>
            // hardware SPI
            SPI.begin();
   d4a68:	f001 fb84 	bl	d6174 <_ZN8particle7globals11instanceSpiEv>
   d4a6c:	f000 ffd0 	bl	d5a10 <_ZN8SPIClass5beginEv>
   d4a70:	e00f      	b.n	d4a92 <_ZN15Adafruit_BME2804initEv+0x5c>
        } else {
            // software SPI
            pinMode(_sck, OUTPUT);
   d4a72:	2101      	movs	r1, #1
   d4a74:	b280      	uxth	r0, r0
   d4a76:	f001 fae7 	bl	d6048 <pinMode>
            pinMode(_mosi, OUTPUT);
   d4a7a:	f994 0011 	ldrsb.w	r0, [r4, #17]
   d4a7e:	2101      	movs	r1, #1
   d4a80:	b280      	uxth	r0, r0
   d4a82:	f001 fae1 	bl	d6048 <pinMode>
            pinMode(_miso, INPUT);
   d4a86:	f994 0012 	ldrsb.w	r0, [r4, #18]
   d4a8a:	2100      	movs	r1, #0
   d4a8c:	b280      	uxth	r0, r0
   d4a8e:	f001 fadb 	bl	d6048 <pinMode>
        }
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d4a92:	21d0      	movs	r1, #208	; 0xd0
   d4a94:	4620      	mov	r0, r4
   d4a96:	f7ff fe1f 	bl	d46d8 <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   d4a9a:	2860      	cmp	r0, #96	; 0x60
            pinMode(_miso, INPUT);
        }
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d4a9c:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   d4a9e:	d120      	bne.n	d4ae2 <_ZN15Adafruit_BME2804initEv+0xac>
        return false;

    // reset the device using soft-reset
    // this makes sure the IIR is off, etc.
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   d4aa0:	4620      	mov	r0, r4
   d4aa2:	22b6      	movs	r2, #182	; 0xb6
   d4aa4:	21e0      	movs	r1, #224	; 0xe0
   d4aa6:	f7ff fd7f 	bl	d45a8 <_ZN15Adafruit_BME2806write8Ehh>

    // wait for chip to wake up.
    delay(300);
   d4aaa:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d4aae:	f000 fbcd 	bl	d524c <delay>

    // if chip is still reading calibration, delay
    while (isReadingCalibration())
   d4ab2:	4620      	mov	r0, r4
   d4ab4:	f7ff ffb8 	bl	d4a28 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   d4ab8:	4605      	mov	r5, r0
   d4aba:	b108      	cbz	r0, d4ac0 <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   d4abc:	2064      	movs	r0, #100	; 0x64
   d4abe:	e7f6      	b.n	d4aae <_ZN15Adafruit_BME2804initEv+0x78>

    readCoefficients(); // read trimming parameters, see DS 4.2.2
   d4ac0:	4620      	mov	r0, r4
   d4ac2:	f7ff ff41 	bl	d4948 <_ZN15Adafruit_BME28016readCoefficientsEv>

    setSampling(); // use defaults
   d4ac6:	2305      	movs	r3, #5
   d4ac8:	9300      	str	r3, [sp, #0]
   d4aca:	461a      	mov	r2, r3
   d4acc:	2103      	movs	r1, #3
   d4ace:	4620      	mov	r0, r4
   d4ad0:	9502      	str	r5, [sp, #8]
   d4ad2:	9501      	str	r5, [sp, #4]
   d4ad4:	f7ff fdba 	bl	d464c <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>

    delay(100);
   d4ad8:	2064      	movs	r0, #100	; 0x64
   d4ada:	f000 fbb7 	bl	d524c <delay>

    return true;
   d4ade:	2001      	movs	r0, #1
   d4ae0:	e000      	b.n	d4ae4 <_ZN15Adafruit_BME2804initEv+0xae>
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
    if (_sensorID != 0x60)
        return false;
   d4ae2:	2000      	movs	r0, #0
    setSampling(); // use defaults

    delay(100);

    return true;
}
   d4ae4:	b005      	add	sp, #20
   d4ae6:	bd30      	pop	{r4, r5, pc}

000d4ae8 <_ZN15Adafruit_BME2805beginEv>:
*/
/**************************************************************************/
bool Adafruit_BME280::begin(void)
{
    bool status = false;
    _i2caddr = BME280_ADDRESS;
   d4ae8:	2377      	movs	r3, #119	; 0x77
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::begin(void)
{
   d4aea:	b510      	push	{r4, lr}
    bool status = false;
    _i2caddr = BME280_ADDRESS;
   d4aec:	7103      	strb	r3, [r0, #4]
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::begin(void)
{
   d4aee:	4604      	mov	r4, r0
    bool status = false;
    _i2caddr = BME280_ADDRESS;
	_wire = &Wire;
   d4af0:	f001 fb1a 	bl	d6128 <_Z19__fetch_global_Wirev>
   d4af4:	6020      	str	r0, [r4, #0]
	status = init();
   d4af6:	4620      	mov	r0, r4
   d4af8:	f7ff ff9d 	bl	d4a36 <_ZN15Adafruit_BME2804initEv>
 	if(!status){
   d4afc:	b930      	cbnz	r0, d4b0c <_ZN15Adafruit_BME2805beginEv+0x24>
 		_i2caddr = BME280_ADDRESS_ALTERNATE;
   d4afe:	2376      	movs	r3, #118	; 0x76
   d4b00:	7123      	strb	r3, [r4, #4]
 		status = init();
   d4b02:	4620      	mov	r0, r4
 		}
	return status;
}
   d4b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    _i2caddr = BME280_ADDRESS;
	_wire = &Wire;
	status = init();
 	if(!status){
 		_i2caddr = BME280_ADDRESS_ALTERNATE;
 		status = init();
   d4b08:	f7ff bf95 	b.w	d4a36 <_ZN15Adafruit_BME2804initEv>
 		}
	return status;
}
   d4b0c:	bd10      	pop	{r4, pc}
	...

000d4b10 <_ZN15Adafruit_BME28015readTemperatureEv>:
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   d4b10:	b510      	push	{r4, lr}
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d4b12:	21fa      	movs	r1, #250	; 0xfa
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   d4b14:	4604      	mov	r4, r0
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d4b16:	f7ff fea7 	bl	d4868 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
   d4b1a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   d4b1e:	d01e      	beq.n	d4b5e <_ZN15Adafruit_BME28015readTemperatureEv+0x4e>
        return NAN;
    adc_T >>= 4;

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d4b20:	8aa2      	ldrh	r2, [r4, #20]
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   d4b22:	ed9f 7a10 	vldr	s14, [pc, #64]	; d4b64 <_ZN15Adafruit_BME28015readTemperatureEv+0x54>

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
             
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
   d4b26:	ebc2 2320 	rsb	r3, r2, r0, asr #8
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;
   d4b2a:	0052      	lsls	r2, r2, #1
   d4b2c:	ebc2 10e0 	rsb	r0, r2, r0, asr #7
   d4b30:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
   d4b34:	435b      	muls	r3, r3
   d4b36:	4350      	muls	r0, r2
   d4b38:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
   d4b3c:	131b      	asrs	r3, r3, #12
   d4b3e:	4353      	muls	r3, r2
   d4b40:	139b      	asrs	r3, r3, #14
   d4b42:	eb03 20e0 	add.w	r0, r3, r0, asr #11
   d4b46:	60e0      	str	r0, [r4, #12]

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   d4b48:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   d4b4c:	3080      	adds	r0, #128	; 0x80
   d4b4e:	1200      	asrs	r0, r0, #8
   d4b50:	ee07 0a90 	vmov	s15, r0
   d4b54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4b58:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d4b5c:	bd10      	pop	{r4, pc}
{
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
    if (adc_T == 0x800000) // value in case temp measurement was disabled
        return NAN;
   d4b5e:	ed9f 0a02 	vldr	s0, [pc, #8]	; d4b68 <_ZN15Adafruit_BME28015readTemperatureEv+0x58>

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
}
   d4b62:	bd10      	pop	{r4, pc}
   d4b64:	42c80000 	.word	0x42c80000
   d4b68:	7fc00000 	.word	0x7fc00000

000d4b6c <_ZN15Adafruit_BME28012readPressureEv>:
/*!
    @brief  Returns the pressure from the sensor
    @returns the pressure value (in Pascal) read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readPressure(void) {
   d4b6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4b70:	4606      	mov	r6, r0
    int64_t var1, var2, p;

    readTemperature(); // must be done first to get t_fine
   d4b72:	f7ff ffcd 	bl	d4b10 <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   d4b76:	21f7      	movs	r1, #247	; 0xf7
   d4b78:	4630      	mov	r0, r6
   d4b7a:	f7ff fe75 	bl	d4868 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   d4b7e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
float Adafruit_BME280::readPressure(void) {
    int64_t var1, var2, p;

    readTemperature(); // must be done first to get t_fine

    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   d4b82:	4607      	mov	r7, r0
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   d4b84:	f000 80c1 	beq.w	d4d0a <_ZN15Adafruit_BME28012readPressureEv+0x19e>
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
   d4b88:	68f4      	ldr	r4, [r6, #12]
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   d4b8a:	f9b6 201c 	ldrsh.w	r2, [r6, #28]
    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
   d4b8e:	17e5      	asrs	r5, r4, #31
   d4b90:	f5b4 34fa 	subs.w	r4, r4, #128000	; 0x1f400
   d4b94:	f145 35ff 	adc.w	r5, r5, #4294967295	; 0xffffffff
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d4b98:	fba4 8904 	umull	r8, r9, r4, r4
   d4b9c:	fb04 f305 	mul.w	r3, r4, r5
   d4ba0:	eb09 0943 	add.w	r9, r9, r3, lsl #1
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   d4ba4:	fb02 f105 	mul.w	r1, r2, r5
   d4ba8:	17d3      	asrs	r3, r2, #31
   d4baa:	fb04 1103 	mla	r1, r4, r3, r1
   d4bae:	fba2 2304 	umull	r2, r3, r2, r4
   d4bb2:	440b      	add	r3, r1
   d4bb4:	0319      	lsls	r1, r3, #12
   d4bb6:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
   d4bba:	0310      	lsls	r0, r2, #12
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   d4bbc:	f9b6 201e 	ldrsh.w	r2, [r6, #30]
   d4bc0:	17d3      	asrs	r3, r2, #31
   d4bc2:	fb02 fe09 	mul.w	lr, r2, r9
   d4bc6:	fb08 ee03 	mla	lr, r8, r3, lr
   d4bca:	fba2 2308 	umull	r2, r3, r2, r8
   d4bce:	4473      	add	r3, lr
   d4bd0:	ea4f 2a12 	mov.w	sl, r2, lsr #8
   d4bd4:	ea4a 6a03 	orr.w	sl, sl, r3, lsl #24
   d4bd8:	eb1a 0a00 	adds.w	sl, sl, r0
   d4bdc:	8b72      	ldrh	r2, [r6, #26]
   d4bde:	ea4f 2b23 	mov.w	fp, r3, asr #8
   d4be2:	eb4b 0b01 	adc.w	fp, fp, r1
   d4be6:	f11a 0000 	adds.w	r0, sl, #0
   d4bea:	f54b 4100 	adc.w	r1, fp, #32768	; 0x8000
   d4bee:	fba0 ab02 	umull	sl, fp, r0, r2
   d4bf2:	fb02 bb01 	mla	fp, r2, r1, fp
   d4bf6:	ea4f 026b 	mov.w	r2, fp, asr #1
   d4bfa:	ea4f 73eb 	mov.w	r3, fp, asr #31

    if (var1 == 0) {
   d4bfe:	ea52 0103 	orrs.w	r1, r2, r3
   d4c02:	f000 8086 	beq.w	d4d12 <_ZN15Adafruit_BME28012readPressureEv+0x1a6>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d4c06:	f9b6 a024 	ldrsh.w	sl, [r6, #36]	; 0x24
   d4c0a:	ea4f 7bea 	mov.w	fp, sl, asr #31
   d4c0e:	fb0a f109 	mul.w	r1, sl, r9
   d4c12:	fb08 110b 	mla	r1, r8, fp, r1
   d4c16:	fbaa 8908 	umull	r8, r9, sl, r8
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d4c1a:	f9b6 a022 	ldrsh.w	sl, [r6, #34]	; 0x22
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d4c1e:	4489      	add	r9, r1
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d4c20:	ea4f 7bea 	mov.w	fp, sl, asr #31
   d4c24:	fb0a f105 	mul.w	r1, sl, r5
   d4c28:	fb04 110b 	mla	r1, r4, fp, r1
   d4c2c:	fbaa 4504 	umull	r4, r5, sl, r4
   d4c30:	440d      	add	r5, r1
   d4c32:	ea4f 4b45 	mov.w	fp, r5, lsl #17
   d4c36:	ea4f 4a44 	mov.w	sl, r4, lsl #17

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
   d4c3a:	1138      	asrs	r0, r7, #4
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d4c3c:	eb1a 0a08 	adds.w	sl, sl, r8

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
   d4c40:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d4c44:	ea4b 3bd4 	orr.w	fp, fp, r4, lsr #15
   d4c48:	eb4b 0b09 	adc.w	fp, fp, r9

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
   d4c4c:	ea4f 79e0 	mov.w	r9, r0, asr #31
   d4c50:	ea4f 75c9 	mov.w	r5, r9, lsl #31
   d4c54:	ea45 0550 	orr.w	r5, r5, r0, lsr #1
   d4c58:	07c4      	lsls	r4, r0, #31
   d4c5a:	f9b6 0020 	ldrsh.w	r0, [r6, #32]
   d4c5e:	f04f 0800 	mov.w	r8, #0
   d4c62:	eb18 080a 	adds.w	r8, r8, sl
   d4c66:	ea4f 09c0 	mov.w	r9, r0, lsl #3
   d4c6a:	eb49 090b 	adc.w	r9, r9, fp
   d4c6e:	f640 4735 	movw	r7, #3125	; 0xc35
   d4c72:	ebb4 0408 	subs.w	r4, r4, r8
   d4c76:	eb65 0509 	sbc.w	r5, r5, r9
   d4c7a:	fba4 0107 	umull	r0, r1, r4, r7
   d4c7e:	fb07 1105 	mla	r1, r7, r5, r1
   d4c82:	f003 faff 	bl	d8284 <__aeabi_ldivmod>
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d4c86:	f9b6 202a 	ldrsh.w	r2, [r6, #42]	; 0x2a
    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   d4c8a:	134c      	asrs	r4, r1, #13
   d4c8c:	0b45      	lsrs	r5, r0, #13
   d4c8e:	ea45 45c1 	orr.w	r5, r5, r1, lsl #19
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d4c92:	fb02 f704 	mul.w	r7, r2, r4
   d4c96:	17d3      	asrs	r3, r2, #31
   d4c98:	fb05 7703 	mla	r7, r5, r3, r7
   d4c9c:	fba2 2305 	umull	r2, r3, r2, r5
   d4ca0:	443b      	add	r3, r7
   d4ca2:	4354      	muls	r4, r2
   d4ca4:	fb05 4403 	mla	r4, r5, r3, r4
   d4ca8:	fba2 2305 	umull	r2, r3, r2, r5
   d4cac:	4423      	add	r3, r4
   d4cae:	0e54      	lsrs	r4, r2, #25
   d4cb0:	ea44 14c3 	orr.w	r4, r4, r3, lsl #7
   d4cb4:	f9b6 2028 	ldrsh.w	r2, [r6, #40]	; 0x28
   d4cb8:	1824      	adds	r4, r4, r0
   d4cba:	ea4f 6563 	mov.w	r5, r3, asr #25
   d4cbe:	414d      	adcs	r5, r1
   d4cc0:	17d3      	asrs	r3, r2, #31
   d4cc2:	4351      	muls	r1, r2
   d4cc4:	fb00 1303 	mla	r3, r0, r3, r1
   d4cc8:	fba2 0100 	umull	r0, r1, r2, r0
   d4ccc:	4419      	add	r1, r3
   d4cce:	0cc2      	lsrs	r2, r0, #19
   d4cd0:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
   d4cd4:	1912      	adds	r2, r2, r4
    return (float)p/256;
   d4cd6:	f9b6 4026 	ldrsh.w	r4, [r6, #38]	; 0x26
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d4cda:	ea4f 43e1 	mov.w	r3, r1, asr #19
   d4cde:	416b      	adcs	r3, r5
   d4ce0:	0a10      	lsrs	r0, r2, #8
    return (float)p/256;
   d4ce2:	17e5      	asrs	r5, r4, #31
   d4ce4:	0122      	lsls	r2, r4, #4
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d4ce6:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
   d4cea:	1219      	asrs	r1, r3, #8
    return (float)p/256;
   d4cec:	012b      	lsls	r3, r5, #4
   d4cee:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
   d4cf2:	1880      	adds	r0, r0, r2
   d4cf4:	4159      	adcs	r1, r3
   d4cf6:	f003 fa87 	bl	d8208 <__aeabi_l2f>
   d4cfa:	ed9f 0a08 	vldr	s0, [pc, #32]	; d4d1c <_ZN15Adafruit_BME28012readPressureEv+0x1b0>
   d4cfe:	ee07 0a90 	vmov	s15, r0
   d4d02:	ee27 0a80 	vmul.f32	s0, s15, s0
   d4d06:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

    readTemperature(); // must be done first to get t_fine

    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
   d4d0a:	ed9f 0a05 	vldr	s0, [pc, #20]	; d4d20 <_ZN15Adafruit_BME28012readPressureEv+0x1b4>
   d4d0e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
   d4d12:	ed9f 0a04 	vldr	s0, [pc, #16]	; d4d24 <_ZN15Adafruit_BME28012readPressureEv+0x1b8>
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
    return (float)p/256;
}
   d4d16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4d1a:	bf00      	nop
   d4d1c:	3b800000 	.word	0x3b800000
   d4d20:	7fc00000 	.word	0x7fc00000
   d4d24:	00000000 	.word	0x00000000

000d4d28 <_ZN15Adafruit_BME28012readHumidityEv>:
/*!
    @brief  Returns the humidity from the sensor
    @returns the humidity value read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readHumidity(void) {
   d4d28:	b510      	push	{r4, lr}
   d4d2a:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
   d4d2c:	f7ff fef0 	bl	d4b10 <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
   d4d30:	21fd      	movs	r1, #253	; 0xfd
   d4d32:	4620      	mov	r0, r4
   d4d34:	f7ff fd2a 	bl	d478c <_ZN15Adafruit_BME2806read16Eh>
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
   d4d38:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   d4d3c:	d038      	beq.n	d4db0 <_ZN15Adafruit_BME28012readHumidityEv+0x88>
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d4d3e:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
        return NAN;
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));
   d4d42:	68e2      	ldr	r2, [r4, #12]

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d4d44:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
   d4d48:	051b      	lsls	r3, r3, #20
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
        return NAN;
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));
   d4d4a:	f5a2 3296 	sub.w	r2, r2, #76800	; 0x12c00

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d4d4e:	ebc3 3380 	rsb	r3, r3, r0, lsl #14
   d4d52:	fb02 3311 	mls	r3, r2, r1, r3
   d4d56:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   d4d5a:	13d9      	asrs	r1, r3, #15
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   d4d5c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   d4d60:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d4d64:	4353      	muls	r3, r2
   d4d66:	12db      	asrs	r3, r3, #11
   d4d68:	4342      	muls	r2, r0
   d4d6a:	1292      	asrs	r2, r2, #10
   d4d6c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   d4d70:	4353      	muls	r3, r2
   d4d72:	129b      	asrs	r3, r3, #10
   d4d74:	f9b4 202e 	ldrsh.w	r2, [r4, #46]	; 0x2e
   d4d78:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   d4d7c:	4353      	muls	r3, r2
   d4d7e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   d4d82:	139b      	asrs	r3, r3, #14
   d4d84:	434b      	muls	r3, r1

    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   d4d86:	13da      	asrs	r2, r3, #15
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
   d4d88:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
   d4d8c:	4352      	muls	r2, r2
   d4d8e:	11d2      	asrs	r2, r2, #7
   d4d90:	434a      	muls	r2, r1
   d4d92:	eba3 1322 	sub.w	r3, r3, r2, asr #4

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
   d4d96:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
    float h = (v_x1_u32r>>12);
    return  h / 1024.0;
   d4d9a:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   d4d9e:	bfa8      	it	ge
   d4da0:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
   d4da4:	131b      	asrs	r3, r3, #12
   d4da6:	ee00 3a10 	vmov	s0, r3
   d4daa:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
   d4dae:	bd10      	pop	{r4, pc}
float Adafruit_BME280::readHumidity(void) {
    readTemperature(); // must be done first to get t_fine

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
        return NAN;
   d4db0:	ed9f 0a01 	vldr	s0, [pc, #4]	; d4db8 <_ZN15Adafruit_BME28012readHumidityEv+0x90>

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
    float h = (v_x1_u32r>>12);
    return  h / 1024.0;
}
   d4db4:	bd10      	pop	{r4, pc}
   d4db6:	bf00      	nop
   d4db8:	7fc00000 	.word	0x7fc00000

000d4dbc <_GLOBAL__sub_I__ZN15Adafruit_BME280C2Ev>:
   d4dbc:	f000 b83a 	b.w	d4e34 <HAL_Pin_Map>

000d4dc0 <_GLOBAL__sub_I__ZN9SeeedOLED4initEv>:
   d4dc0:	f000 b838 	b.w	d4e34 <HAL_Pin_Map>

000d4dc4 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4dc4:	b508      	push	{r3, lr}
   d4dc6:	4b02      	ldr	r3, [pc, #8]	; (d4dd0 <os_thread_is_current+0xc>)
   d4dc8:	681b      	ldr	r3, [r3, #0]
   d4dca:	689b      	ldr	r3, [r3, #8]
   d4dcc:	9301      	str	r3, [sp, #4]
   d4dce:	bd08      	pop	{r3, pc}
   d4dd0:	00030248 	.word	0x00030248

000d4dd4 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4dd4:	b508      	push	{r3, lr}
   d4dd6:	4b02      	ldr	r3, [pc, #8]	; (d4de0 <os_thread_join+0xc>)
   d4dd8:	681b      	ldr	r3, [r3, #0]
   d4dda:	691b      	ldr	r3, [r3, #16]
   d4ddc:	9301      	str	r3, [sp, #4]
   d4dde:	bd08      	pop	{r3, pc}
   d4de0:	00030248 	.word	0x00030248

000d4de4 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4de4:	b508      	push	{r3, lr}
   d4de6:	4b02      	ldr	r3, [pc, #8]	; (d4df0 <os_thread_cleanup+0xc>)
   d4de8:	681b      	ldr	r3, [r3, #0]
   d4dea:	695b      	ldr	r3, [r3, #20]
   d4dec:	9301      	str	r3, [sp, #4]
   d4dee:	bd08      	pop	{r3, pc}
   d4df0:	00030248 	.word	0x00030248

000d4df4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4df4:	b508      	push	{r3, lr}
   d4df6:	4b02      	ldr	r3, [pc, #8]	; (d4e00 <os_mutex_recursive_create+0xc>)
   d4df8:	681b      	ldr	r3, [r3, #0]
   d4dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4dfc:	9301      	str	r3, [sp, #4]
   d4dfe:	bd08      	pop	{r3, pc}
   d4e00:	00030248 	.word	0x00030248

000d4e04 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4e04:	b508      	push	{r3, lr}
   d4e06:	4b02      	ldr	r3, [pc, #8]	; (d4e10 <os_mutex_recursive_destroy+0xc>)
   d4e08:	681b      	ldr	r3, [r3, #0]
   d4e0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4e0c:	9301      	str	r3, [sp, #4]
   d4e0e:	bd08      	pop	{r3, pc}
   d4e10:	00030248 	.word	0x00030248

000d4e14 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4e14:	b508      	push	{r3, lr}
   d4e16:	4b02      	ldr	r3, [pc, #8]	; (d4e20 <HAL_RNG_GetRandomNumber+0xc>)
   d4e18:	681b      	ldr	r3, [r3, #0]
   d4e1a:	685b      	ldr	r3, [r3, #4]
   d4e1c:	9301      	str	r3, [sp, #4]
   d4e1e:	bd08      	pop	{r3, pc}
   d4e20:	00030218 	.word	0x00030218

000d4e24 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4e24:	b508      	push	{r3, lr}
   d4e26:	4b02      	ldr	r3, [pc, #8]	; (d4e30 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4e28:	681b      	ldr	r3, [r3, #0]
   d4e2a:	695b      	ldr	r3, [r3, #20]
   d4e2c:	9301      	str	r3, [sp, #4]
   d4e2e:	bd08      	pop	{r3, pc}
   d4e30:	00030218 	.word	0x00030218

000d4e34 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4e34:	b508      	push	{r3, lr}
   d4e36:	4b02      	ldr	r3, [pc, #8]	; (d4e40 <HAL_Pin_Map+0xc>)
   d4e38:	681b      	ldr	r3, [r3, #0]
   d4e3a:	681b      	ldr	r3, [r3, #0]
   d4e3c:	9301      	str	r3, [sp, #4]
   d4e3e:	bd08      	pop	{r3, pc}
   d4e40:	0003022c 	.word	0x0003022c

000d4e44 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d4e44:	b508      	push	{r3, lr}
   d4e46:	4b02      	ldr	r3, [pc, #8]	; (d4e50 <HAL_Validate_Pin_Function+0xc>)
   d4e48:	681b      	ldr	r3, [r3, #0]
   d4e4a:	685b      	ldr	r3, [r3, #4]
   d4e4c:	9301      	str	r3, [sp, #4]
   d4e4e:	bd08      	pop	{r3, pc}
   d4e50:	0003022c 	.word	0x0003022c

000d4e54 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4e54:	b508      	push	{r3, lr}
   d4e56:	4b02      	ldr	r3, [pc, #8]	; (d4e60 <HAL_Pin_Mode+0xc>)
   d4e58:	681b      	ldr	r3, [r3, #0]
   d4e5a:	689b      	ldr	r3, [r3, #8]
   d4e5c:	9301      	str	r3, [sp, #4]
   d4e5e:	bd08      	pop	{r3, pc}
   d4e60:	0003022c 	.word	0x0003022c

000d4e64 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4e64:	b508      	push	{r3, lr}
   d4e66:	4b02      	ldr	r3, [pc, #8]	; (d4e70 <HAL_Get_Pin_Mode+0xc>)
   d4e68:	681b      	ldr	r3, [r3, #0]
   d4e6a:	68db      	ldr	r3, [r3, #12]
   d4e6c:	9301      	str	r3, [sp, #4]
   d4e6e:	bd08      	pop	{r3, pc}
   d4e70:	0003022c 	.word	0x0003022c

000d4e74 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4e74:	b508      	push	{r3, lr}
   d4e76:	4b02      	ldr	r3, [pc, #8]	; (d4e80 <HAL_GPIO_Write+0xc>)
   d4e78:	681b      	ldr	r3, [r3, #0]
   d4e7a:	691b      	ldr	r3, [r3, #16]
   d4e7c:	9301      	str	r3, [sp, #4]
   d4e7e:	bd08      	pop	{r3, pc}
   d4e80:	0003022c 	.word	0x0003022c

000d4e84 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d4e84:	b508      	push	{r3, lr}
   d4e86:	4b02      	ldr	r3, [pc, #8]	; (d4e90 <HAL_GPIO_Read+0xc>)
   d4e88:	681b      	ldr	r3, [r3, #0]
   d4e8a:	695b      	ldr	r3, [r3, #20]
   d4e8c:	9301      	str	r3, [sp, #4]
   d4e8e:	bd08      	pop	{r3, pc}
   d4e90:	0003022c 	.word	0x0003022c

000d4e94 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d4e94:	b508      	push	{r3, lr}
   d4e96:	4b02      	ldr	r3, [pc, #8]	; (d4ea0 <HAL_ADC_Read+0xc>)
   d4e98:	681b      	ldr	r3, [r3, #0]
   d4e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4e9c:	9301      	str	r3, [sp, #4]
   d4e9e:	bd08      	pop	{r3, pc}
   d4ea0:	0003022c 	.word	0x0003022c

000d4ea4 <HAL_Pulse_In>:

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
DYNALIB_FN(17, hal_gpio, HAL_Get_System_Interrupt_Handler, uint8_t(hal_irq_t, HAL_InterruptCallback*, void*))
DYNALIB_FN(18, hal_gpio, HAL_System_Interrupt_Trigger, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, HAL_Pulse_In, uint32_t(pin_t, uint16_t))
   d4ea4:	b508      	push	{r3, lr}
   d4ea6:	4b02      	ldr	r3, [pc, #8]	; (d4eb0 <HAL_Pulse_In+0xc>)
   d4ea8:	681b      	ldr	r3, [r3, #0]
   d4eaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4eac:	9301      	str	r3, [sp, #4]
   d4eae:	bd08      	pop	{r3, pc}
   d4eb0:	0003022c 	.word	0x0003022c

000d4eb4 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d4eb4:	b508      	push	{r3, lr}
   d4eb6:	4b02      	ldr	r3, [pc, #8]	; (d4ec0 <HAL_I2C_Begin+0xc>)
   d4eb8:	681b      	ldr	r3, [r3, #0]
   d4eba:	68db      	ldr	r3, [r3, #12]
   d4ebc:	9301      	str	r3, [sp, #4]
   d4ebe:	bd08      	pop	{r3, pc}
   d4ec0:	00030228 	.word	0x00030228

000d4ec4 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d4ec4:	b508      	push	{r3, lr}
   d4ec6:	4b02      	ldr	r3, [pc, #8]	; (d4ed0 <HAL_I2C_Begin_Transmission+0xc>)
   d4ec8:	681b      	ldr	r3, [r3, #0]
   d4eca:	699b      	ldr	r3, [r3, #24]
   d4ecc:	9301      	str	r3, [sp, #4]
   d4ece:	bd08      	pop	{r3, pc}
   d4ed0:	00030228 	.word	0x00030228

000d4ed4 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d4ed4:	b508      	push	{r3, lr}
   d4ed6:	4b02      	ldr	r3, [pc, #8]	; (d4ee0 <HAL_I2C_End_Transmission+0xc>)
   d4ed8:	681b      	ldr	r3, [r3, #0]
   d4eda:	69db      	ldr	r3, [r3, #28]
   d4edc:	9301      	str	r3, [sp, #4]
   d4ede:	bd08      	pop	{r3, pc}
   d4ee0:	00030228 	.word	0x00030228

000d4ee4 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4ee4:	b508      	push	{r3, lr}
   d4ee6:	4b02      	ldr	r3, [pc, #8]	; (d4ef0 <HAL_I2C_Write_Data+0xc>)
   d4ee8:	681b      	ldr	r3, [r3, #0]
   d4eea:	6a1b      	ldr	r3, [r3, #32]
   d4eec:	9301      	str	r3, [sp, #4]
   d4eee:	bd08      	pop	{r3, pc}
   d4ef0:	00030228 	.word	0x00030228

000d4ef4 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4ef4:	b508      	push	{r3, lr}
   d4ef6:	4b02      	ldr	r3, [pc, #8]	; (d4f00 <HAL_I2C_Available_Data+0xc>)
   d4ef8:	681b      	ldr	r3, [r3, #0]
   d4efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4efc:	9301      	str	r3, [sp, #4]
   d4efe:	bd08      	pop	{r3, pc}
   d4f00:	00030228 	.word	0x00030228

000d4f04 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4f04:	b508      	push	{r3, lr}
   d4f06:	4b02      	ldr	r3, [pc, #8]	; (d4f10 <HAL_I2C_Read_Data+0xc>)
   d4f08:	681b      	ldr	r3, [r3, #0]
   d4f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4f0c:	9301      	str	r3, [sp, #4]
   d4f0e:	bd08      	pop	{r3, pc}
   d4f10:	00030228 	.word	0x00030228

000d4f14 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4f14:	b508      	push	{r3, lr}
   d4f16:	4b02      	ldr	r3, [pc, #8]	; (d4f20 <HAL_I2C_Peek_Data+0xc>)
   d4f18:	681b      	ldr	r3, [r3, #0]
   d4f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4f1c:	9301      	str	r3, [sp, #4]
   d4f1e:	bd08      	pop	{r3, pc}
   d4f20:	00030228 	.word	0x00030228

000d4f24 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4f24:	b508      	push	{r3, lr}
   d4f26:	4b02      	ldr	r3, [pc, #8]	; (d4f30 <HAL_I2C_Flush_Data+0xc>)
   d4f28:	681b      	ldr	r3, [r3, #0]
   d4f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4f2c:	9301      	str	r3, [sp, #4]
   d4f2e:	bd08      	pop	{r3, pc}
   d4f30:	00030228 	.word	0x00030228

000d4f34 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4f34:	b508      	push	{r3, lr}
   d4f36:	4b02      	ldr	r3, [pc, #8]	; (d4f40 <HAL_I2C_Is_Enabled+0xc>)
   d4f38:	681b      	ldr	r3, [r3, #0]
   d4f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4f3c:	9301      	str	r3, [sp, #4]
   d4f3e:	bd08      	pop	{r3, pc}
   d4f40:	00030228 	.word	0x00030228

000d4f44 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d4f44:	b508      	push	{r3, lr}
   d4f46:	4b02      	ldr	r3, [pc, #8]	; (d4f50 <HAL_I2C_Init+0xc>)
   d4f48:	681b      	ldr	r3, [r3, #0]
   d4f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4f4c:	9301      	str	r3, [sp, #4]
   d4f4e:	bd08      	pop	{r3, pc}
   d4f50:	00030228 	.word	0x00030228

000d4f54 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d4f54:	b508      	push	{r3, lr}
   d4f56:	4b02      	ldr	r3, [pc, #8]	; (d4f60 <HAL_I2C_Request_Data_Ex+0xc>)
   d4f58:	681b      	ldr	r3, [r3, #0]
   d4f5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4f5c:	9301      	str	r3, [sp, #4]
   d4f5e:	bd08      	pop	{r3, pc}
   d4f60:	00030228 	.word	0x00030228

000d4f64 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4f64:	b508      	push	{r3, lr}
   d4f66:	4b02      	ldr	r3, [pc, #8]	; (d4f70 <inet_inet_ntop+0xc>)
   d4f68:	681b      	ldr	r3, [r3, #0]
   d4f6a:	695b      	ldr	r3, [r3, #20]
   d4f6c:	9301      	str	r3, [sp, #4]
   d4f6e:	bd08      	pop	{r3, pc}
   d4f70:	00030264 	.word	0x00030264

000d4f74 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4f74:	b508      	push	{r3, lr}
   d4f76:	4b02      	ldr	r3, [pc, #8]	; (d4f80 <netdb_freeaddrinfo+0xc>)
   d4f78:	681b      	ldr	r3, [r3, #0]
   d4f7a:	689b      	ldr	r3, [r3, #8]
   d4f7c:	9301      	str	r3, [sp, #4]
   d4f7e:	bd08      	pop	{r3, pc}
   d4f80:	00030268 	.word	0x00030268

000d4f84 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4f84:	b508      	push	{r3, lr}
   d4f86:	4b02      	ldr	r3, [pc, #8]	; (d4f90 <netdb_getaddrinfo+0xc>)
   d4f88:	681b      	ldr	r3, [r3, #0]
   d4f8a:	68db      	ldr	r3, [r3, #12]
   d4f8c:	9301      	str	r3, [sp, #4]
   d4f8e:	bd08      	pop	{r3, pc}
   d4f90:	00030268 	.word	0x00030268

000d4f94 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d4f94:	b508      	push	{r3, lr}
   d4f96:	4b02      	ldr	r3, [pc, #8]	; (d4fa0 <HAL_SPI_Begin+0xc>)
   d4f98:	681b      	ldr	r3, [r3, #0]
   d4f9a:	681b      	ldr	r3, [r3, #0]
   d4f9c:	9301      	str	r3, [sp, #4]
   d4f9e:	bd08      	pop	{r3, pc}
   d4fa0:	00030230 	.word	0x00030230

000d4fa4 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d4fa4:	b508      	push	{r3, lr}
   d4fa6:	4b02      	ldr	r3, [pc, #8]	; (d4fb0 <HAL_SPI_Send_Receive_Data+0xc>)
   d4fa8:	681b      	ldr	r3, [r3, #0]
   d4faa:	695b      	ldr	r3, [r3, #20]
   d4fac:	9301      	str	r3, [sp, #4]
   d4fae:	bd08      	pop	{r3, pc}
   d4fb0:	00030230 	.word	0x00030230

000d4fb4 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4fb4:	b508      	push	{r3, lr}
   d4fb6:	4b02      	ldr	r3, [pc, #8]	; (d4fc0 <HAL_SPI_Init+0xc>)
   d4fb8:	681b      	ldr	r3, [r3, #0]
   d4fba:	69db      	ldr	r3, [r3, #28]
   d4fbc:	9301      	str	r3, [sp, #4]
   d4fbe:	bd08      	pop	{r3, pc}
   d4fc0:	00030230 	.word	0x00030230

000d4fc4 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4fc4:	b508      	push	{r3, lr}
   d4fc6:	4b02      	ldr	r3, [pc, #8]	; (d4fd0 <HAL_SPI_Is_Enabled+0xc>)
   d4fc8:	681b      	ldr	r3, [r3, #0]
   d4fca:	6a1b      	ldr	r3, [r3, #32]
   d4fcc:	9301      	str	r3, [sp, #4]
   d4fce:	bd08      	pop	{r3, pc}
   d4fd0:	00030230 	.word	0x00030230

000d4fd4 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d4fd4:	b508      	push	{r3, lr}
   d4fd6:	4b02      	ldr	r3, [pc, #8]	; (d4fe0 <HAL_SPI_Info+0xc>)
   d4fd8:	681b      	ldr	r3, [r3, #0]
   d4fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4fdc:	9301      	str	r3, [sp, #4]
   d4fde:	bd08      	pop	{r3, pc}
   d4fe0:	00030230 	.word	0x00030230

000d4fe4 <HAL_SPI_Set_Settings>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d4fe4:	b508      	push	{r3, lr}
   d4fe6:	4b02      	ldr	r3, [pc, #8]	; (d4ff0 <HAL_SPI_Set_Settings+0xc>)
   d4fe8:	681b      	ldr	r3, [r3, #0]
   d4fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4fec:	9301      	str	r3, [sp, #4]
   d4fee:	bd08      	pop	{r3, pc}
   d4ff0:	00030230 	.word	0x00030230

000d4ff4 <HAL_SPI_Acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d4ff4:	b508      	push	{r3, lr}
   d4ff6:	4b02      	ldr	r3, [pc, #8]	; (d5000 <HAL_SPI_Acquire+0xc>)
   d4ff8:	681b      	ldr	r3, [r3, #0]
   d4ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4ffc:	9301      	str	r3, [sp, #4]
   d4ffe:	bd08      	pop	{r3, pc}
   d5000:	00030230 	.word	0x00030230

000d5004 <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d5004:	b508      	push	{r3, lr}
   d5006:	4b02      	ldr	r3, [pc, #8]	; (d5010 <HAL_SPI_Release+0xc>)
   d5008:	681b      	ldr	r3, [r3, #0]
   d500a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d500c:	9301      	str	r3, [sp, #4]
   d500e:	bd08      	pop	{r3, pc}
   d5010:	00030230 	.word	0x00030230

000d5014 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d5014:	b508      	push	{r3, lr}
   d5016:	4b02      	ldr	r3, [pc, #8]	; (d5020 <HAL_USART_Init+0xc>)
   d5018:	681b      	ldr	r3, [r3, #0]
   d501a:	681b      	ldr	r3, [r3, #0]
   d501c:	9301      	str	r3, [sp, #4]
   d501e:	bd08      	pop	{r3, pc}
   d5020:	0003023c 	.word	0x0003023c

000d5024 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d5024:	b508      	push	{r3, lr}
   d5026:	4b02      	ldr	r3, [pc, #8]	; (d5030 <HAL_USART_Write_Data+0xc>)
   d5028:	681b      	ldr	r3, [r3, #0]
   d502a:	68db      	ldr	r3, [r3, #12]
   d502c:	9301      	str	r3, [sp, #4]
   d502e:	bd08      	pop	{r3, pc}
   d5030:	0003023c 	.word	0x0003023c

000d5034 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d5034:	b508      	push	{r3, lr}
   d5036:	4b02      	ldr	r3, [pc, #8]	; (d5040 <HAL_USART_Available_Data+0xc>)
   d5038:	681b      	ldr	r3, [r3, #0]
   d503a:	691b      	ldr	r3, [r3, #16]
   d503c:	9301      	str	r3, [sp, #4]
   d503e:	bd08      	pop	{r3, pc}
   d5040:	0003023c 	.word	0x0003023c

000d5044 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d5044:	b508      	push	{r3, lr}
   d5046:	4b02      	ldr	r3, [pc, #8]	; (d5050 <HAL_USART_Read_Data+0xc>)
   d5048:	681b      	ldr	r3, [r3, #0]
   d504a:	695b      	ldr	r3, [r3, #20]
   d504c:	9301      	str	r3, [sp, #4]
   d504e:	bd08      	pop	{r3, pc}
   d5050:	0003023c 	.word	0x0003023c

000d5054 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d5054:	b508      	push	{r3, lr}
   d5056:	4b02      	ldr	r3, [pc, #8]	; (d5060 <HAL_USART_Peek_Data+0xc>)
   d5058:	681b      	ldr	r3, [r3, #0]
   d505a:	699b      	ldr	r3, [r3, #24]
   d505c:	9301      	str	r3, [sp, #4]
   d505e:	bd08      	pop	{r3, pc}
   d5060:	0003023c 	.word	0x0003023c

000d5064 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d5064:	b508      	push	{r3, lr}
   d5066:	4b02      	ldr	r3, [pc, #8]	; (d5070 <HAL_USART_Flush_Data+0xc>)
   d5068:	681b      	ldr	r3, [r3, #0]
   d506a:	69db      	ldr	r3, [r3, #28]
   d506c:	9301      	str	r3, [sp, #4]
   d506e:	bd08      	pop	{r3, pc}
   d5070:	0003023c 	.word	0x0003023c

000d5074 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d5074:	b508      	push	{r3, lr}
   d5076:	4b02      	ldr	r3, [pc, #8]	; (d5080 <HAL_USART_Is_Enabled+0xc>)
   d5078:	681b      	ldr	r3, [r3, #0]
   d507a:	6a1b      	ldr	r3, [r3, #32]
   d507c:	9301      	str	r3, [sp, #4]
   d507e:	bd08      	pop	{r3, pc}
   d5080:	0003023c 	.word	0x0003023c

000d5084 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d5084:	b508      	push	{r3, lr}
   d5086:	4b02      	ldr	r3, [pc, #8]	; (d5090 <HAL_USART_Available_Data_For_Write+0xc>)
   d5088:	681b      	ldr	r3, [r3, #0]
   d508a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d508c:	9301      	str	r3, [sp, #4]
   d508e:	bd08      	pop	{r3, pc}
   d5090:	0003023c 	.word	0x0003023c

000d5094 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5094:	b508      	push	{r3, lr}
   d5096:	4b02      	ldr	r3, [pc, #8]	; (d50a0 <HAL_USB_USART_Init+0xc>)
   d5098:	681b      	ldr	r3, [r3, #0]
   d509a:	681b      	ldr	r3, [r3, #0]
   d509c:	9301      	str	r3, [sp, #4]
   d509e:	bd08      	pop	{r3, pc}
   d50a0:	0003024c 	.word	0x0003024c

000d50a4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d50a4:	b508      	push	{r3, lr}
   d50a6:	4b02      	ldr	r3, [pc, #8]	; (d50b0 <HAL_USB_USART_Begin+0xc>)
   d50a8:	681b      	ldr	r3, [r3, #0]
   d50aa:	685b      	ldr	r3, [r3, #4]
   d50ac:	9301      	str	r3, [sp, #4]
   d50ae:	bd08      	pop	{r3, pc}
   d50b0:	0003024c 	.word	0x0003024c

000d50b4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d50b4:	b508      	push	{r3, lr}
   d50b6:	4b02      	ldr	r3, [pc, #8]	; (d50c0 <HAL_USB_USART_Available_Data+0xc>)
   d50b8:	681b      	ldr	r3, [r3, #0]
   d50ba:	691b      	ldr	r3, [r3, #16]
   d50bc:	9301      	str	r3, [sp, #4]
   d50be:	bd08      	pop	{r3, pc}
   d50c0:	0003024c 	.word	0x0003024c

000d50c4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d50c4:	b508      	push	{r3, lr}
   d50c6:	4b02      	ldr	r3, [pc, #8]	; (d50d0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d50c8:	681b      	ldr	r3, [r3, #0]
   d50ca:	695b      	ldr	r3, [r3, #20]
   d50cc:	9301      	str	r3, [sp, #4]
   d50ce:	bd08      	pop	{r3, pc}
   d50d0:	0003024c 	.word	0x0003024c

000d50d4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d50d4:	b508      	push	{r3, lr}
   d50d6:	4b02      	ldr	r3, [pc, #8]	; (d50e0 <HAL_USB_USART_Receive_Data+0xc>)
   d50d8:	681b      	ldr	r3, [r3, #0]
   d50da:	699b      	ldr	r3, [r3, #24]
   d50dc:	9301      	str	r3, [sp, #4]
   d50de:	bd08      	pop	{r3, pc}
   d50e0:	0003024c 	.word	0x0003024c

000d50e4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d50e4:	b508      	push	{r3, lr}
   d50e6:	4b02      	ldr	r3, [pc, #8]	; (d50f0 <HAL_USB_USART_Send_Data+0xc>)
   d50e8:	681b      	ldr	r3, [r3, #0]
   d50ea:	69db      	ldr	r3, [r3, #28]
   d50ec:	9301      	str	r3, [sp, #4]
   d50ee:	bd08      	pop	{r3, pc}
   d50f0:	0003024c 	.word	0x0003024c

000d50f4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d50f4:	b508      	push	{r3, lr}
   d50f6:	4b02      	ldr	r3, [pc, #8]	; (d5100 <HAL_USB_USART_Flush_Data+0xc>)
   d50f8:	681b      	ldr	r3, [r3, #0]
   d50fa:	6a1b      	ldr	r3, [r3, #32]
   d50fc:	9301      	str	r3, [sp, #4]
   d50fe:	bd08      	pop	{r3, pc}
   d5100:	0003024c 	.word	0x0003024c

000d5104 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5104:	b508      	push	{r3, lr}
   d5106:	4b02      	ldr	r3, [pc, #8]	; (d5110 <set_system_mode+0xc>)
   d5108:	681b      	ldr	r3, [r3, #0]
   d510a:	685b      	ldr	r3, [r3, #4]
   d510c:	9301      	str	r3, [sp, #4]
   d510e:	bd08      	pop	{r3, pc}
   d5110:	00030220 	.word	0x00030220

000d5114 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5114:	b508      	push	{r3, lr}
   d5116:	4b02      	ldr	r3, [pc, #8]	; (d5120 <system_delay_ms+0xc>)
   d5118:	681b      	ldr	r3, [r3, #0]
   d511a:	695b      	ldr	r3, [r3, #20]
   d511c:	9301      	str	r3, [sp, #4]
   d511e:	bd08      	pop	{r3, pc}
   d5120:	00030220 	.word	0x00030220

000d5124 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5124:	b508      	push	{r3, lr}
   d5126:	4b03      	ldr	r3, [pc, #12]	; (d5134 <system_ctrl_set_app_request_handler+0x10>)
   d5128:	681b      	ldr	r3, [r3, #0]
   d512a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d512e:	9301      	str	r3, [sp, #4]
   d5130:	bd08      	pop	{r3, pc}
   d5132:	0000      	.short	0x0000
   d5134:	00030220 	.word	0x00030220

000d5138 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5138:	b508      	push	{r3, lr}
   d513a:	4b03      	ldr	r3, [pc, #12]	; (d5148 <system_ctrl_set_result+0x10>)
   d513c:	681b      	ldr	r3, [r3, #0]
   d513e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5142:	9301      	str	r3, [sp, #4]
   d5144:	bd08      	pop	{r3, pc}
   d5146:	0000      	.short	0x0000
   d5148:	00030220 	.word	0x00030220

000d514c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d514c:	b508      	push	{r3, lr}
   d514e:	4b02      	ldr	r3, [pc, #8]	; (d5158 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5150:	681b      	ldr	r3, [r3, #0]
   d5152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5154:	9301      	str	r3, [sp, #4]
   d5156:	bd08      	pop	{r3, pc}
   d5158:	00030244 	.word	0x00030244

000d515c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d515c:	b508      	push	{r3, lr}
   d515e:	4b02      	ldr	r3, [pc, #8]	; (d5168 <network_connect+0xc>)
   d5160:	681b      	ldr	r3, [r3, #0]
   d5162:	685b      	ldr	r3, [r3, #4]
   d5164:	9301      	str	r3, [sp, #4]
   d5166:	bd08      	pop	{r3, pc}
   d5168:	00030240 	.word	0x00030240

000d516c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d516c:	b508      	push	{r3, lr}
   d516e:	4b02      	ldr	r3, [pc, #8]	; (d5178 <network_connecting+0xc>)
   d5170:	681b      	ldr	r3, [r3, #0]
   d5172:	689b      	ldr	r3, [r3, #8]
   d5174:	9301      	str	r3, [sp, #4]
   d5176:	bd08      	pop	{r3, pc}
   d5178:	00030240 	.word	0x00030240

000d517c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d517c:	b508      	push	{r3, lr}
   d517e:	4b02      	ldr	r3, [pc, #8]	; (d5188 <network_disconnect+0xc>)
   d5180:	681b      	ldr	r3, [r3, #0]
   d5182:	68db      	ldr	r3, [r3, #12]
   d5184:	9301      	str	r3, [sp, #4]
   d5186:	bd08      	pop	{r3, pc}
   d5188:	00030240 	.word	0x00030240

000d518c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d518c:	b508      	push	{r3, lr}
   d518e:	4b02      	ldr	r3, [pc, #8]	; (d5198 <network_ready+0xc>)
   d5190:	681b      	ldr	r3, [r3, #0]
   d5192:	691b      	ldr	r3, [r3, #16]
   d5194:	9301      	str	r3, [sp, #4]
   d5196:	bd08      	pop	{r3, pc}
   d5198:	00030240 	.word	0x00030240

000d519c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d519c:	b508      	push	{r3, lr}
   d519e:	4b02      	ldr	r3, [pc, #8]	; (d51a8 <network_on+0xc>)
   d51a0:	681b      	ldr	r3, [r3, #0]
   d51a2:	695b      	ldr	r3, [r3, #20]
   d51a4:	9301      	str	r3, [sp, #4]
   d51a6:	bd08      	pop	{r3, pc}
   d51a8:	00030240 	.word	0x00030240

000d51ac <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d51ac:	b508      	push	{r3, lr}
   d51ae:	4b02      	ldr	r3, [pc, #8]	; (d51b8 <network_off+0xc>)
   d51b0:	681b      	ldr	r3, [r3, #0]
   d51b2:	699b      	ldr	r3, [r3, #24]
   d51b4:	9301      	str	r3, [sp, #4]
   d51b6:	bd08      	pop	{r3, pc}
   d51b8:	00030240 	.word	0x00030240

000d51bc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d51bc:	b508      	push	{r3, lr}
   d51be:	4b02      	ldr	r3, [pc, #8]	; (d51c8 <network_listen+0xc>)
   d51c0:	681b      	ldr	r3, [r3, #0]
   d51c2:	69db      	ldr	r3, [r3, #28]
   d51c4:	9301      	str	r3, [sp, #4]
   d51c6:	bd08      	pop	{r3, pc}
   d51c8:	00030240 	.word	0x00030240

000d51cc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d51cc:	b508      	push	{r3, lr}
   d51ce:	4b02      	ldr	r3, [pc, #8]	; (d51d8 <network_listening+0xc>)
   d51d0:	681b      	ldr	r3, [r3, #0]
   d51d2:	6a1b      	ldr	r3, [r3, #32]
   d51d4:	9301      	str	r3, [sp, #4]
   d51d6:	bd08      	pop	{r3, pc}
   d51d8:	00030240 	.word	0x00030240

000d51dc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d51dc:	b508      	push	{r3, lr}
   d51de:	4b02      	ldr	r3, [pc, #8]	; (d51e8 <network_set_listen_timeout+0xc>)
   d51e0:	681b      	ldr	r3, [r3, #0]
   d51e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d51e4:	9301      	str	r3, [sp, #4]
   d51e6:	bd08      	pop	{r3, pc}
   d51e8:	00030240 	.word	0x00030240

000d51ec <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d51ec:	b508      	push	{r3, lr}
   d51ee:	4b02      	ldr	r3, [pc, #8]	; (d51f8 <network_get_listen_timeout+0xc>)
   d51f0:	681b      	ldr	r3, [r3, #0]
   d51f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d51f4:	9301      	str	r3, [sp, #4]
   d51f6:	bd08      	pop	{r3, pc}
   d51f8:	00030240 	.word	0x00030240

000d51fc <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d51fc:	b508      	push	{r3, lr}
   d51fe:	4b02      	ldr	r3, [pc, #8]	; (d5208 <malloc+0xc>)
   d5200:	681b      	ldr	r3, [r3, #0]
   d5202:	681b      	ldr	r3, [r3, #0]
   d5204:	9301      	str	r3, [sp, #4]
   d5206:	bd08      	pop	{r3, pc}
   d5208:	0003021c 	.word	0x0003021c

000d520c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d520c:	b508      	push	{r3, lr}
   d520e:	4b02      	ldr	r3, [pc, #8]	; (d5218 <free+0xc>)
   d5210:	681b      	ldr	r3, [r3, #0]
   d5212:	685b      	ldr	r3, [r3, #4]
   d5214:	9301      	str	r3, [sp, #4]
   d5216:	bd08      	pop	{r3, pc}
   d5218:	0003021c 	.word	0x0003021c

000d521c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d521c:	b508      	push	{r3, lr}
   d521e:	4b02      	ldr	r3, [pc, #8]	; (d5228 <realloc+0xc>)
   d5220:	681b      	ldr	r3, [r3, #0]
   d5222:	689b      	ldr	r3, [r3, #8]
   d5224:	9301      	str	r3, [sp, #4]
   d5226:	bd08      	pop	{r3, pc}
   d5228:	0003021c 	.word	0x0003021c

000d522c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d522c:	b508      	push	{r3, lr}
   d522e:	4b02      	ldr	r3, [pc, #8]	; (d5238 <vsnprintf+0xc>)
   d5230:	681b      	ldr	r3, [r3, #0]
   d5232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5234:	9301      	str	r3, [sp, #4]
   d5236:	bd08      	pop	{r3, pc}
   d5238:	0003021c 	.word	0x0003021c

000d523c <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d523c:	b508      	push	{r3, lr}
   d523e:	4b02      	ldr	r3, [pc, #8]	; (d5248 <__errno+0xc>)
   d5240:	681b      	ldr	r3, [r3, #0]
   d5242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5244:	9301      	str	r3, [sp, #4]
   d5246:	bd08      	pop	{r3, pc}
   d5248:	0003021c 	.word	0x0003021c

000d524c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d524c:	2100      	movs	r1, #0
   d524e:	f7ff bf61 	b.w	d5114 <system_delay_ms>

000d5252 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d5252:	b510      	push	{r4, lr}
   d5254:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5256:	6800      	ldr	r0, [r0, #0]
   d5258:	b108      	cbz	r0, d525e <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d525a:	f7ff fdd3 	bl	d4e04 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d525e:	4620      	mov	r0, r4
   d5260:	bd10      	pop	{r4, pc}
	...

000d5264 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5264:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5266:	4c06      	ldr	r4, [pc, #24]	; (d5280 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5268:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d526a:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d526c:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d526e:	f7ff fdc1 	bl	d4df4 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d5272:	4620      	mov	r0, r4
   d5274:	4a03      	ldr	r2, [pc, #12]	; (d5284 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d5276:	4904      	ldr	r1, [pc, #16]	; (d5288 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d527c:	f000 bf9a 	b.w	d61b4 <__aeabi_atexit>
   d5280:	2003e4a4 	.word	0x2003e4a4
   d5284:	2003e428 	.word	0x2003e428
   d5288:	000d5253 	.word	0x000d5253

000d528c <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d528c:	2200      	movs	r2, #0
   d528e:	4611      	mov	r1, r2
   d5290:	6840      	ldr	r0, [r0, #4]
   d5292:	f7ff bf7b 	b.w	d518c <network_ready>

000d5296 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5296:	2200      	movs	r2, #0
   d5298:	4611      	mov	r1, r2
   d529a:	6840      	ldr	r0, [r0, #4]
   d529c:	f7ff bf96 	b.w	d51cc <network_listening>

000d52a0 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d52a0:	2200      	movs	r2, #0
   d52a2:	4611      	mov	r1, r2
   d52a4:	6840      	ldr	r0, [r0, #4]
   d52a6:	f7ff bfa1 	b.w	d51ec <network_get_listen_timeout>

000d52aa <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d52aa:	2200      	movs	r2, #0
   d52ac:	6840      	ldr	r0, [r0, #4]
   d52ae:	f7ff bf95 	b.w	d51dc <network_set_listen_timeout>

000d52b2 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d52b2:	2200      	movs	r2, #0
   d52b4:	f081 0101 	eor.w	r1, r1, #1
   d52b8:	6840      	ldr	r0, [r0, #4]
   d52ba:	f7ff bf7f 	b.w	d51bc <network_listen>

000d52be <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d52be:	2300      	movs	r3, #0
   d52c0:	461a      	mov	r2, r3
   d52c2:	4619      	mov	r1, r3
   d52c4:	6840      	ldr	r0, [r0, #4]
   d52c6:	f7ff bf71 	b.w	d51ac <network_off>

000d52ca <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d52ca:	2300      	movs	r3, #0
   d52cc:	461a      	mov	r2, r3
   d52ce:	4619      	mov	r1, r3
   d52d0:	6840      	ldr	r0, [r0, #4]
   d52d2:	f7ff bf63 	b.w	d519c <network_on>

000d52d6 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d52d6:	2200      	movs	r2, #0
   d52d8:	4611      	mov	r1, r2
   d52da:	6840      	ldr	r0, [r0, #4]
   d52dc:	f7ff bf46 	b.w	d516c <network_connecting>

000d52e0 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d52e0:	2200      	movs	r2, #0
   d52e2:	2102      	movs	r1, #2
   d52e4:	6840      	ldr	r0, [r0, #4]
   d52e6:	f7ff bf49 	b.w	d517c <network_disconnect>

000d52ea <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d52ea:	2300      	movs	r3, #0
   d52ec:	461a      	mov	r2, r3
   d52ee:	6840      	ldr	r0, [r0, #4]
   d52f0:	f7ff bf34 	b.w	d515c <network_connect>

000d52f4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d52f4:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d52f6:	4c08      	ldr	r4, [pc, #32]	; (d5318 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d52f8:	2528      	movs	r5, #40	; 0x28
   d52fa:	462a      	mov	r2, r5
   d52fc:	2100      	movs	r1, #0
   d52fe:	4620      	mov	r0, r4
   d5300:	f003 f99d 	bl	d863e <memset>
        cid = -1;
   d5304:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d5308:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d530a:	4b04      	ldr	r3, [pc, #16]	; (d531c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d530c:	8025      	strh	r5, [r4, #0]
   d530e:	2204      	movs	r2, #4
   d5310:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d5312:	4a03      	ldr	r2, [pc, #12]	; (d5320 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d5314:	601a      	str	r2, [r3, #0]
   d5316:	bd38      	pop	{r3, r4, r5, pc}
   d5318:	2003e4b0 	.word	0x2003e4b0
   d531c:	2003e4a8 	.word	0x2003e4a8
   d5320:	000d8820 	.word	0x000d8820

000d5324 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5324:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5326:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5328:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d532a:	b113      	cbz	r3, d5332 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d532c:	2203      	movs	r2, #3
   d532e:	4601      	mov	r1, r0
   d5330:	4798      	blx	r3
    }
   d5332:	4620      	mov	r0, r4
   d5334:	bd10      	pop	{r4, pc}

000d5336 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5336:	2200      	movs	r2, #0
   d5338:	4611      	mov	r1, r2
   d533a:	6840      	ldr	r0, [r0, #4]
   d533c:	f7ff bf46 	b.w	d51cc <network_listening>

000d5340 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5340:	2200      	movs	r2, #0
   d5342:	4611      	mov	r1, r2
   d5344:	6840      	ldr	r0, [r0, #4]
   d5346:	f7ff bf51 	b.w	d51ec <network_get_listen_timeout>

000d534a <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d534a:	2200      	movs	r2, #0
   d534c:	6840      	ldr	r0, [r0, #4]
   d534e:	f7ff bf45 	b.w	d51dc <network_set_listen_timeout>

000d5352 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5352:	2200      	movs	r2, #0
   d5354:	f081 0101 	eor.w	r1, r1, #1
   d5358:	6840      	ldr	r0, [r0, #4]
   d535a:	f7ff bf2f 	b.w	d51bc <network_listen>

000d535e <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d535e:	2300      	movs	r3, #0
   d5360:	461a      	mov	r2, r3
   d5362:	4619      	mov	r1, r3
   d5364:	6840      	ldr	r0, [r0, #4]
   d5366:	f7ff bf21 	b.w	d51ac <network_off>

000d536a <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d536a:	2300      	movs	r3, #0
   d536c:	461a      	mov	r2, r3
   d536e:	4619      	mov	r1, r3
   d5370:	6840      	ldr	r0, [r0, #4]
   d5372:	f7ff bf13 	b.w	d519c <network_on>

000d5376 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5376:	2200      	movs	r2, #0
   d5378:	4611      	mov	r1, r2
   d537a:	6840      	ldr	r0, [r0, #4]
   d537c:	f7ff bf06 	b.w	d518c <network_ready>

000d5380 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5380:	2200      	movs	r2, #0
   d5382:	4611      	mov	r1, r2
   d5384:	6840      	ldr	r0, [r0, #4]
   d5386:	f7ff bef1 	b.w	d516c <network_connecting>

000d538a <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d538a:	2200      	movs	r2, #0
   d538c:	2102      	movs	r1, #2
   d538e:	6840      	ldr	r0, [r0, #4]
   d5390:	f7ff bef4 	b.w	d517c <network_disconnect>

000d5394 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5394:	2300      	movs	r3, #0
   d5396:	461a      	mov	r2, r3
   d5398:	6840      	ldr	r0, [r0, #4]
   d539a:	f7ff bedf 	b.w	d515c <network_connect>
	...

000d53a0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d53a0:	4b02      	ldr	r3, [pc, #8]	; (d53ac <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d53a2:	2203      	movs	r2, #3
   d53a4:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d53a6:	4a02      	ldr	r2, [pc, #8]	; (d53b0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d53a8:	601a      	str	r2, [r3, #0]
   d53aa:	4770      	bx	lr
   d53ac:	2003e4d8 	.word	0x2003e4d8
   d53b0:	000d8854 	.word	0x000d8854

000d53b4 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d53b4:	4770      	bx	lr

000d53b6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d53b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d53b8:	4606      	mov	r6, r0
   d53ba:	4615      	mov	r5, r2
   d53bc:	460c      	mov	r4, r1
   d53be:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d53c0:	42bc      	cmp	r4, r7
   d53c2:	d006      	beq.n	d53d2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d53c4:	6833      	ldr	r3, [r6, #0]
   d53c6:	f814 1b01 	ldrb.w	r1, [r4], #1
   d53ca:	689b      	ldr	r3, [r3, #8]
   d53cc:	4630      	mov	r0, r6
   d53ce:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d53d0:	e7f6      	b.n	d53c0 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d53d2:	4628      	mov	r0, r5
   d53d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d53d6 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d53d6:	2200      	movs	r2, #0
   d53d8:	7c00      	ldrb	r0, [r0, #16]
   d53da:	f7ff bd83 	b.w	d4ee4 <HAL_I2C_Write_Data>

000d53de <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d53de:	2100      	movs	r1, #0
   d53e0:	7c00      	ldrb	r0, [r0, #16]
   d53e2:	f7ff bd87 	b.w	d4ef4 <HAL_I2C_Available_Data>

000d53e6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d53e6:	2100      	movs	r1, #0
   d53e8:	7c00      	ldrb	r0, [r0, #16]
   d53ea:	f7ff bd8b 	b.w	d4f04 <HAL_I2C_Read_Data>

000d53ee <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d53ee:	2100      	movs	r1, #0
   d53f0:	7c00      	ldrb	r0, [r0, #16]
   d53f2:	f7ff bd8f 	b.w	d4f14 <HAL_I2C_Peek_Data>

000d53f6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d53f6:	2100      	movs	r1, #0
   d53f8:	7c00      	ldrb	r0, [r0, #16]
   d53fa:	f7ff bd93 	b.w	d4f24 <HAL_I2C_Flush_Data>

000d53fe <_ZN7TwoWireD0Ev>:
   d53fe:	b510      	push	{r4, lr}
   d5400:	2114      	movs	r1, #20
   d5402:	4604      	mov	r4, r0
   d5404:	f000 fedb 	bl	d61be <_ZdlPvj>
   d5408:	4620      	mov	r0, r4
   d540a:	bd10      	pop	{r4, pc}

000d540c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d540c:	b510      	push	{r4, lr}
   d540e:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5410:	2300      	movs	r3, #0
   d5412:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5414:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5418:	60a3      	str	r3, [r4, #8]
   d541a:	4b04      	ldr	r3, [pc, #16]	; (d542c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d541c:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d541e:	4608      	mov	r0, r1
   d5420:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d5422:	4611      	mov	r1, r2
   d5424:	f7ff fd8e 	bl	d4f44 <HAL_I2C_Init>
}
   d5428:	4620      	mov	r0, r4
   d542a:	bd10      	pop	{r4, pc}
   d542c:	000d8888 	.word	0x000d8888

000d5430 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d5430:	2300      	movs	r3, #0
   d5432:	461a      	mov	r2, r3
   d5434:	4619      	mov	r1, r3
   d5436:	7c00      	ldrb	r0, [r0, #16]
   d5438:	f7ff bd3c 	b.w	d4eb4 <HAL_I2C_Begin>

000d543c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d543c:	b570      	push	{r4, r5, r6, lr}
   d543e:	460c      	mov	r4, r1
   d5440:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d5442:	2514      	movs	r5, #20
   d5444:	4606      	mov	r6, r0
   d5446:	462a      	mov	r2, r5
   d5448:	2100      	movs	r1, #0
   d544a:	a801      	add	r0, sp, #4
   d544c:	f003 f8f7 	bl	d863e <memset>
   d5450:	7823      	ldrb	r3, [r4, #0]
   d5452:	f88d 3008 	strb.w	r3, [sp, #8]
   d5456:	6863      	ldr	r3, [r4, #4]
   d5458:	9303      	str	r3, [sp, #12]
   d545a:	68e3      	ldr	r3, [r4, #12]
   d545c:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d545e:	2200      	movs	r2, #0
   d5460:	7a23      	ldrb	r3, [r4, #8]
   d5462:	7c30      	ldrb	r0, [r6, #16]
   d5464:	f8ad 5004 	strh.w	r5, [sp, #4]
   d5468:	a901      	add	r1, sp, #4
   d546a:	9305      	str	r3, [sp, #20]
   d546c:	f7ff fd72 	bl	d4f54 <HAL_I2C_Request_Data_Ex>
}
   d5470:	b006      	add	sp, #24
   d5472:	bd70      	pop	{r4, r5, r6, pc}

000d5474 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d5474:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d5476:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d5478:	f88d 1000 	strb.w	r1, [sp]
   d547c:	f04f 0164 	mov.w	r1, #100	; 0x64
   d5480:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d5482:	bf18      	it	ne
   d5484:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d5486:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d5488:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d548a:	f88d 3008 	strb.w	r3, [sp, #8]
   d548e:	f7ff ffd5 	bl	d543c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d5492:	b005      	add	sp, #20
   d5494:	f85d fb04 	ldr.w	pc, [sp], #4

000d5498 <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   d5498:	2301      	movs	r3, #1
   d549a:	f7ff bfeb 	b.w	d5474 <_ZN7TwoWire11requestFromEhjh>

000d549e <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d549e:	2200      	movs	r2, #0
   d54a0:	7c00      	ldrb	r0, [r0, #16]
   d54a2:	f7ff bd0f 	b.w	d4ec4 <HAL_I2C_Begin_Transmission>

000d54a6 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d54a6:	2200      	movs	r2, #0
   d54a8:	7c00      	ldrb	r0, [r0, #16]
   d54aa:	f7ff bd13 	b.w	d4ed4 <HAL_I2C_End_Transmission>

000d54ae <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d54ae:	2101      	movs	r1, #1
   d54b0:	f7ff bff9 	b.w	d54a6 <_ZN7TwoWire15endTransmissionEh>

000d54b4 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d54b4:	2100      	movs	r1, #0
   d54b6:	7c00      	ldrb	r0, [r0, #16]
   d54b8:	f7ff bd3c 	b.w	d4f34 <HAL_I2C_Is_Enabled>

000d54bc <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d54bc:	4770      	bx	lr

000d54be <_ZN9IPAddressD0Ev>:
   d54be:	b510      	push	{r4, lr}
   d54c0:	2118      	movs	r1, #24
   d54c2:	4604      	mov	r4, r0
   d54c4:	f000 fe7b 	bl	d61be <_ZdlPvj>
   d54c8:	4620      	mov	r0, r4
   d54ca:	bd10      	pop	{r4, pc}

000d54cc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d54cc:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d54ce:	7d03      	ldrb	r3, [r0, #20]
   d54d0:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d54d2:	b08d      	sub	sp, #52	; 0x34
   d54d4:	460e      	mov	r6, r1
   d54d6:	f100 0704 	add.w	r7, r0, #4
   d54da:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d54de:	d002      	beq.n	d54e6 <_ZNK9IPAddress7printToER5Print+0x1a>
   d54e0:	f100 0508 	add.w	r5, r0, #8
   d54e4:	e018      	b.n	d5518 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d54e6:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d54e8:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d54ea:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d54ee:	232f      	movs	r3, #47	; 0x2f
   d54f0:	462a      	mov	r2, r5
   d54f2:	200a      	movs	r0, #10
   d54f4:	f7ff fd36 	bl	d4f64 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d54f8:	4628      	mov	r0, r5
   d54fa:	f003 f8d1 	bl	d86a0 <strlen>
   d54fe:	6833      	ldr	r3, [r6, #0]
   d5500:	4602      	mov	r2, r0
   d5502:	68db      	ldr	r3, [r3, #12]
   d5504:	4629      	mov	r1, r5
   d5506:	4630      	mov	r0, r6
   d5508:	4798      	blx	r3
   d550a:	e00f      	b.n	d552c <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d550c:	b124      	cbz	r4, d5518 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d550e:	212e      	movs	r1, #46	; 0x2e
   d5510:	4630      	mov	r0, r6
   d5512:	f000 f9d9 	bl	d58c8 <_ZN5Print5printEc>
   d5516:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5518:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d551c:	220a      	movs	r2, #10
   d551e:	4630      	mov	r0, r6
   d5520:	f000 f9eb 	bl	d58fa <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5524:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5526:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5528:	d1f0      	bne.n	d550c <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d552a:	4620      	mov	r0, r4
    }
    return n;
}
   d552c:	b00d      	add	sp, #52	; 0x34
   d552e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5530 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5530:	b510      	push	{r4, lr}
   d5532:	4b05      	ldr	r3, [pc, #20]	; (d5548 <_ZN9IPAddressC1Ev+0x18>)
   d5534:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5536:	2211      	movs	r2, #17
   d5538:	f840 3b04 	str.w	r3, [r0], #4
   d553c:	2100      	movs	r1, #0
   d553e:	f003 f87e 	bl	d863e <memset>
{
    clear();
}
   d5542:	4620      	mov	r0, r4
   d5544:	bd10      	pop	{r4, pc}
   d5546:	bf00      	nop
   d5548:	000d88b0 	.word	0x000d88b0

000d554c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d554c:	4603      	mov	r3, r0
   d554e:	4a07      	ldr	r2, [pc, #28]	; (d556c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5550:	b510      	push	{r4, lr}
   d5552:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5556:	f101 0210 	add.w	r2, r1, #16
   d555a:	f851 4b04 	ldr.w	r4, [r1], #4
   d555e:	f843 4b04 	str.w	r4, [r3], #4
   d5562:	4291      	cmp	r1, r2
   d5564:	d1f9      	bne.n	d555a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5566:	780a      	ldrb	r2, [r1, #0]
   d5568:	701a      	strb	r2, [r3, #0]
}
   d556a:	bd10      	pop	{r4, pc}
   d556c:	000d88b0 	.word	0x000d88b0

000d5570 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5570:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5572:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5576:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d557a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d557e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d5582:	2304      	movs	r3, #4
   d5584:	6041      	str	r1, [r0, #4]
   d5586:	7503      	strb	r3, [r0, #20]
   d5588:	bd10      	pop	{r4, pc}

000d558a <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d558a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d558c:	780d      	ldrb	r5, [r1, #0]
   d558e:	788b      	ldrb	r3, [r1, #2]
   d5590:	784a      	ldrb	r2, [r1, #1]
   d5592:	78c9      	ldrb	r1, [r1, #3]
   d5594:	9100      	str	r1, [sp, #0]
   d5596:	4629      	mov	r1, r5
   d5598:	f7ff ffea 	bl	d5570 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d559c:	b003      	add	sp, #12
   d559e:	bd30      	pop	{r4, r5, pc}

000d55a0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d55a0:	4b01      	ldr	r3, [pc, #4]	; (d55a8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d55a2:	4a02      	ldr	r2, [pc, #8]	; (d55ac <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d55a4:	601a      	str	r2, [r3, #0]
   d55a6:	4770      	bx	lr
   d55a8:	2003e4e0 	.word	0x2003e4e0
   d55ac:	000d892f 	.word	0x000d892f

000d55b0 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d55b0:	2200      	movs	r2, #0
   d55b2:	4611      	mov	r1, r2
   d55b4:	6840      	ldr	r0, [r0, #4]
   d55b6:	f7ff be09 	b.w	d51cc <network_listening>

000d55ba <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d55ba:	2200      	movs	r2, #0
   d55bc:	4611      	mov	r1, r2
   d55be:	6840      	ldr	r0, [r0, #4]
   d55c0:	f7ff be14 	b.w	d51ec <network_get_listen_timeout>

000d55c4 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d55c4:	2200      	movs	r2, #0
   d55c6:	6840      	ldr	r0, [r0, #4]
   d55c8:	f7ff be08 	b.w	d51dc <network_set_listen_timeout>

000d55cc <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d55cc:	2200      	movs	r2, #0
   d55ce:	f081 0101 	eor.w	r1, r1, #1
   d55d2:	6840      	ldr	r0, [r0, #4]
   d55d4:	f7ff bdf2 	b.w	d51bc <network_listen>

000d55d8 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d55d8:	2300      	movs	r3, #0
   d55da:	461a      	mov	r2, r3
   d55dc:	2101      	movs	r1, #1
   d55de:	6840      	ldr	r0, [r0, #4]
   d55e0:	f7ff bde4 	b.w	d51ac <network_off>

000d55e4 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d55e4:	2300      	movs	r3, #0
   d55e6:	461a      	mov	r2, r3
   d55e8:	4619      	mov	r1, r3
   d55ea:	6840      	ldr	r0, [r0, #4]
   d55ec:	f7ff bdd6 	b.w	d519c <network_on>

000d55f0 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d55f0:	2200      	movs	r2, #0
   d55f2:	4611      	mov	r1, r2
   d55f4:	6840      	ldr	r0, [r0, #4]
   d55f6:	f7ff bdc9 	b.w	d518c <network_ready>

000d55fa <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d55fa:	2200      	movs	r2, #0
   d55fc:	4611      	mov	r1, r2
   d55fe:	6840      	ldr	r0, [r0, #4]
   d5600:	f7ff bdb4 	b.w	d516c <network_connecting>

000d5604 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5604:	2200      	movs	r2, #0
   d5606:	2102      	movs	r1, #2
   d5608:	6840      	ldr	r0, [r0, #4]
   d560a:	f7ff bdb7 	b.w	d517c <network_disconnect>

000d560e <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d560e:	2300      	movs	r3, #0
   d5610:	461a      	mov	r2, r3
   d5612:	6840      	ldr	r0, [r0, #4]
   d5614:	f7ff bda2 	b.w	d515c <network_connect>

000d5618 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5618:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d561a:	4605      	mov	r5, r0
   d561c:	b188      	cbz	r0, d5642 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d561e:	6804      	ldr	r4, [r0, #0]
   d5620:	b14c      	cbz	r4, d5636 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5622:	68a3      	ldr	r3, [r4, #8]
   d5624:	b11b      	cbz	r3, d562e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5626:	2203      	movs	r2, #3
   d5628:	4621      	mov	r1, r4
   d562a:	4620      	mov	r0, r4
   d562c:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d562e:	2110      	movs	r1, #16
   d5630:	4620      	mov	r0, r4
   d5632:	f000 fdc4 	bl	d61be <_ZdlPvj>
   d5636:	4628      	mov	r0, r5
   d5638:	2114      	movs	r1, #20
      }
   d563a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d563e:	f000 bdbe 	b.w	d61be <_ZdlPvj>
   d5642:	bd38      	pop	{r3, r4, r5, pc}

000d5644 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d5644:	b110      	cbz	r0, d564c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d5646:	6803      	ldr	r3, [r0, #0]
   d5648:	685b      	ldr	r3, [r3, #4]
   d564a:	4718      	bx	r3
   d564c:	4770      	bx	lr

000d564e <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d564e:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5650:	6803      	ldr	r3, [r0, #0]
   d5652:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d5654:	b1bb      	cbz	r3, d5686 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d5656:	6858      	ldr	r0, [r3, #4]
   d5658:	f7ff fbb4 	bl	d4dc4 <os_thread_is_current>
   d565c:	b978      	cbnz	r0, d567e <_ZN6ThreadD1Ev+0x30>
   d565e:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d5660:	7c5a      	ldrb	r2, [r3, #17]
   d5662:	b912      	cbnz	r2, d566a <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d5664:	6858      	ldr	r0, [r3, #4]
   d5666:	f7ff fbb5 	bl	d4dd4 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d566a:	6823      	ldr	r3, [r4, #0]
   d566c:	6858      	ldr	r0, [r3, #4]
   d566e:	f7ff fbb9 	bl	d4de4 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5672:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5674:	2300      	movs	r3, #0
   d5676:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5678:	b128      	cbz	r0, d5686 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d567a:	f7ff ffcd 	bl	d5618 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d567e:	6820      	ldr	r0, [r4, #0]
   d5680:	b108      	cbz	r0, d5686 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d5682:	f7ff ffc9 	bl	d5618 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d5686:	4620      	mov	r0, r4
   d5688:	bd10      	pop	{r4, pc}

000d568a <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d568a:	b538      	push	{r3, r4, r5, lr}
   d568c:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d568e:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d5692:	b108      	cbz	r0, d5698 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5694:	f7fe fd05 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5698:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d569c:	b108      	cbz	r0, d56a2 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d569e:	f7ff fbb1 	bl	d4e04 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d56a2:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d56a6:	b135      	cbz	r5, d56b6 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d56a8:	4628      	mov	r0, r5
   d56aa:	f7ff ffd0 	bl	d564e <_ZN6ThreadD1Ev>
   d56ae:	2104      	movs	r1, #4
   d56b0:	4628      	mov	r0, r5
   d56b2:	f000 fd84 	bl	d61be <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d56b6:	6820      	ldr	r0, [r4, #0]
   d56b8:	b108      	cbz	r0, d56be <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d56ba:	f7ff ffc3 	bl	d5644 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d56be:	4620      	mov	r0, r4
   d56c0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d56c4 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d56c4:	b510      	push	{r4, lr}
   d56c6:	4b04      	ldr	r3, [pc, #16]	; (d56d8 <_ZN5spark9MeshClassD1Ev+0x14>)
   d56c8:	4604      	mov	r4, r0
   d56ca:	f840 3b08 	str.w	r3, [r0], #8
   d56ce:	f7ff ffdc 	bl	d568a <_ZN5spark11MeshPublishD1Ev>
   d56d2:	4620      	mov	r0, r4
   d56d4:	bd10      	pop	{r4, pc}
   d56d6:	bf00      	nop
   d56d8:	000d89a4 	.word	0x000d89a4

000d56dc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d56dc:	b538      	push	{r3, r4, r5, lr}
   d56de:	4c0e      	ldr	r4, [pc, #56]	; (d5718 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d56e0:	4b0e      	ldr	r3, [pc, #56]	; (d571c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d56e2:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d56e4:	2500      	movs	r5, #0
   d56e6:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d56e8:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d56ec:	6063      	str	r3, [r4, #4]
   d56ee:	60a5      	str	r5, [r4, #8]
   d56f0:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d56f4:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d56f8:	f7ff fb7c 	bl	d4df4 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d56fc:	4b08      	ldr	r3, [pc, #32]	; (d5720 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d56fe:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5702:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d5706:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5708:	4620      	mov	r0, r4
   d570a:	4a06      	ldr	r2, [pc, #24]	; (d5724 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d570c:	4906      	ldr	r1, [pc, #24]	; (d5728 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d570e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5712:	f000 bd4f 	b.w	d61b4 <__aeabi_atexit>
   d5716:	bf00      	nop
   d5718:	2003e4e4 	.word	0x2003e4e4
   d571c:	000d89d8 	.word	0x000d89d8
   d5720:	000d89a4 	.word	0x000d89a4
   d5724:	2003e428 	.word	0x2003e428
   d5728:	000d56c5 	.word	0x000d56c5

000d572c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d572c:	2300      	movs	r3, #0
   d572e:	461a      	mov	r2, r3
   d5730:	6840      	ldr	r0, [r0, #4]
   d5732:	f7ff bd13 	b.w	d515c <network_connect>

000d5736 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5736:	2200      	movs	r2, #0
   d5738:	2102      	movs	r1, #2
   d573a:	6840      	ldr	r0, [r0, #4]
   d573c:	f7ff bd1e 	b.w	d517c <network_disconnect>

000d5740 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5740:	2200      	movs	r2, #0
   d5742:	4611      	mov	r1, r2
   d5744:	6840      	ldr	r0, [r0, #4]
   d5746:	f7ff bd11 	b.w	d516c <network_connecting>

000d574a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d574a:	2200      	movs	r2, #0
   d574c:	4611      	mov	r1, r2
   d574e:	6840      	ldr	r0, [r0, #4]
   d5750:	f7ff bd1c 	b.w	d518c <network_ready>

000d5754 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5754:	2300      	movs	r3, #0
   d5756:	461a      	mov	r2, r3
   d5758:	4619      	mov	r1, r3
   d575a:	6840      	ldr	r0, [r0, #4]
   d575c:	f7ff bd1e 	b.w	d519c <network_on>

000d5760 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5760:	2300      	movs	r3, #0
   d5762:	461a      	mov	r2, r3
   d5764:	4619      	mov	r1, r3
   d5766:	6840      	ldr	r0, [r0, #4]
   d5768:	f7ff bd20 	b.w	d51ac <network_off>

000d576c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d576c:	2200      	movs	r2, #0
   d576e:	f081 0101 	eor.w	r1, r1, #1
   d5772:	6840      	ldr	r0, [r0, #4]
   d5774:	f7ff bd22 	b.w	d51bc <network_listen>

000d5778 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5778:	2200      	movs	r2, #0
   d577a:	6840      	ldr	r0, [r0, #4]
   d577c:	f7ff bd2e 	b.w	d51dc <network_set_listen_timeout>

000d5780 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5780:	2200      	movs	r2, #0
   d5782:	4611      	mov	r1, r2
   d5784:	6840      	ldr	r0, [r0, #4]
   d5786:	f7ff bd31 	b.w	d51ec <network_get_listen_timeout>

000d578a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d578a:	2200      	movs	r2, #0
   d578c:	4611      	mov	r1, r2
   d578e:	6840      	ldr	r0, [r0, #4]
   d5790:	f7ff bd1c 	b.w	d51cc <network_listening>

000d5794 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5794:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5798:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d579a:	b095      	sub	sp, #84	; 0x54
   d579c:	4616      	mov	r6, r2
   d579e:	460d      	mov	r5, r1
   d57a0:	4607      	mov	r7, r0
    IPAddress addr;
   d57a2:	f7ff fec5 	bl	d5530 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d57a6:	4621      	mov	r1, r4
   d57a8:	2220      	movs	r2, #32
   d57aa:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d57ac:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d57ae:	f002 ff46 	bl	d863e <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d57b2:	2340      	movs	r3, #64	; 0x40
   d57b4:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d57b6:	4621      	mov	r1, r4
   d57b8:	466b      	mov	r3, sp
   d57ba:	aa0c      	add	r2, sp, #48	; 0x30
   d57bc:	4630      	mov	r0, r6
   d57be:	f7ff fbe1 	bl	d4f84 <netdb_getaddrinfo>
    if (!r) {
   d57c2:	4604      	mov	r4, r0
   d57c4:	2800      	cmp	r0, #0
   d57c6:	d144      	bne.n	d5852 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d57c8:	4602      	mov	r2, r0
   d57ca:	2101      	movs	r1, #1
   d57cc:	6868      	ldr	r0, [r5, #4]
   d57ce:	f7ff fcdd 	bl	d518c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d57d2:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d57d4:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d57d6:	4622      	mov	r2, r4
   d57d8:	6868      	ldr	r0, [r5, #4]
   d57da:	f7ff fcd7 	bl	d518c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d57de:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d57e0:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d57e2:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d57e4:	2e00      	cmp	r6, #0
   d57e6:	d034      	beq.n	d5852 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d57e8:	2900      	cmp	r1, #0
   d57ea:	d132      	bne.n	d5852 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d57ec:	6873      	ldr	r3, [r6, #4]
   d57ee:	2b02      	cmp	r3, #2
   d57f0:	d002      	beq.n	d57f8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d57f2:	2b0a      	cmp	r3, #10
   d57f4:	d009      	beq.n	d580a <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d57f6:	e02a      	b.n	d584e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d57f8:	f1b8 0f00 	cmp.w	r8, #0
   d57fc:	d027      	beq.n	d584e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d57fe:	6971      	ldr	r1, [r6, #20]
   d5800:	4638      	mov	r0, r7
   d5802:	3104      	adds	r1, #4
   d5804:	f7ff fec1 	bl	d558a <_ZN9IPAddressaSEPKh>
   d5808:	e020      	b.n	d584c <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d580a:	f1b9 0f00 	cmp.w	r9, #0
   d580e:	d01e      	beq.n	d584e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5810:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5812:	2211      	movs	r2, #17
   d5814:	a801      	add	r0, sp, #4
   d5816:	f002 ff12 	bl	d863e <memset>
                    a.v = 6;
   d581a:	2306      	movs	r3, #6
   d581c:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5820:	ad01      	add	r5, sp, #4
   d5822:	f104 0308 	add.w	r3, r4, #8
   d5826:	3418      	adds	r4, #24
   d5828:	6818      	ldr	r0, [r3, #0]
   d582a:	6859      	ldr	r1, [r3, #4]
   d582c:	462a      	mov	r2, r5
   d582e:	c203      	stmia	r2!, {r0, r1}
   d5830:	3308      	adds	r3, #8
   d5832:	42a3      	cmp	r3, r4
   d5834:	4615      	mov	r5, r2
   d5836:	d1f7      	bne.n	d5828 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5838:	a901      	add	r1, sp, #4
   d583a:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d583c:	ad07      	add	r5, sp, #28
   d583e:	f7ff fe85 	bl	d554c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5842:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5844:	1d3c      	adds	r4, r7, #4
   d5846:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5848:	682b      	ldr	r3, [r5, #0]
   d584a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d584c:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d584e:	69f6      	ldr	r6, [r6, #28]
   d5850:	e7c8      	b.n	d57e4 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5852:	9800      	ldr	r0, [sp, #0]
   d5854:	f7ff fb8e 	bl	d4f74 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5858:	4638      	mov	r0, r7
   d585a:	b015      	add	sp, #84	; 0x54
   d585c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5860 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5860:	4b02      	ldr	r3, [pc, #8]	; (d586c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5862:	4a03      	ldr	r2, [pc, #12]	; (d5870 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5864:	601a      	str	r2, [r3, #0]
   d5866:	2200      	movs	r2, #0
   d5868:	605a      	str	r2, [r3, #4]
   d586a:	4770      	bx	lr
   d586c:	2003e6b8 	.word	0x2003e6b8
   d5870:	000d89d8 	.word	0x000d89d8

000d5874 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5876:	4606      	mov	r6, r0
   d5878:	460d      	mov	r5, r1
   d587a:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d587c:	2400      	movs	r4, #0
  while (size--) {
   d587e:	42bd      	cmp	r5, r7
   d5880:	d00c      	beq.n	d589c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5882:	6833      	ldr	r3, [r6, #0]
   d5884:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5888:	689b      	ldr	r3, [r3, #8]
   d588a:	4630      	mov	r0, r6
   d588c:	4798      	blx	r3
     if (chunk>=0)
   d588e:	2800      	cmp	r0, #0
   d5890:	db01      	blt.n	d5896 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5892:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5894:	e7f3      	b.n	d587e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5896:	2c00      	cmp	r4, #0
   d5898:	bf08      	it	eq
   d589a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d589c:	4620      	mov	r0, r4
   d589e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d58a0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d58a0:	b570      	push	{r4, r5, r6, lr}
   d58a2:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d58a4:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d58a6:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d58a8:	b149      	cbz	r1, d58be <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d58aa:	f002 fef9 	bl	d86a0 <strlen>
   d58ae:	682b      	ldr	r3, [r5, #0]
   d58b0:	4602      	mov	r2, r0
   d58b2:	4621      	mov	r1, r4
   d58b4:	4628      	mov	r0, r5
   d58b6:	68db      	ldr	r3, [r3, #12]
    }
   d58b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d58bc:	4718      	bx	r3
    }
   d58be:	bd70      	pop	{r4, r5, r6, pc}

000d58c0 <_ZN5Print5printEPKc>:
   d58c0:	b508      	push	{r3, lr}
   d58c2:	f7ff ffed 	bl	d58a0 <_ZN5Print5writeEPKc>
   d58c6:	bd08      	pop	{r3, pc}

000d58c8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d58c8:	6803      	ldr	r3, [r0, #0]
   d58ca:	689b      	ldr	r3, [r3, #8]
   d58cc:	4718      	bx	r3

000d58ce <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d58ce:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d58d0:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d58d2:	4605      	mov	r5, r0
  size_t n = print('\r');
   d58d4:	f7ff fff8 	bl	d58c8 <_ZN5Print5printEc>
  n += print('\n');
   d58d8:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d58da:	4604      	mov	r4, r0
  n += print('\n');
   d58dc:	4628      	mov	r0, r5
   d58de:	f7ff fff3 	bl	d58c8 <_ZN5Print5printEc>
  return n;
}
   d58e2:	4420      	add	r0, r4
   d58e4:	bd38      	pop	{r3, r4, r5, pc}

000d58e6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d58e6:	b538      	push	{r3, r4, r5, lr}
   d58e8:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d58ea:	f7ff ffd9 	bl	d58a0 <_ZN5Print5writeEPKc>
   d58ee:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d58f0:	4628      	mov	r0, r5
   d58f2:	f7ff ffec 	bl	d58ce <_ZN5Print7printlnEv>
  return n;
}
   d58f6:	4420      	add	r0, r4
   d58f8:	bd38      	pop	{r3, r4, r5, pc}

000d58fa <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d58fa:	b530      	push	{r4, r5, lr}
   d58fc:	b08b      	sub	sp, #44	; 0x2c
   d58fe:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5900:	2100      	movs	r1, #0
   d5902:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5906:	2a01      	cmp	r2, #1
   d5908:	bf98      	it	ls
   d590a:	220a      	movls	r2, #10
   d590c:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d5910:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d5914:	fb05 3312 	mls	r3, r5, r2, r3
   d5918:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d591c:	2b09      	cmp	r3, #9
   d591e:	bf94      	ite	ls
   d5920:	3330      	addls	r3, #48	; 0x30
   d5922:	3337      	addhi	r3, #55	; 0x37
   d5924:	b2db      	uxtb	r3, r3
   d5926:	4621      	mov	r1, r4
   d5928:	f804 3901 	strb.w	r3, [r4], #-1
   d592c:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d592e:	2d00      	cmp	r5, #0
   d5930:	d1ee      	bne.n	d5910 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d5932:	f7ff ffb5 	bl	d58a0 <_ZN5Print5writeEPKc>
}
   d5936:	b00b      	add	sp, #44	; 0x2c
   d5938:	bd30      	pop	{r4, r5, pc}

000d593a <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d593a:	b40c      	push	{r2, r3}
   d593c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5940:	b087      	sub	sp, #28
   d5942:	af00      	add	r7, sp, #0
   d5944:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d5948:	4605      	mov	r5, r0
   d594a:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d594e:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d5950:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d5952:	4623      	mov	r3, r4
   d5954:	464a      	mov	r2, r9
   d5956:	2114      	movs	r1, #20
   d5958:	1d38      	adds	r0, r7, #4
   d595a:	f7ff fc67 	bl	d522c <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d595e:	2813      	cmp	r0, #19
   d5960:	d805      	bhi.n	d596e <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5962:	1d39      	adds	r1, r7, #4
   d5964:	4628      	mov	r0, r5
   d5966:	f7ff ff9b 	bl	d58a0 <_ZN5Print5writeEPKc>
   d596a:	4604      	mov	r4, r0
   d596c:	e013      	b.n	d5996 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d596e:	f100 0308 	add.w	r3, r0, #8
   d5972:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d5976:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d5978:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d597c:	1c41      	adds	r1, r0, #1
   d597e:	4623      	mov	r3, r4
   d5980:	464a      	mov	r2, r9
   d5982:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d5984:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d5986:	f7ff fc51 	bl	d522c <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d598a:	4669      	mov	r1, sp
   d598c:	4628      	mov	r0, r5
   d598e:	f7ff ff87 	bl	d58a0 <_ZN5Print5writeEPKc>
   d5992:	4604      	mov	r4, r0
   d5994:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d5996:	b11e      	cbz	r6, d59a0 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d5998:	4628      	mov	r0, r5
   d599a:	f7ff ff98 	bl	d58ce <_ZN5Print7printlnEv>
   d599e:	4404      	add	r4, r0
    return n;
}
   d59a0:	4620      	mov	r0, r4
   d59a2:	371c      	adds	r7, #28
   d59a4:	46bd      	mov	sp, r7
   d59a6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d59aa:	b002      	add	sp, #8
   d59ac:	4770      	bx	lr

000d59ae <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d59ae:	b510      	push	{r4, lr}
   d59b0:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d59b2:	f7ff fcb7 	bl	d5324 <_ZNSt14_Function_baseD1Ev>
   d59b6:	4620      	mov	r0, r4
   d59b8:	bd10      	pop	{r4, pc}
	...

000d59bc <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d59bc:	4803      	ldr	r0, [pc, #12]	; (d59cc <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d59be:	4a04      	ldr	r2, [pc, #16]	; (d59d0 <_GLOBAL__sub_I_RGB+0x14>)
   d59c0:	4904      	ldr	r1, [pc, #16]	; (d59d4 <_GLOBAL__sub_I_RGB+0x18>)
   d59c2:	2300      	movs	r3, #0
   d59c4:	6083      	str	r3, [r0, #8]
   d59c6:	f000 bbf5 	b.w	d61b4 <__aeabi_atexit>
   d59ca:	bf00      	nop
   d59cc:	2003e6c0 	.word	0x2003e6c0
   d59d0:	2003e428 	.word	0x2003e428
   d59d4:	000d59af 	.word	0x000d59af

000d59d8 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d59d8:	4770      	bx	lr

000d59da <_ZN8SPIClassD0Ev>:
   d59da:	b510      	push	{r4, lr}
   d59dc:	210c      	movs	r1, #12
   d59de:	4604      	mov	r4, r0
   d59e0:	f000 fbed 	bl	d61be <_ZdlPvj>
   d59e4:	4620      	mov	r0, r4
   d59e6:	bd10      	pop	{r4, pc}

000d59e8 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d59e8:	2100      	movs	r1, #0
   d59ea:	f7ff bb03 	b.w	d4ff4 <HAL_SPI_Acquire>

000d59ee <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d59ee:	2100      	movs	r1, #0
   d59f0:	f7ff bb08 	b.w	d5004 <HAL_SPI_Release>

000d59f4 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d59f4:	b510      	push	{r4, lr}
   d59f6:	4b05      	ldr	r3, [pc, #20]	; (d5a0c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x18>)
   d59f8:	6003      	str	r3, [r0, #0]
   d59fa:	4604      	mov	r4, r0
{
    _spi = spi;
   d59fc:	7101      	strb	r1, [r0, #4]
    HAL_SPI_Init(_spi);
   d59fe:	4608      	mov	r0, r1
   d5a00:	f7ff fad8 	bl	d4fb4 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5a04:	2300      	movs	r3, #0
   d5a06:	60a3      	str	r3, [r4, #8]
}
   d5a08:	4620      	mov	r0, r4
   d5a0a:	bd10      	pop	{r4, pc}
   d5a0c:	000d8a0c 	.word	0x000d8a0c

000d5a10 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d5a10:	b510      	push	{r4, lr}
   d5a12:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d5a14:	7900      	ldrb	r0, [r0, #4]
   d5a16:	f7ff ffe7 	bl	d59e8 <_ZN8SPIClass4lockEv.isra.0>
   d5a1a:	b948      	cbnz	r0, d5a30 <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d5a1c:	7920      	ldrb	r0, [r4, #4]
   d5a1e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d5a22:	f7ff fab7 	bl	d4f94 <HAL_SPI_Begin>
        unlock();
   d5a26:	7920      	ldrb	r0, [r4, #4]
    }
}
   d5a28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d5a2c:	f7ff bfdf 	b.w	d59ee <_ZN8SPIClass6unlockEv.isra.1>
   d5a30:	bd10      	pop	{r4, pc}

000d5a32 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d5a32:	7900      	ldrb	r0, [r0, #4]
   d5a34:	f7ff bfdb 	b.w	d59ee <_ZN8SPIClass6unlockEv.isra.1>

000d5a38 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d5a38:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d5a3a:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d5a3c:	6018      	str	r0, [r3, #0]
   d5a3e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d5a40:	6818      	ldr	r0, [r3, #0]
   d5a42:	4288      	cmp	r0, r1
   d5a44:	b2e5      	uxtb	r5, r4
   d5a46:	d906      	bls.n	d5a56 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d5a48:	3401      	adds	r4, #1
   d5a4a:	2c08      	cmp	r4, #8
   d5a4c:	d002      	beq.n	d5a54 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d5a4e:	0840      	lsrs	r0, r0, #1
   d5a50:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d5a52:	e7f5      	b.n	d5a40 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d5a54:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d5a56:	4b02      	ldr	r3, [pc, #8]	; (d5a60 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d5a58:	5d5b      	ldrb	r3, [r3, r5]
   d5a5a:	7013      	strb	r3, [r2, #0]
   d5a5c:	bd30      	pop	{r4, r5, pc}
   d5a5e:	bf00      	nop
   d5a60:	000d8a14 	.word	0x000d8a14

000d5a64 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d5a64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5a68:	4607      	mov	r7, r0
   d5a6a:	b08f      	sub	sp, #60	; 0x3c
    // Lock peripheral
    CHECK(lock());
   d5a6c:	7900      	ldrb	r0, [r0, #4]
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d5a6e:	460e      	mov	r6, r1
    // Lock peripheral
    CHECK(lock());
   d5a70:	f7ff ffba 	bl	d59e8 <_ZN8SPIClass4lockEv.isra.0>
   d5a74:	2800      	cmp	r0, #0
   d5a76:	db62      	blt.n	d5b3e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
   d5a78:	793c      	ldrb	r4, [r7, #4]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d5a7a:	2214      	movs	r2, #20
   d5a7c:	2100      	movs	r1, #0
   d5a7e:	a809      	add	r0, sp, #36	; 0x24
   d5a80:	f002 fddd 	bl	d863e <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d5a84:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d5a86:	4620      	mov	r0, r4
   d5a88:	2200      	movs	r2, #0
   d5a8a:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d5a8c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
   d5a90:	f7ff faa0 	bl	d4fd4 <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
   d5a94:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d5a98:	b154      	cbz	r4, d5ab0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4c>
   d5a9a:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d5a9e:	b935      	cbnz	r5, d5aae <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4a>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d5aa0:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d5aa4:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d5aa8:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d5aac:	e003      	b.n	d5ab6 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x52>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d5aae:	2400      	movs	r4, #0
   d5ab0:	46a1      	mov	r9, r4
   d5ab2:	46a0      	mov	r8, r4
   d5ab4:	2501      	movs	r5, #1
   d5ab6:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d5ab8:	b105      	cbz	r5, d5abc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x58>
   d5aba:	b9bb      	cbnz	r3, d5aec <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
      return true;

    if (default_ == other.default_ &&
   d5abc:	429d      	cmp	r5, r3
   d5abe:	d10b      	bne.n	d5ad8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
   d5ac0:	68b2      	ldr	r2, [r6, #8]
   d5ac2:	4542      	cmp	r2, r8
   d5ac4:	d108      	bne.n	d5ad8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d5ac6:	f88d 9020 	strb.w	r9, [sp, #32]
   d5aca:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d5ace:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d5ad2:	89b2      	ldrh	r2, [r6, #12]
   d5ad4:	4291      	cmp	r1, r2
   d5ad6:	d009      	beq.n	d5aec <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
   d5ad8:	b153      	cbz	r3, d5af0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d5ada:	2400      	movs	r4, #0
   d5adc:	7938      	ldrb	r0, [r7, #4]
   d5ade:	9401      	str	r4, [sp, #4]
   d5ae0:	9400      	str	r4, [sp, #0]
   d5ae2:	4623      	mov	r3, r4
   d5ae4:	4622      	mov	r2, r4
   d5ae6:	2101      	movs	r1, #1

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d5ae8:	f7ff fa7c 	bl	d4fe4 <HAL_SPI_Set_Settings>
            }
        }
    }

    return 0;
   d5aec:	2000      	movs	r0, #0
   d5aee:	e026      	b.n	d5b3e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
   d5af0:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
   d5af4:	68b1      	ldr	r1, [r6, #8]
   d5af6:	980a      	ldr	r0, [sp, #40]	; 0x28
   d5af8:	ab04      	add	r3, sp, #16
   d5afa:	f10d 020f 	add.w	r2, sp, #15
   d5afe:	f7ff ff9b 	bl	d5a38 <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d5b02:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d5b04:	b105      	cbz	r5, d5b08 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>
   d5b06:	b9b1      	cbnz	r1, d5b36 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d5b08:	42a9      	cmp	r1, r5
   d5b0a:	d008      	beq.n	d5b1e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xba>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d5b0c:	2400      	movs	r4, #0
   d5b0e:	7938      	ldrb	r0, [r7, #4]
   d5b10:	9401      	str	r4, [sp, #4]
   d5b12:	7b74      	ldrb	r4, [r6, #13]
   d5b14:	7b33      	ldrb	r3, [r6, #12]
   d5b16:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d5b1a:	9400      	str	r4, [sp, #0]
   d5b1c:	e7e4      	b.n	d5ae8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
   d5b1e:	68b3      	ldr	r3, [r6, #8]
   d5b20:	4543      	cmp	r3, r8
   d5b22:	d3f3      	bcc.n	d5b0c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d5b24:	f88d 9020 	strb.w	r9, [sp, #32]
   d5b28:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d5b2c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d5b30:	89b3      	ldrh	r3, [r6, #12]
   d5b32:	429a      	cmp	r2, r3
   d5b34:	d1ea      	bne.n	d5b0c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d5b36:	9b04      	ldr	r3, [sp, #16]
   d5b38:	4543      	cmp	r3, r8
   d5b3a:	d1e7      	bne.n	d5b0c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
   d5b3c:	e7d6      	b.n	d5aec <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
            }
        }
    }

    return 0;
}
   d5b3e:	b00f      	add	sp, #60	; 0x3c
   d5b40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5b44 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d5b44:	b538      	push	{r3, r4, r5, lr}
   d5b46:	4604      	mov	r4, r0
    uint16_t result = 0;
    if (!lock())
   d5b48:	7900      	ldrb	r0, [r0, #4]

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d5b4a:	460d      	mov	r5, r1
    uint16_t result = 0;
    if (!lock())
   d5b4c:	f7ff ff4c 	bl	d59e8 <_ZN8SPIClass4lockEv.isra.0>
   d5b50:	b940      	cbnz	r0, d5b64 <_ZN8SPIClass8transferEh+0x20>
    {
        result = HAL_SPI_Send_Receive_Data(_spi, _data);
   d5b52:	4629      	mov	r1, r5
   d5b54:	7920      	ldrb	r0, [r4, #4]
   d5b56:	f7ff fa25 	bl	d4fa4 <HAL_SPI_Send_Receive_Data>
   d5b5a:	4605      	mov	r5, r0
        unlock();
   d5b5c:	7920      	ldrb	r0, [r4, #4]
   d5b5e:	f7ff ff46 	bl	d59ee <_ZN8SPIClass6unlockEv.isra.1>
   d5b62:	e000      	b.n	d5b66 <_ZN8SPIClass8transferEh+0x22>
    return clock;
}

byte SPIClass::transfer(byte _data)
{
    uint16_t result = 0;
   d5b64:	2500      	movs	r5, #0
    {
        result = HAL_SPI_Send_Receive_Data(_spi, _data);
        unlock();
    }
    return static_cast<byte>(result);
}
   d5b66:	b2e8      	uxtb	r0, r5
   d5b68:	bd38      	pop	{r3, r4, r5, pc}

000d5b6a <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d5b6a:	7900      	ldrb	r0, [r0, #4]
   d5b6c:	f7ff ba2a 	b.w	d4fc4 <HAL_SPI_Is_Enabled>

000d5b70 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5b70:	b510      	push	{r4, lr}
   d5b72:	4604      	mov	r4, r0
{
	free(buffer);
   d5b74:	6800      	ldr	r0, [r0, #0]
   d5b76:	f7ff fb49 	bl	d520c <free>
}
   d5b7a:	4620      	mov	r0, r4
   d5b7c:	bd10      	pop	{r4, pc}

000d5b7e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5b7e:	b510      	push	{r4, lr}
   d5b80:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5b82:	6800      	ldr	r0, [r0, #0]
   d5b84:	b108      	cbz	r0, d5b8a <_ZN6String10invalidateEv+0xc>
   d5b86:	f7ff fb41 	bl	d520c <free>
	buffer = NULL;
   d5b8a:	2300      	movs	r3, #0
   d5b8c:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d5b8e:	60a3      	str	r3, [r4, #8]
   d5b90:	6063      	str	r3, [r4, #4]
   d5b92:	bd10      	pop	{r4, pc}

000d5b94 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5b94:	b538      	push	{r3, r4, r5, lr}
   d5b96:	4604      	mov	r4, r0
   d5b98:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5b9a:	6800      	ldr	r0, [r0, #0]
   d5b9c:	3101      	adds	r1, #1
   d5b9e:	f7ff fb3d 	bl	d521c <realloc>
	if (newbuffer) {
   d5ba2:	b110      	cbz	r0, d5baa <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5ba4:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d5ba8:	2001      	movs	r0, #1
	}
	return 0;
}
   d5baa:	bd38      	pop	{r3, r4, r5, pc}

000d5bac <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5bac:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5bae:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5bb0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5bb2:	b113      	cbz	r3, d5bba <_ZN6String7reserveEj+0xe>
   d5bb4:	6843      	ldr	r3, [r0, #4]
   d5bb6:	428b      	cmp	r3, r1
   d5bb8:	d207      	bcs.n	d5bca <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d5bba:	4620      	mov	r0, r4
   d5bbc:	f7ff ffea 	bl	d5b94 <_ZN6String12changeBufferEj>
   d5bc0:	b120      	cbz	r0, d5bcc <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d5bc2:	68a3      	ldr	r3, [r4, #8]
   d5bc4:	b90b      	cbnz	r3, d5bca <_ZN6String7reserveEj+0x1e>
   d5bc6:	6822      	ldr	r2, [r4, #0]
   d5bc8:	7013      	strb	r3, [r2, #0]
   d5bca:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d5bcc:	bd10      	pop	{r4, pc}

000d5bce <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5bce:	b570      	push	{r4, r5, r6, lr}
   d5bd0:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d5bd2:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5bd4:	4604      	mov	r4, r0
   d5bd6:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d5bd8:	f7ff ffe8 	bl	d5bac <_ZN6String7reserveEj>
   d5bdc:	b918      	cbnz	r0, d5be6 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d5bde:	4620      	mov	r0, r4
   d5be0:	f7ff ffcd 	bl	d5b7e <_ZN6String10invalidateEv>
		return *this;
   d5be4:	e009      	b.n	d5bfa <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d5be6:	462a      	mov	r2, r5
   d5be8:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d5bea:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d5bec:	6820      	ldr	r0, [r4, #0]
   d5bee:	f002 fd1b 	bl	d8628 <memcpy>
	buffer[len] = 0;
   d5bf2:	6822      	ldr	r2, [r4, #0]
   d5bf4:	68a3      	ldr	r3, [r4, #8]
   d5bf6:	2100      	movs	r1, #0
   d5bf8:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d5bfa:	4620      	mov	r0, r4
   d5bfc:	bd70      	pop	{r4, r5, r6, pc}

000d5bfe <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5bfe:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5c00:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5c02:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5c04:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5c06:	6043      	str	r3, [r0, #4]
	len = 0;
   d5c08:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5c0a:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d5c0c:	460d      	mov	r5, r1
   d5c0e:	b139      	cbz	r1, d5c20 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d5c10:	4608      	mov	r0, r1
   d5c12:	f002 fd45 	bl	d86a0 <strlen>
   d5c16:	4629      	mov	r1, r5
   d5c18:	4602      	mov	r2, r0
   d5c1a:	4620      	mov	r0, r4
   d5c1c:	f7ff ffd7 	bl	d5bce <_ZN6String4copyEPKcj>
}
   d5c20:	4620      	mov	r0, r4
   d5c22:	bd38      	pop	{r3, r4, r5, pc}

000d5c24 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d5c24:	b538      	push	{r3, r4, r5, lr}
   d5c26:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d5c28:	460c      	mov	r4, r1
   d5c2a:	b141      	cbz	r1, d5c3e <_ZN6StringaSEPKc+0x1a>
   d5c2c:	4608      	mov	r0, r1
   d5c2e:	f002 fd37 	bl	d86a0 <strlen>
   d5c32:	4621      	mov	r1, r4
   d5c34:	4602      	mov	r2, r0
   d5c36:	4628      	mov	r0, r5
   d5c38:	f7ff ffc9 	bl	d5bce <_ZN6String4copyEPKcj>
   d5c3c:	e001      	b.n	d5c42 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d5c3e:	f7ff ff9e 	bl	d5b7e <_ZN6String10invalidateEv>

	return *this;
}
   d5c42:	4628      	mov	r0, r5
   d5c44:	bd38      	pop	{r3, r4, r5, pc}

000d5c46 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d5c46:	b510      	push	{r4, lr}
   d5c48:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d5c4a:	6800      	ldr	r0, [r0, #0]
   d5c4c:	b118      	cbz	r0, d5c56 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d5c4e:	f7ff fadd 	bl	d520c <free>
            wakeupSource_ = nullptr;
   d5c52:	2300      	movs	r3, #0
   d5c54:	6023      	str	r3, [r4, #0]
   d5c56:	bd10      	pop	{r4, pc}

000d5c58 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5c58:	b510      	push	{r4, lr}
   d5c5a:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d5c5c:	f7ff fff3 	bl	d5c46 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5c60:	4620      	mov	r0, r4
   d5c62:	bd10      	pop	{r4, pc}

000d5c64 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5c64:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5c66:	4c09      	ldr	r4, [pc, #36]	; (d5c8c <_GLOBAL__sub_I_System+0x28>)
   d5c68:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5c6a:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5c6e:	6020      	str	r0, [r4, #0]
   d5c70:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5c72:	71a0      	strb	r0, [r4, #6]
   d5c74:	8120      	strh	r0, [r4, #8]
   d5c76:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5c78:	f7ff fa44 	bl	d5104 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5c7c:	4620      	mov	r0, r4
   d5c7e:	4a04      	ldr	r2, [pc, #16]	; (d5c90 <_GLOBAL__sub_I_System+0x2c>)
   d5c80:	4904      	ldr	r1, [pc, #16]	; (d5c94 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5c82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5c86:	f000 ba95 	b.w	d61b4 <__aeabi_atexit>
   d5c8a:	bf00      	nop
   d5c8c:	2003e6d0 	.word	0x2003e6d0
   d5c90:	2003e428 	.word	0x2003e428
   d5c94:	000d5c59 	.word	0x000d5c59

000d5c98 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5c98:	4b02      	ldr	r3, [pc, #8]	; (d5ca4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5c9a:	681a      	ldr	r2, [r3, #0]
   d5c9c:	4b02      	ldr	r3, [pc, #8]	; (d5ca8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5c9e:	601a      	str	r2, [r3, #0]
   d5ca0:	4770      	bx	lr
   d5ca2:	bf00      	nop
   d5ca4:	2003e3bc 	.word	0x2003e3bc
   d5ca8:	2003e6dc 	.word	0x2003e6dc

000d5cac <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5cac:	4770      	bx	lr

000d5cae <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5cae:	7441      	strb	r1, [r0, #17]
   d5cb0:	4770      	bx	lr

000d5cb2 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d5cb2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d5cb4:	7c00      	ldrb	r0, [r0, #16]
   d5cb6:	f7ff f9e5 	bl	d5084 <HAL_USART_Available_Data_For_Write>
}
   d5cba:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5cbe:	bd08      	pop	{r3, pc}

000d5cc0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5cc0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d5cc2:	7c00      	ldrb	r0, [r0, #16]
   d5cc4:	f7ff f9b6 	bl	d5034 <HAL_USART_Available_Data>
}
   d5cc8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5ccc:	bd08      	pop	{r3, pc}

000d5cce <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5cce:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5cd0:	7c00      	ldrb	r0, [r0, #16]
   d5cd2:	f7ff f9bf 	bl	d5054 <HAL_USART_Peek_Data>
}
   d5cd6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5cda:	bf28      	it	cs
   d5cdc:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5ce0:	bd08      	pop	{r3, pc}

000d5ce2 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5ce2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d5ce4:	7c00      	ldrb	r0, [r0, #16]
   d5ce6:	f7ff f9ad 	bl	d5044 <HAL_USART_Read_Data>
}
   d5cea:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5cee:	bf28      	it	cs
   d5cf0:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5cf4:	bd08      	pop	{r3, pc}

000d5cf6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5cf6:	7c00      	ldrb	r0, [r0, #16]
   d5cf8:	f7ff b9b4 	b.w	d5064 <HAL_USART_Flush_Data>

000d5cfc <_ZN11USARTSerialD0Ev>:
   d5cfc:	b510      	push	{r4, lr}
   d5cfe:	2114      	movs	r1, #20
   d5d00:	4604      	mov	r4, r0
   d5d02:	f000 fa5c 	bl	d61be <_ZdlPvj>
   d5d06:	4620      	mov	r0, r4
   d5d08:	bd10      	pop	{r4, pc}

000d5d0a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5d0a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5d0c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5d0e:	4604      	mov	r4, r0
   d5d10:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5d12:	b925      	cbnz	r5, d5d1e <_ZN11USARTSerial5writeEh+0x14>
   d5d14:	7c00      	ldrb	r0, [r0, #16]
   d5d16:	f7ff f9b5 	bl	d5084 <HAL_USART_Available_Data_For_Write>
   d5d1a:	2800      	cmp	r0, #0
   d5d1c:	dd05      	ble.n	d5d2a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5d1e:	4631      	mov	r1, r6
   d5d20:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5d22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5d26:	f7ff b97d 	b.w	d5024 <HAL_USART_Write_Data>
  }
  return 0;
}
   d5d2a:	4628      	mov	r0, r5
   d5d2c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5d30 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5d30:	b510      	push	{r4, lr}
   d5d32:	4604      	mov	r4, r0
   d5d34:	4608      	mov	r0, r1
   d5d36:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5d38:	2200      	movs	r2, #0
   d5d3a:	6062      	str	r2, [r4, #4]
   d5d3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5d40:	60a2      	str	r2, [r4, #8]
   d5d42:	4a05      	ldr	r2, [pc, #20]	; (d5d58 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5d44:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5d46:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5d48:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5d4a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5d4c:	461a      	mov	r2, r3
   d5d4e:	f7ff f961 	bl	d5014 <HAL_USART_Init>
}
   d5d52:	4620      	mov	r0, r4
   d5d54:	bd10      	pop	{r4, pc}
   d5d56:	bf00      	nop
   d5d58:	000d8a50 	.word	0x000d8a50

000d5d5c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d5d5c:	7c00      	ldrb	r0, [r0, #16]
   d5d5e:	f7ff b989 	b.w	d5074 <HAL_USART_Is_Enabled>
	...

000d5d64 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   d5d66:	4c19      	ldr	r4, [pc, #100]	; (d5dcc <_Z22__fetch_global_Serial1v+0x68>)
   d5d68:	6825      	ldr	r5, [r4, #0]
   d5d6a:	b94d      	cbnz	r5, d5d80 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
   d5d6c:	2084      	movs	r0, #132	; 0x84
   d5d6e:	f7fe f994 	bl	d409a <_Znwj>
   d5d72:	4606      	mov	r6, r0
   d5d74:	b118      	cbz	r0, d5d7e <_Z22__fetch_global_Serial1v+0x1a>
   d5d76:	2284      	movs	r2, #132	; 0x84
   d5d78:	4629      	mov	r1, r5
   d5d7a:	f002 fc60 	bl	d863e <memset>
   d5d7e:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
   d5d80:	4d13      	ldr	r5, [pc, #76]	; (d5dd0 <_Z22__fetch_global_Serial1v+0x6c>)
   d5d82:	682e      	ldr	r6, [r5, #0]
   d5d84:	b94e      	cbnz	r6, d5d9a <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
   d5d86:	2084      	movs	r0, #132	; 0x84
   d5d88:	f7fe f987 	bl	d409a <_Znwj>
   d5d8c:	4607      	mov	r7, r0
   d5d8e:	b118      	cbz	r0, d5d98 <_Z22__fetch_global_Serial1v+0x34>
   d5d90:	2284      	movs	r2, #132	; 0x84
   d5d92:	4631      	mov	r1, r6
   d5d94:	f002 fc53 	bl	d863e <memset>
   d5d98:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d5d9a:	4f0e      	ldr	r7, [pc, #56]	; (d5dd4 <_Z22__fetch_global_Serial1v+0x70>)
   d5d9c:	6839      	ldr	r1, [r7, #0]
   d5d9e:	f011 0601 	ands.w	r6, r1, #1
   d5da2:	d111      	bne.n	d5dc8 <_Z22__fetch_global_Serial1v+0x64>
   d5da4:	4638      	mov	r0, r7
   d5da6:	f7fe f97e 	bl	d40a6 <__cxa_guard_acquire>
   d5daa:	b168      	cbz	r0, d5dc8 <_Z22__fetch_global_Serial1v+0x64>
   d5dac:	6822      	ldr	r2, [r4, #0]
   d5dae:	682b      	ldr	r3, [r5, #0]
   d5db0:	4809      	ldr	r0, [pc, #36]	; (d5dd8 <_Z22__fetch_global_Serial1v+0x74>)
   d5db2:	4631      	mov	r1, r6
   d5db4:	f7ff ffbc 	bl	d5d30 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5db8:	4638      	mov	r0, r7
   d5dba:	f7fe f979 	bl	d40b0 <__cxa_guard_release>
   d5dbe:	4a07      	ldr	r2, [pc, #28]	; (d5ddc <_Z22__fetch_global_Serial1v+0x78>)
   d5dc0:	4907      	ldr	r1, [pc, #28]	; (d5de0 <_Z22__fetch_global_Serial1v+0x7c>)
   d5dc2:	4805      	ldr	r0, [pc, #20]	; (d5dd8 <_Z22__fetch_global_Serial1v+0x74>)
   d5dc4:	f000 f9f6 	bl	d61b4 <__aeabi_atexit>
#endif
	return serial1;
}
   d5dc8:	4803      	ldr	r0, [pc, #12]	; (d5dd8 <_Z22__fetch_global_Serial1v+0x74>)
   d5dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d5dcc:	2003e6fc 	.word	0x2003e6fc
   d5dd0:	2003e6f4 	.word	0x2003e6f4
   d5dd4:	2003e6f8 	.word	0x2003e6f8
   d5dd8:	2003e6e0 	.word	0x2003e6e0
   d5ddc:	2003e428 	.word	0x2003e428
   d5de0:	000d5cad 	.word	0x000d5cad

000d5de4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5de4:	7441      	strb	r1, [r0, #17]
   d5de6:	4770      	bx	lr

000d5de8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5de8:	4770      	bx	lr

000d5dea <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d5dea:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5dec:	2100      	movs	r1, #0
   d5dee:	7c00      	ldrb	r0, [r0, #16]
   d5df0:	f7ff f970 	bl	d50d4 <HAL_USB_USART_Receive_Data>
}
   d5df4:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5df8:	bf28      	it	cs
   d5dfa:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5dfe:	bd08      	pop	{r3, pc}

000d5e00 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d5e00:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5e02:	2101      	movs	r1, #1
   d5e04:	7c00      	ldrb	r0, [r0, #16]
   d5e06:	f7ff f965 	bl	d50d4 <HAL_USB_USART_Receive_Data>
}
   d5e0a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5e0e:	bf28      	it	cs
   d5e10:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5e14:	bd08      	pop	{r3, pc}

000d5e16 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d5e16:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5e18:	7c00      	ldrb	r0, [r0, #16]
   d5e1a:	f7ff f953 	bl	d50c4 <HAL_USB_USART_Available_Data_For_Write>
}
   d5e1e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5e22:	bd08      	pop	{r3, pc}

000d5e24 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d5e24:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5e26:	7c00      	ldrb	r0, [r0, #16]
   d5e28:	f7ff f944 	bl	d50b4 <HAL_USB_USART_Available_Data>
}
   d5e2c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5e30:	bd08      	pop	{r3, pc}

000d5e32 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5e32:	7c00      	ldrb	r0, [r0, #16]
   d5e34:	f7ff b95e 	b.w	d50f4 <HAL_USB_USART_Flush_Data>

000d5e38 <_ZN9USBSerialD0Ev>:
   d5e38:	b510      	push	{r4, lr}
   d5e3a:	2114      	movs	r1, #20
   d5e3c:	4604      	mov	r4, r0
   d5e3e:	f000 f9be 	bl	d61be <_ZdlPvj>
   d5e42:	4620      	mov	r0, r4
   d5e44:	bd10      	pop	{r4, pc}

000d5e46 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5e46:	b538      	push	{r3, r4, r5, lr}
   d5e48:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5e4a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5e4c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5e4e:	f7ff f939 	bl	d50c4 <HAL_USB_USART_Available_Data_For_Write>
   d5e52:	2800      	cmp	r0, #0
   d5e54:	dc01      	bgt.n	d5e5a <_ZN9USBSerial5writeEh+0x14>
   d5e56:	7c60      	ldrb	r0, [r4, #17]
   d5e58:	b128      	cbz	r0, d5e66 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5e5a:	4629      	mov	r1, r5
   d5e5c:	7c20      	ldrb	r0, [r4, #16]
   d5e5e:	f7ff f941 	bl	d50e4 <HAL_USB_USART_Send_Data>
   d5e62:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d5e66:	bd38      	pop	{r3, r4, r5, pc}

000d5e68 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5e68:	b510      	push	{r4, lr}
   d5e6a:	4604      	mov	r4, r0
   d5e6c:	2300      	movs	r3, #0
   d5e6e:	6063      	str	r3, [r4, #4]
   d5e70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5e74:	60a3      	str	r3, [r4, #8]
   d5e76:	4b05      	ldr	r3, [pc, #20]	; (d5e8c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5e78:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5e7a:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5e7c:	4608      	mov	r0, r1
{
  _serial = serial;
   d5e7e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5e80:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d5e82:	4611      	mov	r1, r2
   d5e84:	f7ff f906 	bl	d5094 <HAL_USB_USART_Init>
}
   d5e88:	4620      	mov	r0, r4
   d5e8a:	bd10      	pop	{r4, pc}
   d5e8c:	000d8a80 	.word	0x000d8a80

000d5e90 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5e90:	2200      	movs	r2, #0
   d5e92:	7c00      	ldrb	r0, [r0, #16]
   d5e94:	f7ff b906 	b.w	d50a4 <HAL_USB_USART_Begin>

000d5e98 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5e98:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5e9a:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5e9c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5e9e:	2100      	movs	r1, #0
   d5ea0:	f002 fbcd 	bl	d863e <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5ea4:	4620      	mov	r0, r4
   d5ea6:	bd10      	pop	{r4, pc}

000d5ea8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5ea8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5eaa:	4d0e      	ldr	r5, [pc, #56]	; (d5ee4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5eac:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5eae:	a801      	add	r0, sp, #4
   d5eb0:	f7ff fff2 	bl	d5e98 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5eb4:	6829      	ldr	r1, [r5, #0]
   d5eb6:	f011 0401 	ands.w	r4, r1, #1
   d5eba:	d110      	bne.n	d5ede <_Z16_fetch_usbserialv+0x36>
   d5ebc:	4628      	mov	r0, r5
   d5ebe:	f7fe f8f2 	bl	d40a6 <__cxa_guard_acquire>
   d5ec2:	b160      	cbz	r0, d5ede <_Z16_fetch_usbserialv+0x36>
   d5ec4:	aa01      	add	r2, sp, #4
   d5ec6:	4621      	mov	r1, r4
   d5ec8:	4807      	ldr	r0, [pc, #28]	; (d5ee8 <_Z16_fetch_usbserialv+0x40>)
   d5eca:	f7ff ffcd 	bl	d5e68 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5ece:	4628      	mov	r0, r5
   d5ed0:	f7fe f8ee 	bl	d40b0 <__cxa_guard_release>
   d5ed4:	4a05      	ldr	r2, [pc, #20]	; (d5eec <_Z16_fetch_usbserialv+0x44>)
   d5ed6:	4906      	ldr	r1, [pc, #24]	; (d5ef0 <_Z16_fetch_usbserialv+0x48>)
   d5ed8:	4803      	ldr	r0, [pc, #12]	; (d5ee8 <_Z16_fetch_usbserialv+0x40>)
   d5eda:	f000 f96b 	bl	d61b4 <__aeabi_atexit>
	return _usbserial;
}
   d5ede:	4802      	ldr	r0, [pc, #8]	; (d5ee8 <_Z16_fetch_usbserialv+0x40>)
   d5ee0:	b007      	add	sp, #28
   d5ee2:	bd30      	pop	{r4, r5, pc}
   d5ee4:	2003e700 	.word	0x2003e700
   d5ee8:	2003e704 	.word	0x2003e704
   d5eec:	2003e428 	.word	0x2003e428
   d5ef0:	000d5de9 	.word	0x000d5de9

000d5ef4 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5ef4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5ef6:	4b0c      	ldr	r3, [pc, #48]	; (d5f28 <serialEventRun+0x34>)
   d5ef8:	b133      	cbz	r3, d5f08 <serialEventRun+0x14>
   d5efa:	f7ff ffd5 	bl	d5ea8 <_Z16_fetch_usbserialv>
   d5efe:	6803      	ldr	r3, [r0, #0]
   d5f00:	691b      	ldr	r3, [r3, #16]
   d5f02:	4798      	blx	r3
   d5f04:	2800      	cmp	r0, #0
   d5f06:	dc09      	bgt.n	d5f1c <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d5f08:	4b08      	ldr	r3, [pc, #32]	; (d5f2c <serialEventRun+0x38>)
   d5f0a:	b163      	cbz	r3, d5f26 <serialEventRun+0x32>
   d5f0c:	f7ff ff2a 	bl	d5d64 <_Z22__fetch_global_Serial1v>
   d5f10:	6803      	ldr	r3, [r0, #0]
   d5f12:	691b      	ldr	r3, [r3, #16]
   d5f14:	4798      	blx	r3
   d5f16:	2800      	cmp	r0, #0
   d5f18:	dc03      	bgt.n	d5f22 <serialEventRun+0x2e>
   d5f1a:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5f1c:	f3af 8000 	nop.w
   d5f20:	e7f2      	b.n	d5f08 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d5f22:	f3af 8000 	nop.w
   d5f26:	bd08      	pop	{r3, pc}
	...

000d5f30 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5f30:	b508      	push	{r3, lr}
	serialEventRun();
   d5f32:	f7ff ffdf 	bl	d5ef4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5f36:	f7fe ff75 	bl	d4e24 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5f3a:	4b01      	ldr	r3, [pc, #4]	; (d5f40 <_post_loop+0x10>)
   d5f3c:	6018      	str	r0, [r3, #0]
   d5f3e:	bd08      	pop	{r3, pc}
   d5f40:	2003e720 	.word	0x2003e720

000d5f44 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5f44:	4802      	ldr	r0, [pc, #8]	; (d5f50 <_Z33system_initialize_user_backup_ramv+0xc>)
   d5f46:	4a03      	ldr	r2, [pc, #12]	; (d5f54 <_Z33system_initialize_user_backup_ramv+0x10>)
   d5f48:	4903      	ldr	r1, [pc, #12]	; (d5f58 <_Z33system_initialize_user_backup_ramv+0x14>)
   d5f4a:	1a12      	subs	r2, r2, r0
   d5f4c:	f002 bb6c 	b.w	d8628 <memcpy>
   d5f50:	2003f400 	.word	0x2003f400
   d5f54:	2003f404 	.word	0x2003f404
   d5f58:	000d8b78 	.word	0x000d8b78

000d5f5c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5f5c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5f5e:	2300      	movs	r3, #0
   d5f60:	9300      	str	r3, [sp, #0]
   d5f62:	461a      	mov	r2, r3
   d5f64:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5f68:	f7ff f8e6 	bl	d5138 <system_ctrl_set_result>
}
   d5f6c:	b003      	add	sp, #12
   d5f6e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5f74 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5f74:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5f76:	8843      	ldrh	r3, [r0, #2]
   d5f78:	2b0a      	cmp	r3, #10
   d5f7a:	d008      	beq.n	d5f8e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5f7c:	2b50      	cmp	r3, #80	; 0x50
   d5f7e:	d109      	bne.n	d5f94 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5f80:	4b09      	ldr	r3, [pc, #36]	; (d5fa8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5f82:	681b      	ldr	r3, [r3, #0]
   d5f84:	b13b      	cbz	r3, d5f96 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d5f86:	b003      	add	sp, #12
   d5f88:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5f8c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d5f8e:	f7ff ffe5 	bl	d5f5c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d5f92:	e006      	b.n	d5fa2 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5f94:	2300      	movs	r3, #0
   d5f96:	9300      	str	r3, [sp, #0]
   d5f98:	461a      	mov	r2, r3
   d5f9a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5f9e:	f7ff f8cb 	bl	d5138 <system_ctrl_set_result>
        break;
    }
}
   d5fa2:	b003      	add	sp, #12
   d5fa4:	f85d fb04 	ldr.w	pc, [sp], #4
   d5fa8:	2003e718 	.word	0x2003e718

000d5fac <module_user_init_hook>:

void module_user_init_hook()
{
   d5fac:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5fae:	4c10      	ldr	r4, [pc, #64]	; (d5ff0 <module_user_init_hook+0x44>)
   d5fb0:	4d10      	ldr	r5, [pc, #64]	; (d5ff4 <module_user_init_hook+0x48>)
   d5fb2:	6823      	ldr	r3, [r4, #0]
   d5fb4:	42ab      	cmp	r3, r5
   d5fb6:	4b10      	ldr	r3, [pc, #64]	; (d5ff8 <module_user_init_hook+0x4c>)
   d5fb8:	bf0c      	ite	eq
   d5fba:	2201      	moveq	r2, #1
   d5fbc:	2200      	movne	r2, #0
   d5fbe:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5fc0:	d002      	beq.n	d5fc8 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d5fc2:	f7ff ffbf 	bl	d5f44 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d5fc6:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5fc8:	f7fe ff24 	bl	d4e14 <HAL_RNG_GetRandomNumber>
   d5fcc:	4604      	mov	r4, r0
    srand(seed);
   d5fce:	f002 fb3f 	bl	d8650 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5fd2:	4b0a      	ldr	r3, [pc, #40]	; (d5ffc <module_user_init_hook+0x50>)
   d5fd4:	b113      	cbz	r3, d5fdc <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d5fd6:	4620      	mov	r0, r4
   d5fd8:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5fdc:	2100      	movs	r1, #0
   d5fde:	4807      	ldr	r0, [pc, #28]	; (d5ffc <module_user_init_hook+0x50>)
   d5fe0:	f7ff f8b4 	bl	d514c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5fe4:	2100      	movs	r1, #0
   d5fe6:	4806      	ldr	r0, [pc, #24]	; (d6000 <module_user_init_hook+0x54>)
}
   d5fe8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5fec:	f7ff b89a 	b.w	d5124 <system_ctrl_set_app_request_handler>
   d5ff0:	2003f400 	.word	0x2003f400
   d5ff4:	9a271c1e 	.word	0x9a271c1e
   d5ff8:	2003e71c 	.word	0x2003e71c
   d5ffc:	00000000 	.word	0x00000000
   d6000:	000d5f75 	.word	0x000d5f75

000d6004 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d6004:	b510      	push	{r4, lr}
   d6006:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d6008:	f000 f8b4 	bl	d6174 <_ZN8particle7globals11instanceSpiEv>
   d600c:	f7ff fdad 	bl	d5b6a <_ZN8SPIClass9isEnabledEv>
   d6010:	b128      	cbz	r0, d601e <pinAvailable+0x1a>
   d6012:	f1a4 030b 	sub.w	r3, r4, #11
   d6016:	2b02      	cmp	r3, #2
   d6018:	d801      	bhi.n	d601e <pinAvailable+0x1a>
  {
    return 0; // 'pin' is used
   d601a:	2000      	movs	r0, #0
   d601c:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d601e:	f000 f883 	bl	d6128 <_Z19__fetch_global_Wirev>
   d6022:	f7ff fa47 	bl	d54b4 <_ZN7TwoWire9isEnabledEv>
   d6026:	b108      	cbz	r0, d602c <pinAvailable+0x28>
   d6028:	2c01      	cmp	r4, #1
   d602a:	d9f6      	bls.n	d601a <pinAvailable+0x16>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d602c:	f7ff fe9a 	bl	d5d64 <_Z22__fetch_global_Serial1v>
   d6030:	f7ff fe94 	bl	d5d5c <_ZN11USARTSerial9isEnabledEv>
   d6034:	b118      	cbz	r0, d603e <pinAvailable+0x3a>
   d6036:	f1a4 0309 	sub.w	r3, r4, #9
   d603a:	2b01      	cmp	r3, #1
   d603c:	d9ed      	bls.n	d601a <pinAvailable+0x16>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d603e:	2c23      	cmp	r4, #35	; 0x23
   d6040:	bf8c      	ite	hi
   d6042:	2000      	movhi	r0, #0
   d6044:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d6046:	bd10      	pop	{r4, pc}

000d6048 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6048:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d604a:	b538      	push	{r3, r4, r5, lr}
   d604c:	4604      	mov	r4, r0
   d604e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6050:	d80a      	bhi.n	d6068 <pinMode+0x20>
   d6052:	29ff      	cmp	r1, #255	; 0xff
   d6054:	d008      	beq.n	d6068 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6056:	f7ff ffd5 	bl	d6004 <pinAvailable>
   d605a:	b128      	cbz	r0, d6068 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d605c:	4629      	mov	r1, r5
   d605e:	4620      	mov	r0, r4
}
   d6060:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6064:	f7fe bef6 	b.w	d4e54 <HAL_Pin_Mode>
   d6068:	bd38      	pop	{r3, r4, r5, pc}

000d606a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d606a:	b538      	push	{r3, r4, r5, lr}
   d606c:	4604      	mov	r4, r0
   d606e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6070:	f7fe fef8 	bl	d4e64 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6074:	28ff      	cmp	r0, #255	; 0xff
   d6076:	d010      	beq.n	d609a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d6078:	2806      	cmp	r0, #6
   d607a:	d804      	bhi.n	d6086 <digitalWrite+0x1c>
   d607c:	234d      	movs	r3, #77	; 0x4d
   d607e:	fa23 f000 	lsr.w	r0, r3, r0
   d6082:	07c3      	lsls	r3, r0, #31
   d6084:	d409      	bmi.n	d609a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d6086:	4620      	mov	r0, r4
   d6088:	f7ff ffbc 	bl	d6004 <pinAvailable>
   d608c:	b128      	cbz	r0, d609a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d608e:	4629      	mov	r1, r5
   d6090:	4620      	mov	r0, r4
}
   d6092:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6096:	f7fe beed 	b.w	d4e74 <HAL_GPIO_Write>
   d609a:	bd38      	pop	{r3, r4, r5, pc}

000d609c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d609c:	b510      	push	{r4, lr}
   d609e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d60a0:	f7fe fee0 	bl	d4e64 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d60a4:	3804      	subs	r0, #4
   d60a6:	b2c0      	uxtb	r0, r0
   d60a8:	2801      	cmp	r0, #1
   d60aa:	d908      	bls.n	d60be <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d60ac:	4620      	mov	r0, r4
   d60ae:	f7ff ffa9 	bl	d6004 <pinAvailable>
   d60b2:	b120      	cbz	r0, d60be <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d60b4:	4620      	mov	r0, r4
}
   d60b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d60ba:	f7fe bee3 	b.w	d4e84 <HAL_GPIO_Read>
}
   d60be:	2000      	movs	r0, #0
   d60c0:	bd10      	pop	{r4, pc}

000d60c2 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d60c2:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d60c4:	b510      	push	{r4, lr}
   d60c6:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d60c8:	bf9c      	itt	ls
   d60ca:	340e      	addls	r4, #14
   d60cc:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d60ce:	4620      	mov	r0, r4
   d60d0:	f7ff ff98 	bl	d6004 <pinAvailable>
   d60d4:	b150      	cbz	r0, d60ec <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d60d6:	2103      	movs	r1, #3
   d60d8:	4620      	mov	r0, r4
   d60da:	f7fe feb3 	bl	d4e44 <HAL_Validate_Pin_Function>
   d60de:	2803      	cmp	r0, #3
   d60e0:	d104      	bne.n	d60ec <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d60e2:	4620      	mov	r0, r4
}
   d60e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d60e8:	f7fe bed4 	b.w	d4e94 <HAL_ADC_Read>
}
   d60ec:	2000      	movs	r0, #0
   d60ee:	bd10      	pop	{r4, pc}

000d60f0 <pulseIn>:
 */
uint32_t pulseIn(pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return HAL_Pulse_In(pin, value);
   d60f0:	f7fe bed8 	b.w	d4ea4 <HAL_Pulse_In>

000d60f4 <_Z17acquireWireBufferv>:
   d60f4:	b570      	push	{r4, r5, r6, lr}
   d60f6:	4604      	mov	r4, r0
   d60f8:	2514      	movs	r5, #20
   d60fa:	462a      	mov	r2, r5
   d60fc:	4e09      	ldr	r6, [pc, #36]	; (d6124 <_Z17acquireWireBufferv+0x30>)
   d60fe:	2100      	movs	r1, #0
   d6100:	f002 fa9d 	bl	d863e <memset>
   d6104:	8025      	strh	r5, [r4, #0]
   d6106:	2520      	movs	r5, #32
   d6108:	4631      	mov	r1, r6
   d610a:	60a5      	str	r5, [r4, #8]
   d610c:	6125      	str	r5, [r4, #16]
   d610e:	4628      	mov	r0, r5
   d6110:	f000 f86f 	bl	d61f2 <_ZnajRKSt9nothrow_t>
   d6114:	4631      	mov	r1, r6
   d6116:	6060      	str	r0, [r4, #4]
   d6118:	4628      	mov	r0, r5
   d611a:	f000 f86a 	bl	d61f2 <_ZnajRKSt9nothrow_t>
   d611e:	60e0      	str	r0, [r4, #12]
   d6120:	4620      	mov	r0, r4
   d6122:	bd70      	pop	{r4, r5, r6, pc}
   d6124:	000d8aa8 	.word	0x000d8aa8

000d6128 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d6128:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d612a:	4d0e      	ldr	r5, [pc, #56]	; (d6164 <_Z19__fetch_global_Wirev+0x3c>)
   d612c:	6829      	ldr	r1, [r5, #0]
   d612e:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d6132:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6134:	d113      	bne.n	d615e <_Z19__fetch_global_Wirev+0x36>
   d6136:	4628      	mov	r0, r5
   d6138:	f7fd ffb5 	bl	d40a6 <__cxa_guard_acquire>
   d613c:	b178      	cbz	r0, d615e <_Z19__fetch_global_Wirev+0x36>
   d613e:	a801      	add	r0, sp, #4
   d6140:	f7ff ffd8 	bl	d60f4 <_Z17acquireWireBufferv>
   d6144:	aa01      	add	r2, sp, #4
   d6146:	4621      	mov	r1, r4
   d6148:	4807      	ldr	r0, [pc, #28]	; (d6168 <_Z19__fetch_global_Wirev+0x40>)
   d614a:	f7ff f95f 	bl	d540c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d614e:	4628      	mov	r0, r5
   d6150:	f7fd ffae 	bl	d40b0 <__cxa_guard_release>
   d6154:	4a05      	ldr	r2, [pc, #20]	; (d616c <_Z19__fetch_global_Wirev+0x44>)
   d6156:	4906      	ldr	r1, [pc, #24]	; (d6170 <_Z19__fetch_global_Wirev+0x48>)
   d6158:	4803      	ldr	r0, [pc, #12]	; (d6168 <_Z19__fetch_global_Wirev+0x40>)
   d615a:	f000 f82b 	bl	d61b4 <__aeabi_atexit>
	return wire;
}
   d615e:	4802      	ldr	r0, [pc, #8]	; (d6168 <_Z19__fetch_global_Wirev+0x40>)
   d6160:	b007      	add	sp, #28
   d6162:	bd30      	pop	{r4, r5, pc}
   d6164:	2003e724 	.word	0x2003e724
   d6168:	2003e728 	.word	0x2003e728
   d616c:	2003e428 	.word	0x2003e428
   d6170:	000d53b5 	.word	0x000d53b5

000d6174 <_ZN8particle7globals11instanceSpiEv>:
#ifndef SPARK_WIRING_NO_SPI

namespace particle {
namespace globals {

SPIClass& instanceSpi() {
   d6174:	b538      	push	{r3, r4, r5, lr}
    static SPIClass instance(HAL_SPI_INTERFACE1);
   d6176:	4d0b      	ldr	r5, [pc, #44]	; (d61a4 <_ZN8particle7globals11instanceSpiEv+0x30>)
   d6178:	6829      	ldr	r1, [r5, #0]
   d617a:	f011 0401 	ands.w	r4, r1, #1
   d617e:	d10f      	bne.n	d61a0 <_ZN8particle7globals11instanceSpiEv+0x2c>
   d6180:	4628      	mov	r0, r5
   d6182:	f7fd ff90 	bl	d40a6 <__cxa_guard_acquire>
   d6186:	b158      	cbz	r0, d61a0 <_ZN8particle7globals11instanceSpiEv+0x2c>
   d6188:	4621      	mov	r1, r4
   d618a:	4807      	ldr	r0, [pc, #28]	; (d61a8 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d618c:	f7ff fc32 	bl	d59f4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6190:	4628      	mov	r0, r5
   d6192:	f7fd ff8d 	bl	d40b0 <__cxa_guard_release>
   d6196:	4a05      	ldr	r2, [pc, #20]	; (d61ac <_ZN8particle7globals11instanceSpiEv+0x38>)
   d6198:	4905      	ldr	r1, [pc, #20]	; (d61b0 <_ZN8particle7globals11instanceSpiEv+0x3c>)
   d619a:	4803      	ldr	r0, [pc, #12]	; (d61a8 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d619c:	f000 f80a 	bl	d61b4 <__aeabi_atexit>
    return instance;
}
   d61a0:	4801      	ldr	r0, [pc, #4]	; (d61a8 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d61a2:	bd38      	pop	{r3, r4, r5, pc}
   d61a4:	2003e748 	.word	0x2003e748
   d61a8:	2003e73c 	.word	0x2003e73c
   d61ac:	2003e428 	.word	0x2003e428
   d61b0:	000d59d9 	.word	0x000d59d9

000d61b4 <__aeabi_atexit>:
   d61b4:	460b      	mov	r3, r1
   d61b6:	4601      	mov	r1, r0
   d61b8:	4618      	mov	r0, r3
   d61ba:	f002 ba27 	b.w	d860c <__cxa_atexit>

000d61be <_ZdlPvj>:
   d61be:	f7fd bf6e 	b.w	d409e <_ZdlPv>
	...

000d61c4 <_ZSt15get_new_handlerv>:
   d61c4:	4b02      	ldr	r3, [pc, #8]	; (d61d0 <_ZSt15get_new_handlerv+0xc>)
   d61c6:	6818      	ldr	r0, [r3, #0]
   d61c8:	f3bf 8f5f 	dmb	sy
   d61cc:	4770      	bx	lr
   d61ce:	bf00      	nop
   d61d0:	2003e74c 	.word	0x2003e74c

000d61d4 <_ZnwjRKSt9nothrow_t>:
   d61d4:	b510      	push	{r4, lr}
   d61d6:	2800      	cmp	r0, #0
   d61d8:	bf14      	ite	ne
   d61da:	4604      	movne	r4, r0
   d61dc:	2401      	moveq	r4, #1
   d61de:	4620      	mov	r0, r4
   d61e0:	f7ff f80c 	bl	d51fc <malloc>
   d61e4:	b920      	cbnz	r0, d61f0 <_ZnwjRKSt9nothrow_t+0x1c>
   d61e6:	f7ff ffed 	bl	d61c4 <_ZSt15get_new_handlerv>
   d61ea:	b108      	cbz	r0, d61f0 <_ZnwjRKSt9nothrow_t+0x1c>
   d61ec:	4780      	blx	r0
   d61ee:	e7f6      	b.n	d61de <_ZnwjRKSt9nothrow_t+0xa>
   d61f0:	bd10      	pop	{r4, pc}

000d61f2 <_ZnajRKSt9nothrow_t>:
   d61f2:	f7ff bfef 	b.w	d61d4 <_ZnwjRKSt9nothrow_t>
	...

000d61f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d61f8:	4b24      	ldr	r3, [pc, #144]	; (d628c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d61fa:	681a      	ldr	r2, [r3, #0]
   d61fc:	07d0      	lsls	r0, r2, #31
   d61fe:	bf5c      	itt	pl
   d6200:	2201      	movpl	r2, #1
   d6202:	601a      	strpl	r2, [r3, #0]
   d6204:	4b22      	ldr	r3, [pc, #136]	; (d6290 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d6206:	681a      	ldr	r2, [r3, #0]
   d6208:	07d1      	lsls	r1, r2, #31
   d620a:	bf5c      	itt	pl
   d620c:	2201      	movpl	r2, #1
   d620e:	601a      	strpl	r2, [r3, #0]
   d6210:	4b20      	ldr	r3, [pc, #128]	; (d6294 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d6212:	681a      	ldr	r2, [r3, #0]
   d6214:	07d2      	lsls	r2, r2, #31
   d6216:	bf5c      	itt	pl
   d6218:	2201      	movpl	r2, #1
   d621a:	601a      	strpl	r2, [r3, #0]
   d621c:	4b1e      	ldr	r3, [pc, #120]	; (d6298 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d621e:	681a      	ldr	r2, [r3, #0]
   d6220:	07d0      	lsls	r0, r2, #31
   d6222:	bf5c      	itt	pl
   d6224:	2201      	movpl	r2, #1
   d6226:	601a      	strpl	r2, [r3, #0]
   d6228:	4b1c      	ldr	r3, [pc, #112]	; (d629c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d622a:	681a      	ldr	r2, [r3, #0]
   d622c:	07d1      	lsls	r1, r2, #31
   d622e:	bf5c      	itt	pl
   d6230:	2201      	movpl	r2, #1
   d6232:	601a      	strpl	r2, [r3, #0]
   d6234:	4b1a      	ldr	r3, [pc, #104]	; (d62a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d6236:	681a      	ldr	r2, [r3, #0]
   d6238:	07d2      	lsls	r2, r2, #31
   d623a:	bf5c      	itt	pl
   d623c:	2201      	movpl	r2, #1
   d623e:	601a      	strpl	r2, [r3, #0]
   d6240:	4b18      	ldr	r3, [pc, #96]	; (d62a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d6242:	681a      	ldr	r2, [r3, #0]
   d6244:	07d0      	lsls	r0, r2, #31
   d6246:	bf5c      	itt	pl
   d6248:	2201      	movpl	r2, #1
   d624a:	601a      	strpl	r2, [r3, #0]
   d624c:	4b16      	ldr	r3, [pc, #88]	; (d62a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d624e:	681a      	ldr	r2, [r3, #0]
   d6250:	07d1      	lsls	r1, r2, #31
   d6252:	bf5c      	itt	pl
   d6254:	2201      	movpl	r2, #1
   d6256:	601a      	strpl	r2, [r3, #0]
   d6258:	4b14      	ldr	r3, [pc, #80]	; (d62ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d625a:	681a      	ldr	r2, [r3, #0]
   d625c:	07d2      	lsls	r2, r2, #31
   d625e:	bf5c      	itt	pl
   d6260:	2201      	movpl	r2, #1
   d6262:	601a      	strpl	r2, [r3, #0]
   d6264:	4b12      	ldr	r3, [pc, #72]	; (d62b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d6266:	681a      	ldr	r2, [r3, #0]
   d6268:	07d0      	lsls	r0, r2, #31
   d626a:	bf5c      	itt	pl
   d626c:	2201      	movpl	r2, #1
   d626e:	601a      	strpl	r2, [r3, #0]
   d6270:	4b10      	ldr	r3, [pc, #64]	; (d62b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d6272:	681a      	ldr	r2, [r3, #0]
   d6274:	07d1      	lsls	r1, r2, #31
   d6276:	bf5c      	itt	pl
   d6278:	2201      	movpl	r2, #1
   d627a:	601a      	strpl	r2, [r3, #0]
   d627c:	4b0e      	ldr	r3, [pc, #56]	; (d62b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d627e:	681a      	ldr	r2, [r3, #0]
   d6280:	07d2      	lsls	r2, r2, #31
   d6282:	bf5c      	itt	pl
   d6284:	2201      	movpl	r2, #1
   d6286:	601a      	strpl	r2, [r3, #0]
   d6288:	4770      	bx	lr
   d628a:	bf00      	nop
   d628c:	2003e77c 	.word	0x2003e77c
   d6290:	2003e778 	.word	0x2003e778
   d6294:	2003e774 	.word	0x2003e774
   d6298:	2003e770 	.word	0x2003e770
   d629c:	2003e76c 	.word	0x2003e76c
   d62a0:	2003e768 	.word	0x2003e768
   d62a4:	2003e764 	.word	0x2003e764
   d62a8:	2003e760 	.word	0x2003e760
   d62ac:	2003e75c 	.word	0x2003e75c
   d62b0:	2003e758 	.word	0x2003e758
   d62b4:	2003e754 	.word	0x2003e754
   d62b8:	2003e750 	.word	0x2003e750

000d62bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d62bc:	4b18      	ldr	r3, [pc, #96]	; (d6320 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d62be:	681a      	ldr	r2, [r3, #0]
   d62c0:	07d1      	lsls	r1, r2, #31
   d62c2:	bf5c      	itt	pl
   d62c4:	2201      	movpl	r2, #1
   d62c6:	601a      	strpl	r2, [r3, #0]
   d62c8:	4b16      	ldr	r3, [pc, #88]	; (d6324 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d62ca:	681a      	ldr	r2, [r3, #0]
   d62cc:	07d2      	lsls	r2, r2, #31
   d62ce:	bf5c      	itt	pl
   d62d0:	2201      	movpl	r2, #1
   d62d2:	601a      	strpl	r2, [r3, #0]
   d62d4:	4b14      	ldr	r3, [pc, #80]	; (d6328 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d62d6:	681a      	ldr	r2, [r3, #0]
   d62d8:	07d0      	lsls	r0, r2, #31
   d62da:	bf5c      	itt	pl
   d62dc:	2201      	movpl	r2, #1
   d62de:	601a      	strpl	r2, [r3, #0]
   d62e0:	4b12      	ldr	r3, [pc, #72]	; (d632c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d62e2:	681a      	ldr	r2, [r3, #0]
   d62e4:	07d1      	lsls	r1, r2, #31
   d62e6:	bf5c      	itt	pl
   d62e8:	2201      	movpl	r2, #1
   d62ea:	601a      	strpl	r2, [r3, #0]
   d62ec:	4b10      	ldr	r3, [pc, #64]	; (d6330 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d62ee:	681a      	ldr	r2, [r3, #0]
   d62f0:	07d2      	lsls	r2, r2, #31
   d62f2:	bf5c      	itt	pl
   d62f4:	2201      	movpl	r2, #1
   d62f6:	601a      	strpl	r2, [r3, #0]
   d62f8:	4b0e      	ldr	r3, [pc, #56]	; (d6334 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d62fa:	681a      	ldr	r2, [r3, #0]
   d62fc:	07d0      	lsls	r0, r2, #31
   d62fe:	bf5c      	itt	pl
   d6300:	2201      	movpl	r2, #1
   d6302:	601a      	strpl	r2, [r3, #0]
   d6304:	4b0c      	ldr	r3, [pc, #48]	; (d6338 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6306:	681a      	ldr	r2, [r3, #0]
   d6308:	07d1      	lsls	r1, r2, #31
   d630a:	bf5c      	itt	pl
   d630c:	2201      	movpl	r2, #1
   d630e:	601a      	strpl	r2, [r3, #0]
   d6310:	4b0a      	ldr	r3, [pc, #40]	; (d633c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6312:	681a      	ldr	r2, [r3, #0]
   d6314:	07d2      	lsls	r2, r2, #31
   d6316:	bf5c      	itt	pl
   d6318:	2201      	movpl	r2, #1
   d631a:	601a      	strpl	r2, [r3, #0]
   d631c:	4770      	bx	lr
   d631e:	bf00      	nop
   d6320:	2003e79c 	.word	0x2003e79c
   d6324:	2003e798 	.word	0x2003e798
   d6328:	2003e794 	.word	0x2003e794
   d632c:	2003e790 	.word	0x2003e790
   d6330:	2003e78c 	.word	0x2003e78c
   d6334:	2003e788 	.word	0x2003e788
   d6338:	2003e784 	.word	0x2003e784
   d633c:	2003e780 	.word	0x2003e780

000d6340 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6340:	4b18      	ldr	r3, [pc, #96]	; (d63a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6342:	681a      	ldr	r2, [r3, #0]
   d6344:	07d1      	lsls	r1, r2, #31
   d6346:	bf5c      	itt	pl
   d6348:	2201      	movpl	r2, #1
   d634a:	601a      	strpl	r2, [r3, #0]
   d634c:	4b16      	ldr	r3, [pc, #88]	; (d63a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d634e:	681a      	ldr	r2, [r3, #0]
   d6350:	07d2      	lsls	r2, r2, #31
   d6352:	bf5c      	itt	pl
   d6354:	2201      	movpl	r2, #1
   d6356:	601a      	strpl	r2, [r3, #0]
   d6358:	4b14      	ldr	r3, [pc, #80]	; (d63ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d635a:	681a      	ldr	r2, [r3, #0]
   d635c:	07d0      	lsls	r0, r2, #31
   d635e:	bf5c      	itt	pl
   d6360:	2201      	movpl	r2, #1
   d6362:	601a      	strpl	r2, [r3, #0]
   d6364:	4b12      	ldr	r3, [pc, #72]	; (d63b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6366:	681a      	ldr	r2, [r3, #0]
   d6368:	07d1      	lsls	r1, r2, #31
   d636a:	bf5c      	itt	pl
   d636c:	2201      	movpl	r2, #1
   d636e:	601a      	strpl	r2, [r3, #0]
   d6370:	4b10      	ldr	r3, [pc, #64]	; (d63b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6372:	681a      	ldr	r2, [r3, #0]
   d6374:	07d2      	lsls	r2, r2, #31
   d6376:	bf5c      	itt	pl
   d6378:	2201      	movpl	r2, #1
   d637a:	601a      	strpl	r2, [r3, #0]
   d637c:	4b0e      	ldr	r3, [pc, #56]	; (d63b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d637e:	681a      	ldr	r2, [r3, #0]
   d6380:	07d0      	lsls	r0, r2, #31
   d6382:	bf5c      	itt	pl
   d6384:	2201      	movpl	r2, #1
   d6386:	601a      	strpl	r2, [r3, #0]
   d6388:	4b0c      	ldr	r3, [pc, #48]	; (d63bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d638a:	681a      	ldr	r2, [r3, #0]
   d638c:	07d1      	lsls	r1, r2, #31
   d638e:	bf5c      	itt	pl
   d6390:	2201      	movpl	r2, #1
   d6392:	601a      	strpl	r2, [r3, #0]
   d6394:	4b0a      	ldr	r3, [pc, #40]	; (d63c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6396:	681a      	ldr	r2, [r3, #0]
   d6398:	07d2      	lsls	r2, r2, #31
   d639a:	bf5c      	itt	pl
   d639c:	2201      	movpl	r2, #1
   d639e:	601a      	strpl	r2, [r3, #0]
   d63a0:	4770      	bx	lr
   d63a2:	bf00      	nop
   d63a4:	2003e7bc 	.word	0x2003e7bc
   d63a8:	2003e7b8 	.word	0x2003e7b8
   d63ac:	2003e7b4 	.word	0x2003e7b4
   d63b0:	2003e7b0 	.word	0x2003e7b0
   d63b4:	2003e7ac 	.word	0x2003e7ac
   d63b8:	2003e7a8 	.word	0x2003e7a8
   d63bc:	2003e7a4 	.word	0x2003e7a4
   d63c0:	2003e7a0 	.word	0x2003e7a0

000d63c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d63c4:	4b24      	ldr	r3, [pc, #144]	; (d6458 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d63c6:	681a      	ldr	r2, [r3, #0]
   d63c8:	07d0      	lsls	r0, r2, #31
   d63ca:	bf5c      	itt	pl
   d63cc:	2201      	movpl	r2, #1
   d63ce:	601a      	strpl	r2, [r3, #0]
   d63d0:	4b22      	ldr	r3, [pc, #136]	; (d645c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d63d2:	681a      	ldr	r2, [r3, #0]
   d63d4:	07d1      	lsls	r1, r2, #31
   d63d6:	bf5c      	itt	pl
   d63d8:	2201      	movpl	r2, #1
   d63da:	601a      	strpl	r2, [r3, #0]
   d63dc:	4b20      	ldr	r3, [pc, #128]	; (d6460 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d63de:	681a      	ldr	r2, [r3, #0]
   d63e0:	07d2      	lsls	r2, r2, #31
   d63e2:	bf5c      	itt	pl
   d63e4:	2201      	movpl	r2, #1
   d63e6:	601a      	strpl	r2, [r3, #0]
   d63e8:	4b1e      	ldr	r3, [pc, #120]	; (d6464 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d63ea:	681a      	ldr	r2, [r3, #0]
   d63ec:	07d0      	lsls	r0, r2, #31
   d63ee:	bf5c      	itt	pl
   d63f0:	2201      	movpl	r2, #1
   d63f2:	601a      	strpl	r2, [r3, #0]
   d63f4:	4b1c      	ldr	r3, [pc, #112]	; (d6468 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d63f6:	681a      	ldr	r2, [r3, #0]
   d63f8:	07d1      	lsls	r1, r2, #31
   d63fa:	bf5c      	itt	pl
   d63fc:	2201      	movpl	r2, #1
   d63fe:	601a      	strpl	r2, [r3, #0]
   d6400:	4b1a      	ldr	r3, [pc, #104]	; (d646c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d6402:	681a      	ldr	r2, [r3, #0]
   d6404:	07d2      	lsls	r2, r2, #31
   d6406:	bf5c      	itt	pl
   d6408:	2201      	movpl	r2, #1
   d640a:	601a      	strpl	r2, [r3, #0]
   d640c:	4b18      	ldr	r3, [pc, #96]	; (d6470 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d640e:	681a      	ldr	r2, [r3, #0]
   d6410:	07d0      	lsls	r0, r2, #31
   d6412:	bf5c      	itt	pl
   d6414:	2201      	movpl	r2, #1
   d6416:	601a      	strpl	r2, [r3, #0]
   d6418:	4b16      	ldr	r3, [pc, #88]	; (d6474 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d641a:	681a      	ldr	r2, [r3, #0]
   d641c:	07d1      	lsls	r1, r2, #31
   d641e:	bf5c      	itt	pl
   d6420:	2201      	movpl	r2, #1
   d6422:	601a      	strpl	r2, [r3, #0]
   d6424:	4b14      	ldr	r3, [pc, #80]	; (d6478 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d6426:	681a      	ldr	r2, [r3, #0]
   d6428:	07d2      	lsls	r2, r2, #31
   d642a:	bf5c      	itt	pl
   d642c:	2201      	movpl	r2, #1
   d642e:	601a      	strpl	r2, [r3, #0]
   d6430:	4b12      	ldr	r3, [pc, #72]	; (d647c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d6432:	681a      	ldr	r2, [r3, #0]
   d6434:	07d0      	lsls	r0, r2, #31
   d6436:	bf5c      	itt	pl
   d6438:	2201      	movpl	r2, #1
   d643a:	601a      	strpl	r2, [r3, #0]
   d643c:	4b10      	ldr	r3, [pc, #64]	; (d6480 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d643e:	681a      	ldr	r2, [r3, #0]
   d6440:	07d1      	lsls	r1, r2, #31
   d6442:	bf5c      	itt	pl
   d6444:	2201      	movpl	r2, #1
   d6446:	601a      	strpl	r2, [r3, #0]
   d6448:	4b0e      	ldr	r3, [pc, #56]	; (d6484 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d644a:	681a      	ldr	r2, [r3, #0]
   d644c:	07d2      	lsls	r2, r2, #31
   d644e:	bf5c      	itt	pl
   d6450:	2201      	movpl	r2, #1
   d6452:	601a      	strpl	r2, [r3, #0]
   d6454:	4770      	bx	lr
   d6456:	bf00      	nop
   d6458:	2003e7ec 	.word	0x2003e7ec
   d645c:	2003e7e8 	.word	0x2003e7e8
   d6460:	2003e7e4 	.word	0x2003e7e4
   d6464:	2003e7e0 	.word	0x2003e7e0
   d6468:	2003e7dc 	.word	0x2003e7dc
   d646c:	2003e7d8 	.word	0x2003e7d8
   d6470:	2003e7d4 	.word	0x2003e7d4
   d6474:	2003e7d0 	.word	0x2003e7d0
   d6478:	2003e7cc 	.word	0x2003e7cc
   d647c:	2003e7c8 	.word	0x2003e7c8
   d6480:	2003e7c4 	.word	0x2003e7c4
   d6484:	2003e7c0 	.word	0x2003e7c0

000d6488 <pow>:
   d6488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d648c:	ed2d 8b02 	vpush	{d8}
   d6490:	f8df a324 	ldr.w	sl, [pc, #804]	; d67b8 <pow+0x330>
   d6494:	b08b      	sub	sp, #44	; 0x2c
   d6496:	ec57 6b10 	vmov	r6, r7, d0
   d649a:	ec55 4b11 	vmov	r4, r5, d1
   d649e:	f000 f98f 	bl	d67c0 <__ieee754_pow>
   d64a2:	f99a 8000 	ldrsb.w	r8, [sl]
   d64a6:	eeb0 8a40 	vmov.f32	s16, s0
   d64aa:	eef0 8a60 	vmov.f32	s17, s1
   d64ae:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   d64b2:	d048      	beq.n	d6546 <pow+0xbe>
   d64b4:	4622      	mov	r2, r4
   d64b6:	462b      	mov	r3, r5
   d64b8:	4620      	mov	r0, r4
   d64ba:	4629      	mov	r1, r5
   d64bc:	f001 fd6e 	bl	d7f9c <__aeabi_dcmpun>
   d64c0:	4683      	mov	fp, r0
   d64c2:	2800      	cmp	r0, #0
   d64c4:	d13f      	bne.n	d6546 <pow+0xbe>
   d64c6:	4632      	mov	r2, r6
   d64c8:	463b      	mov	r3, r7
   d64ca:	4630      	mov	r0, r6
   d64cc:	4639      	mov	r1, r7
   d64ce:	f001 fd65 	bl	d7f9c <__aeabi_dcmpun>
   d64d2:	4681      	mov	r9, r0
   d64d4:	2800      	cmp	r0, #0
   d64d6:	f040 8090 	bne.w	d65fa <pow+0x172>
   d64da:	4630      	mov	r0, r6
   d64dc:	4639      	mov	r1, r7
   d64de:	2200      	movs	r2, #0
   d64e0:	2300      	movs	r3, #0
   d64e2:	f001 fd29 	bl	d7f38 <__aeabi_dcmpeq>
   d64e6:	2800      	cmp	r0, #0
   d64e8:	d036      	beq.n	d6558 <pow+0xd0>
   d64ea:	2200      	movs	r2, #0
   d64ec:	2300      	movs	r3, #0
   d64ee:	4620      	mov	r0, r4
   d64f0:	4629      	mov	r1, r5
   d64f2:	f001 fd21 	bl	d7f38 <__aeabi_dcmpeq>
   d64f6:	4683      	mov	fp, r0
   d64f8:	b1b8      	cbz	r0, d652a <pow+0xa2>
   d64fa:	ed9f 7ba5 	vldr	d7, [pc, #660]	; d6790 <pow+0x308>
   d64fe:	2201      	movs	r2, #1
   d6500:	4ba9      	ldr	r3, [pc, #676]	; (d67a8 <pow+0x320>)
   d6502:	f8cd 9020 	str.w	r9, [sp, #32]
   d6506:	9200      	str	r2, [sp, #0]
   d6508:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d650c:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d6510:	ed8d 7b06 	vstr	d7, [sp, #24]
   d6514:	9301      	str	r3, [sp, #4]
   d6516:	f1b8 0f00 	cmp.w	r8, #0
   d651a:	d05b      	beq.n	d65d4 <pow+0x14c>
   d651c:	ed9f 0b9e 	vldr	d0, [pc, #632]	; d6798 <pow+0x310>
   d6520:	b00b      	add	sp, #44	; 0x2c
   d6522:	ecbd 8b02 	vpop	{d8}
   d6526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d652a:	ec45 4b10 	vmov	d0, r4, r5
   d652e:	f000 ffa7 	bl	d7480 <finite>
   d6532:	b140      	cbz	r0, d6546 <pow+0xbe>
   d6534:	2200      	movs	r2, #0
   d6536:	2300      	movs	r3, #0
   d6538:	4620      	mov	r0, r4
   d653a:	4629      	mov	r1, r5
   d653c:	f001 fd06 	bl	d7f4c <__aeabi_dcmplt>
   d6540:	2800      	cmp	r0, #0
   d6542:	f040 80c5 	bne.w	d66d0 <pow+0x248>
   d6546:	eeb0 0a48 	vmov.f32	s0, s16
   d654a:	eef0 0a68 	vmov.f32	s1, s17
   d654e:	b00b      	add	sp, #44	; 0x2c
   d6550:	ecbd 8b02 	vpop	{d8}
   d6554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6558:	eeb0 0a48 	vmov.f32	s0, s16
   d655c:	eef0 0a68 	vmov.f32	s1, s17
   d6560:	f000 ff8e 	bl	d7480 <finite>
   d6564:	4680      	mov	r8, r0
   d6566:	2800      	cmp	r0, #0
   d6568:	d061      	beq.n	d662e <pow+0x1a6>
   d656a:	f04f 0800 	mov.w	r8, #0
   d656e:	f04f 0900 	mov.w	r9, #0
   d6572:	ec51 0b18 	vmov	r0, r1, d8
   d6576:	4642      	mov	r2, r8
   d6578:	464b      	mov	r3, r9
   d657a:	f001 fcdd 	bl	d7f38 <__aeabi_dcmpeq>
   d657e:	2800      	cmp	r0, #0
   d6580:	d0e1      	beq.n	d6546 <pow+0xbe>
   d6582:	ec47 6b10 	vmov	d0, r6, r7
   d6586:	f000 ff7b 	bl	d7480 <finite>
   d658a:	2800      	cmp	r0, #0
   d658c:	d0db      	beq.n	d6546 <pow+0xbe>
   d658e:	ec45 4b10 	vmov	d0, r4, r5
   d6592:	f000 ff75 	bl	d7480 <finite>
   d6596:	2800      	cmp	r0, #0
   d6598:	d0d5      	beq.n	d6546 <pow+0xbe>
   d659a:	f99a 3000 	ldrsb.w	r3, [sl]
   d659e:	4a82      	ldr	r2, [pc, #520]	; (d67a8 <pow+0x320>)
   d65a0:	9201      	str	r2, [sp, #4]
   d65a2:	2104      	movs	r1, #4
   d65a4:	2200      	movs	r2, #0
   d65a6:	2b02      	cmp	r3, #2
   d65a8:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d65ac:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d65b0:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d65b4:	9100      	str	r1, [sp, #0]
   d65b6:	9208      	str	r2, [sp, #32]
   d65b8:	d003      	beq.n	d65c2 <pow+0x13a>
   d65ba:	4668      	mov	r0, sp
   d65bc:	f000 ff68 	bl	d7490 <matherr>
   d65c0:	b970      	cbnz	r0, d65e0 <pow+0x158>
   d65c2:	f7fe fe3b 	bl	d523c <__errno>
   d65c6:	2322      	movs	r3, #34	; 0x22
   d65c8:	6003      	str	r3, [r0, #0]
   d65ca:	e009      	b.n	d65e0 <pow+0x158>
   d65cc:	ed9f 7b70 	vldr	d7, [pc, #448]	; d6790 <pow+0x308>
   d65d0:	ed8d 7b06 	vstr	d7, [sp, #24]
   d65d4:	4668      	mov	r0, sp
   d65d6:	f000 ff5b 	bl	d7490 <matherr>
   d65da:	2800      	cmp	r0, #0
   d65dc:	f000 808e 	beq.w	d66fc <pow+0x274>
   d65e0:	9b08      	ldr	r3, [sp, #32]
   d65e2:	b11b      	cbz	r3, d65ec <pow+0x164>
   d65e4:	f7fe fe2a 	bl	d523c <__errno>
   d65e8:	9b08      	ldr	r3, [sp, #32]
   d65ea:	6003      	str	r3, [r0, #0]
   d65ec:	ed9d 0b06 	vldr	d0, [sp, #24]
   d65f0:	b00b      	add	sp, #44	; 0x2c
   d65f2:	ecbd 8b02 	vpop	{d8}
   d65f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d65fa:	2200      	movs	r2, #0
   d65fc:	2300      	movs	r3, #0
   d65fe:	4620      	mov	r0, r4
   d6600:	4629      	mov	r1, r5
   d6602:	f001 fc99 	bl	d7f38 <__aeabi_dcmpeq>
   d6606:	2800      	cmp	r0, #0
   d6608:	d09d      	beq.n	d6546 <pow+0xbe>
   d660a:	ed9f 0b63 	vldr	d0, [pc, #396]	; d6798 <pow+0x310>
   d660e:	4b66      	ldr	r3, [pc, #408]	; (d67a8 <pow+0x320>)
   d6610:	f8cd b020 	str.w	fp, [sp, #32]
   d6614:	2201      	movs	r2, #1
   d6616:	f1b8 0f02 	cmp.w	r8, #2
   d661a:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d661e:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d6622:	ed8d 0b06 	vstr	d0, [sp, #24]
   d6626:	e88d 000c 	stmia.w	sp, {r2, r3}
   d662a:	d1d3      	bne.n	d65d4 <pow+0x14c>
   d662c:	e78f      	b.n	d654e <pow+0xc6>
   d662e:	ec47 6b10 	vmov	d0, r6, r7
   d6632:	f000 ff25 	bl	d7480 <finite>
   d6636:	2800      	cmp	r0, #0
   d6638:	d097      	beq.n	d656a <pow+0xe2>
   d663a:	ec45 4b10 	vmov	d0, r4, r5
   d663e:	f000 ff1f 	bl	d7480 <finite>
   d6642:	2800      	cmp	r0, #0
   d6644:	d091      	beq.n	d656a <pow+0xe2>
   d6646:	ec53 2b18 	vmov	r2, r3, d8
   d664a:	ee18 0a10 	vmov	r0, s16
   d664e:	4619      	mov	r1, r3
   d6650:	f001 fca4 	bl	d7f9c <__aeabi_dcmpun>
   d6654:	2800      	cmp	r0, #0
   d6656:	d17c      	bne.n	d6752 <pow+0x2ca>
   d6658:	2303      	movs	r3, #3
   d665a:	f99a 8000 	ldrsb.w	r8, [sl]
   d665e:	9300      	str	r3, [sp, #0]
   d6660:	4b51      	ldr	r3, [pc, #324]	; (d67a8 <pow+0x320>)
   d6662:	9008      	str	r0, [sp, #32]
   d6664:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d6668:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d666c:	9301      	str	r3, [sp, #4]
   d666e:	f1b8 0f00 	cmp.w	r8, #0
   d6672:	d148      	bne.n	d6706 <pow+0x27e>
   d6674:	f8df 9144 	ldr.w	r9, [pc, #324]	; d67bc <pow+0x334>
   d6678:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
   d667c:	2200      	movs	r2, #0
   d667e:	2300      	movs	r3, #0
   d6680:	4630      	mov	r0, r6
   d6682:	4639      	mov	r1, r7
   d6684:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d6688:	f001 fc60 	bl	d7f4c <__aeabi_dcmplt>
   d668c:	2800      	cmp	r0, #0
   d668e:	d094      	beq.n	d65ba <pow+0x132>
   d6690:	2200      	movs	r2, #0
   d6692:	4b46      	ldr	r3, [pc, #280]	; (d67ac <pow+0x324>)
   d6694:	4620      	mov	r0, r4
   d6696:	4629      	mov	r1, r5
   d6698:	f001 f9e6 	bl	d7a68 <__aeabi_dmul>
   d669c:	4604      	mov	r4, r0
   d669e:	460d      	mov	r5, r1
   d66a0:	ec45 4b10 	vmov	d0, r4, r5
   d66a4:	f000 ff00 	bl	d74a8 <rint>
   d66a8:	4620      	mov	r0, r4
   d66aa:	ec53 2b10 	vmov	r2, r3, d0
   d66ae:	4629      	mov	r1, r5
   d66b0:	f001 fc42 	bl	d7f38 <__aeabi_dcmpeq>
   d66b4:	2800      	cmp	r0, #0
   d66b6:	d149      	bne.n	d674c <pow+0x2c4>
   d66b8:	4b3d      	ldr	r3, [pc, #244]	; (d67b0 <pow+0x328>)
   d66ba:	f99a 8000 	ldrsb.w	r8, [sl]
   d66be:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d66c2:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d66c6:	f1b8 0f02 	cmp.w	r8, #2
   d66ca:	f47f af76 	bne.w	d65ba <pow+0x132>
   d66ce:	e778      	b.n	d65c2 <pow+0x13a>
   d66d0:	4a35      	ldr	r2, [pc, #212]	; (d67a8 <pow+0x320>)
   d66d2:	f99a 3000 	ldrsb.w	r3, [sl]
   d66d6:	f8cd b020 	str.w	fp, [sp, #32]
   d66da:	2101      	movs	r1, #1
   d66dc:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d66e0:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d66e4:	e88d 0006 	stmia.w	sp, {r1, r2}
   d66e8:	2b00      	cmp	r3, #0
   d66ea:	f43f af6f 	beq.w	d65cc <pow+0x144>
   d66ee:	4931      	ldr	r1, [pc, #196]	; (d67b4 <pow+0x32c>)
   d66f0:	2000      	movs	r0, #0
   d66f2:	2b02      	cmp	r3, #2
   d66f4:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d66f8:	f47f af6c 	bne.w	d65d4 <pow+0x14c>
   d66fc:	f7fe fd9e 	bl	d523c <__errno>
   d6700:	2321      	movs	r3, #33	; 0x21
   d6702:	6003      	str	r3, [r0, #0]
   d6704:	e76c      	b.n	d65e0 <pow+0x158>
   d6706:	ed9f 7b26 	vldr	d7, [pc, #152]	; d67a0 <pow+0x318>
   d670a:	2200      	movs	r2, #0
   d670c:	2300      	movs	r3, #0
   d670e:	4630      	mov	r0, r6
   d6710:	4639      	mov	r1, r7
   d6712:	ed8d 7b06 	vstr	d7, [sp, #24]
   d6716:	f001 fc19 	bl	d7f4c <__aeabi_dcmplt>
   d671a:	2800      	cmp	r0, #0
   d671c:	d0d3      	beq.n	d66c6 <pow+0x23e>
   d671e:	2200      	movs	r2, #0
   d6720:	4b22      	ldr	r3, [pc, #136]	; (d67ac <pow+0x324>)
   d6722:	4620      	mov	r0, r4
   d6724:	4629      	mov	r1, r5
   d6726:	f001 f99f 	bl	d7a68 <__aeabi_dmul>
   d672a:	4604      	mov	r4, r0
   d672c:	460d      	mov	r5, r1
   d672e:	ec45 4b10 	vmov	d0, r4, r5
   d6732:	f000 feb9 	bl	d74a8 <rint>
   d6736:	4620      	mov	r0, r4
   d6738:	ec53 2b10 	vmov	r2, r3, d0
   d673c:	4629      	mov	r1, r5
   d673e:	f001 fbfb 	bl	d7f38 <__aeabi_dcmpeq>
   d6742:	b918      	cbnz	r0, d674c <pow+0x2c4>
   d6744:	4b1b      	ldr	r3, [pc, #108]	; (d67b4 <pow+0x32c>)
   d6746:	2200      	movs	r2, #0
   d6748:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d674c:	f99a 8000 	ldrsb.w	r8, [sl]
   d6750:	e7b9      	b.n	d66c6 <pow+0x23e>
   d6752:	4b15      	ldr	r3, [pc, #84]	; (d67a8 <pow+0x320>)
   d6754:	f99a 9000 	ldrsb.w	r9, [sl]
   d6758:	f8cd 8020 	str.w	r8, [sp, #32]
   d675c:	2201      	movs	r2, #1
   d675e:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d6762:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d6766:	e88d 000c 	stmia.w	sp, {r2, r3}
   d676a:	f1b9 0f00 	cmp.w	r9, #0
   d676e:	f43f af2d 	beq.w	d65cc <pow+0x144>
   d6772:	2200      	movs	r2, #0
   d6774:	2300      	movs	r3, #0
   d6776:	4610      	mov	r0, r2
   d6778:	4619      	mov	r1, r3
   d677a:	f001 fa9f 	bl	d7cbc <__aeabi_ddiv>
   d677e:	f1b9 0f02 	cmp.w	r9, #2
   d6782:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d6786:	d0b9      	beq.n	d66fc <pow+0x274>
   d6788:	e724      	b.n	d65d4 <pow+0x14c>
   d678a:	bf00      	nop
   d678c:	f3af 8000 	nop.w
	...
   d679c:	3ff00000 	.word	0x3ff00000
   d67a0:	00000000 	.word	0x00000000
   d67a4:	7ff00000 	.word	0x7ff00000
   d67a8:	000d8aac 	.word	0x000d8aac
   d67ac:	3fe00000 	.word	0x3fe00000
   d67b0:	c7efffff 	.word	0xc7efffff
   d67b4:	fff00000 	.word	0xfff00000
   d67b8:	2003e3c0 	.word	0x2003e3c0
   d67bc:	47efffff 	.word	0x47efffff

000d67c0 <__ieee754_pow>:
   d67c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d67c4:	ec51 0b11 	vmov	r0, r1, d1
   d67c8:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   d67cc:	ea58 0400 	orrs.w	r4, r8, r0
   d67d0:	b093      	sub	sp, #76	; 0x4c
   d67d2:	d03c      	beq.n	d684e <__ieee754_pow+0x8e>
   d67d4:	ec53 2b10 	vmov	r2, r3, d0
   d67d8:	4e6d      	ldr	r6, [pc, #436]	; (d6990 <__ieee754_pow+0x1d0>)
   d67da:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   d67de:	42b4      	cmp	r4, r6
   d67e0:	ee10 aa10 	vmov	sl, s0
   d67e4:	461d      	mov	r5, r3
   d67e6:	dc2b      	bgt.n	d6840 <__ieee754_pow+0x80>
   d67e8:	4689      	mov	r9, r1
   d67ea:	ee11 ea10 	vmov	lr, s2
   d67ee:	d026      	beq.n	d683e <__ieee754_pow+0x7e>
   d67f0:	45b0      	cmp	r8, r6
   d67f2:	dc25      	bgt.n	d6840 <__ieee754_pow+0x80>
   d67f4:	4e66      	ldr	r6, [pc, #408]	; (d6990 <__ieee754_pow+0x1d0>)
   d67f6:	45b0      	cmp	r8, r6
   d67f8:	d077      	beq.n	d68ea <__ieee754_pow+0x12a>
   d67fa:	2d00      	cmp	r5, #0
   d67fc:	4616      	mov	r6, r2
   d67fe:	461f      	mov	r7, r3
   d6800:	e9cd 0100 	strd	r0, r1, [sp]
   d6804:	db75      	blt.n	d68f2 <__ieee754_pow+0x132>
   d6806:	f04f 0b00 	mov.w	fp, #0
   d680a:	f1be 0f00 	cmp.w	lr, #0
   d680e:	d12d      	bne.n	d686c <__ieee754_pow+0xac>
   d6810:	4b5f      	ldr	r3, [pc, #380]	; (d6990 <__ieee754_pow+0x1d0>)
   d6812:	4598      	cmp	r8, r3
   d6814:	f000 8089 	beq.w	d692a <__ieee754_pow+0x16a>
   d6818:	4b5e      	ldr	r3, [pc, #376]	; (d6994 <__ieee754_pow+0x1d4>)
   d681a:	4598      	cmp	r8, r3
   d681c:	d05e      	beq.n	d68dc <__ieee754_pow+0x11c>
   d681e:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
   d6822:	f000 83de 	beq.w	d6fe2 <__ieee754_pow+0x822>
   d6826:	4b5c      	ldr	r3, [pc, #368]	; (d6998 <__ieee754_pow+0x1d8>)
   d6828:	4599      	cmp	r9, r3
   d682a:	d11f      	bne.n	d686c <__ieee754_pow+0xac>
   d682c:	2d00      	cmp	r5, #0
   d682e:	db1d      	blt.n	d686c <__ieee754_pow+0xac>
   d6830:	ec47 6b10 	vmov	d0, r6, r7
   d6834:	b013      	add	sp, #76	; 0x4c
   d6836:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d683a:	f000 bd49 	b.w	d72d0 <__ieee754_sqrt>
   d683e:	b15a      	cbz	r2, d6858 <__ieee754_pow+0x98>
   d6840:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
   d6844:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
   d6848:	ea54 030a 	orrs.w	r3, r4, sl
   d684c:	d106      	bne.n	d685c <__ieee754_pow+0x9c>
   d684e:	ed9f 0b4a 	vldr	d0, [pc, #296]	; d6978 <__ieee754_pow+0x1b8>
   d6852:	b013      	add	sp, #76	; 0x4c
   d6854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6858:	45a0      	cmp	r8, r4
   d685a:	ddcb      	ble.n	d67f4 <__ieee754_pow+0x34>
   d685c:	484f      	ldr	r0, [pc, #316]	; (d699c <__ieee754_pow+0x1dc>)
   d685e:	b013      	add	sp, #76	; 0x4c
   d6860:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6864:	f000 be18 	b.w	d7498 <nan>
   d6868:	f04f 0b00 	mov.w	fp, #0
   d686c:	ec47 6b10 	vmov	d0, r6, r7
   d6870:	f000 fdfe 	bl	d7470 <fabs>
   d6874:	ec51 0b10 	vmov	r0, r1, d0
   d6878:	f1ba 0f00 	cmp.w	sl, #0
   d687c:	d01e      	beq.n	d68bc <__ieee754_pow+0xfc>
   d687e:	0fed      	lsrs	r5, r5, #31
   d6880:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
   d6884:	ea5b 030a 	orrs.w	r3, fp, sl
   d6888:	d063      	beq.n	d6952 <__ieee754_pow+0x192>
   d688a:	4b45      	ldr	r3, [pc, #276]	; (d69a0 <__ieee754_pow+0x1e0>)
   d688c:	4598      	cmp	r8, r3
   d688e:	f340 808d 	ble.w	d69ac <__ieee754_pow+0x1ec>
   d6892:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   d6896:	4598      	cmp	r8, r3
   d6898:	f340 8438 	ble.w	d710c <__ieee754_pow+0x94c>
   d689c:	4b41      	ldr	r3, [pc, #260]	; (d69a4 <__ieee754_pow+0x1e4>)
   d689e:	429c      	cmp	r4, r3
   d68a0:	dd62      	ble.n	d6968 <__ieee754_pow+0x1a8>
   d68a2:	f1b9 0f00 	cmp.w	r9, #0
   d68a6:	dd62      	ble.n	d696e <__ieee754_pow+0x1ae>
   d68a8:	a335      	add	r3, pc, #212	; (adr r3, d6980 <__ieee754_pow+0x1c0>)
   d68aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   d68ae:	4610      	mov	r0, r2
   d68b0:	4619      	mov	r1, r3
   d68b2:	f001 f8d9 	bl	d7a68 <__aeabi_dmul>
   d68b6:	ec41 0b10 	vmov	d0, r0, r1
   d68ba:	e7ca      	b.n	d6852 <__ieee754_pow+0x92>
   d68bc:	b124      	cbz	r4, d68c8 <__ieee754_pow+0x108>
   d68be:	4b35      	ldr	r3, [pc, #212]	; (d6994 <__ieee754_pow+0x1d4>)
   d68c0:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
   d68c4:	429a      	cmp	r2, r3
   d68c6:	d1da      	bne.n	d687e <__ieee754_pow+0xbe>
   d68c8:	f1b9 0f00 	cmp.w	r9, #0
   d68cc:	f2c0 83cb 	blt.w	d7066 <__ieee754_pow+0x8a6>
   d68d0:	2d00      	cmp	r5, #0
   d68d2:	f2c0 8374 	blt.w	d6fbe <__ieee754_pow+0x7fe>
   d68d6:	ec41 0b10 	vmov	d0, r0, r1
   d68da:	e7ba      	b.n	d6852 <__ieee754_pow+0x92>
   d68dc:	f1b9 0f00 	cmp.w	r9, #0
   d68e0:	f2c0 847a 	blt.w	d71d8 <__ieee754_pow+0xa18>
   d68e4:	ec47 6b10 	vmov	d0, r6, r7
   d68e8:	e7b3      	b.n	d6852 <__ieee754_pow+0x92>
   d68ea:	f1be 0f00 	cmp.w	lr, #0
   d68ee:	d084      	beq.n	d67fa <__ieee754_pow+0x3a>
   d68f0:	e7a6      	b.n	d6840 <__ieee754_pow+0x80>
   d68f2:	4b2d      	ldr	r3, [pc, #180]	; (d69a8 <__ieee754_pow+0x1e8>)
   d68f4:	4598      	cmp	r8, r3
   d68f6:	dc29      	bgt.n	d694c <__ieee754_pow+0x18c>
   d68f8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
   d68fc:	4598      	cmp	r8, r3
   d68fe:	dd82      	ble.n	d6806 <__ieee754_pow+0x46>
   d6900:	ea4f 5328 	mov.w	r3, r8, asr #20
   d6904:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   d6908:	2b14      	cmp	r3, #20
   d690a:	f340 847f 	ble.w	d720c <__ieee754_pow+0xa4c>
   d690e:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
   d6912:	fa2e f203 	lsr.w	r2, lr, r3
   d6916:	fa02 f303 	lsl.w	r3, r2, r3
   d691a:	459e      	cmp	lr, r3
   d691c:	f47f af73 	bne.w	d6806 <__ieee754_pow+0x46>
   d6920:	f002 0201 	and.w	r2, r2, #1
   d6924:	f1c2 0b02 	rsb	fp, r2, #2
   d6928:	e76f      	b.n	d680a <__ieee754_pow+0x4a>
   d692a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
   d692e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   d6932:	ea53 030a 	orrs.w	r3, r3, sl
   d6936:	d08a      	beq.n	d684e <__ieee754_pow+0x8e>
   d6938:	4b1a      	ldr	r3, [pc, #104]	; (d69a4 <__ieee754_pow+0x1e4>)
   d693a:	429c      	cmp	r4, r3
   d693c:	f340 8385 	ble.w	d704a <__ieee754_pow+0x88a>
   d6940:	f1b9 0f00 	cmp.w	r9, #0
   d6944:	db13      	blt.n	d696e <__ieee754_pow+0x1ae>
   d6946:	ed9d 0b00 	vldr	d0, [sp]
   d694a:	e782      	b.n	d6852 <__ieee754_pow+0x92>
   d694c:	f04f 0b02 	mov.w	fp, #2
   d6950:	e75b      	b.n	d680a <__ieee754_pow+0x4a>
   d6952:	4632      	mov	r2, r6
   d6954:	463b      	mov	r3, r7
   d6956:	4610      	mov	r0, r2
   d6958:	4619      	mov	r1, r3
   d695a:	f000 fed1 	bl	d7700 <__aeabi_dsub>
   d695e:	4602      	mov	r2, r0
   d6960:	460b      	mov	r3, r1
   d6962:	f001 f9ab 	bl	d7cbc <__aeabi_ddiv>
   d6966:	e7b6      	b.n	d68d6 <__ieee754_pow+0x116>
   d6968:	f1b9 0f00 	cmp.w	r9, #0
   d696c:	db9c      	blt.n	d68a8 <__ieee754_pow+0xe8>
   d696e:	ed9f 0b06 	vldr	d0, [pc, #24]	; d6988 <__ieee754_pow+0x1c8>
   d6972:	e76e      	b.n	d6852 <__ieee754_pow+0x92>
   d6974:	f3af 8000 	nop.w
   d6978:	00000000 	.word	0x00000000
   d697c:	3ff00000 	.word	0x3ff00000
   d6980:	8800759c 	.word	0x8800759c
   d6984:	7e37e43c 	.word	0x7e37e43c
	...
   d6990:	7ff00000 	.word	0x7ff00000
   d6994:	3ff00000 	.word	0x3ff00000
   d6998:	3fe00000 	.word	0x3fe00000
   d699c:	000d8ab0 	.word	0x000d8ab0
   d69a0:	41e00000 	.word	0x41e00000
   d69a4:	3fefffff 	.word	0x3fefffff
   d69a8:	433fffff 	.word	0x433fffff
   d69ac:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
   d69b0:	f04f 0200 	mov.w	r2, #0
   d69b4:	da05      	bge.n	d69c2 <__ieee754_pow+0x202>
   d69b6:	4bd6      	ldr	r3, [pc, #856]	; (d6d10 <__ieee754_pow+0x550>)
   d69b8:	f001 f856 	bl	d7a68 <__aeabi_dmul>
   d69bc:	f06f 0234 	mvn.w	r2, #52	; 0x34
   d69c0:	460c      	mov	r4, r1
   d69c2:	1523      	asrs	r3, r4, #20
   d69c4:	4ed3      	ldr	r6, [pc, #844]	; (d6d14 <__ieee754_pow+0x554>)
   d69c6:	f3c4 0413 	ubfx	r4, r4, #0, #20
   d69ca:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   d69ce:	4413      	add	r3, r2
   d69d0:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
   d69d4:	42b4      	cmp	r4, r6
   d69d6:	461a      	mov	r2, r3
   d69d8:	930d      	str	r3, [sp, #52]	; 0x34
   d69da:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
   d69de:	f340 8349 	ble.w	d7074 <__ieee754_pow+0x8b4>
   d69e2:	4bcd      	ldr	r3, [pc, #820]	; (d6d18 <__ieee754_pow+0x558>)
   d69e4:	429c      	cmp	r4, r3
   d69e6:	f340 842d 	ble.w	d7244 <__ieee754_pow+0xa84>
   d69ea:	ed9f 7bb3 	vldr	d7, [pc, #716]	; d6cb8 <__ieee754_pow+0x4f8>
   d69ee:	ed8d 7b08 	vstr	d7, [sp, #32]
   d69f2:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d69f6:	ed9f 7bb2 	vldr	d7, [pc, #712]	; d6cc0 <__ieee754_pow+0x500>
   d69fa:	4613      	mov	r3, r2
   d69fc:	ed8d 7b06 	vstr	d7, [sp, #24]
   d6a00:	3301      	adds	r3, #1
   d6a02:	930d      	str	r3, [sp, #52]	; 0x34
   d6a04:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
   d6a08:	f04f 0800 	mov.w	r8, #0
   d6a0c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d6a10:	4629      	mov	r1, r5
   d6a12:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d6a16:	f000 fe73 	bl	d7700 <__aeabi_dsub>
   d6a1a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d6a1e:	4606      	mov	r6, r0
   d6a20:	460f      	mov	r7, r1
   d6a22:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d6a26:	f000 fe6d 	bl	d7704 <__adddf3>
   d6a2a:	4602      	mov	r2, r0
   d6a2c:	460b      	mov	r3, r1
   d6a2e:	2000      	movs	r0, #0
   d6a30:	49ba      	ldr	r1, [pc, #744]	; (d6d1c <__ieee754_pow+0x55c>)
   d6a32:	f001 f943 	bl	d7cbc <__aeabi_ddiv>
   d6a36:	4603      	mov	r3, r0
   d6a38:	460c      	mov	r4, r1
   d6a3a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
   d6a3e:	4602      	mov	r2, r0
   d6a40:	460b      	mov	r3, r1
   d6a42:	4630      	mov	r0, r6
   d6a44:	4639      	mov	r1, r7
   d6a46:	f001 f80f 	bl	d7a68 <__aeabi_dmul>
   d6a4a:	106b      	asrs	r3, r5, #1
   d6a4c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   d6a50:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
   d6a54:	eb03 0508 	add.w	r5, r3, r8
   d6a58:	460a      	mov	r2, r1
   d6a5a:	2300      	movs	r3, #0
   d6a5c:	4601      	mov	r1, r0
   d6a5e:	e9cd 1202 	strd	r1, r2, [sp, #8]
   d6a62:	9302      	str	r3, [sp, #8]
   d6a64:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
   d6a68:	2400      	movs	r4, #0
   d6a6a:	e9cd 1204 	strd	r1, r2, [sp, #16]
   d6a6e:	462b      	mov	r3, r5
   d6a70:	4622      	mov	r2, r4
   d6a72:	4640      	mov	r0, r8
   d6a74:	4649      	mov	r1, r9
   d6a76:	f000 fff7 	bl	d7a68 <__aeabi_dmul>
   d6a7a:	4602      	mov	r2, r0
   d6a7c:	460b      	mov	r3, r1
   d6a7e:	4630      	mov	r0, r6
   d6a80:	4639      	mov	r1, r7
   d6a82:	f000 fe3d 	bl	d7700 <__aeabi_dsub>
   d6a86:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d6a8a:	4606      	mov	r6, r0
   d6a8c:	460f      	mov	r7, r1
   d6a8e:	4620      	mov	r0, r4
   d6a90:	4629      	mov	r1, r5
   d6a92:	f000 fe35 	bl	d7700 <__aeabi_dsub>
   d6a96:	4602      	mov	r2, r0
   d6a98:	460b      	mov	r3, r1
   d6a9a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d6a9e:	f000 fe2f 	bl	d7700 <__aeabi_dsub>
   d6aa2:	4642      	mov	r2, r8
   d6aa4:	464b      	mov	r3, r9
   d6aa6:	f000 ffdf 	bl	d7a68 <__aeabi_dmul>
   d6aaa:	4602      	mov	r2, r0
   d6aac:	460b      	mov	r3, r1
   d6aae:	4630      	mov	r0, r6
   d6ab0:	4639      	mov	r1, r7
   d6ab2:	f000 fe25 	bl	d7700 <__aeabi_dsub>
   d6ab6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   d6aba:	f000 ffd5 	bl	d7a68 <__aeabi_dmul>
   d6abe:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
   d6ac2:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d6ac6:	4622      	mov	r2, r4
   d6ac8:	462b      	mov	r3, r5
   d6aca:	4620      	mov	r0, r4
   d6acc:	4629      	mov	r1, r5
   d6ace:	f000 ffcb 	bl	d7a68 <__aeabi_dmul>
   d6ad2:	a37d      	add	r3, pc, #500	; (adr r3, d6cc8 <__ieee754_pow+0x508>)
   d6ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6ad8:	4604      	mov	r4, r0
   d6ada:	460d      	mov	r5, r1
   d6adc:	f000 ffc4 	bl	d7a68 <__aeabi_dmul>
   d6ae0:	a37b      	add	r3, pc, #492	; (adr r3, d6cd0 <__ieee754_pow+0x510>)
   d6ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6ae6:	f000 fe0d 	bl	d7704 <__adddf3>
   d6aea:	4622      	mov	r2, r4
   d6aec:	462b      	mov	r3, r5
   d6aee:	f000 ffbb 	bl	d7a68 <__aeabi_dmul>
   d6af2:	a379      	add	r3, pc, #484	; (adr r3, d6cd8 <__ieee754_pow+0x518>)
   d6af4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6af8:	f000 fe04 	bl	d7704 <__adddf3>
   d6afc:	4622      	mov	r2, r4
   d6afe:	462b      	mov	r3, r5
   d6b00:	f000 ffb2 	bl	d7a68 <__aeabi_dmul>
   d6b04:	a376      	add	r3, pc, #472	; (adr r3, d6ce0 <__ieee754_pow+0x520>)
   d6b06:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6b0a:	f000 fdfb 	bl	d7704 <__adddf3>
   d6b0e:	4622      	mov	r2, r4
   d6b10:	462b      	mov	r3, r5
   d6b12:	f000 ffa9 	bl	d7a68 <__aeabi_dmul>
   d6b16:	a374      	add	r3, pc, #464	; (adr r3, d6ce8 <__ieee754_pow+0x528>)
   d6b18:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6b1c:	f000 fdf2 	bl	d7704 <__adddf3>
   d6b20:	4622      	mov	r2, r4
   d6b22:	462b      	mov	r3, r5
   d6b24:	f000 ffa0 	bl	d7a68 <__aeabi_dmul>
   d6b28:	a371      	add	r3, pc, #452	; (adr r3, d6cf0 <__ieee754_pow+0x530>)
   d6b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6b2e:	f000 fde9 	bl	d7704 <__adddf3>
   d6b32:	4622      	mov	r2, r4
   d6b34:	4606      	mov	r6, r0
   d6b36:	460f      	mov	r7, r1
   d6b38:	462b      	mov	r3, r5
   d6b3a:	4620      	mov	r0, r4
   d6b3c:	4629      	mov	r1, r5
   d6b3e:	f000 ff93 	bl	d7a68 <__aeabi_dmul>
   d6b42:	4602      	mov	r2, r0
   d6b44:	460b      	mov	r3, r1
   d6b46:	4630      	mov	r0, r6
   d6b48:	4639      	mov	r1, r7
   d6b4a:	f000 ff8d 	bl	d7a68 <__aeabi_dmul>
   d6b4e:	4642      	mov	r2, r8
   d6b50:	4604      	mov	r4, r0
   d6b52:	460d      	mov	r5, r1
   d6b54:	464b      	mov	r3, r9
   d6b56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d6b5a:	f000 fdd3 	bl	d7704 <__adddf3>
   d6b5e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d6b62:	f000 ff81 	bl	d7a68 <__aeabi_dmul>
   d6b66:	4622      	mov	r2, r4
   d6b68:	462b      	mov	r3, r5
   d6b6a:	f000 fdcb 	bl	d7704 <__adddf3>
   d6b6e:	4642      	mov	r2, r8
   d6b70:	4606      	mov	r6, r0
   d6b72:	460f      	mov	r7, r1
   d6b74:	464b      	mov	r3, r9
   d6b76:	4640      	mov	r0, r8
   d6b78:	4649      	mov	r1, r9
   d6b7a:	f000 ff75 	bl	d7a68 <__aeabi_dmul>
   d6b7e:	2200      	movs	r2, #0
   d6b80:	4b67      	ldr	r3, [pc, #412]	; (d6d20 <__ieee754_pow+0x560>)
   d6b82:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d6b86:	f000 fdbd 	bl	d7704 <__adddf3>
   d6b8a:	4632      	mov	r2, r6
   d6b8c:	463b      	mov	r3, r7
   d6b8e:	f000 fdb9 	bl	d7704 <__adddf3>
   d6b92:	9802      	ldr	r0, [sp, #8]
   d6b94:	460d      	mov	r5, r1
   d6b96:	4604      	mov	r4, r0
   d6b98:	4622      	mov	r2, r4
   d6b9a:	462b      	mov	r3, r5
   d6b9c:	4640      	mov	r0, r8
   d6b9e:	4649      	mov	r1, r9
   d6ba0:	f000 ff62 	bl	d7a68 <__aeabi_dmul>
   d6ba4:	2200      	movs	r2, #0
   d6ba6:	4680      	mov	r8, r0
   d6ba8:	4689      	mov	r9, r1
   d6baa:	4b5d      	ldr	r3, [pc, #372]	; (d6d20 <__ieee754_pow+0x560>)
   d6bac:	4620      	mov	r0, r4
   d6bae:	4629      	mov	r1, r5
   d6bb0:	f000 fda6 	bl	d7700 <__aeabi_dsub>
   d6bb4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d6bb8:	f000 fda2 	bl	d7700 <__aeabi_dsub>
   d6bbc:	4602      	mov	r2, r0
   d6bbe:	460b      	mov	r3, r1
   d6bc0:	4630      	mov	r0, r6
   d6bc2:	4639      	mov	r1, r7
   d6bc4:	f000 fd9c 	bl	d7700 <__aeabi_dsub>
   d6bc8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d6bcc:	f000 ff4c 	bl	d7a68 <__aeabi_dmul>
   d6bd0:	4622      	mov	r2, r4
   d6bd2:	4606      	mov	r6, r0
   d6bd4:	460f      	mov	r7, r1
   d6bd6:	462b      	mov	r3, r5
   d6bd8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d6bdc:	f000 ff44 	bl	d7a68 <__aeabi_dmul>
   d6be0:	4602      	mov	r2, r0
   d6be2:	460b      	mov	r3, r1
   d6be4:	4630      	mov	r0, r6
   d6be6:	4639      	mov	r1, r7
   d6be8:	f000 fd8c 	bl	d7704 <__adddf3>
   d6bec:	4606      	mov	r6, r0
   d6bee:	460f      	mov	r7, r1
   d6bf0:	4602      	mov	r2, r0
   d6bf2:	460b      	mov	r3, r1
   d6bf4:	4640      	mov	r0, r8
   d6bf6:	4649      	mov	r1, r9
   d6bf8:	e9cd 8904 	strd	r8, r9, [sp, #16]
   d6bfc:	f000 fd82 	bl	d7704 <__adddf3>
   d6c00:	9802      	ldr	r0, [sp, #8]
   d6c02:	a33d      	add	r3, pc, #244	; (adr r3, d6cf8 <__ieee754_pow+0x538>)
   d6c04:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6c08:	4604      	mov	r4, r0
   d6c0a:	460d      	mov	r5, r1
   d6c0c:	f000 ff2c 	bl	d7a68 <__aeabi_dmul>
   d6c10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d6c14:	4680      	mov	r8, r0
   d6c16:	4689      	mov	r9, r1
   d6c18:	4620      	mov	r0, r4
   d6c1a:	4629      	mov	r1, r5
   d6c1c:	f000 fd70 	bl	d7700 <__aeabi_dsub>
   d6c20:	4602      	mov	r2, r0
   d6c22:	460b      	mov	r3, r1
   d6c24:	4630      	mov	r0, r6
   d6c26:	4639      	mov	r1, r7
   d6c28:	f000 fd6a 	bl	d7700 <__aeabi_dsub>
   d6c2c:	a334      	add	r3, pc, #208	; (adr r3, d6d00 <__ieee754_pow+0x540>)
   d6c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6c32:	f000 ff19 	bl	d7a68 <__aeabi_dmul>
   d6c36:	a334      	add	r3, pc, #208	; (adr r3, d6d08 <__ieee754_pow+0x548>)
   d6c38:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6c3c:	4606      	mov	r6, r0
   d6c3e:	460f      	mov	r7, r1
   d6c40:	4620      	mov	r0, r4
   d6c42:	4629      	mov	r1, r5
   d6c44:	f000 ff10 	bl	d7a68 <__aeabi_dmul>
   d6c48:	4602      	mov	r2, r0
   d6c4a:	460b      	mov	r3, r1
   d6c4c:	4630      	mov	r0, r6
   d6c4e:	4639      	mov	r1, r7
   d6c50:	f000 fd58 	bl	d7704 <__adddf3>
   d6c54:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   d6c58:	f000 fd54 	bl	d7704 <__adddf3>
   d6c5c:	4606      	mov	r6, r0
   d6c5e:	980d      	ldr	r0, [sp, #52]	; 0x34
   d6c60:	460f      	mov	r7, r1
   d6c62:	f000 fe9b 	bl	d799c <__aeabi_i2d>
   d6c66:	4632      	mov	r2, r6
   d6c68:	4604      	mov	r4, r0
   d6c6a:	460d      	mov	r5, r1
   d6c6c:	463b      	mov	r3, r7
   d6c6e:	4640      	mov	r0, r8
   d6c70:	4649      	mov	r1, r9
   d6c72:	f000 fd47 	bl	d7704 <__adddf3>
   d6c76:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d6c7a:	f000 fd43 	bl	d7704 <__adddf3>
   d6c7e:	4622      	mov	r2, r4
   d6c80:	462b      	mov	r3, r5
   d6c82:	f000 fd3f 	bl	d7704 <__adddf3>
   d6c86:	9802      	ldr	r0, [sp, #8]
   d6c88:	4622      	mov	r2, r4
   d6c8a:	462b      	mov	r3, r5
   d6c8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d6c90:	f000 fd36 	bl	d7700 <__aeabi_dsub>
   d6c94:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d6c98:	f000 fd32 	bl	d7700 <__aeabi_dsub>
   d6c9c:	4642      	mov	r2, r8
   d6c9e:	464b      	mov	r3, r9
   d6ca0:	f000 fd2e 	bl	d7700 <__aeabi_dsub>
   d6ca4:	4602      	mov	r2, r0
   d6ca6:	460b      	mov	r3, r1
   d6ca8:	4630      	mov	r0, r6
   d6caa:	4639      	mov	r1, r7
   d6cac:	f000 fd28 	bl	d7700 <__aeabi_dsub>
   d6cb0:	4680      	mov	r8, r0
   d6cb2:	4689      	mov	r9, r1
   d6cb4:	e036      	b.n	d6d24 <__ieee754_pow+0x564>
   d6cb6:	bf00      	nop
	...
   d6cc4:	3ff00000 	.word	0x3ff00000
   d6cc8:	4a454eef 	.word	0x4a454eef
   d6ccc:	3fca7e28 	.word	0x3fca7e28
   d6cd0:	93c9db65 	.word	0x93c9db65
   d6cd4:	3fcd864a 	.word	0x3fcd864a
   d6cd8:	a91d4101 	.word	0xa91d4101
   d6cdc:	3fd17460 	.word	0x3fd17460
   d6ce0:	518f264d 	.word	0x518f264d
   d6ce4:	3fd55555 	.word	0x3fd55555
   d6ce8:	db6fabff 	.word	0xdb6fabff
   d6cec:	3fdb6db6 	.word	0x3fdb6db6
   d6cf0:	33333303 	.word	0x33333303
   d6cf4:	3fe33333 	.word	0x3fe33333
   d6cf8:	e0000000 	.word	0xe0000000
   d6cfc:	3feec709 	.word	0x3feec709
   d6d00:	dc3a03fd 	.word	0xdc3a03fd
   d6d04:	3feec709 	.word	0x3feec709
   d6d08:	145b01f5 	.word	0x145b01f5
   d6d0c:	be3e2fe0 	.word	0xbe3e2fe0
   d6d10:	43400000 	.word	0x43400000
   d6d14:	0003988e 	.word	0x0003988e
   d6d18:	000bb679 	.word	0x000bb679
   d6d1c:	3ff00000 	.word	0x3ff00000
   d6d20:	40080000 	.word	0x40080000
   d6d24:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
   d6d28:	ea53 030a 	orrs.w	r3, r3, sl
   d6d2c:	f000 8188 	beq.w	d7040 <__ieee754_pow+0x880>
   d6d30:	ed9f 7bd7 	vldr	d7, [pc, #860]	; d7090 <__ieee754_pow+0x8d0>
   d6d34:	ed8d 7b06 	vstr	d7, [sp, #24]
   d6d38:	e9dd ab00 	ldrd	sl, fp, [sp]
   d6d3c:	4653      	mov	r3, sl
   d6d3e:	465c      	mov	r4, fp
   d6d40:	e9cd 3400 	strd	r3, r4, [sp]
   d6d44:	2300      	movs	r3, #0
   d6d46:	9300      	str	r3, [sp, #0]
   d6d48:	e9dd 4500 	ldrd	r4, r5, [sp]
   d6d4c:	4650      	mov	r0, sl
   d6d4e:	4622      	mov	r2, r4
   d6d50:	462b      	mov	r3, r5
   d6d52:	4659      	mov	r1, fp
   d6d54:	f000 fcd4 	bl	d7700 <__aeabi_dsub>
   d6d58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d6d5c:	f000 fe84 	bl	d7a68 <__aeabi_dmul>
   d6d60:	4652      	mov	r2, sl
   d6d62:	4606      	mov	r6, r0
   d6d64:	460f      	mov	r7, r1
   d6d66:	465b      	mov	r3, fp
   d6d68:	4640      	mov	r0, r8
   d6d6a:	4649      	mov	r1, r9
   d6d6c:	f000 fe7c 	bl	d7a68 <__aeabi_dmul>
   d6d70:	4602      	mov	r2, r0
   d6d72:	460b      	mov	r3, r1
   d6d74:	4630      	mov	r0, r6
   d6d76:	4639      	mov	r1, r7
   d6d78:	f000 fcc4 	bl	d7704 <__adddf3>
   d6d7c:	4622      	mov	r2, r4
   d6d7e:	4680      	mov	r8, r0
   d6d80:	4689      	mov	r9, r1
   d6d82:	462b      	mov	r3, r5
   d6d84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d6d88:	e9cd 8904 	strd	r8, r9, [sp, #16]
   d6d8c:	f000 fe6c 	bl	d7a68 <__aeabi_dmul>
   d6d90:	460b      	mov	r3, r1
   d6d92:	4602      	mov	r2, r0
   d6d94:	4606      	mov	r6, r0
   d6d96:	460f      	mov	r7, r1
   d6d98:	4640      	mov	r0, r8
   d6d9a:	4649      	mov	r1, r9
   d6d9c:	f000 fcb2 	bl	d7704 <__adddf3>
   d6da0:	4bd5      	ldr	r3, [pc, #852]	; (d70f8 <__ieee754_pow+0x938>)
   d6da2:	4299      	cmp	r1, r3
   d6da4:	4604      	mov	r4, r0
   d6da6:	460d      	mov	r5, r1
   d6da8:	468a      	mov	sl, r1
   d6daa:	f340 8123 	ble.w	d6ff4 <__ieee754_pow+0x834>
   d6dae:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   d6db2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   d6db6:	4303      	orrs	r3, r0
   d6db8:	f040 8218 	bne.w	d71ec <__ieee754_pow+0xa2c>
   d6dbc:	a3b6      	add	r3, pc, #728	; (adr r3, d7098 <__ieee754_pow+0x8d8>)
   d6dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6dc2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d6dc6:	f000 fc9d 	bl	d7704 <__adddf3>
   d6dca:	4632      	mov	r2, r6
   d6dcc:	4680      	mov	r8, r0
   d6dce:	4689      	mov	r9, r1
   d6dd0:	463b      	mov	r3, r7
   d6dd2:	4620      	mov	r0, r4
   d6dd4:	4629      	mov	r1, r5
   d6dd6:	f000 fc93 	bl	d7700 <__aeabi_dsub>
   d6dda:	4602      	mov	r2, r0
   d6ddc:	460b      	mov	r3, r1
   d6dde:	4640      	mov	r0, r8
   d6de0:	4649      	mov	r1, r9
   d6de2:	f001 f8d1 	bl	d7f88 <__aeabi_dcmpgt>
   d6de6:	2800      	cmp	r0, #0
   d6de8:	f040 8200 	bne.w	d71ec <__ieee754_pow+0xa2c>
   d6dec:	46a8      	mov	r8, r5
   d6dee:	ea4f 5328 	mov.w	r3, r8, asr #20
   d6df2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   d6df6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   d6dfa:	fa42 f303 	asr.w	r3, r2, r3
   d6dfe:	4453      	add	r3, sl
   d6e00:	f3c3 520a 	ubfx	r2, r3, #20, #11
   d6e04:	4dbd      	ldr	r5, [pc, #756]	; (d70fc <__ieee754_pow+0x93c>)
   d6e06:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   d6e0a:	4115      	asrs	r5, r2
   d6e0c:	f3c3 0b13 	ubfx	fp, r3, #0, #20
   d6e10:	2000      	movs	r0, #0
   d6e12:	f1c2 0414 	rsb	r4, r2, #20
   d6e16:	ea23 0105 	bic.w	r1, r3, r5
   d6e1a:	f44b 1b80 	orr.w	fp, fp, #1048576	; 0x100000
   d6e1e:	f1ba 0f00 	cmp.w	sl, #0
   d6e22:	4602      	mov	r2, r0
   d6e24:	460b      	mov	r3, r1
   d6e26:	fa4b fb04 	asr.w	fp, fp, r4
   d6e2a:	4630      	mov	r0, r6
   d6e2c:	4639      	mov	r1, r7
   d6e2e:	bfb8      	it	lt
   d6e30:	f1cb 0b00 	rsblt	fp, fp, #0
   d6e34:	f000 fc64 	bl	d7700 <__aeabi_dsub>
   d6e38:	4602      	mov	r2, r0
   d6e3a:	460b      	mov	r3, r1
   d6e3c:	4606      	mov	r6, r0
   d6e3e:	460f      	mov	r7, r1
   d6e40:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d6e44:	f000 fc5e 	bl	d7704 <__adddf3>
   d6e48:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
   d6e4c:	2400      	movs	r4, #0
   d6e4e:	a394      	add	r3, pc, #592	; (adr r3, d70a0 <__ieee754_pow+0x8e0>)
   d6e50:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6e54:	4620      	mov	r0, r4
   d6e56:	460d      	mov	r5, r1
   d6e58:	f000 fe06 	bl	d7a68 <__aeabi_dmul>
   d6e5c:	4632      	mov	r2, r6
   d6e5e:	4680      	mov	r8, r0
   d6e60:	4689      	mov	r9, r1
   d6e62:	463b      	mov	r3, r7
   d6e64:	4620      	mov	r0, r4
   d6e66:	4629      	mov	r1, r5
   d6e68:	f000 fc4a 	bl	d7700 <__aeabi_dsub>
   d6e6c:	4602      	mov	r2, r0
   d6e6e:	460b      	mov	r3, r1
   d6e70:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d6e74:	f000 fc44 	bl	d7700 <__aeabi_dsub>
   d6e78:	a38b      	add	r3, pc, #556	; (adr r3, d70a8 <__ieee754_pow+0x8e8>)
   d6e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6e7e:	f000 fdf3 	bl	d7a68 <__aeabi_dmul>
   d6e82:	a38b      	add	r3, pc, #556	; (adr r3, d70b0 <__ieee754_pow+0x8f0>)
   d6e84:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6e88:	4606      	mov	r6, r0
   d6e8a:	460f      	mov	r7, r1
   d6e8c:	4620      	mov	r0, r4
   d6e8e:	4629      	mov	r1, r5
   d6e90:	f000 fdea 	bl	d7a68 <__aeabi_dmul>
   d6e94:	4602      	mov	r2, r0
   d6e96:	460b      	mov	r3, r1
   d6e98:	4630      	mov	r0, r6
   d6e9a:	4639      	mov	r1, r7
   d6e9c:	f000 fc32 	bl	d7704 <__adddf3>
   d6ea0:	4606      	mov	r6, r0
   d6ea2:	460f      	mov	r7, r1
   d6ea4:	4602      	mov	r2, r0
   d6ea6:	460b      	mov	r3, r1
   d6ea8:	4640      	mov	r0, r8
   d6eaa:	4649      	mov	r1, r9
   d6eac:	f000 fc2a 	bl	d7704 <__adddf3>
   d6eb0:	4642      	mov	r2, r8
   d6eb2:	464b      	mov	r3, r9
   d6eb4:	4604      	mov	r4, r0
   d6eb6:	460d      	mov	r5, r1
   d6eb8:	f000 fc22 	bl	d7700 <__aeabi_dsub>
   d6ebc:	4602      	mov	r2, r0
   d6ebe:	460b      	mov	r3, r1
   d6ec0:	4630      	mov	r0, r6
   d6ec2:	4639      	mov	r1, r7
   d6ec4:	f000 fc1c 	bl	d7700 <__aeabi_dsub>
   d6ec8:	4622      	mov	r2, r4
   d6eca:	4680      	mov	r8, r0
   d6ecc:	4689      	mov	r9, r1
   d6ece:	462b      	mov	r3, r5
   d6ed0:	4620      	mov	r0, r4
   d6ed2:	4629      	mov	r1, r5
   d6ed4:	f000 fdc8 	bl	d7a68 <__aeabi_dmul>
   d6ed8:	a377      	add	r3, pc, #476	; (adr r3, d70b8 <__ieee754_pow+0x8f8>)
   d6eda:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6ede:	4606      	mov	r6, r0
   d6ee0:	460f      	mov	r7, r1
   d6ee2:	f000 fdc1 	bl	d7a68 <__aeabi_dmul>
   d6ee6:	a376      	add	r3, pc, #472	; (adr r3, d70c0 <__ieee754_pow+0x900>)
   d6ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6eec:	f000 fc08 	bl	d7700 <__aeabi_dsub>
   d6ef0:	4632      	mov	r2, r6
   d6ef2:	463b      	mov	r3, r7
   d6ef4:	f000 fdb8 	bl	d7a68 <__aeabi_dmul>
   d6ef8:	a373      	add	r3, pc, #460	; (adr r3, d70c8 <__ieee754_pow+0x908>)
   d6efa:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6efe:	f000 fc01 	bl	d7704 <__adddf3>
   d6f02:	4632      	mov	r2, r6
   d6f04:	463b      	mov	r3, r7
   d6f06:	f000 fdaf 	bl	d7a68 <__aeabi_dmul>
   d6f0a:	a371      	add	r3, pc, #452	; (adr r3, d70d0 <__ieee754_pow+0x910>)
   d6f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6f10:	f000 fbf6 	bl	d7700 <__aeabi_dsub>
   d6f14:	4632      	mov	r2, r6
   d6f16:	463b      	mov	r3, r7
   d6f18:	f000 fda6 	bl	d7a68 <__aeabi_dmul>
   d6f1c:	a36e      	add	r3, pc, #440	; (adr r3, d70d8 <__ieee754_pow+0x918>)
   d6f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6f22:	f000 fbef 	bl	d7704 <__adddf3>
   d6f26:	4632      	mov	r2, r6
   d6f28:	463b      	mov	r3, r7
   d6f2a:	f000 fd9d 	bl	d7a68 <__aeabi_dmul>
   d6f2e:	4602      	mov	r2, r0
   d6f30:	460b      	mov	r3, r1
   d6f32:	4620      	mov	r0, r4
   d6f34:	4629      	mov	r1, r5
   d6f36:	f000 fbe3 	bl	d7700 <__aeabi_dsub>
   d6f3a:	4606      	mov	r6, r0
   d6f3c:	460f      	mov	r7, r1
   d6f3e:	4602      	mov	r2, r0
   d6f40:	460b      	mov	r3, r1
   d6f42:	4620      	mov	r0, r4
   d6f44:	4629      	mov	r1, r5
   d6f46:	f000 fd8f 	bl	d7a68 <__aeabi_dmul>
   d6f4a:	2200      	movs	r2, #0
   d6f4c:	e9cd 0100 	strd	r0, r1, [sp]
   d6f50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d6f54:	4630      	mov	r0, r6
   d6f56:	4639      	mov	r1, r7
   d6f58:	f000 fbd2 	bl	d7700 <__aeabi_dsub>
   d6f5c:	4602      	mov	r2, r0
   d6f5e:	460b      	mov	r3, r1
   d6f60:	e9dd 0100 	ldrd	r0, r1, [sp]
   d6f64:	f000 feaa 	bl	d7cbc <__aeabi_ddiv>
   d6f68:	4642      	mov	r2, r8
   d6f6a:	4606      	mov	r6, r0
   d6f6c:	460f      	mov	r7, r1
   d6f6e:	464b      	mov	r3, r9
   d6f70:	4620      	mov	r0, r4
   d6f72:	4629      	mov	r1, r5
   d6f74:	f000 fd78 	bl	d7a68 <__aeabi_dmul>
   d6f78:	4642      	mov	r2, r8
   d6f7a:	464b      	mov	r3, r9
   d6f7c:	f000 fbc2 	bl	d7704 <__adddf3>
   d6f80:	4602      	mov	r2, r0
   d6f82:	460b      	mov	r3, r1
   d6f84:	4630      	mov	r0, r6
   d6f86:	4639      	mov	r1, r7
   d6f88:	f000 fbba 	bl	d7700 <__aeabi_dsub>
   d6f8c:	4622      	mov	r2, r4
   d6f8e:	462b      	mov	r3, r5
   d6f90:	f000 fbb6 	bl	d7700 <__aeabi_dsub>
   d6f94:	4602      	mov	r2, r0
   d6f96:	460b      	mov	r3, r1
   d6f98:	2000      	movs	r0, #0
   d6f9a:	4959      	ldr	r1, [pc, #356]	; (d7100 <__ieee754_pow+0x940>)
   d6f9c:	f000 fbb0 	bl	d7700 <__aeabi_dsub>
   d6fa0:	448a      	add	sl, r1
   d6fa2:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
   d6fa6:	4602      	mov	r2, r0
   d6fa8:	460b      	mov	r3, r1
   d6faa:	f2c0 815b 	blt.w	d7264 <__ieee754_pow+0xaa4>
   d6fae:	4651      	mov	r1, sl
   d6fb0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d6fb4:	f000 fd58 	bl	d7a68 <__aeabi_dmul>
   d6fb8:	ec41 0b10 	vmov	d0, r0, r1
   d6fbc:	e449      	b.n	d6852 <__ieee754_pow+0x92>
   d6fbe:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
   d6fc2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
   d6fc6:	ea54 030b 	orrs.w	r3, r4, fp
   d6fca:	f000 8137 	beq.w	d723c <__ieee754_pow+0xa7c>
   d6fce:	f1bb 0f01 	cmp.w	fp, #1
   d6fd2:	f47f ac80 	bne.w	d68d6 <__ieee754_pow+0x116>
   d6fd6:	4602      	mov	r2, r0
   d6fd8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d6fdc:	ec43 2b10 	vmov	d0, r2, r3
   d6fe0:	e437      	b.n	d6852 <__ieee754_pow+0x92>
   d6fe2:	4632      	mov	r2, r6
   d6fe4:	463b      	mov	r3, r7
   d6fe6:	4630      	mov	r0, r6
   d6fe8:	4639      	mov	r1, r7
   d6fea:	f000 fd3d 	bl	d7a68 <__aeabi_dmul>
   d6fee:	ec41 0b10 	vmov	d0, r0, r1
   d6ff2:	e42e      	b.n	d6852 <__ieee754_pow+0x92>
   d6ff4:	4b43      	ldr	r3, [pc, #268]	; (d7104 <__ieee754_pow+0x944>)
   d6ff6:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   d6ffa:	4598      	cmp	r8, r3
   d6ffc:	f340 8115 	ble.w	d722a <__ieee754_pow+0xa6a>
   d7000:	4b41      	ldr	r3, [pc, #260]	; (d7108 <__ieee754_pow+0x948>)
   d7002:	440b      	add	r3, r1
   d7004:	4303      	orrs	r3, r0
   d7006:	d10c      	bne.n	d7022 <__ieee754_pow+0x862>
   d7008:	4632      	mov	r2, r6
   d700a:	463b      	mov	r3, r7
   d700c:	f000 fb78 	bl	d7700 <__aeabi_dsub>
   d7010:	4602      	mov	r2, r0
   d7012:	460b      	mov	r3, r1
   d7014:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d7018:	f000 ffa2 	bl	d7f60 <__aeabi_dcmple>
   d701c:	2800      	cmp	r0, #0
   d701e:	f43f aee6 	beq.w	d6dee <__ieee754_pow+0x62e>
   d7022:	a32f      	add	r3, pc, #188	; (adr r3, d70e0 <__ieee754_pow+0x920>)
   d7024:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7028:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d702c:	f000 fd1c 	bl	d7a68 <__aeabi_dmul>
   d7030:	a32b      	add	r3, pc, #172	; (adr r3, d70e0 <__ieee754_pow+0x920>)
   d7032:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7036:	f000 fd17 	bl	d7a68 <__aeabi_dmul>
   d703a:	ec41 0b10 	vmov	d0, r0, r1
   d703e:	e408      	b.n	d6852 <__ieee754_pow+0x92>
   d7040:	ed9f 7b29 	vldr	d7, [pc, #164]	; d70e8 <__ieee754_pow+0x928>
   d7044:	ed8d 7b06 	vstr	d7, [sp, #24]
   d7048:	e676      	b.n	d6d38 <__ieee754_pow+0x578>
   d704a:	f1b9 0f00 	cmp.w	r9, #0
   d704e:	f6bf ac8e 	bge.w	d696e <__ieee754_pow+0x1ae>
   d7052:	e9dd 3400 	ldrd	r3, r4, [sp]
   d7056:	ee00 3a10 	vmov	s0, r3
   d705a:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
   d705e:	ee00 3a90 	vmov	s1, r3
   d7062:	f7ff bbf6 	b.w	d6852 <__ieee754_pow+0x92>
   d7066:	4602      	mov	r2, r0
   d7068:	460b      	mov	r3, r1
   d706a:	2000      	movs	r0, #0
   d706c:	4924      	ldr	r1, [pc, #144]	; (d7100 <__ieee754_pow+0x940>)
   d706e:	f000 fe25 	bl	d7cbc <__aeabi_ddiv>
   d7072:	e42d      	b.n	d68d0 <__ieee754_pow+0x110>
   d7074:	ed9f 7b1e 	vldr	d7, [pc, #120]	; d70f0 <__ieee754_pow+0x930>
   d7078:	ed8d 7b08 	vstr	d7, [sp, #32]
   d707c:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d7080:	ed9f 7b03 	vldr	d7, [pc, #12]	; d7090 <__ieee754_pow+0x8d0>
   d7084:	f04f 0800 	mov.w	r8, #0
   d7088:	ed8d 7b06 	vstr	d7, [sp, #24]
   d708c:	e4be      	b.n	d6a0c <__ieee754_pow+0x24c>
   d708e:	bf00      	nop
   d7090:	00000000 	.word	0x00000000
   d7094:	3ff00000 	.word	0x3ff00000
   d7098:	652b82fe 	.word	0x652b82fe
   d709c:	3c971547 	.word	0x3c971547
   d70a0:	00000000 	.word	0x00000000
   d70a4:	3fe62e43 	.word	0x3fe62e43
   d70a8:	fefa39ef 	.word	0xfefa39ef
   d70ac:	3fe62e42 	.word	0x3fe62e42
   d70b0:	0ca86c39 	.word	0x0ca86c39
   d70b4:	be205c61 	.word	0xbe205c61
   d70b8:	72bea4d0 	.word	0x72bea4d0
   d70bc:	3e663769 	.word	0x3e663769
   d70c0:	c5d26bf1 	.word	0xc5d26bf1
   d70c4:	3ebbbd41 	.word	0x3ebbbd41
   d70c8:	af25de2c 	.word	0xaf25de2c
   d70cc:	3f11566a 	.word	0x3f11566a
   d70d0:	16bebd93 	.word	0x16bebd93
   d70d4:	3f66c16c 	.word	0x3f66c16c
   d70d8:	5555553e 	.word	0x5555553e
   d70dc:	3fc55555 	.word	0x3fc55555
   d70e0:	c2f8f359 	.word	0xc2f8f359
   d70e4:	01a56e1f 	.word	0x01a56e1f
   d70e8:	00000000 	.word	0x00000000
   d70ec:	bff00000 	.word	0xbff00000
	...
   d70f8:	408fffff 	.word	0x408fffff
   d70fc:	000fffff 	.word	0x000fffff
   d7100:	3ff00000 	.word	0x3ff00000
   d7104:	4090cbff 	.word	0x4090cbff
   d7108:	3f6f3400 	.word	0x3f6f3400
   d710c:	4b6c      	ldr	r3, [pc, #432]	; (d72c0 <__ieee754_pow+0xb00>)
   d710e:	429c      	cmp	r4, r3
   d7110:	f77f ac2a 	ble.w	d6968 <__ieee754_pow+0x1a8>
   d7114:	4b6b      	ldr	r3, [pc, #428]	; (d72c4 <__ieee754_pow+0xb04>)
   d7116:	429c      	cmp	r4, r3
   d7118:	f73f abc3 	bgt.w	d68a2 <__ieee754_pow+0xe2>
   d711c:	2200      	movs	r2, #0
   d711e:	4b69      	ldr	r3, [pc, #420]	; (d72c4 <__ieee754_pow+0xb04>)
   d7120:	f000 faee 	bl	d7700 <__aeabi_dsub>
   d7124:	a356      	add	r3, pc, #344	; (adr r3, d7280 <__ieee754_pow+0xac0>)
   d7126:	e9d3 2300 	ldrd	r2, r3, [r3]
   d712a:	4604      	mov	r4, r0
   d712c:	460d      	mov	r5, r1
   d712e:	f000 fc9b 	bl	d7a68 <__aeabi_dmul>
   d7132:	a355      	add	r3, pc, #340	; (adr r3, d7288 <__ieee754_pow+0xac8>)
   d7134:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7138:	4680      	mov	r8, r0
   d713a:	4689      	mov	r9, r1
   d713c:	4620      	mov	r0, r4
   d713e:	4629      	mov	r1, r5
   d7140:	f000 fc92 	bl	d7a68 <__aeabi_dmul>
   d7144:	2200      	movs	r2, #0
   d7146:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d714a:	4b5f      	ldr	r3, [pc, #380]	; (d72c8 <__ieee754_pow+0xb08>)
   d714c:	4620      	mov	r0, r4
   d714e:	4629      	mov	r1, r5
   d7150:	f000 fc8a 	bl	d7a68 <__aeabi_dmul>
   d7154:	4602      	mov	r2, r0
   d7156:	460b      	mov	r3, r1
   d7158:	a14d      	add	r1, pc, #308	; (adr r1, d7290 <__ieee754_pow+0xad0>)
   d715a:	e9d1 0100 	ldrd	r0, r1, [r1]
   d715e:	f000 facf 	bl	d7700 <__aeabi_dsub>
   d7162:	4622      	mov	r2, r4
   d7164:	462b      	mov	r3, r5
   d7166:	f000 fc7f 	bl	d7a68 <__aeabi_dmul>
   d716a:	4602      	mov	r2, r0
   d716c:	460b      	mov	r3, r1
   d716e:	2000      	movs	r0, #0
   d7170:	4956      	ldr	r1, [pc, #344]	; (d72cc <__ieee754_pow+0xb0c>)
   d7172:	f000 fac5 	bl	d7700 <__aeabi_dsub>
   d7176:	4622      	mov	r2, r4
   d7178:	462b      	mov	r3, r5
   d717a:	4606      	mov	r6, r0
   d717c:	460f      	mov	r7, r1
   d717e:	4620      	mov	r0, r4
   d7180:	4629      	mov	r1, r5
   d7182:	f000 fc71 	bl	d7a68 <__aeabi_dmul>
   d7186:	4602      	mov	r2, r0
   d7188:	460b      	mov	r3, r1
   d718a:	4630      	mov	r0, r6
   d718c:	4639      	mov	r1, r7
   d718e:	f000 fc6b 	bl	d7a68 <__aeabi_dmul>
   d7192:	a341      	add	r3, pc, #260	; (adr r3, d7298 <__ieee754_pow+0xad8>)
   d7194:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7198:	f000 fc66 	bl	d7a68 <__aeabi_dmul>
   d719c:	4602      	mov	r2, r0
   d719e:	460b      	mov	r3, r1
   d71a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d71a4:	f000 faac 	bl	d7700 <__aeabi_dsub>
   d71a8:	4602      	mov	r2, r0
   d71aa:	460b      	mov	r3, r1
   d71ac:	4604      	mov	r4, r0
   d71ae:	460d      	mov	r5, r1
   d71b0:	4640      	mov	r0, r8
   d71b2:	4649      	mov	r1, r9
   d71b4:	f000 faa6 	bl	d7704 <__adddf3>
   d71b8:	4642      	mov	r2, r8
   d71ba:	464b      	mov	r3, r9
   d71bc:	2000      	movs	r0, #0
   d71be:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d71c2:	f000 fa9d 	bl	d7700 <__aeabi_dsub>
   d71c6:	4602      	mov	r2, r0
   d71c8:	460b      	mov	r3, r1
   d71ca:	4620      	mov	r0, r4
   d71cc:	4629      	mov	r1, r5
   d71ce:	f000 fa97 	bl	d7700 <__aeabi_dsub>
   d71d2:	4680      	mov	r8, r0
   d71d4:	4689      	mov	r9, r1
   d71d6:	e5a5      	b.n	d6d24 <__ieee754_pow+0x564>
   d71d8:	4632      	mov	r2, r6
   d71da:	463b      	mov	r3, r7
   d71dc:	2000      	movs	r0, #0
   d71de:	4939      	ldr	r1, [pc, #228]	; (d72c4 <__ieee754_pow+0xb04>)
   d71e0:	f000 fd6c 	bl	d7cbc <__aeabi_ddiv>
   d71e4:	ec41 0b10 	vmov	d0, r0, r1
   d71e8:	f7ff bb33 	b.w	d6852 <__ieee754_pow+0x92>
   d71ec:	a32c      	add	r3, pc, #176	; (adr r3, d72a0 <__ieee754_pow+0xae0>)
   d71ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   d71f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d71f6:	f000 fc37 	bl	d7a68 <__aeabi_dmul>
   d71fa:	a329      	add	r3, pc, #164	; (adr r3, d72a0 <__ieee754_pow+0xae0>)
   d71fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7200:	f000 fc32 	bl	d7a68 <__aeabi_dmul>
   d7204:	ec41 0b10 	vmov	d0, r0, r1
   d7208:	f7ff bb23 	b.w	d6852 <__ieee754_pow+0x92>
   d720c:	f1be 0f00 	cmp.w	lr, #0
   d7210:	f47f ab2a 	bne.w	d6868 <__ieee754_pow+0xa8>
   d7214:	f1c3 0314 	rsb	r3, r3, #20
   d7218:	fa48 f203 	asr.w	r2, r8, r3
   d721c:	fa02 f303 	lsl.w	r3, r2, r3
   d7220:	4598      	cmp	r8, r3
   d7222:	d027      	beq.n	d7274 <__ieee754_pow+0xab4>
   d7224:	46f3      	mov	fp, lr
   d7226:	f7ff baf7 	b.w	d6818 <__ieee754_pow+0x58>
   d722a:	4b28      	ldr	r3, [pc, #160]	; (d72cc <__ieee754_pow+0xb0c>)
   d722c:	4598      	cmp	r8, r3
   d722e:	f73f adde 	bgt.w	d6dee <__ieee754_pow+0x62e>
   d7232:	e9dd 3400 	ldrd	r3, r4, [sp]
   d7236:	469a      	mov	sl, r3
   d7238:	469b      	mov	fp, r3
   d723a:	e607      	b.n	d6e4c <__ieee754_pow+0x68c>
   d723c:	4602      	mov	r2, r0
   d723e:	460b      	mov	r3, r1
   d7240:	f7ff bb89 	b.w	d6956 <__ieee754_pow+0x196>
   d7244:	ed9f 7b18 	vldr	d7, [pc, #96]	; d72a8 <__ieee754_pow+0xae8>
   d7248:	ed8d 7b08 	vstr	d7, [sp, #32]
   d724c:	ed9f 7b18 	vldr	d7, [pc, #96]	; d72b0 <__ieee754_pow+0xaf0>
   d7250:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d7254:	ed9f 7b18 	vldr	d7, [pc, #96]	; d72b8 <__ieee754_pow+0xaf8>
   d7258:	f44f 2880 	mov.w	r8, #262144	; 0x40000
   d725c:	ed8d 7b06 	vstr	d7, [sp, #24]
   d7260:	f7ff bbd4 	b.w	d6a0c <__ieee754_pow+0x24c>
   d7264:	4658      	mov	r0, fp
   d7266:	ec43 2b10 	vmov	d0, r2, r3
   d726a:	f000 f9b1 	bl	d75d0 <scalbn>
   d726e:	ec51 0b10 	vmov	r0, r1, d0
   d7272:	e69d      	b.n	d6fb0 <__ieee754_pow+0x7f0>
   d7274:	f002 0201 	and.w	r2, r2, #1
   d7278:	f1c2 0b02 	rsb	fp, r2, #2
   d727c:	f7ff bacc 	b.w	d6818 <__ieee754_pow+0x58>
   d7280:	60000000 	.word	0x60000000
   d7284:	3ff71547 	.word	0x3ff71547
   d7288:	f85ddf44 	.word	0xf85ddf44
   d728c:	3e54ae0b 	.word	0x3e54ae0b
   d7290:	55555555 	.word	0x55555555
   d7294:	3fd55555 	.word	0x3fd55555
   d7298:	652b82fe 	.word	0x652b82fe
   d729c:	3ff71547 	.word	0x3ff71547
   d72a0:	8800759c 	.word	0x8800759c
   d72a4:	7e37e43c 	.word	0x7e37e43c
   d72a8:	40000000 	.word	0x40000000
   d72ac:	3fe2b803 	.word	0x3fe2b803
   d72b0:	43cfd006 	.word	0x43cfd006
   d72b4:	3e4cfdeb 	.word	0x3e4cfdeb
   d72b8:	00000000 	.word	0x00000000
   d72bc:	3ff80000 	.word	0x3ff80000
   d72c0:	3feffffe 	.word	0x3feffffe
   d72c4:	3ff00000 	.word	0x3ff00000
   d72c8:	3fd00000 	.word	0x3fd00000
   d72cc:	3fe00000 	.word	0x3fe00000

000d72d0 <__ieee754_sqrt>:
   d72d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d72d4:	4965      	ldr	r1, [pc, #404]	; (d746c <__ieee754_sqrt+0x19c>)
   d72d6:	ec55 4b10 	vmov	r4, r5, d0
   d72da:	460e      	mov	r6, r1
   d72dc:	4029      	ands	r1, r5
   d72de:	42b1      	cmp	r1, r6
   d72e0:	f000 8097 	beq.w	d7412 <__ieee754_sqrt+0x142>
   d72e4:	2d00      	cmp	r5, #0
   d72e6:	462b      	mov	r3, r5
   d72e8:	ee10 2a10 	vmov	r2, s0
   d72ec:	dd74      	ble.n	d73d8 <__ieee754_sqrt+0x108>
   d72ee:	152f      	asrs	r7, r5, #20
   d72f0:	d07f      	beq.n	d73f2 <__ieee754_sqrt+0x122>
   d72f2:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   d72f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
   d72fa:	07f9      	lsls	r1, r7, #31
   d72fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d7300:	d465      	bmi.n	d73ce <__ieee754_sqrt+0xfe>
   d7302:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
   d7306:	2600      	movs	r6, #0
   d7308:	440b      	add	r3, r1
   d730a:	107f      	asrs	r7, r7, #1
   d730c:	0052      	lsls	r2, r2, #1
   d730e:	46b6      	mov	lr, r6
   d7310:	2016      	movs	r0, #22
   d7312:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   d7316:	eb0e 0401 	add.w	r4, lr, r1
   d731a:	429c      	cmp	r4, r3
   d731c:	ea4f 75d2 	mov.w	r5, r2, lsr #31
   d7320:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d7324:	dc03      	bgt.n	d732e <__ieee754_sqrt+0x5e>
   d7326:	1b1b      	subs	r3, r3, r4
   d7328:	eb04 0e01 	add.w	lr, r4, r1
   d732c:	440e      	add	r6, r1
   d732e:	3801      	subs	r0, #1
   d7330:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   d7334:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d7338:	d1ed      	bne.n	d7316 <__ieee754_sqrt+0x46>
   d733a:	4684      	mov	ip, r0
   d733c:	2420      	movs	r4, #32
   d733e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   d7342:	e009      	b.n	d7358 <__ieee754_sqrt+0x88>
   d7344:	d020      	beq.n	d7388 <__ieee754_sqrt+0xb8>
   d7346:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   d734a:	3c01      	subs	r4, #1
   d734c:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d7350:	442b      	add	r3, r5
   d7352:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d7356:	d020      	beq.n	d739a <__ieee754_sqrt+0xca>
   d7358:	459e      	cmp	lr, r3
   d735a:	eb01 050c 	add.w	r5, r1, ip
   d735e:	daf1      	bge.n	d7344 <__ieee754_sqrt+0x74>
   d7360:	2d00      	cmp	r5, #0
   d7362:	eb05 0c01 	add.w	ip, r5, r1
   d7366:	db09      	blt.n	d737c <__ieee754_sqrt+0xac>
   d7368:	46f0      	mov	r8, lr
   d736a:	4295      	cmp	r5, r2
   d736c:	ebce 0303 	rsb	r3, lr, r3
   d7370:	d900      	bls.n	d7374 <__ieee754_sqrt+0xa4>
   d7372:	3b01      	subs	r3, #1
   d7374:	1b52      	subs	r2, r2, r5
   d7376:	4408      	add	r0, r1
   d7378:	46c6      	mov	lr, r8
   d737a:	e7e4      	b.n	d7346 <__ieee754_sqrt+0x76>
   d737c:	f1bc 0f00 	cmp.w	ip, #0
   d7380:	dbf2      	blt.n	d7368 <__ieee754_sqrt+0x98>
   d7382:	f10e 0801 	add.w	r8, lr, #1
   d7386:	e7f0      	b.n	d736a <__ieee754_sqrt+0x9a>
   d7388:	4295      	cmp	r5, r2
   d738a:	d81e      	bhi.n	d73ca <__ieee754_sqrt+0xfa>
   d738c:	2d00      	cmp	r5, #0
   d738e:	eb05 0c01 	add.w	ip, r5, r1
   d7392:	db50      	blt.n	d7436 <__ieee754_sqrt+0x166>
   d7394:	4698      	mov	r8, r3
   d7396:	2300      	movs	r3, #0
   d7398:	e7ec      	b.n	d7374 <__ieee754_sqrt+0xa4>
   d739a:	4313      	orrs	r3, r2
   d739c:	d004      	beq.n	d73a8 <__ieee754_sqrt+0xd8>
   d739e:	1c42      	adds	r2, r0, #1
   d73a0:	d04d      	beq.n	d743e <__ieee754_sqrt+0x16e>
   d73a2:	f000 0301 	and.w	r3, r0, #1
   d73a6:	4418      	add	r0, r3
   d73a8:	0840      	lsrs	r0, r0, #1
   d73aa:	1071      	asrs	r1, r6, #1
   d73ac:	07f3      	lsls	r3, r6, #31
   d73ae:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   d73b2:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   d73b6:	bf48      	it	mi
   d73b8:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   d73bc:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   d73c0:	4602      	mov	r2, r0
   d73c2:	ec43 2b10 	vmov	d0, r2, r3
   d73c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d73ca:	4673      	mov	r3, lr
   d73cc:	e7bb      	b.n	d7346 <__ieee754_sqrt+0x76>
   d73ce:	005b      	lsls	r3, r3, #1
   d73d0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   d73d4:	0052      	lsls	r2, r2, #1
   d73d6:	e794      	b.n	d7302 <__ieee754_sqrt+0x32>
   d73d8:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
   d73dc:	4321      	orrs	r1, r4
   d73de:	d028      	beq.n	d7432 <__ieee754_sqrt+0x162>
   d73e0:	bbad      	cbnz	r5, d744e <__ieee754_sqrt+0x17e>
   d73e2:	462f      	mov	r7, r5
   d73e4:	0ad3      	lsrs	r3, r2, #11
   d73e6:	3f15      	subs	r7, #21
   d73e8:	0552      	lsls	r2, r2, #21
   d73ea:	2b00      	cmp	r3, #0
   d73ec:	d0fa      	beq.n	d73e4 <__ieee754_sqrt+0x114>
   d73ee:	02dd      	lsls	r5, r3, #11
   d73f0:	d428      	bmi.n	d7444 <__ieee754_sqrt+0x174>
   d73f2:	2100      	movs	r1, #0
   d73f4:	e000      	b.n	d73f8 <__ieee754_sqrt+0x128>
   d73f6:	4601      	mov	r1, r0
   d73f8:	005b      	lsls	r3, r3, #1
   d73fa:	02dc      	lsls	r4, r3, #11
   d73fc:	f101 0001 	add.w	r0, r1, #1
   d7400:	d5f9      	bpl.n	d73f6 <__ieee754_sqrt+0x126>
   d7402:	f1c0 0420 	rsb	r4, r0, #32
   d7406:	fa22 f404 	lsr.w	r4, r2, r4
   d740a:	4323      	orrs	r3, r4
   d740c:	1a7f      	subs	r7, r7, r1
   d740e:	4082      	lsls	r2, r0
   d7410:	e76f      	b.n	d72f2 <__ieee754_sqrt+0x22>
   d7412:	ee10 2a10 	vmov	r2, s0
   d7416:	462b      	mov	r3, r5
   d7418:	ee10 0a10 	vmov	r0, s0
   d741c:	4629      	mov	r1, r5
   d741e:	f000 fb23 	bl	d7a68 <__aeabi_dmul>
   d7422:	4622      	mov	r2, r4
   d7424:	462b      	mov	r3, r5
   d7426:	f000 f96d 	bl	d7704 <__adddf3>
   d742a:	ec41 0b10 	vmov	d0, r0, r1
   d742e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7436:	f1bc 0f00 	cmp.w	ip, #0
   d743a:	daa2      	bge.n	d7382 <__ieee754_sqrt+0xb2>
   d743c:	e7aa      	b.n	d7394 <__ieee754_sqrt+0xc4>
   d743e:	3601      	adds	r6, #1
   d7440:	4620      	mov	r0, r4
   d7442:	e7b2      	b.n	d73aa <__ieee754_sqrt+0xda>
   d7444:	2420      	movs	r4, #32
   d7446:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d744a:	2000      	movs	r0, #0
   d744c:	e7db      	b.n	d7406 <__ieee754_sqrt+0x136>
   d744e:	ee10 2a10 	vmov	r2, s0
   d7452:	462b      	mov	r3, r5
   d7454:	4620      	mov	r0, r4
   d7456:	4629      	mov	r1, r5
   d7458:	f000 f952 	bl	d7700 <__aeabi_dsub>
   d745c:	4602      	mov	r2, r0
   d745e:	460b      	mov	r3, r1
   d7460:	f000 fc2c 	bl	d7cbc <__aeabi_ddiv>
   d7464:	ec41 0b10 	vmov	d0, r0, r1
   d7468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d746c:	7ff00000 	.word	0x7ff00000

000d7470 <fabs>:
   d7470:	ec53 2b10 	vmov	r2, r3, d0
   d7474:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   d7478:	ec43 2b10 	vmov	d0, r2, r3
   d747c:	4770      	bx	lr
   d747e:	bf00      	nop

000d7480 <finite>:
   d7480:	ee10 3a90 	vmov	r3, s1
   d7484:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
   d7488:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   d748c:	0fc0      	lsrs	r0, r0, #31
   d748e:	4770      	bx	lr

000d7490 <matherr>:
   d7490:	2000      	movs	r0, #0
   d7492:	4770      	bx	lr
   d7494:	0000      	movs	r0, r0
	...

000d7498 <nan>:
   d7498:	ed9f 0b01 	vldr	d0, [pc, #4]	; d74a0 <nan+0x8>
   d749c:	4770      	bx	lr
   d749e:	bf00      	nop
   d74a0:	00000000 	.word	0x00000000
   d74a4:	7ff80000 	.word	0x7ff80000

000d74a8 <rint>:
   d74a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d74aa:	ec53 2b10 	vmov	r2, r3, d0
   d74ae:	f3c3 560a 	ubfx	r6, r3, #20, #11
   d74b2:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   d74b6:	2813      	cmp	r0, #19
   d74b8:	b083      	sub	sp, #12
   d74ba:	4619      	mov	r1, r3
   d74bc:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   d74c0:	ee10 5a10 	vmov	r5, s0
   d74c4:	dc2f      	bgt.n	d7526 <rint+0x7e>
   d74c6:	2800      	cmp	r0, #0
   d74c8:	db49      	blt.n	d755e <rint+0xb6>
   d74ca:	4e3f      	ldr	r6, [pc, #252]	; (d75c8 <rint+0x120>)
   d74cc:	4106      	asrs	r6, r0
   d74ce:	ea03 0706 	and.w	r7, r3, r6
   d74d2:	4317      	orrs	r7, r2
   d74d4:	d02c      	beq.n	d7530 <rint+0x88>
   d74d6:	0876      	lsrs	r6, r6, #1
   d74d8:	4033      	ands	r3, r6
   d74da:	431d      	orrs	r5, r3
   d74dc:	d00c      	beq.n	d74f8 <rint+0x50>
   d74de:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   d74e2:	2813      	cmp	r0, #19
   d74e4:	ea21 0606 	bic.w	r6, r1, r6
   d74e8:	fa43 f100 	asr.w	r1, r3, r0
   d74ec:	ea41 0106 	orr.w	r1, r1, r6
   d74f0:	bf0c      	ite	eq
   d74f2:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   d74f6:	2500      	movne	r5, #0
   d74f8:	4834      	ldr	r0, [pc, #208]	; (d75cc <rint+0x124>)
   d74fa:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   d74fe:	462a      	mov	r2, r5
   d7500:	e9d4 4500 	ldrd	r4, r5, [r4]
   d7504:	4610      	mov	r0, r2
   d7506:	462b      	mov	r3, r5
   d7508:	4622      	mov	r2, r4
   d750a:	f000 f8fb 	bl	d7704 <__adddf3>
   d750e:	e9cd 0100 	strd	r0, r1, [sp]
   d7512:	4622      	mov	r2, r4
   d7514:	462b      	mov	r3, r5
   d7516:	e9dd 0100 	ldrd	r0, r1, [sp]
   d751a:	f000 f8f1 	bl	d7700 <__aeabi_dsub>
   d751e:	ec41 0b10 	vmov	d0, r0, r1
   d7522:	b003      	add	sp, #12
   d7524:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7526:	2833      	cmp	r0, #51	; 0x33
   d7528:	dd06      	ble.n	d7538 <rint+0x90>
   d752a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   d752e:	d042      	beq.n	d75b6 <rint+0x10e>
   d7530:	ec43 2b10 	vmov	d0, r2, r3
   d7534:	b003      	add	sp, #12
   d7536:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7538:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   d753c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d7540:	40f0      	lsrs	r0, r6
   d7542:	4202      	tst	r2, r0
   d7544:	d0f4      	beq.n	d7530 <rint+0x88>
   d7546:	0840      	lsrs	r0, r0, #1
   d7548:	4202      	tst	r2, r0
   d754a:	d0d5      	beq.n	d74f8 <rint+0x50>
   d754c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d7550:	ea25 0000 	bic.w	r0, r5, r0
   d7554:	fa43 f606 	asr.w	r6, r3, r6
   d7558:	ea46 0500 	orr.w	r5, r6, r0
   d755c:	e7cc      	b.n	d74f8 <rint+0x50>
   d755e:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   d7562:	4310      	orrs	r0, r2
   d7564:	ee10 7a10 	vmov	r7, s0
   d7568:	d0e2      	beq.n	d7530 <rint+0x88>
   d756a:	f3c3 0013 	ubfx	r0, r3, #0, #20
   d756e:	4307      	orrs	r7, r0
   d7570:	4278      	negs	r0, r7
   d7572:	4307      	orrs	r7, r0
   d7574:	4815      	ldr	r0, [pc, #84]	; (d75cc <rint+0x124>)
   d7576:	0c59      	lsrs	r1, r3, #17
   d7578:	0b3f      	lsrs	r7, r7, #12
   d757a:	0449      	lsls	r1, r1, #17
   d757c:	f407 2700 	and.w	r7, r7, #524288	; 0x80000
   d7580:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   d7584:	ea47 0301 	orr.w	r3, r7, r1
   d7588:	e9d0 6700 	ldrd	r6, r7, [r0]
   d758c:	4619      	mov	r1, r3
   d758e:	4610      	mov	r0, r2
   d7590:	463b      	mov	r3, r7
   d7592:	4632      	mov	r2, r6
   d7594:	f000 f8b6 	bl	d7704 <__adddf3>
   d7598:	e9cd 0100 	strd	r0, r1, [sp]
   d759c:	463b      	mov	r3, r7
   d759e:	4632      	mov	r2, r6
   d75a0:	e9dd 0100 	ldrd	r0, r1, [sp]
   d75a4:	f000 f8ac 	bl	d7700 <__aeabi_dsub>
   d75a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d75ac:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   d75b0:	ec41 0b10 	vmov	d0, r0, r1
   d75b4:	e7be      	b.n	d7534 <rint+0x8c>
   d75b6:	ee10 0a10 	vmov	r0, s0
   d75ba:	4619      	mov	r1, r3
   d75bc:	f000 f8a2 	bl	d7704 <__adddf3>
   d75c0:	ec41 0b10 	vmov	d0, r0, r1
   d75c4:	e7b6      	b.n	d7534 <rint+0x8c>
   d75c6:	bf00      	nop
   d75c8:	000fffff 	.word	0x000fffff
   d75cc:	000d8ab8 	.word	0x000d8ab8

000d75d0 <scalbn>:
   d75d0:	ec53 2b10 	vmov	r2, r3, d0
   d75d4:	b570      	push	{r4, r5, r6, lr}
   d75d6:	f3c3 540a 	ubfx	r4, r3, #20, #11
   d75da:	4619      	mov	r1, r3
   d75dc:	4605      	mov	r5, r0
   d75de:	bb14      	cbnz	r4, d7626 <scalbn+0x56>
   d75e0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   d75e4:	4311      	orrs	r1, r2
   d75e6:	d02a      	beq.n	d763e <scalbn+0x6e>
   d75e8:	4619      	mov	r1, r3
   d75ea:	2200      	movs	r2, #0
   d75ec:	4b38      	ldr	r3, [pc, #224]	; (d76d0 <scalbn+0x100>)
   d75ee:	4e39      	ldr	r6, [pc, #228]	; (d76d4 <scalbn+0x104>)
   d75f0:	ee10 0a10 	vmov	r0, s0
   d75f4:	f000 fa38 	bl	d7a68 <__aeabi_dmul>
   d75f8:	42b5      	cmp	r5, r6
   d75fa:	4602      	mov	r2, r0
   d75fc:	460b      	mov	r3, r1
   d75fe:	db1f      	blt.n	d7640 <scalbn+0x70>
   d7600:	f3c1 540a 	ubfx	r4, r1, #20, #11
   d7604:	3c36      	subs	r4, #54	; 0x36
   d7606:	442c      	add	r4, r5
   d7608:	f240 70fe 	movw	r0, #2046	; 0x7fe
   d760c:	4284      	cmp	r4, r0
   d760e:	dc1f      	bgt.n	d7650 <scalbn+0x80>
   d7610:	2c00      	cmp	r4, #0
   d7612:	dd2d      	ble.n	d7670 <scalbn+0xa0>
   d7614:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   d7618:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   d761c:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   d7620:	ec43 2b10 	vmov	d0, r2, r3
   d7624:	bd70      	pop	{r4, r5, r6, pc}
   d7626:	f240 70ff 	movw	r0, #2047	; 0x7ff
   d762a:	4284      	cmp	r4, r0
   d762c:	d1eb      	bne.n	d7606 <scalbn+0x36>
   d762e:	ee10 0a10 	vmov	r0, s0
   d7632:	4619      	mov	r1, r3
   d7634:	f000 f866 	bl	d7704 <__adddf3>
   d7638:	ec41 0b10 	vmov	d0, r0, r1
   d763c:	bd70      	pop	{r4, r5, r6, pc}
   d763e:	bd70      	pop	{r4, r5, r6, pc}
   d7640:	a31f      	add	r3, pc, #124	; (adr r3, d76c0 <scalbn+0xf0>)
   d7642:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7646:	f000 fa0f 	bl	d7a68 <__aeabi_dmul>
   d764a:	ec41 0b10 	vmov	d0, r0, r1
   d764e:	bd70      	pop	{r4, r5, r6, pc}
   d7650:	ec43 2b11 	vmov	d1, r2, r3
   d7654:	ed9f 0b1c 	vldr	d0, [pc, #112]	; d76c8 <scalbn+0xf8>
   d7658:	f000 f840 	bl	d76dc <copysign>
   d765c:	a31a      	add	r3, pc, #104	; (adr r3, d76c8 <scalbn+0xf8>)
   d765e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7662:	ec51 0b10 	vmov	r0, r1, d0
   d7666:	f000 f9ff 	bl	d7a68 <__aeabi_dmul>
   d766a:	ec41 0b10 	vmov	d0, r0, r1
   d766e:	bd70      	pop	{r4, r5, r6, pc}
   d7670:	f114 0f35 	cmn.w	r4, #53	; 0x35
   d7674:	da13      	bge.n	d769e <scalbn+0xce>
   d7676:	f24c 3150 	movw	r1, #50000	; 0xc350
   d767a:	428d      	cmp	r5, r1
   d767c:	ec43 2b11 	vmov	d1, r2, r3
   d7680:	dce8      	bgt.n	d7654 <scalbn+0x84>
   d7682:	ed9f 0b0f 	vldr	d0, [pc, #60]	; d76c0 <scalbn+0xf0>
   d7686:	f000 f829 	bl	d76dc <copysign>
   d768a:	a30d      	add	r3, pc, #52	; (adr r3, d76c0 <scalbn+0xf0>)
   d768c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7690:	ec51 0b10 	vmov	r0, r1, d0
   d7694:	f000 f9e8 	bl	d7a68 <__aeabi_dmul>
   d7698:	ec41 0b10 	vmov	d0, r0, r1
   d769c:	bd70      	pop	{r4, r5, r6, pc}
   d769e:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   d76a2:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   d76a6:	3436      	adds	r4, #54	; 0x36
   d76a8:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   d76ac:	4610      	mov	r0, r2
   d76ae:	4619      	mov	r1, r3
   d76b0:	2200      	movs	r2, #0
   d76b2:	4b09      	ldr	r3, [pc, #36]	; (d76d8 <scalbn+0x108>)
   d76b4:	f000 f9d8 	bl	d7a68 <__aeabi_dmul>
   d76b8:	ec41 0b10 	vmov	d0, r0, r1
   d76bc:	bd70      	pop	{r4, r5, r6, pc}
   d76be:	bf00      	nop
   d76c0:	c2f8f359 	.word	0xc2f8f359
   d76c4:	01a56e1f 	.word	0x01a56e1f
   d76c8:	8800759c 	.word	0x8800759c
   d76cc:	7e37e43c 	.word	0x7e37e43c
   d76d0:	43500000 	.word	0x43500000
   d76d4:	ffff3cb0 	.word	0xffff3cb0
   d76d8:	3c900000 	.word	0x3c900000

000d76dc <copysign>:
   d76dc:	ec53 2b10 	vmov	r2, r3, d0
   d76e0:	ee11 0a90 	vmov	r0, s3
   d76e4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   d76e8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   d76ec:	ea41 0300 	orr.w	r3, r1, r0
   d76f0:	ec43 2b10 	vmov	d0, r2, r3
   d76f4:	4770      	bx	lr
   d76f6:	bf00      	nop

000d76f8 <__aeabi_drsub>:
   d76f8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d76fc:	e002      	b.n	d7704 <__adddf3>
   d76fe:	bf00      	nop

000d7700 <__aeabi_dsub>:
   d7700:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d7704 <__adddf3>:
   d7704:	b530      	push	{r4, r5, lr}
   d7706:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d770a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d770e:	ea94 0f05 	teq	r4, r5
   d7712:	bf08      	it	eq
   d7714:	ea90 0f02 	teqeq	r0, r2
   d7718:	bf1f      	itttt	ne
   d771a:	ea54 0c00 	orrsne.w	ip, r4, r0
   d771e:	ea55 0c02 	orrsne.w	ip, r5, r2
   d7722:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d7726:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d772a:	f000 80e2 	beq.w	d78f2 <__adddf3+0x1ee>
   d772e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d7732:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d7736:	bfb8      	it	lt
   d7738:	426d      	neglt	r5, r5
   d773a:	dd0c      	ble.n	d7756 <__adddf3+0x52>
   d773c:	442c      	add	r4, r5
   d773e:	ea80 0202 	eor.w	r2, r0, r2
   d7742:	ea81 0303 	eor.w	r3, r1, r3
   d7746:	ea82 0000 	eor.w	r0, r2, r0
   d774a:	ea83 0101 	eor.w	r1, r3, r1
   d774e:	ea80 0202 	eor.w	r2, r0, r2
   d7752:	ea81 0303 	eor.w	r3, r1, r3
   d7756:	2d36      	cmp	r5, #54	; 0x36
   d7758:	bf88      	it	hi
   d775a:	bd30      	pophi	{r4, r5, pc}
   d775c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d7760:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7764:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d7768:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d776c:	d002      	beq.n	d7774 <__adddf3+0x70>
   d776e:	4240      	negs	r0, r0
   d7770:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7774:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d7778:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d777c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d7780:	d002      	beq.n	d7788 <__adddf3+0x84>
   d7782:	4252      	negs	r2, r2
   d7784:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d7788:	ea94 0f05 	teq	r4, r5
   d778c:	f000 80a7 	beq.w	d78de <__adddf3+0x1da>
   d7790:	f1a4 0401 	sub.w	r4, r4, #1
   d7794:	f1d5 0e20 	rsbs	lr, r5, #32
   d7798:	db0d      	blt.n	d77b6 <__adddf3+0xb2>
   d779a:	fa02 fc0e 	lsl.w	ip, r2, lr
   d779e:	fa22 f205 	lsr.w	r2, r2, r5
   d77a2:	1880      	adds	r0, r0, r2
   d77a4:	f141 0100 	adc.w	r1, r1, #0
   d77a8:	fa03 f20e 	lsl.w	r2, r3, lr
   d77ac:	1880      	adds	r0, r0, r2
   d77ae:	fa43 f305 	asr.w	r3, r3, r5
   d77b2:	4159      	adcs	r1, r3
   d77b4:	e00e      	b.n	d77d4 <__adddf3+0xd0>
   d77b6:	f1a5 0520 	sub.w	r5, r5, #32
   d77ba:	f10e 0e20 	add.w	lr, lr, #32
   d77be:	2a01      	cmp	r2, #1
   d77c0:	fa03 fc0e 	lsl.w	ip, r3, lr
   d77c4:	bf28      	it	cs
   d77c6:	f04c 0c02 	orrcs.w	ip, ip, #2
   d77ca:	fa43 f305 	asr.w	r3, r3, r5
   d77ce:	18c0      	adds	r0, r0, r3
   d77d0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d77d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d77d8:	d507      	bpl.n	d77ea <__adddf3+0xe6>
   d77da:	f04f 0e00 	mov.w	lr, #0
   d77de:	f1dc 0c00 	rsbs	ip, ip, #0
   d77e2:	eb7e 0000 	sbcs.w	r0, lr, r0
   d77e6:	eb6e 0101 	sbc.w	r1, lr, r1
   d77ea:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d77ee:	d31b      	bcc.n	d7828 <__adddf3+0x124>
   d77f0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d77f4:	d30c      	bcc.n	d7810 <__adddf3+0x10c>
   d77f6:	0849      	lsrs	r1, r1, #1
   d77f8:	ea5f 0030 	movs.w	r0, r0, rrx
   d77fc:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d7800:	f104 0401 	add.w	r4, r4, #1
   d7804:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d7808:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d780c:	f080 809a 	bcs.w	d7944 <__adddf3+0x240>
   d7810:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d7814:	bf08      	it	eq
   d7816:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d781a:	f150 0000 	adcs.w	r0, r0, #0
   d781e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7822:	ea41 0105 	orr.w	r1, r1, r5
   d7826:	bd30      	pop	{r4, r5, pc}
   d7828:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d782c:	4140      	adcs	r0, r0
   d782e:	eb41 0101 	adc.w	r1, r1, r1
   d7832:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7836:	f1a4 0401 	sub.w	r4, r4, #1
   d783a:	d1e9      	bne.n	d7810 <__adddf3+0x10c>
   d783c:	f091 0f00 	teq	r1, #0
   d7840:	bf04      	itt	eq
   d7842:	4601      	moveq	r1, r0
   d7844:	2000      	moveq	r0, #0
   d7846:	fab1 f381 	clz	r3, r1
   d784a:	bf08      	it	eq
   d784c:	3320      	addeq	r3, #32
   d784e:	f1a3 030b 	sub.w	r3, r3, #11
   d7852:	f1b3 0220 	subs.w	r2, r3, #32
   d7856:	da0c      	bge.n	d7872 <__adddf3+0x16e>
   d7858:	320c      	adds	r2, #12
   d785a:	dd08      	ble.n	d786e <__adddf3+0x16a>
   d785c:	f102 0c14 	add.w	ip, r2, #20
   d7860:	f1c2 020c 	rsb	r2, r2, #12
   d7864:	fa01 f00c 	lsl.w	r0, r1, ip
   d7868:	fa21 f102 	lsr.w	r1, r1, r2
   d786c:	e00c      	b.n	d7888 <__adddf3+0x184>
   d786e:	f102 0214 	add.w	r2, r2, #20
   d7872:	bfd8      	it	le
   d7874:	f1c2 0c20 	rsble	ip, r2, #32
   d7878:	fa01 f102 	lsl.w	r1, r1, r2
   d787c:	fa20 fc0c 	lsr.w	ip, r0, ip
   d7880:	bfdc      	itt	le
   d7882:	ea41 010c 	orrle.w	r1, r1, ip
   d7886:	4090      	lslle	r0, r2
   d7888:	1ae4      	subs	r4, r4, r3
   d788a:	bfa2      	ittt	ge
   d788c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d7890:	4329      	orrge	r1, r5
   d7892:	bd30      	popge	{r4, r5, pc}
   d7894:	ea6f 0404 	mvn.w	r4, r4
   d7898:	3c1f      	subs	r4, #31
   d789a:	da1c      	bge.n	d78d6 <__adddf3+0x1d2>
   d789c:	340c      	adds	r4, #12
   d789e:	dc0e      	bgt.n	d78be <__adddf3+0x1ba>
   d78a0:	f104 0414 	add.w	r4, r4, #20
   d78a4:	f1c4 0220 	rsb	r2, r4, #32
   d78a8:	fa20 f004 	lsr.w	r0, r0, r4
   d78ac:	fa01 f302 	lsl.w	r3, r1, r2
   d78b0:	ea40 0003 	orr.w	r0, r0, r3
   d78b4:	fa21 f304 	lsr.w	r3, r1, r4
   d78b8:	ea45 0103 	orr.w	r1, r5, r3
   d78bc:	bd30      	pop	{r4, r5, pc}
   d78be:	f1c4 040c 	rsb	r4, r4, #12
   d78c2:	f1c4 0220 	rsb	r2, r4, #32
   d78c6:	fa20 f002 	lsr.w	r0, r0, r2
   d78ca:	fa01 f304 	lsl.w	r3, r1, r4
   d78ce:	ea40 0003 	orr.w	r0, r0, r3
   d78d2:	4629      	mov	r1, r5
   d78d4:	bd30      	pop	{r4, r5, pc}
   d78d6:	fa21 f004 	lsr.w	r0, r1, r4
   d78da:	4629      	mov	r1, r5
   d78dc:	bd30      	pop	{r4, r5, pc}
   d78de:	f094 0f00 	teq	r4, #0
   d78e2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d78e6:	bf06      	itte	eq
   d78e8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d78ec:	3401      	addeq	r4, #1
   d78ee:	3d01      	subne	r5, #1
   d78f0:	e74e      	b.n	d7790 <__adddf3+0x8c>
   d78f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d78f6:	bf18      	it	ne
   d78f8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d78fc:	d029      	beq.n	d7952 <__adddf3+0x24e>
   d78fe:	ea94 0f05 	teq	r4, r5
   d7902:	bf08      	it	eq
   d7904:	ea90 0f02 	teqeq	r0, r2
   d7908:	d005      	beq.n	d7916 <__adddf3+0x212>
   d790a:	ea54 0c00 	orrs.w	ip, r4, r0
   d790e:	bf04      	itt	eq
   d7910:	4619      	moveq	r1, r3
   d7912:	4610      	moveq	r0, r2
   d7914:	bd30      	pop	{r4, r5, pc}
   d7916:	ea91 0f03 	teq	r1, r3
   d791a:	bf1e      	ittt	ne
   d791c:	2100      	movne	r1, #0
   d791e:	2000      	movne	r0, #0
   d7920:	bd30      	popne	{r4, r5, pc}
   d7922:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d7926:	d105      	bne.n	d7934 <__adddf3+0x230>
   d7928:	0040      	lsls	r0, r0, #1
   d792a:	4149      	adcs	r1, r1
   d792c:	bf28      	it	cs
   d792e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d7932:	bd30      	pop	{r4, r5, pc}
   d7934:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d7938:	bf3c      	itt	cc
   d793a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d793e:	bd30      	popcc	{r4, r5, pc}
   d7940:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7944:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d7948:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d794c:	f04f 0000 	mov.w	r0, #0
   d7950:	bd30      	pop	{r4, r5, pc}
   d7952:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7956:	bf1a      	itte	ne
   d7958:	4619      	movne	r1, r3
   d795a:	4610      	movne	r0, r2
   d795c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d7960:	bf1c      	itt	ne
   d7962:	460b      	movne	r3, r1
   d7964:	4602      	movne	r2, r0
   d7966:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d796a:	bf06      	itte	eq
   d796c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d7970:	ea91 0f03 	teqeq	r1, r3
   d7974:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d7978:	bd30      	pop	{r4, r5, pc}
   d797a:	bf00      	nop

000d797c <__aeabi_ui2d>:
   d797c:	f090 0f00 	teq	r0, #0
   d7980:	bf04      	itt	eq
   d7982:	2100      	moveq	r1, #0
   d7984:	4770      	bxeq	lr
   d7986:	b530      	push	{r4, r5, lr}
   d7988:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d798c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7990:	f04f 0500 	mov.w	r5, #0
   d7994:	f04f 0100 	mov.w	r1, #0
   d7998:	e750      	b.n	d783c <__adddf3+0x138>
   d799a:	bf00      	nop

000d799c <__aeabi_i2d>:
   d799c:	f090 0f00 	teq	r0, #0
   d79a0:	bf04      	itt	eq
   d79a2:	2100      	moveq	r1, #0
   d79a4:	4770      	bxeq	lr
   d79a6:	b530      	push	{r4, r5, lr}
   d79a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d79ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d79b0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d79b4:	bf48      	it	mi
   d79b6:	4240      	negmi	r0, r0
   d79b8:	f04f 0100 	mov.w	r1, #0
   d79bc:	e73e      	b.n	d783c <__adddf3+0x138>
   d79be:	bf00      	nop

000d79c0 <__aeabi_f2d>:
   d79c0:	0042      	lsls	r2, r0, #1
   d79c2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d79c6:	ea4f 0131 	mov.w	r1, r1, rrx
   d79ca:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d79ce:	bf1f      	itttt	ne
   d79d0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d79d4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d79d8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d79dc:	4770      	bxne	lr
   d79de:	f092 0f00 	teq	r2, #0
   d79e2:	bf14      	ite	ne
   d79e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d79e8:	4770      	bxeq	lr
   d79ea:	b530      	push	{r4, r5, lr}
   d79ec:	f44f 7460 	mov.w	r4, #896	; 0x380
   d79f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d79f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d79f8:	e720      	b.n	d783c <__adddf3+0x138>
   d79fa:	bf00      	nop

000d79fc <__aeabi_ul2d>:
   d79fc:	ea50 0201 	orrs.w	r2, r0, r1
   d7a00:	bf08      	it	eq
   d7a02:	4770      	bxeq	lr
   d7a04:	b530      	push	{r4, r5, lr}
   d7a06:	f04f 0500 	mov.w	r5, #0
   d7a0a:	e00a      	b.n	d7a22 <__aeabi_l2d+0x16>

000d7a0c <__aeabi_l2d>:
   d7a0c:	ea50 0201 	orrs.w	r2, r0, r1
   d7a10:	bf08      	it	eq
   d7a12:	4770      	bxeq	lr
   d7a14:	b530      	push	{r4, r5, lr}
   d7a16:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d7a1a:	d502      	bpl.n	d7a22 <__aeabi_l2d+0x16>
   d7a1c:	4240      	negs	r0, r0
   d7a1e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7a22:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7a26:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7a2a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d7a2e:	f43f aedc 	beq.w	d77ea <__adddf3+0xe6>
   d7a32:	f04f 0203 	mov.w	r2, #3
   d7a36:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7a3a:	bf18      	it	ne
   d7a3c:	3203      	addne	r2, #3
   d7a3e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7a42:	bf18      	it	ne
   d7a44:	3203      	addne	r2, #3
   d7a46:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d7a4a:	f1c2 0320 	rsb	r3, r2, #32
   d7a4e:	fa00 fc03 	lsl.w	ip, r0, r3
   d7a52:	fa20 f002 	lsr.w	r0, r0, r2
   d7a56:	fa01 fe03 	lsl.w	lr, r1, r3
   d7a5a:	ea40 000e 	orr.w	r0, r0, lr
   d7a5e:	fa21 f102 	lsr.w	r1, r1, r2
   d7a62:	4414      	add	r4, r2
   d7a64:	e6c1      	b.n	d77ea <__adddf3+0xe6>
   d7a66:	bf00      	nop

000d7a68 <__aeabi_dmul>:
   d7a68:	b570      	push	{r4, r5, r6, lr}
   d7a6a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7a6e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d7a72:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7a76:	bf1d      	ittte	ne
   d7a78:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7a7c:	ea94 0f0c 	teqne	r4, ip
   d7a80:	ea95 0f0c 	teqne	r5, ip
   d7a84:	f000 f8de 	bleq	d7c44 <__aeabi_dmul+0x1dc>
   d7a88:	442c      	add	r4, r5
   d7a8a:	ea81 0603 	eor.w	r6, r1, r3
   d7a8e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d7a92:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d7a96:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d7a9a:	bf18      	it	ne
   d7a9c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d7aa0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7aa4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d7aa8:	d038      	beq.n	d7b1c <__aeabi_dmul+0xb4>
   d7aaa:	fba0 ce02 	umull	ip, lr, r0, r2
   d7aae:	f04f 0500 	mov.w	r5, #0
   d7ab2:	fbe1 e502 	umlal	lr, r5, r1, r2
   d7ab6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d7aba:	fbe0 e503 	umlal	lr, r5, r0, r3
   d7abe:	f04f 0600 	mov.w	r6, #0
   d7ac2:	fbe1 5603 	umlal	r5, r6, r1, r3
   d7ac6:	f09c 0f00 	teq	ip, #0
   d7aca:	bf18      	it	ne
   d7acc:	f04e 0e01 	orrne.w	lr, lr, #1
   d7ad0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d7ad4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d7ad8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d7adc:	d204      	bcs.n	d7ae8 <__aeabi_dmul+0x80>
   d7ade:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d7ae2:	416d      	adcs	r5, r5
   d7ae4:	eb46 0606 	adc.w	r6, r6, r6
   d7ae8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d7aec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d7af0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d7af4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d7af8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d7afc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7b00:	bf88      	it	hi
   d7b02:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7b06:	d81e      	bhi.n	d7b46 <__aeabi_dmul+0xde>
   d7b08:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d7b0c:	bf08      	it	eq
   d7b0e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d7b12:	f150 0000 	adcs.w	r0, r0, #0
   d7b16:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7b1a:	bd70      	pop	{r4, r5, r6, pc}
   d7b1c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d7b20:	ea46 0101 	orr.w	r1, r6, r1
   d7b24:	ea40 0002 	orr.w	r0, r0, r2
   d7b28:	ea81 0103 	eor.w	r1, r1, r3
   d7b2c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d7b30:	bfc2      	ittt	gt
   d7b32:	ebd4 050c 	rsbsgt	r5, r4, ip
   d7b36:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7b3a:	bd70      	popgt	{r4, r5, r6, pc}
   d7b3c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7b40:	f04f 0e00 	mov.w	lr, #0
   d7b44:	3c01      	subs	r4, #1
   d7b46:	f300 80ab 	bgt.w	d7ca0 <__aeabi_dmul+0x238>
   d7b4a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d7b4e:	bfde      	ittt	le
   d7b50:	2000      	movle	r0, #0
   d7b52:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d7b56:	bd70      	pople	{r4, r5, r6, pc}
   d7b58:	f1c4 0400 	rsb	r4, r4, #0
   d7b5c:	3c20      	subs	r4, #32
   d7b5e:	da35      	bge.n	d7bcc <__aeabi_dmul+0x164>
   d7b60:	340c      	adds	r4, #12
   d7b62:	dc1b      	bgt.n	d7b9c <__aeabi_dmul+0x134>
   d7b64:	f104 0414 	add.w	r4, r4, #20
   d7b68:	f1c4 0520 	rsb	r5, r4, #32
   d7b6c:	fa00 f305 	lsl.w	r3, r0, r5
   d7b70:	fa20 f004 	lsr.w	r0, r0, r4
   d7b74:	fa01 f205 	lsl.w	r2, r1, r5
   d7b78:	ea40 0002 	orr.w	r0, r0, r2
   d7b7c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d7b80:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7b84:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7b88:	fa21 f604 	lsr.w	r6, r1, r4
   d7b8c:	eb42 0106 	adc.w	r1, r2, r6
   d7b90:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7b94:	bf08      	it	eq
   d7b96:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7b9a:	bd70      	pop	{r4, r5, r6, pc}
   d7b9c:	f1c4 040c 	rsb	r4, r4, #12
   d7ba0:	f1c4 0520 	rsb	r5, r4, #32
   d7ba4:	fa00 f304 	lsl.w	r3, r0, r4
   d7ba8:	fa20 f005 	lsr.w	r0, r0, r5
   d7bac:	fa01 f204 	lsl.w	r2, r1, r4
   d7bb0:	ea40 0002 	orr.w	r0, r0, r2
   d7bb4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7bb8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7bbc:	f141 0100 	adc.w	r1, r1, #0
   d7bc0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7bc4:	bf08      	it	eq
   d7bc6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7bca:	bd70      	pop	{r4, r5, r6, pc}
   d7bcc:	f1c4 0520 	rsb	r5, r4, #32
   d7bd0:	fa00 f205 	lsl.w	r2, r0, r5
   d7bd4:	ea4e 0e02 	orr.w	lr, lr, r2
   d7bd8:	fa20 f304 	lsr.w	r3, r0, r4
   d7bdc:	fa01 f205 	lsl.w	r2, r1, r5
   d7be0:	ea43 0302 	orr.w	r3, r3, r2
   d7be4:	fa21 f004 	lsr.w	r0, r1, r4
   d7be8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7bec:	fa21 f204 	lsr.w	r2, r1, r4
   d7bf0:	ea20 0002 	bic.w	r0, r0, r2
   d7bf4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d7bf8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7bfc:	bf08      	it	eq
   d7bfe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7c02:	bd70      	pop	{r4, r5, r6, pc}
   d7c04:	f094 0f00 	teq	r4, #0
   d7c08:	d10f      	bne.n	d7c2a <__aeabi_dmul+0x1c2>
   d7c0a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d7c0e:	0040      	lsls	r0, r0, #1
   d7c10:	eb41 0101 	adc.w	r1, r1, r1
   d7c14:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7c18:	bf08      	it	eq
   d7c1a:	3c01      	subeq	r4, #1
   d7c1c:	d0f7      	beq.n	d7c0e <__aeabi_dmul+0x1a6>
   d7c1e:	ea41 0106 	orr.w	r1, r1, r6
   d7c22:	f095 0f00 	teq	r5, #0
   d7c26:	bf18      	it	ne
   d7c28:	4770      	bxne	lr
   d7c2a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d7c2e:	0052      	lsls	r2, r2, #1
   d7c30:	eb43 0303 	adc.w	r3, r3, r3
   d7c34:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d7c38:	bf08      	it	eq
   d7c3a:	3d01      	subeq	r5, #1
   d7c3c:	d0f7      	beq.n	d7c2e <__aeabi_dmul+0x1c6>
   d7c3e:	ea43 0306 	orr.w	r3, r3, r6
   d7c42:	4770      	bx	lr
   d7c44:	ea94 0f0c 	teq	r4, ip
   d7c48:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7c4c:	bf18      	it	ne
   d7c4e:	ea95 0f0c 	teqne	r5, ip
   d7c52:	d00c      	beq.n	d7c6e <__aeabi_dmul+0x206>
   d7c54:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7c58:	bf18      	it	ne
   d7c5a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7c5e:	d1d1      	bne.n	d7c04 <__aeabi_dmul+0x19c>
   d7c60:	ea81 0103 	eor.w	r1, r1, r3
   d7c64:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7c68:	f04f 0000 	mov.w	r0, #0
   d7c6c:	bd70      	pop	{r4, r5, r6, pc}
   d7c6e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7c72:	bf06      	itte	eq
   d7c74:	4610      	moveq	r0, r2
   d7c76:	4619      	moveq	r1, r3
   d7c78:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7c7c:	d019      	beq.n	d7cb2 <__aeabi_dmul+0x24a>
   d7c7e:	ea94 0f0c 	teq	r4, ip
   d7c82:	d102      	bne.n	d7c8a <__aeabi_dmul+0x222>
   d7c84:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d7c88:	d113      	bne.n	d7cb2 <__aeabi_dmul+0x24a>
   d7c8a:	ea95 0f0c 	teq	r5, ip
   d7c8e:	d105      	bne.n	d7c9c <__aeabi_dmul+0x234>
   d7c90:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d7c94:	bf1c      	itt	ne
   d7c96:	4610      	movne	r0, r2
   d7c98:	4619      	movne	r1, r3
   d7c9a:	d10a      	bne.n	d7cb2 <__aeabi_dmul+0x24a>
   d7c9c:	ea81 0103 	eor.w	r1, r1, r3
   d7ca0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7ca4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7ca8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7cac:	f04f 0000 	mov.w	r0, #0
   d7cb0:	bd70      	pop	{r4, r5, r6, pc}
   d7cb2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7cb6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d7cba:	bd70      	pop	{r4, r5, r6, pc}

000d7cbc <__aeabi_ddiv>:
   d7cbc:	b570      	push	{r4, r5, r6, lr}
   d7cbe:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7cc2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d7cc6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7cca:	bf1d      	ittte	ne
   d7ccc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7cd0:	ea94 0f0c 	teqne	r4, ip
   d7cd4:	ea95 0f0c 	teqne	r5, ip
   d7cd8:	f000 f8a7 	bleq	d7e2a <__aeabi_ddiv+0x16e>
   d7cdc:	eba4 0405 	sub.w	r4, r4, r5
   d7ce0:	ea81 0e03 	eor.w	lr, r1, r3
   d7ce4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7ce8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7cec:	f000 8088 	beq.w	d7e00 <__aeabi_ddiv+0x144>
   d7cf0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7cf4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d7cf8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d7cfc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d7d00:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d7d04:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d7d08:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d7d0c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d7d10:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d7d14:	429d      	cmp	r5, r3
   d7d16:	bf08      	it	eq
   d7d18:	4296      	cmpeq	r6, r2
   d7d1a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d7d1e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d7d22:	d202      	bcs.n	d7d2a <__aeabi_ddiv+0x6e>
   d7d24:	085b      	lsrs	r3, r3, #1
   d7d26:	ea4f 0232 	mov.w	r2, r2, rrx
   d7d2a:	1ab6      	subs	r6, r6, r2
   d7d2c:	eb65 0503 	sbc.w	r5, r5, r3
   d7d30:	085b      	lsrs	r3, r3, #1
   d7d32:	ea4f 0232 	mov.w	r2, r2, rrx
   d7d36:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d7d3a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d7d3e:	ebb6 0e02 	subs.w	lr, r6, r2
   d7d42:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7d46:	bf22      	ittt	cs
   d7d48:	1ab6      	subcs	r6, r6, r2
   d7d4a:	4675      	movcs	r5, lr
   d7d4c:	ea40 000c 	orrcs.w	r0, r0, ip
   d7d50:	085b      	lsrs	r3, r3, #1
   d7d52:	ea4f 0232 	mov.w	r2, r2, rrx
   d7d56:	ebb6 0e02 	subs.w	lr, r6, r2
   d7d5a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7d5e:	bf22      	ittt	cs
   d7d60:	1ab6      	subcs	r6, r6, r2
   d7d62:	4675      	movcs	r5, lr
   d7d64:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d7d68:	085b      	lsrs	r3, r3, #1
   d7d6a:	ea4f 0232 	mov.w	r2, r2, rrx
   d7d6e:	ebb6 0e02 	subs.w	lr, r6, r2
   d7d72:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7d76:	bf22      	ittt	cs
   d7d78:	1ab6      	subcs	r6, r6, r2
   d7d7a:	4675      	movcs	r5, lr
   d7d7c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d7d80:	085b      	lsrs	r3, r3, #1
   d7d82:	ea4f 0232 	mov.w	r2, r2, rrx
   d7d86:	ebb6 0e02 	subs.w	lr, r6, r2
   d7d8a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7d8e:	bf22      	ittt	cs
   d7d90:	1ab6      	subcs	r6, r6, r2
   d7d92:	4675      	movcs	r5, lr
   d7d94:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d7d98:	ea55 0e06 	orrs.w	lr, r5, r6
   d7d9c:	d018      	beq.n	d7dd0 <__aeabi_ddiv+0x114>
   d7d9e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d7da2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d7da6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d7daa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d7dae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d7db2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d7db6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d7dba:	d1c0      	bne.n	d7d3e <__aeabi_ddiv+0x82>
   d7dbc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7dc0:	d10b      	bne.n	d7dda <__aeabi_ddiv+0x11e>
   d7dc2:	ea41 0100 	orr.w	r1, r1, r0
   d7dc6:	f04f 0000 	mov.w	r0, #0
   d7dca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d7dce:	e7b6      	b.n	d7d3e <__aeabi_ddiv+0x82>
   d7dd0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7dd4:	bf04      	itt	eq
   d7dd6:	4301      	orreq	r1, r0
   d7dd8:	2000      	moveq	r0, #0
   d7dda:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7dde:	bf88      	it	hi
   d7de0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7de4:	f63f aeaf 	bhi.w	d7b46 <__aeabi_dmul+0xde>
   d7de8:	ebb5 0c03 	subs.w	ip, r5, r3
   d7dec:	bf04      	itt	eq
   d7dee:	ebb6 0c02 	subseq.w	ip, r6, r2
   d7df2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7df6:	f150 0000 	adcs.w	r0, r0, #0
   d7dfa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7dfe:	bd70      	pop	{r4, r5, r6, pc}
   d7e00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d7e04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d7e08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d7e0c:	bfc2      	ittt	gt
   d7e0e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d7e12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7e16:	bd70      	popgt	{r4, r5, r6, pc}
   d7e18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7e1c:	f04f 0e00 	mov.w	lr, #0
   d7e20:	3c01      	subs	r4, #1
   d7e22:	e690      	b.n	d7b46 <__aeabi_dmul+0xde>
   d7e24:	ea45 0e06 	orr.w	lr, r5, r6
   d7e28:	e68d      	b.n	d7b46 <__aeabi_dmul+0xde>
   d7e2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7e2e:	ea94 0f0c 	teq	r4, ip
   d7e32:	bf08      	it	eq
   d7e34:	ea95 0f0c 	teqeq	r5, ip
   d7e38:	f43f af3b 	beq.w	d7cb2 <__aeabi_dmul+0x24a>
   d7e3c:	ea94 0f0c 	teq	r4, ip
   d7e40:	d10a      	bne.n	d7e58 <__aeabi_ddiv+0x19c>
   d7e42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7e46:	f47f af34 	bne.w	d7cb2 <__aeabi_dmul+0x24a>
   d7e4a:	ea95 0f0c 	teq	r5, ip
   d7e4e:	f47f af25 	bne.w	d7c9c <__aeabi_dmul+0x234>
   d7e52:	4610      	mov	r0, r2
   d7e54:	4619      	mov	r1, r3
   d7e56:	e72c      	b.n	d7cb2 <__aeabi_dmul+0x24a>
   d7e58:	ea95 0f0c 	teq	r5, ip
   d7e5c:	d106      	bne.n	d7e6c <__aeabi_ddiv+0x1b0>
   d7e5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7e62:	f43f aefd 	beq.w	d7c60 <__aeabi_dmul+0x1f8>
   d7e66:	4610      	mov	r0, r2
   d7e68:	4619      	mov	r1, r3
   d7e6a:	e722      	b.n	d7cb2 <__aeabi_dmul+0x24a>
   d7e6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7e70:	bf18      	it	ne
   d7e72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7e76:	f47f aec5 	bne.w	d7c04 <__aeabi_dmul+0x19c>
   d7e7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d7e7e:	f47f af0d 	bne.w	d7c9c <__aeabi_dmul+0x234>
   d7e82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d7e86:	f47f aeeb 	bne.w	d7c60 <__aeabi_dmul+0x1f8>
   d7e8a:	e712      	b.n	d7cb2 <__aeabi_dmul+0x24a>

000d7e8c <__gedf2>:
   d7e8c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d7e90:	e006      	b.n	d7ea0 <__cmpdf2+0x4>
   d7e92:	bf00      	nop

000d7e94 <__ledf2>:
   d7e94:	f04f 0c01 	mov.w	ip, #1
   d7e98:	e002      	b.n	d7ea0 <__cmpdf2+0x4>
   d7e9a:	bf00      	nop

000d7e9c <__cmpdf2>:
   d7e9c:	f04f 0c01 	mov.w	ip, #1
   d7ea0:	f84d cd04 	str.w	ip, [sp, #-4]!
   d7ea4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7ea8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7eac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7eb0:	bf18      	it	ne
   d7eb2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d7eb6:	d01b      	beq.n	d7ef0 <__cmpdf2+0x54>
   d7eb8:	b001      	add	sp, #4
   d7eba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d7ebe:	bf0c      	ite	eq
   d7ec0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d7ec4:	ea91 0f03 	teqne	r1, r3
   d7ec8:	bf02      	ittt	eq
   d7eca:	ea90 0f02 	teqeq	r0, r2
   d7ece:	2000      	moveq	r0, #0
   d7ed0:	4770      	bxeq	lr
   d7ed2:	f110 0f00 	cmn.w	r0, #0
   d7ed6:	ea91 0f03 	teq	r1, r3
   d7eda:	bf58      	it	pl
   d7edc:	4299      	cmppl	r1, r3
   d7ede:	bf08      	it	eq
   d7ee0:	4290      	cmpeq	r0, r2
   d7ee2:	bf2c      	ite	cs
   d7ee4:	17d8      	asrcs	r0, r3, #31
   d7ee6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d7eea:	f040 0001 	orr.w	r0, r0, #1
   d7eee:	4770      	bx	lr
   d7ef0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7ef4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7ef8:	d102      	bne.n	d7f00 <__cmpdf2+0x64>
   d7efa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d7efe:	d107      	bne.n	d7f10 <__cmpdf2+0x74>
   d7f00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7f04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7f08:	d1d6      	bne.n	d7eb8 <__cmpdf2+0x1c>
   d7f0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d7f0e:	d0d3      	beq.n	d7eb8 <__cmpdf2+0x1c>
   d7f10:	f85d 0b04 	ldr.w	r0, [sp], #4
   d7f14:	4770      	bx	lr
   d7f16:	bf00      	nop

000d7f18 <__aeabi_cdrcmple>:
   d7f18:	4684      	mov	ip, r0
   d7f1a:	4610      	mov	r0, r2
   d7f1c:	4662      	mov	r2, ip
   d7f1e:	468c      	mov	ip, r1
   d7f20:	4619      	mov	r1, r3
   d7f22:	4663      	mov	r3, ip
   d7f24:	e000      	b.n	d7f28 <__aeabi_cdcmpeq>
   d7f26:	bf00      	nop

000d7f28 <__aeabi_cdcmpeq>:
   d7f28:	b501      	push	{r0, lr}
   d7f2a:	f7ff ffb7 	bl	d7e9c <__cmpdf2>
   d7f2e:	2800      	cmp	r0, #0
   d7f30:	bf48      	it	mi
   d7f32:	f110 0f00 	cmnmi.w	r0, #0
   d7f36:	bd01      	pop	{r0, pc}

000d7f38 <__aeabi_dcmpeq>:
   d7f38:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7f3c:	f7ff fff4 	bl	d7f28 <__aeabi_cdcmpeq>
   d7f40:	bf0c      	ite	eq
   d7f42:	2001      	moveq	r0, #1
   d7f44:	2000      	movne	r0, #0
   d7f46:	f85d fb08 	ldr.w	pc, [sp], #8
   d7f4a:	bf00      	nop

000d7f4c <__aeabi_dcmplt>:
   d7f4c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7f50:	f7ff ffea 	bl	d7f28 <__aeabi_cdcmpeq>
   d7f54:	bf34      	ite	cc
   d7f56:	2001      	movcc	r0, #1
   d7f58:	2000      	movcs	r0, #0
   d7f5a:	f85d fb08 	ldr.w	pc, [sp], #8
   d7f5e:	bf00      	nop

000d7f60 <__aeabi_dcmple>:
   d7f60:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7f64:	f7ff ffe0 	bl	d7f28 <__aeabi_cdcmpeq>
   d7f68:	bf94      	ite	ls
   d7f6a:	2001      	movls	r0, #1
   d7f6c:	2000      	movhi	r0, #0
   d7f6e:	f85d fb08 	ldr.w	pc, [sp], #8
   d7f72:	bf00      	nop

000d7f74 <__aeabi_dcmpge>:
   d7f74:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7f78:	f7ff ffce 	bl	d7f18 <__aeabi_cdrcmple>
   d7f7c:	bf94      	ite	ls
   d7f7e:	2001      	movls	r0, #1
   d7f80:	2000      	movhi	r0, #0
   d7f82:	f85d fb08 	ldr.w	pc, [sp], #8
   d7f86:	bf00      	nop

000d7f88 <__aeabi_dcmpgt>:
   d7f88:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7f8c:	f7ff ffc4 	bl	d7f18 <__aeabi_cdrcmple>
   d7f90:	bf34      	ite	cc
   d7f92:	2001      	movcc	r0, #1
   d7f94:	2000      	movcs	r0, #0
   d7f96:	f85d fb08 	ldr.w	pc, [sp], #8
   d7f9a:	bf00      	nop

000d7f9c <__aeabi_dcmpun>:
   d7f9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7fa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7fa4:	d102      	bne.n	d7fac <__aeabi_dcmpun+0x10>
   d7fa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d7faa:	d10a      	bne.n	d7fc2 <__aeabi_dcmpun+0x26>
   d7fac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7fb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7fb4:	d102      	bne.n	d7fbc <__aeabi_dcmpun+0x20>
   d7fb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d7fba:	d102      	bne.n	d7fc2 <__aeabi_dcmpun+0x26>
   d7fbc:	f04f 0000 	mov.w	r0, #0
   d7fc0:	4770      	bx	lr
   d7fc2:	f04f 0001 	mov.w	r0, #1
   d7fc6:	4770      	bx	lr

000d7fc8 <__aeabi_d2f>:
   d7fc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d7fcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d7fd0:	bf24      	itt	cs
   d7fd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d7fd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d7fda:	d90d      	bls.n	d7ff8 <__aeabi_d2f+0x30>
   d7fdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d7fe0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d7fe4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d7fe8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d7fec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d7ff0:	bf08      	it	eq
   d7ff2:	f020 0001 	biceq.w	r0, r0, #1
   d7ff6:	4770      	bx	lr
   d7ff8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d7ffc:	d121      	bne.n	d8042 <__aeabi_d2f+0x7a>
   d7ffe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d8002:	bfbc      	itt	lt
   d8004:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d8008:	4770      	bxlt	lr
   d800a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d800e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d8012:	f1c2 0218 	rsb	r2, r2, #24
   d8016:	f1c2 0c20 	rsb	ip, r2, #32
   d801a:	fa10 f30c 	lsls.w	r3, r0, ip
   d801e:	fa20 f002 	lsr.w	r0, r0, r2
   d8022:	bf18      	it	ne
   d8024:	f040 0001 	orrne.w	r0, r0, #1
   d8028:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d802c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d8030:	fa03 fc0c 	lsl.w	ip, r3, ip
   d8034:	ea40 000c 	orr.w	r0, r0, ip
   d8038:	fa23 f302 	lsr.w	r3, r3, r2
   d803c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d8040:	e7cc      	b.n	d7fdc <__aeabi_d2f+0x14>
   d8042:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d8046:	d107      	bne.n	d8058 <__aeabi_d2f+0x90>
   d8048:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d804c:	bf1e      	ittt	ne
   d804e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d8052:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d8056:	4770      	bxne	lr
   d8058:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d805c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d8060:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d8064:	4770      	bx	lr
   d8066:	bf00      	nop

000d8068 <__aeabi_frsub>:
   d8068:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   d806c:	e002      	b.n	d8074 <__addsf3>
   d806e:	bf00      	nop

000d8070 <__aeabi_fsub>:
   d8070:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000d8074 <__addsf3>:
   d8074:	0042      	lsls	r2, r0, #1
   d8076:	bf1f      	itttt	ne
   d8078:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   d807c:	ea92 0f03 	teqne	r2, r3
   d8080:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   d8084:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   d8088:	d06a      	beq.n	d8160 <__addsf3+0xec>
   d808a:	ea4f 6212 	mov.w	r2, r2, lsr #24
   d808e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   d8092:	bfc1      	itttt	gt
   d8094:	18d2      	addgt	r2, r2, r3
   d8096:	4041      	eorgt	r1, r0
   d8098:	4048      	eorgt	r0, r1
   d809a:	4041      	eorgt	r1, r0
   d809c:	bfb8      	it	lt
   d809e:	425b      	neglt	r3, r3
   d80a0:	2b19      	cmp	r3, #25
   d80a2:	bf88      	it	hi
   d80a4:	4770      	bxhi	lr
   d80a6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   d80aa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d80ae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   d80b2:	bf18      	it	ne
   d80b4:	4240      	negne	r0, r0
   d80b6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d80ba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   d80be:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   d80c2:	bf18      	it	ne
   d80c4:	4249      	negne	r1, r1
   d80c6:	ea92 0f03 	teq	r2, r3
   d80ca:	d03f      	beq.n	d814c <__addsf3+0xd8>
   d80cc:	f1a2 0201 	sub.w	r2, r2, #1
   d80d0:	fa41 fc03 	asr.w	ip, r1, r3
   d80d4:	eb10 000c 	adds.w	r0, r0, ip
   d80d8:	f1c3 0320 	rsb	r3, r3, #32
   d80dc:	fa01 f103 	lsl.w	r1, r1, r3
   d80e0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   d80e4:	d502      	bpl.n	d80ec <__addsf3+0x78>
   d80e6:	4249      	negs	r1, r1
   d80e8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   d80ec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   d80f0:	d313      	bcc.n	d811a <__addsf3+0xa6>
   d80f2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   d80f6:	d306      	bcc.n	d8106 <__addsf3+0x92>
   d80f8:	0840      	lsrs	r0, r0, #1
   d80fa:	ea4f 0131 	mov.w	r1, r1, rrx
   d80fe:	f102 0201 	add.w	r2, r2, #1
   d8102:	2afe      	cmp	r2, #254	; 0xfe
   d8104:	d251      	bcs.n	d81aa <__addsf3+0x136>
   d8106:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   d810a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   d810e:	bf08      	it	eq
   d8110:	f020 0001 	biceq.w	r0, r0, #1
   d8114:	ea40 0003 	orr.w	r0, r0, r3
   d8118:	4770      	bx	lr
   d811a:	0049      	lsls	r1, r1, #1
   d811c:	eb40 0000 	adc.w	r0, r0, r0
   d8120:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   d8124:	f1a2 0201 	sub.w	r2, r2, #1
   d8128:	d1ed      	bne.n	d8106 <__addsf3+0x92>
   d812a:	fab0 fc80 	clz	ip, r0
   d812e:	f1ac 0c08 	sub.w	ip, ip, #8
   d8132:	ebb2 020c 	subs.w	r2, r2, ip
   d8136:	fa00 f00c 	lsl.w	r0, r0, ip
   d813a:	bfaa      	itet	ge
   d813c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   d8140:	4252      	neglt	r2, r2
   d8142:	4318      	orrge	r0, r3
   d8144:	bfbc      	itt	lt
   d8146:	40d0      	lsrlt	r0, r2
   d8148:	4318      	orrlt	r0, r3
   d814a:	4770      	bx	lr
   d814c:	f092 0f00 	teq	r2, #0
   d8150:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   d8154:	bf06      	itte	eq
   d8156:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   d815a:	3201      	addeq	r2, #1
   d815c:	3b01      	subne	r3, #1
   d815e:	e7b5      	b.n	d80cc <__addsf3+0x58>
   d8160:	ea4f 0341 	mov.w	r3, r1, lsl #1
   d8164:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   d8168:	bf18      	it	ne
   d816a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   d816e:	d021      	beq.n	d81b4 <__addsf3+0x140>
   d8170:	ea92 0f03 	teq	r2, r3
   d8174:	d004      	beq.n	d8180 <__addsf3+0x10c>
   d8176:	f092 0f00 	teq	r2, #0
   d817a:	bf08      	it	eq
   d817c:	4608      	moveq	r0, r1
   d817e:	4770      	bx	lr
   d8180:	ea90 0f01 	teq	r0, r1
   d8184:	bf1c      	itt	ne
   d8186:	2000      	movne	r0, #0
   d8188:	4770      	bxne	lr
   d818a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   d818e:	d104      	bne.n	d819a <__addsf3+0x126>
   d8190:	0040      	lsls	r0, r0, #1
   d8192:	bf28      	it	cs
   d8194:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   d8198:	4770      	bx	lr
   d819a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   d819e:	bf3c      	itt	cc
   d81a0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   d81a4:	4770      	bxcc	lr
   d81a6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   d81aa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   d81ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d81b2:	4770      	bx	lr
   d81b4:	ea7f 6222 	mvns.w	r2, r2, asr #24
   d81b8:	bf16      	itet	ne
   d81ba:	4608      	movne	r0, r1
   d81bc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   d81c0:	4601      	movne	r1, r0
   d81c2:	0242      	lsls	r2, r0, #9
   d81c4:	bf06      	itte	eq
   d81c6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   d81ca:	ea90 0f01 	teqeq	r0, r1
   d81ce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   d81d2:	4770      	bx	lr

000d81d4 <__aeabi_ui2f>:
   d81d4:	f04f 0300 	mov.w	r3, #0
   d81d8:	e004      	b.n	d81e4 <__aeabi_i2f+0x8>
   d81da:	bf00      	nop

000d81dc <__aeabi_i2f>:
   d81dc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   d81e0:	bf48      	it	mi
   d81e2:	4240      	negmi	r0, r0
   d81e4:	ea5f 0c00 	movs.w	ip, r0
   d81e8:	bf08      	it	eq
   d81ea:	4770      	bxeq	lr
   d81ec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   d81f0:	4601      	mov	r1, r0
   d81f2:	f04f 0000 	mov.w	r0, #0
   d81f6:	e01c      	b.n	d8232 <__aeabi_l2f+0x2a>

000d81f8 <__aeabi_ul2f>:
   d81f8:	ea50 0201 	orrs.w	r2, r0, r1
   d81fc:	bf08      	it	eq
   d81fe:	4770      	bxeq	lr
   d8200:	f04f 0300 	mov.w	r3, #0
   d8204:	e00a      	b.n	d821c <__aeabi_l2f+0x14>
   d8206:	bf00      	nop

000d8208 <__aeabi_l2f>:
   d8208:	ea50 0201 	orrs.w	r2, r0, r1
   d820c:	bf08      	it	eq
   d820e:	4770      	bxeq	lr
   d8210:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   d8214:	d502      	bpl.n	d821c <__aeabi_l2f+0x14>
   d8216:	4240      	negs	r0, r0
   d8218:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d821c:	ea5f 0c01 	movs.w	ip, r1
   d8220:	bf02      	ittt	eq
   d8222:	4684      	moveq	ip, r0
   d8224:	4601      	moveq	r1, r0
   d8226:	2000      	moveq	r0, #0
   d8228:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   d822c:	bf08      	it	eq
   d822e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   d8232:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   d8236:	fabc f28c 	clz	r2, ip
   d823a:	3a08      	subs	r2, #8
   d823c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   d8240:	db10      	blt.n	d8264 <__aeabi_l2f+0x5c>
   d8242:	fa01 fc02 	lsl.w	ip, r1, r2
   d8246:	4463      	add	r3, ip
   d8248:	fa00 fc02 	lsl.w	ip, r0, r2
   d824c:	f1c2 0220 	rsb	r2, r2, #32
   d8250:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d8254:	fa20 f202 	lsr.w	r2, r0, r2
   d8258:	eb43 0002 	adc.w	r0, r3, r2
   d825c:	bf08      	it	eq
   d825e:	f020 0001 	biceq.w	r0, r0, #1
   d8262:	4770      	bx	lr
   d8264:	f102 0220 	add.w	r2, r2, #32
   d8268:	fa01 fc02 	lsl.w	ip, r1, r2
   d826c:	f1c2 0220 	rsb	r2, r2, #32
   d8270:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   d8274:	fa21 f202 	lsr.w	r2, r1, r2
   d8278:	eb43 0002 	adc.w	r0, r3, r2
   d827c:	bf08      	it	eq
   d827e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   d8282:	4770      	bx	lr

000d8284 <__aeabi_ldivmod>:
   d8284:	b97b      	cbnz	r3, d82a6 <__aeabi_ldivmod+0x22>
   d8286:	b972      	cbnz	r2, d82a6 <__aeabi_ldivmod+0x22>
   d8288:	2900      	cmp	r1, #0
   d828a:	bfbe      	ittt	lt
   d828c:	2000      	movlt	r0, #0
   d828e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   d8292:	e006      	blt.n	d82a2 <__aeabi_ldivmod+0x1e>
   d8294:	bf08      	it	eq
   d8296:	2800      	cmpeq	r0, #0
   d8298:	bf1c      	itt	ne
   d829a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   d829e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   d82a2:	f000 b9b1 	b.w	d8608 <__aeabi_idiv0>
   d82a6:	f1ad 0c08 	sub.w	ip, sp, #8
   d82aa:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d82ae:	2900      	cmp	r1, #0
   d82b0:	db09      	blt.n	d82c6 <__aeabi_ldivmod+0x42>
   d82b2:	2b00      	cmp	r3, #0
   d82b4:	db1a      	blt.n	d82ec <__aeabi_ldivmod+0x68>
   d82b6:	f000 f835 	bl	d8324 <__udivmoddi4>
   d82ba:	f8dd e004 	ldr.w	lr, [sp, #4]
   d82be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d82c2:	b004      	add	sp, #16
   d82c4:	4770      	bx	lr
   d82c6:	4240      	negs	r0, r0
   d82c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d82cc:	2b00      	cmp	r3, #0
   d82ce:	db1b      	blt.n	d8308 <__aeabi_ldivmod+0x84>
   d82d0:	f000 f828 	bl	d8324 <__udivmoddi4>
   d82d4:	f8dd e004 	ldr.w	lr, [sp, #4]
   d82d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d82dc:	b004      	add	sp, #16
   d82de:	4240      	negs	r0, r0
   d82e0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d82e4:	4252      	negs	r2, r2
   d82e6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d82ea:	4770      	bx	lr
   d82ec:	4252      	negs	r2, r2
   d82ee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d82f2:	f000 f817 	bl	d8324 <__udivmoddi4>
   d82f6:	f8dd e004 	ldr.w	lr, [sp, #4]
   d82fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d82fe:	b004      	add	sp, #16
   d8300:	4240      	negs	r0, r0
   d8302:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8306:	4770      	bx	lr
   d8308:	4252      	negs	r2, r2
   d830a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d830e:	f000 f809 	bl	d8324 <__udivmoddi4>
   d8312:	f8dd e004 	ldr.w	lr, [sp, #4]
   d8316:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d831a:	b004      	add	sp, #16
   d831c:	4252      	negs	r2, r2
   d831e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d8322:	4770      	bx	lr

000d8324 <__udivmoddi4>:
   d8324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8328:	468c      	mov	ip, r1
   d832a:	460e      	mov	r6, r1
   d832c:	4604      	mov	r4, r0
   d832e:	9d08      	ldr	r5, [sp, #32]
   d8330:	2b00      	cmp	r3, #0
   d8332:	d150      	bne.n	d83d6 <__udivmoddi4+0xb2>
   d8334:	428a      	cmp	r2, r1
   d8336:	4617      	mov	r7, r2
   d8338:	d96c      	bls.n	d8414 <__udivmoddi4+0xf0>
   d833a:	fab2 fe82 	clz	lr, r2
   d833e:	f1be 0f00 	cmp.w	lr, #0
   d8342:	d00b      	beq.n	d835c <__udivmoddi4+0x38>
   d8344:	f1ce 0420 	rsb	r4, lr, #32
   d8348:	fa20 f404 	lsr.w	r4, r0, r4
   d834c:	fa01 f60e 	lsl.w	r6, r1, lr
   d8350:	ea44 0c06 	orr.w	ip, r4, r6
   d8354:	fa02 f70e 	lsl.w	r7, r2, lr
   d8358:	fa00 f40e 	lsl.w	r4, r0, lr
   d835c:	ea4f 4917 	mov.w	r9, r7, lsr #16
   d8360:	0c22      	lsrs	r2, r4, #16
   d8362:	fbbc f0f9 	udiv	r0, ip, r9
   d8366:	fa1f f887 	uxth.w	r8, r7
   d836a:	fb09 c610 	mls	r6, r9, r0, ip
   d836e:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d8372:	fb00 f308 	mul.w	r3, r0, r8
   d8376:	42b3      	cmp	r3, r6
   d8378:	d909      	bls.n	d838e <__udivmoddi4+0x6a>
   d837a:	19f6      	adds	r6, r6, r7
   d837c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   d8380:	f080 8122 	bcs.w	d85c8 <__udivmoddi4+0x2a4>
   d8384:	42b3      	cmp	r3, r6
   d8386:	f240 811f 	bls.w	d85c8 <__udivmoddi4+0x2a4>
   d838a:	3802      	subs	r0, #2
   d838c:	443e      	add	r6, r7
   d838e:	1af6      	subs	r6, r6, r3
   d8390:	b2a2      	uxth	r2, r4
   d8392:	fbb6 f3f9 	udiv	r3, r6, r9
   d8396:	fb09 6613 	mls	r6, r9, r3, r6
   d839a:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d839e:	fb03 f808 	mul.w	r8, r3, r8
   d83a2:	45a0      	cmp	r8, r4
   d83a4:	d909      	bls.n	d83ba <__udivmoddi4+0x96>
   d83a6:	19e4      	adds	r4, r4, r7
   d83a8:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
   d83ac:	f080 810a 	bcs.w	d85c4 <__udivmoddi4+0x2a0>
   d83b0:	45a0      	cmp	r8, r4
   d83b2:	f240 8107 	bls.w	d85c4 <__udivmoddi4+0x2a0>
   d83b6:	3b02      	subs	r3, #2
   d83b8:	443c      	add	r4, r7
   d83ba:	ebc8 0404 	rsb	r4, r8, r4
   d83be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d83c2:	2100      	movs	r1, #0
   d83c4:	2d00      	cmp	r5, #0
   d83c6:	d062      	beq.n	d848e <__udivmoddi4+0x16a>
   d83c8:	fa24 f40e 	lsr.w	r4, r4, lr
   d83cc:	2300      	movs	r3, #0
   d83ce:	602c      	str	r4, [r5, #0]
   d83d0:	606b      	str	r3, [r5, #4]
   d83d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d83d6:	428b      	cmp	r3, r1
   d83d8:	d907      	bls.n	d83ea <__udivmoddi4+0xc6>
   d83da:	2d00      	cmp	r5, #0
   d83dc:	d055      	beq.n	d848a <__udivmoddi4+0x166>
   d83de:	2100      	movs	r1, #0
   d83e0:	e885 0041 	stmia.w	r5, {r0, r6}
   d83e4:	4608      	mov	r0, r1
   d83e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d83ea:	fab3 f183 	clz	r1, r3
   d83ee:	2900      	cmp	r1, #0
   d83f0:	f040 8090 	bne.w	d8514 <__udivmoddi4+0x1f0>
   d83f4:	42b3      	cmp	r3, r6
   d83f6:	d302      	bcc.n	d83fe <__udivmoddi4+0xda>
   d83f8:	4282      	cmp	r2, r0
   d83fa:	f200 80f8 	bhi.w	d85ee <__udivmoddi4+0x2ca>
   d83fe:	1a84      	subs	r4, r0, r2
   d8400:	eb66 0603 	sbc.w	r6, r6, r3
   d8404:	2001      	movs	r0, #1
   d8406:	46b4      	mov	ip, r6
   d8408:	2d00      	cmp	r5, #0
   d840a:	d040      	beq.n	d848e <__udivmoddi4+0x16a>
   d840c:	e885 1010 	stmia.w	r5, {r4, ip}
   d8410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8414:	b912      	cbnz	r2, d841c <__udivmoddi4+0xf8>
   d8416:	2701      	movs	r7, #1
   d8418:	fbb7 f7f2 	udiv	r7, r7, r2
   d841c:	fab7 fe87 	clz	lr, r7
   d8420:	f1be 0f00 	cmp.w	lr, #0
   d8424:	d135      	bne.n	d8492 <__udivmoddi4+0x16e>
   d8426:	1bf3      	subs	r3, r6, r7
   d8428:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d842c:	fa1f fc87 	uxth.w	ip, r7
   d8430:	2101      	movs	r1, #1
   d8432:	fbb3 f0f8 	udiv	r0, r3, r8
   d8436:	0c22      	lsrs	r2, r4, #16
   d8438:	fb08 3610 	mls	r6, r8, r0, r3
   d843c:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d8440:	fb0c f300 	mul.w	r3, ip, r0
   d8444:	42b3      	cmp	r3, r6
   d8446:	d907      	bls.n	d8458 <__udivmoddi4+0x134>
   d8448:	19f6      	adds	r6, r6, r7
   d844a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   d844e:	d202      	bcs.n	d8456 <__udivmoddi4+0x132>
   d8450:	42b3      	cmp	r3, r6
   d8452:	f200 80ce 	bhi.w	d85f2 <__udivmoddi4+0x2ce>
   d8456:	4610      	mov	r0, r2
   d8458:	1af6      	subs	r6, r6, r3
   d845a:	b2a2      	uxth	r2, r4
   d845c:	fbb6 f3f8 	udiv	r3, r6, r8
   d8460:	fb08 6613 	mls	r6, r8, r3, r6
   d8464:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d8468:	fb0c fc03 	mul.w	ip, ip, r3
   d846c:	45a4      	cmp	ip, r4
   d846e:	d907      	bls.n	d8480 <__udivmoddi4+0x15c>
   d8470:	19e4      	adds	r4, r4, r7
   d8472:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
   d8476:	d202      	bcs.n	d847e <__udivmoddi4+0x15a>
   d8478:	45a4      	cmp	ip, r4
   d847a:	f200 80b5 	bhi.w	d85e8 <__udivmoddi4+0x2c4>
   d847e:	4613      	mov	r3, r2
   d8480:	ebcc 0404 	rsb	r4, ip, r4
   d8484:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d8488:	e79c      	b.n	d83c4 <__udivmoddi4+0xa0>
   d848a:	4629      	mov	r1, r5
   d848c:	4628      	mov	r0, r5
   d848e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8492:	f1ce 0120 	rsb	r1, lr, #32
   d8496:	fa06 f30e 	lsl.w	r3, r6, lr
   d849a:	fa07 f70e 	lsl.w	r7, r7, lr
   d849e:	fa20 f901 	lsr.w	r9, r0, r1
   d84a2:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d84a6:	40ce      	lsrs	r6, r1
   d84a8:	ea49 0903 	orr.w	r9, r9, r3
   d84ac:	fbb6 faf8 	udiv	sl, r6, r8
   d84b0:	ea4f 4419 	mov.w	r4, r9, lsr #16
   d84b4:	fb08 661a 	mls	r6, r8, sl, r6
   d84b8:	fa1f fc87 	uxth.w	ip, r7
   d84bc:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
   d84c0:	fb0a f20c 	mul.w	r2, sl, ip
   d84c4:	429a      	cmp	r2, r3
   d84c6:	fa00 f40e 	lsl.w	r4, r0, lr
   d84ca:	d90a      	bls.n	d84e2 <__udivmoddi4+0x1be>
   d84cc:	19db      	adds	r3, r3, r7
   d84ce:	f10a 31ff 	add.w	r1, sl, #4294967295	; 0xffffffff
   d84d2:	f080 8087 	bcs.w	d85e4 <__udivmoddi4+0x2c0>
   d84d6:	429a      	cmp	r2, r3
   d84d8:	f240 8084 	bls.w	d85e4 <__udivmoddi4+0x2c0>
   d84dc:	f1aa 0a02 	sub.w	sl, sl, #2
   d84e0:	443b      	add	r3, r7
   d84e2:	1a9b      	subs	r3, r3, r2
   d84e4:	fa1f f989 	uxth.w	r9, r9
   d84e8:	fbb3 f1f8 	udiv	r1, r3, r8
   d84ec:	fb08 3311 	mls	r3, r8, r1, r3
   d84f0:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
   d84f4:	fb01 f60c 	mul.w	r6, r1, ip
   d84f8:	429e      	cmp	r6, r3
   d84fa:	d907      	bls.n	d850c <__udivmoddi4+0x1e8>
   d84fc:	19db      	adds	r3, r3, r7
   d84fe:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
   d8502:	d26b      	bcs.n	d85dc <__udivmoddi4+0x2b8>
   d8504:	429e      	cmp	r6, r3
   d8506:	d969      	bls.n	d85dc <__udivmoddi4+0x2b8>
   d8508:	3902      	subs	r1, #2
   d850a:	443b      	add	r3, r7
   d850c:	1b9b      	subs	r3, r3, r6
   d850e:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   d8512:	e78e      	b.n	d8432 <__udivmoddi4+0x10e>
   d8514:	f1c1 0e20 	rsb	lr, r1, #32
   d8518:	fa22 f40e 	lsr.w	r4, r2, lr
   d851c:	408b      	lsls	r3, r1
   d851e:	4323      	orrs	r3, r4
   d8520:	fa20 f70e 	lsr.w	r7, r0, lr
   d8524:	fa06 f401 	lsl.w	r4, r6, r1
   d8528:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   d852c:	fa26 f60e 	lsr.w	r6, r6, lr
   d8530:	433c      	orrs	r4, r7
   d8532:	fbb6 f9fc 	udiv	r9, r6, ip
   d8536:	0c27      	lsrs	r7, r4, #16
   d8538:	fb0c 6619 	mls	r6, ip, r9, r6
   d853c:	fa1f f883 	uxth.w	r8, r3
   d8540:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   d8544:	fb09 f708 	mul.w	r7, r9, r8
   d8548:	42b7      	cmp	r7, r6
   d854a:	fa02 f201 	lsl.w	r2, r2, r1
   d854e:	fa00 fa01 	lsl.w	sl, r0, r1
   d8552:	d908      	bls.n	d8566 <__udivmoddi4+0x242>
   d8554:	18f6      	adds	r6, r6, r3
   d8556:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   d855a:	d241      	bcs.n	d85e0 <__udivmoddi4+0x2bc>
   d855c:	42b7      	cmp	r7, r6
   d855e:	d93f      	bls.n	d85e0 <__udivmoddi4+0x2bc>
   d8560:	f1a9 0902 	sub.w	r9, r9, #2
   d8564:	441e      	add	r6, r3
   d8566:	1bf6      	subs	r6, r6, r7
   d8568:	b2a0      	uxth	r0, r4
   d856a:	fbb6 f4fc 	udiv	r4, r6, ip
   d856e:	fb0c 6614 	mls	r6, ip, r4, r6
   d8572:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
   d8576:	fb04 f808 	mul.w	r8, r4, r8
   d857a:	45b8      	cmp	r8, r7
   d857c:	d907      	bls.n	d858e <__udivmoddi4+0x26a>
   d857e:	18ff      	adds	r7, r7, r3
   d8580:	f104 30ff 	add.w	r0, r4, #4294967295	; 0xffffffff
   d8584:	d228      	bcs.n	d85d8 <__udivmoddi4+0x2b4>
   d8586:	45b8      	cmp	r8, r7
   d8588:	d926      	bls.n	d85d8 <__udivmoddi4+0x2b4>
   d858a:	3c02      	subs	r4, #2
   d858c:	441f      	add	r7, r3
   d858e:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
   d8592:	ebc8 0707 	rsb	r7, r8, r7
   d8596:	fba0 8902 	umull	r8, r9, r0, r2
   d859a:	454f      	cmp	r7, r9
   d859c:	4644      	mov	r4, r8
   d859e:	464e      	mov	r6, r9
   d85a0:	d314      	bcc.n	d85cc <__udivmoddi4+0x2a8>
   d85a2:	d029      	beq.n	d85f8 <__udivmoddi4+0x2d4>
   d85a4:	b365      	cbz	r5, d8600 <__udivmoddi4+0x2dc>
   d85a6:	ebba 0304 	subs.w	r3, sl, r4
   d85aa:	eb67 0706 	sbc.w	r7, r7, r6
   d85ae:	fa07 fe0e 	lsl.w	lr, r7, lr
   d85b2:	40cb      	lsrs	r3, r1
   d85b4:	40cf      	lsrs	r7, r1
   d85b6:	ea4e 0303 	orr.w	r3, lr, r3
   d85ba:	e885 0088 	stmia.w	r5, {r3, r7}
   d85be:	2100      	movs	r1, #0
   d85c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d85c4:	4613      	mov	r3, r2
   d85c6:	e6f8      	b.n	d83ba <__udivmoddi4+0x96>
   d85c8:	4610      	mov	r0, r2
   d85ca:	e6e0      	b.n	d838e <__udivmoddi4+0x6a>
   d85cc:	ebb8 0402 	subs.w	r4, r8, r2
   d85d0:	eb69 0603 	sbc.w	r6, r9, r3
   d85d4:	3801      	subs	r0, #1
   d85d6:	e7e5      	b.n	d85a4 <__udivmoddi4+0x280>
   d85d8:	4604      	mov	r4, r0
   d85da:	e7d8      	b.n	d858e <__udivmoddi4+0x26a>
   d85dc:	4611      	mov	r1, r2
   d85de:	e795      	b.n	d850c <__udivmoddi4+0x1e8>
   d85e0:	4681      	mov	r9, r0
   d85e2:	e7c0      	b.n	d8566 <__udivmoddi4+0x242>
   d85e4:	468a      	mov	sl, r1
   d85e6:	e77c      	b.n	d84e2 <__udivmoddi4+0x1be>
   d85e8:	3b02      	subs	r3, #2
   d85ea:	443c      	add	r4, r7
   d85ec:	e748      	b.n	d8480 <__udivmoddi4+0x15c>
   d85ee:	4608      	mov	r0, r1
   d85f0:	e70a      	b.n	d8408 <__udivmoddi4+0xe4>
   d85f2:	3802      	subs	r0, #2
   d85f4:	443e      	add	r6, r7
   d85f6:	e72f      	b.n	d8458 <__udivmoddi4+0x134>
   d85f8:	45c2      	cmp	sl, r8
   d85fa:	d3e7      	bcc.n	d85cc <__udivmoddi4+0x2a8>
   d85fc:	463e      	mov	r6, r7
   d85fe:	e7d1      	b.n	d85a4 <__udivmoddi4+0x280>
   d8600:	4629      	mov	r1, r5
   d8602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8606:	bf00      	nop

000d8608 <__aeabi_idiv0>:
   d8608:	4770      	bx	lr
   d860a:	bf00      	nop

000d860c <__cxa_atexit>:
   d860c:	b510      	push	{r4, lr}
   d860e:	4c05      	ldr	r4, [pc, #20]	; (d8624 <__cxa_atexit+0x18>)
   d8610:	4613      	mov	r3, r2
   d8612:	b12c      	cbz	r4, d8620 <__cxa_atexit+0x14>
   d8614:	460a      	mov	r2, r1
   d8616:	4601      	mov	r1, r0
   d8618:	2002      	movs	r0, #2
   d861a:	f3af 8000 	nop.w
   d861e:	bd10      	pop	{r4, pc}
   d8620:	4620      	mov	r0, r4
   d8622:	bd10      	pop	{r4, pc}
   d8624:	00000000 	.word	0x00000000

000d8628 <memcpy>:
   d8628:	b510      	push	{r4, lr}
   d862a:	1e43      	subs	r3, r0, #1
   d862c:	440a      	add	r2, r1
   d862e:	4291      	cmp	r1, r2
   d8630:	d004      	beq.n	d863c <memcpy+0x14>
   d8632:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8636:	f803 4f01 	strb.w	r4, [r3, #1]!
   d863a:	e7f8      	b.n	d862e <memcpy+0x6>
   d863c:	bd10      	pop	{r4, pc}

000d863e <memset>:
   d863e:	4402      	add	r2, r0
   d8640:	4603      	mov	r3, r0
   d8642:	4293      	cmp	r3, r2
   d8644:	d002      	beq.n	d864c <memset+0xe>
   d8646:	f803 1b01 	strb.w	r1, [r3], #1
   d864a:	e7fa      	b.n	d8642 <memset+0x4>
   d864c:	4770      	bx	lr
	...

000d8650 <srand>:
   d8650:	b538      	push	{r3, r4, r5, lr}
   d8652:	4b12      	ldr	r3, [pc, #72]	; (d869c <srand+0x4c>)
   d8654:	681c      	ldr	r4, [r3, #0]
   d8656:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8658:	4605      	mov	r5, r0
   d865a:	b9d3      	cbnz	r3, d8692 <srand+0x42>
   d865c:	2018      	movs	r0, #24
   d865e:	f7fc fdcd 	bl	d51fc <malloc>
   d8662:	f243 330e 	movw	r3, #13070	; 0x330e
   d8666:	63a0      	str	r0, [r4, #56]	; 0x38
   d8668:	8003      	strh	r3, [r0, #0]
   d866a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d866e:	8043      	strh	r3, [r0, #2]
   d8670:	f241 2334 	movw	r3, #4660	; 0x1234
   d8674:	8083      	strh	r3, [r0, #4]
   d8676:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d867a:	80c3      	strh	r3, [r0, #6]
   d867c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d8680:	8103      	strh	r3, [r0, #8]
   d8682:	2305      	movs	r3, #5
   d8684:	8143      	strh	r3, [r0, #10]
   d8686:	230b      	movs	r3, #11
   d8688:	8183      	strh	r3, [r0, #12]
   d868a:	2201      	movs	r2, #1
   d868c:	2300      	movs	r3, #0
   d868e:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d8692:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8694:	2200      	movs	r2, #0
   d8696:	611d      	str	r5, [r3, #16]
   d8698:	615a      	str	r2, [r3, #20]
   d869a:	bd38      	pop	{r3, r4, r5, pc}
   d869c:	2003e424 	.word	0x2003e424

000d86a0 <strlen>:
   d86a0:	4603      	mov	r3, r0
   d86a2:	f813 2b01 	ldrb.w	r2, [r3], #1
   d86a6:	2a00      	cmp	r2, #0
   d86a8:	d1fb      	bne.n	d86a2 <strlen+0x2>
   d86aa:	1a18      	subs	r0, r3, r0
   d86ac:	3801      	subs	r0, #1
   d86ae:	4770      	bx	lr

000d86b0 <dynalib_user>:
   d86b0:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d86c0:	0000 0000 6941 2072 7551 6c61 7469 2079     ....Air Quality 
   d86d0:	6553 736e 726f 7220 6165 7964 002e 6941     Sensor ready..Ai
   d86e0:	2072 7551 6c61 7469 2079 6553 736e 726f     r Quality Sensor
   d86f0:	4520 5252 524f 0021 4d42 3245 3038 5320      ERROR!.BME280 S
   d8700:	6e65 6f73 2072 6572 6461 2e79 4200 454d     ensor ready..BME
   d8710:	3832 2030 6553 736e 726f 4520 5252 524f     280 Sensor ERROR
   d8720:	0021 6f4e 656e 4400 6e61 6567 0072 6948     !.None.Danger.Hi
   d8730:	6867 5020 6c6f 756c 6974 6e6f 4c00 776f     gh Pollution.Low
   d8740:	5020 6c6f 756c 6974 6e6f 4600 6572 6873      Pollution.Fresh
   d8750:	4120 7269 4c00 4f50 203a 6425 5200 7461      Air.LPO: %d.Rat
   d8760:	6f69 203a 6625 2525 4300 6e6f 6563 746e     io: %f%%.Concent
   d8770:	6172 6974 6e6f 203a 6625 7020 7363 4c2f     ration: %f pcs/L
   d8780:	4100 7269 5120 6175 696c 7974 203a 7325     .Air Quality: %s
   d8790:	5400 6d65 3a70 2520 0064 7250 7365 7573     .Temp: %d.Pressu
   d87a0:	6572 203a 6425 4800 6d75 6469 7469 3a79     re: %d.Humidity:
   d87b0:	2520 0064                                    %d.

000d87b4 <_ZN16AirQualitySensor13LOW_POLLUTIONE>:
   d87b4:	0002 0000                                   ....

000d87b8 <_ZN16AirQualitySensor9FRESH_AIRE>:
   d87b8:	0003 0000                                   ....

000d87bc <_ZN16AirQualitySensor14HIGH_POLLUTIONE>:
   d87bc:	0001 0000                                   ....

000d87c0 <_ZN16AirQualitySensor12FORCE_SIGNALE>:
   d87c0:	0000 0000                                   ....

000d87c4 <_ZTVN8particle13__SPISettingsE>:
	...
   d87cc:	44d5 000d 6564 6166 6c75 2074 4d00 4253     .D..default .MSB
   d87dc:	4c00 4253 3c00 5053 5349 7465 6974 676e     .LSB.<SPISetting
   d87ec:	2073 6564 6166 6c75 3e74 3c00 5053 5349     s default>.<SPIS
   d87fc:	7465 6974 676e 2073 7325 6c25 2075 7325     ettings %s%lu %s
   d880c:	4d20 444f 2545 3e64 0000 0000                MODE%d>....

000d8818 <_ZTVN5spark13CellularClassE>:
	...
   d8820:	52eb 000d 52e1 000d 52d7 000d 528d 000d     .R...R...R...R..
   d8830:	52cb 000d 52bf 000d 52b3 000d 52ab 000d     .R...R...R...R..
   d8840:	52a1 000d 5297 000d 5795 000d               .R...R...W..

000d884c <_ZTVN5spark13EthernetClassE>:
	...
   d8854:	5395 000d 538b 000d 5381 000d 5377 000d     .S...S...S..wS..
   d8864:	536b 000d 535f 000d 5353 000d 534b 000d     kS.._S..SS..KS..
   d8874:	5341 000d 5337 000d 5795 000d               AS..7S...W..

000d8880 <_ZTV7TwoWire>:
	...
   d8888:	53b5 000d 53ff 000d 53d7 000d 53b7 000d     .S...S...S...S..
   d8898:	53df 000d 53e7 000d 53ef 000d 53f7 000d     .S...S...S...S..

000d88a8 <_ZTV9IPAddress>:
	...
   d88b0:	54cd 000d 54bd 000d 54bf 000d 6162 6475     .T...T...T..baud
   d88c0:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d88d0:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d88e0:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d88f0:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d8900:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d8910:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d8920:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d8930:	7070 2500 3130 7530 0020 205d 2c00 0020     pp.%010u .] ., .
   d8940:	2928 203a 2000 005b 6f63 6564 3d20 0020     (): . [.code = .
   d8950:	6925 6400 7465 6961 736c 3d20 0020 0a0d     %i.details = ...
   d8960:	6600 6c00 006e 6e66 6300 646f 0065 6564     .f.ln.fn.code.de
   d8970:	6174 6c69 6e00 6e6f 0065 7274 6361 0065     tail.none.trace.
   d8980:	6e69 6f66 7700 7261 006e 7265 6f72 0072     info.warn.error.
   d8990:	6170 696e 0063 6c61 006c 0000               panic.all...

000d899c <_ZTVN5spark9MeshClassE>:
	...
   d89a4:	560f 000d 5605 000d 55fb 000d 55f1 000d     .V...V...U...U..
   d89b4:	55e5 000d 55d9 000d 55cd 000d 55c5 000d     .U...U...U...U..
   d89c4:	55bb 000d 55b1 000d 5795 000d               .U...U...W..

000d89d0 <_ZTVN5spark12NetworkClassE>:
	...
   d89d8:	572d 000d 5737 000d 5741 000d 574b 000d     -W..7W..AW..KW..
   d89e8:	5755 000d 5761 000d 576d 000d 5779 000d     UW..aW..mW..yW..
   d89f8:	5781 000d 578b 000d 5795 000d               .W...W...W..

000d8a04 <_ZTV8SPIClass>:
	...
   d8a0c:	59d9 000d 59db 000d                         .Y...Y..

000d8a14 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d8a14:	0800 1810 2820 3830 005a 2b25 3330 3a64     .... (08Z.%+03d:
   d8a24:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
   d8a34:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
   d8a44:	0000 0000                                   ....

000d8a48 <_ZTV11USARTSerial>:
	...
   d8a50:	5cad 000d 5cfd 000d 5d0b 000d 5875 000d     .\...\...]..uX..
   d8a60:	5cc1 000d 5ce3 000d 5ccf 000d 5cf7 000d     .\...\...\...\..
   d8a70:	5caf 000d 5cb3 000d                         .\...\..

000d8a78 <_ZTV9USBSerial>:
	...
   d8a80:	5de9 000d 5e39 000d 5e47 000d 5875 000d     .]..9^..G^..uX..
   d8a90:	5e25 000d 5deb 000d 5e01 000d 5e33 000d     %^...]...^..3^..
   d8aa0:	5e17 000d 5de5 000d                         .^...]..

000d8aa8 <_ZSt7nothrow>:
   d8aa8:	0000 0000 6f70 0077 0000 0000 0000 0000     ....pow.........

000d8ab8 <TWO52>:
   d8ab8:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

000d8ac8 <__sf_fake_stdin>:
	...

000d8ae8 <__sf_fake_stdout>:
	...

000d8b08 <__sf_fake_stderr>:
	...
   d8b28:	0043                                        C.

000d8b2a <link_const_variable_data_end>:
	...

000d8b2c <link_constructors_location>:
   d8b2c:	000d43f1 	.word	0x000d43f1
   d8b30:	000d44d1 	.word	0x000d44d1
   d8b34:	000d4dbd 	.word	0x000d4dbd
   d8b38:	000d4dc1 	.word	0x000d4dc1
   d8b3c:	000d5265 	.word	0x000d5265
   d8b40:	000d52f5 	.word	0x000d52f5
   d8b44:	000d53a1 	.word	0x000d53a1
   d8b48:	000d55a1 	.word	0x000d55a1
   d8b4c:	000d56dd 	.word	0x000d56dd
   d8b50:	000d5861 	.word	0x000d5861
   d8b54:	000d59bd 	.word	0x000d59bd
   d8b58:	000d5c65 	.word	0x000d5c65
   d8b5c:	000d5c99 	.word	0x000d5c99
   d8b60:	000d61f9 	.word	0x000d61f9
   d8b64:	000d62bd 	.word	0x000d62bd
   d8b68:	000d6341 	.word	0x000d6341
   d8b6c:	000d63c5 	.word	0x000d63c5
