
/Users/talalagedeon/Desktop/particle-coding/Air-quality/target/1.5.0/boron/Air-quality.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000034c0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d74e0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  2003e41c  000d74e4  0001e41c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000368  2003e488  2003e488  0002e488  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d7550  000d7550  00027550  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d7578  000d7578  00027578  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000ca0fe  00000000  00000000  0002757c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000fc6c  00000000  00000000  000f167a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001ba47  00000000  00000000  001012e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002230  00000000  00000000  0011cd2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004248  00000000  00000000  0011ef5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00032e33  00000000  00000000  001231a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00025b65  00000000  00000000  00155fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00104970  00000000  00000000  0017bb3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c6f4  00000000  00000000  002804b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f003 f84f 	bl	d70d4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f003 f854 	bl	d70ea <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e41c 	.word	0x2003e41c
   d404c:	000d74e4 	.word	0x000d74e4
   d4050:	2003e488 	.word	0x2003e488
   d4054:	2003e488 	.word	0x2003e488
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f001 f80d 	bl	d507c <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d74dc 	.word	0x000d74dc
   d4084:	000d74a4 	.word	0x000d74a4

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b816 	b.w	d40b8 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 f8d7 	bl	d4240 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f000 bfb3 	b.w	d5000 <_post_loop>

000d409a <_Znwj>:
   d409a:	f000 ba91 	b.w	d45c0 <malloc>

000d409e <_ZdlPv>:
   d409e:	f000 ba97 	b.w	d45d0 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f000 ba95 	b.w	d45d0 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <setup>:
unsigned long duration;

float ratio = 0;
float concentration = 0;

void setup() {
   d40b8:	b508      	push	{r3, lr}
  Serial.begin(9600);
   d40ba:	f000 ff5d 	bl	d4f78 <_Z16_fetch_usbserialv>
   d40be:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40c2:	f000 ff4d 	bl	d4f60 <_ZN9USBSerial5beginEl>

  pinMode( DUST_SENSOR_PIN, INPUT);
   d40c6:	2100      	movs	r1, #0
   d40c8:	2004      	movs	r0, #4
   d40ca:	f001 f825 	bl	d5118 <pinMode>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d40ce:	f000 f90b 	bl	d42e8 <HAL_Timer_Get_Milli_Seconds>
  lastInterval = millis();
   d40d2:	4b01      	ldr	r3, [pc, #4]	; (d40d8 <setup+0x20>)
   d40d4:	6018      	str	r0, [r3, #0]
   d40d6:	bd08      	pop	{r3, pc}
   d40d8:	2003e4a0 	.word	0x2003e4a0
   d40dc:	00000000 	.word	0x00000000

000d40e0 <_Z21getDustSensorReadingsv>:
    lastInterval = millis();
  }
}

void getDustSensorReadings()
{
   d40e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d40e4:	ed2d 8b02 	vpush	{d8}
  // This particular dust sensor returns 0s often, so let's filter them out by making sure we only
  // capture and use non-zero LPO values for our calculations once we get a good reading.
  if (lowpulseoccupancy == 0)
   d40e8:	4c4d      	ldr	r4, [pc, #308]	; (d4220 <_Z21getDustSensorReadingsv+0x140>)
   d40ea:	4b4e      	ldr	r3, [pc, #312]	; (d4224 <_Z21getDustSensorReadingsv+0x144>)
   d40ec:	6822      	ldr	r2, [r4, #0]
    lastInterval = millis();
  }
}

void getDustSensorReadings()
{
   d40ee:	b084      	sub	sp, #16
  // This particular dust sensor returns 0s often, so let's filter them out by making sure we only
  // capture and use non-zero LPO values for our calculations once we get a good reading.
  if (lowpulseoccupancy == 0)
   d40f0:	b912      	cbnz	r2, d40f8 <_Z21getDustSensorReadingsv+0x18>
  {
    lowpulseoccupancy = last_lpo;
   d40f2:	681b      	ldr	r3, [r3, #0]
   d40f4:	6023      	str	r3, [r4, #0]
   d40f6:	e000      	b.n	d40fa <_Z21getDustSensorReadingsv+0x1a>
  }
  else
  {
    last_lpo = lowpulseoccupancy;
   d40f8:	601a      	str	r2, [r3, #0]
  }

  ratio = lowpulseoccupancy / (SENSOR_READING_INTERVAL * 10.0);                   // Integer percentage 0=>100
   d40fa:	6820      	ldr	r0, [r4, #0]
   d40fc:	4d4a      	ldr	r5, [pc, #296]	; (d4228 <_Z21getDustSensorReadingsv+0x148>)
  concentration = 1.1 * pow(ratio, 3) - 3.8 * pow(ratio, 2) + 520 * ratio + 0.62; // using spec sheet curve
   d40fe:	f8df a13c 	ldr.w	sl, [pc, #316]	; d423c <_Z21getDustSensorReadingsv+0x15c>
  else
  {
    last_lpo = lowpulseoccupancy;
  }

  ratio = lowpulseoccupancy / (SENSOR_READING_INTERVAL * 10.0);                   // Integer percentage 0=>100
   d4102:	f002 fc63 	bl	d69cc <__aeabi_ui2d>
   d4106:	a33c      	add	r3, pc, #240	; (adr r3, d41f8 <_Z21getDustSensorReadingsv+0x118>)
   d4108:	e9d3 2300 	ldrd	r2, r3, [r3]
   d410c:	f002 fdfe 	bl	d6d0c <__aeabi_ddiv>
   d4110:	f002 ff82 	bl	d7018 <__aeabi_d2f>
   d4114:	6028      	str	r0, [r5, #0]
  concentration = 1.1 * pow(ratio, 3) - 3.8 * pow(ratio, 2) + 520 * ratio + 0.62; // using spec sheet curve
   d4116:	f002 fc7b 	bl	d6a10 <__aeabi_f2d>
   d411a:	ed9f 1b39 	vldr	d1, [pc, #228]	; d4200 <_Z21getDustSensorReadingsv+0x120>
   d411e:	ec41 0b10 	vmov	d0, r0, r1
   d4122:	f001 f9d9 	bl	d54d8 <pow>
   d4126:	ed95 8a00 	vldr	s16, [r5]
   d412a:	ee18 0a10 	vmov	r0, s16
   d412e:	ed8d 0b02 	vstr	d0, [sp, #8]
   d4132:	f002 fc6d 	bl	d6a10 <__aeabi_f2d>
   d4136:	ed9d 0b02 	vldr	d0, [sp, #8]
   d413a:	4680      	mov	r8, r0
   d413c:	4689      	mov	r9, r1
   d413e:	a332      	add	r3, pc, #200	; (adr r3, d4208 <_Z21getDustSensorReadingsv+0x128>)
   d4140:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4144:	ec51 0b10 	vmov	r0, r1, d0
   d4148:	f002 fcb6 	bl	d6ab8 <__aeabi_dmul>
   d414c:	4642      	mov	r2, r8
   d414e:	4606      	mov	r6, r0
   d4150:	460f      	mov	r7, r1
   d4152:	464b      	mov	r3, r9
   d4154:	4640      	mov	r0, r8
   d4156:	4649      	mov	r1, r9
   d4158:	f002 fcae 	bl	d6ab8 <__aeabi_dmul>
   d415c:	a32c      	add	r3, pc, #176	; (adr r3, d4210 <_Z21getDustSensorReadingsv+0x130>)
   d415e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4162:	f002 fca9 	bl	d6ab8 <__aeabi_dmul>
   d4166:	4602      	mov	r2, r0
   d4168:	460b      	mov	r3, r1
   d416a:	4630      	mov	r0, r6
   d416c:	4639      	mov	r1, r7
   d416e:	f002 faef 	bl	d6750 <__aeabi_dsub>
   d4172:	eddf 7a2e 	vldr	s15, [pc, #184]	; d422c <_Z21getDustSensorReadingsv+0x14c>
   d4176:	ee68 7a27 	vmul.f32	s15, s16, s15
   d417a:	4606      	mov	r6, r0
   d417c:	ee17 0a90 	vmov	r0, s15
   d4180:	460f      	mov	r7, r1
   d4182:	f002 fc45 	bl	d6a10 <__aeabi_f2d>
   d4186:	4602      	mov	r2, r0
   d4188:	460b      	mov	r3, r1
   d418a:	4630      	mov	r0, r6
   d418c:	4639      	mov	r1, r7
   d418e:	f002 fae1 	bl	d6754 <__adddf3>
   d4192:	a321      	add	r3, pc, #132	; (adr r3, d4218 <_Z21getDustSensorReadingsv+0x138>)
   d4194:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4198:	f002 fadc 	bl	d6754 <__adddf3>
   d419c:	f002 ff3c 	bl	d7018 <__aeabi_d2f>
   d41a0:	f8ca 0000 	str.w	r0, [sl]

  Serial.printlnf("LPO: %d", lowpulseoccupancy);
   d41a4:	f000 fee8 	bl	d4f78 <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d41a8:	6823      	ldr	r3, [r4, #0]
   d41aa:	4a21      	ldr	r2, [pc, #132]	; (d4230 <_Z21getDustSensorReadingsv+0x150>)
   d41ac:	2101      	movs	r1, #1
   d41ae:	f000 fd4a 	bl	d4c46 <_ZN5Print11printf_implEbPKcz>
  Serial.printlnf("Ratio: %f%%", ratio);
   d41b2:	f000 fee1 	bl	d4f78 <_Z16_fetch_usbserialv>
   d41b6:	4604      	mov	r4, r0
   d41b8:	6828      	ldr	r0, [r5, #0]
   d41ba:	f002 fc29 	bl	d6a10 <__aeabi_f2d>
   d41be:	4a1d      	ldr	r2, [pc, #116]	; (d4234 <_Z21getDustSensorReadingsv+0x154>)
   d41c0:	e9cd 0100 	strd	r0, r1, [sp]
   d41c4:	2101      	movs	r1, #1
   d41c6:	4620      	mov	r0, r4
   d41c8:	f000 fd3d 	bl	d4c46 <_ZN5Print11printf_implEbPKcz>
  Serial.printlnf("Concentration: %f pcs/L", concentration);
   d41cc:	f000 fed4 	bl	d4f78 <_Z16_fetch_usbserialv>
   d41d0:	4604      	mov	r4, r0
   d41d2:	f8da 0000 	ldr.w	r0, [sl]
   d41d6:	f002 fc1b 	bl	d6a10 <__aeabi_f2d>
   d41da:	4a17      	ldr	r2, [pc, #92]	; (d4238 <_Z21getDustSensorReadingsv+0x158>)
   d41dc:	e9cd 0100 	strd	r0, r1, [sp]
   d41e0:	2101      	movs	r1, #1
   d41e2:	4620      	mov	r0, r4
   d41e4:	f000 fd2f 	bl	d4c46 <_ZN5Print11printf_implEbPKcz>
   d41e8:	b004      	add	sp, #16
   d41ea:	ecbd 8b02 	vpop	{d8}
   d41ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d41f2:	bf00      	nop
   d41f4:	f3af 8000 	nop.w
   d41f8:	00000000 	.word	0x00000000
   d41fc:	41124f80 	.word	0x41124f80
   d4200:	00000000 	.word	0x00000000
   d4204:	40080000 	.word	0x40080000
   d4208:	9999999a 	.word	0x9999999a
   d420c:	3ff19999 	.word	0x3ff19999
   d4210:	66666666 	.word	0x66666666
   d4214:	400e6666 	.word	0x400e6666
   d4218:	3d70a3d7 	.word	0x3d70a3d7
   d421c:	3fe3d70a 	.word	0x3fe3d70a
   d4220:	2003e49c 	.word	0x2003e49c
   d4224:	2003e494 	.word	0x2003e494
   d4228:	2003e498 	.word	0x2003e498
   d422c:	44020000 	.word	0x44020000
   d4230:	000d7170 	.word	0x000d7170
   d4234:	000d7178 	.word	0x000d7178
   d4238:	000d7184 	.word	0x000d7184
   d423c:	2003e48c 	.word	0x2003e48c

000d4240 <loop>:
  lastInterval = millis();

}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d4240:	b538      	push	{r3, r4, r5, lr}
  duration = pulseIn( DUST_SENSOR_PIN, LOW);
   d4242:	2100      	movs	r1, #0
   d4244:	2004      	movs	r0, #4
   d4246:	f000 ff78 	bl	d513a <pulseIn>
  lowpulseoccupancy = lowpulseoccupancy + duration;
   d424a:	4c0b      	ldr	r4, [pc, #44]	; (d4278 <loop+0x38>)

}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
  duration = pulseIn( DUST_SENSOR_PIN, LOW);
   d424c:	4b0b      	ldr	r3, [pc, #44]	; (d427c <loop+0x3c>)
  lowpulseoccupancy = lowpulseoccupancy + duration;

  if ((millis() - lastInterval) > SENSOR_READING_INTERVAL)
   d424e:	4d0c      	ldr	r5, [pc, #48]	; (d4280 <loop+0x40>)

}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
  duration = pulseIn( DUST_SENSOR_PIN, LOW);
   d4250:	6018      	str	r0, [r3, #0]
  lowpulseoccupancy = lowpulseoccupancy + duration;
   d4252:	6823      	ldr	r3, [r4, #0]
   d4254:	4418      	add	r0, r3
   d4256:	6020      	str	r0, [r4, #0]
   d4258:	f000 f846 	bl	d42e8 <HAL_Timer_Get_Milli_Seconds>

  if ((millis() - lastInterval) > SENSOR_READING_INTERVAL)
   d425c:	682b      	ldr	r3, [r5, #0]
   d425e:	1ac0      	subs	r0, r0, r3
   d4260:	f247 5330 	movw	r3, #30000	; 0x7530
   d4264:	4298      	cmp	r0, r3
   d4266:	d906      	bls.n	d4276 <loop+0x36>
  {

    getDustSensorReadings();
   d4268:	f7ff ff3a 	bl	d40e0 <_Z21getDustSensorReadingsv>

    lowpulseoccupancy =0;
   d426c:	2300      	movs	r3, #0
   d426e:	6023      	str	r3, [r4, #0]
   d4270:	f000 f83a 	bl	d42e8 <HAL_Timer_Get_Milli_Seconds>
    lastInterval = millis();
   d4274:	6028      	str	r0, [r5, #0]
   d4276:	bd38      	pop	{r3, r4, r5, pc}
   d4278:	2003e49c 	.word	0x2003e49c
   d427c:	2003e490 	.word	0x2003e490
   d4280:	2003e4a0 	.word	0x2003e4a0

000d4284 <_GLOBAL__sub_I_lastInterval>:

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4284:	f000 b838 	b.w	d42f8 <HAL_Pin_Map>

000d4288 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4288:	b508      	push	{r3, lr}
   d428a:	4b02      	ldr	r3, [pc, #8]	; (d4294 <os_thread_is_current+0xc>)
   d428c:	681b      	ldr	r3, [r3, #0]
   d428e:	689b      	ldr	r3, [r3, #8]
   d4290:	9301      	str	r3, [sp, #4]
   d4292:	bd08      	pop	{r3, pc}
   d4294:	00030248 	.word	0x00030248

000d4298 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4298:	b508      	push	{r3, lr}
   d429a:	4b02      	ldr	r3, [pc, #8]	; (d42a4 <os_thread_join+0xc>)
   d429c:	681b      	ldr	r3, [r3, #0]
   d429e:	691b      	ldr	r3, [r3, #16]
   d42a0:	9301      	str	r3, [sp, #4]
   d42a2:	bd08      	pop	{r3, pc}
   d42a4:	00030248 	.word	0x00030248

000d42a8 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d42a8:	b508      	push	{r3, lr}
   d42aa:	4b02      	ldr	r3, [pc, #8]	; (d42b4 <os_thread_cleanup+0xc>)
   d42ac:	681b      	ldr	r3, [r3, #0]
   d42ae:	695b      	ldr	r3, [r3, #20]
   d42b0:	9301      	str	r3, [sp, #4]
   d42b2:	bd08      	pop	{r3, pc}
   d42b4:	00030248 	.word	0x00030248

000d42b8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d42b8:	b508      	push	{r3, lr}
   d42ba:	4b02      	ldr	r3, [pc, #8]	; (d42c4 <os_mutex_recursive_create+0xc>)
   d42bc:	681b      	ldr	r3, [r3, #0]
   d42be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d42c0:	9301      	str	r3, [sp, #4]
   d42c2:	bd08      	pop	{r3, pc}
   d42c4:	00030248 	.word	0x00030248

000d42c8 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d42c8:	b508      	push	{r3, lr}
   d42ca:	4b02      	ldr	r3, [pc, #8]	; (d42d4 <os_mutex_recursive_destroy+0xc>)
   d42cc:	681b      	ldr	r3, [r3, #0]
   d42ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d42d0:	9301      	str	r3, [sp, #4]
   d42d2:	bd08      	pop	{r3, pc}
   d42d4:	00030248 	.word	0x00030248

000d42d8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d42d8:	b508      	push	{r3, lr}
   d42da:	4b02      	ldr	r3, [pc, #8]	; (d42e4 <HAL_RNG_GetRandomNumber+0xc>)
   d42dc:	681b      	ldr	r3, [r3, #0]
   d42de:	685b      	ldr	r3, [r3, #4]
   d42e0:	9301      	str	r3, [sp, #4]
   d42e2:	bd08      	pop	{r3, pc}
   d42e4:	00030218 	.word	0x00030218

000d42e8 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d42e8:	b508      	push	{r3, lr}
   d42ea:	4b02      	ldr	r3, [pc, #8]	; (d42f4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d42ec:	681b      	ldr	r3, [r3, #0]
   d42ee:	695b      	ldr	r3, [r3, #20]
   d42f0:	9301      	str	r3, [sp, #4]
   d42f2:	bd08      	pop	{r3, pc}
   d42f4:	00030218 	.word	0x00030218

000d42f8 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d42f8:	b508      	push	{r3, lr}
   d42fa:	4b02      	ldr	r3, [pc, #8]	; (d4304 <HAL_Pin_Map+0xc>)
   d42fc:	681b      	ldr	r3, [r3, #0]
   d42fe:	681b      	ldr	r3, [r3, #0]
   d4300:	9301      	str	r3, [sp, #4]
   d4302:	bd08      	pop	{r3, pc}
   d4304:	0003022c 	.word	0x0003022c

000d4308 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4308:	b508      	push	{r3, lr}
   d430a:	4b02      	ldr	r3, [pc, #8]	; (d4314 <HAL_Pin_Mode+0xc>)
   d430c:	681b      	ldr	r3, [r3, #0]
   d430e:	689b      	ldr	r3, [r3, #8]
   d4310:	9301      	str	r3, [sp, #4]
   d4312:	bd08      	pop	{r3, pc}
   d4314:	0003022c 	.word	0x0003022c

000d4318 <HAL_Pulse_In>:

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
DYNALIB_FN(17, hal_gpio, HAL_Get_System_Interrupt_Handler, uint8_t(hal_irq_t, HAL_InterruptCallback*, void*))
DYNALIB_FN(18, hal_gpio, HAL_System_Interrupt_Trigger, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, HAL_Pulse_In, uint32_t(pin_t, uint16_t))
   d4318:	b508      	push	{r3, lr}
   d431a:	4b02      	ldr	r3, [pc, #8]	; (d4324 <HAL_Pulse_In+0xc>)
   d431c:	681b      	ldr	r3, [r3, #0]
   d431e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4320:	9301      	str	r3, [sp, #4]
   d4322:	bd08      	pop	{r3, pc}
   d4324:	0003022c 	.word	0x0003022c

000d4328 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4328:	b508      	push	{r3, lr}
   d432a:	4b02      	ldr	r3, [pc, #8]	; (d4334 <HAL_I2C_Write_Data+0xc>)
   d432c:	681b      	ldr	r3, [r3, #0]
   d432e:	6a1b      	ldr	r3, [r3, #32]
   d4330:	9301      	str	r3, [sp, #4]
   d4332:	bd08      	pop	{r3, pc}
   d4334:	00030228 	.word	0x00030228

000d4338 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4338:	b508      	push	{r3, lr}
   d433a:	4b02      	ldr	r3, [pc, #8]	; (d4344 <HAL_I2C_Available_Data+0xc>)
   d433c:	681b      	ldr	r3, [r3, #0]
   d433e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4340:	9301      	str	r3, [sp, #4]
   d4342:	bd08      	pop	{r3, pc}
   d4344:	00030228 	.word	0x00030228

000d4348 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4348:	b508      	push	{r3, lr}
   d434a:	4b02      	ldr	r3, [pc, #8]	; (d4354 <HAL_I2C_Read_Data+0xc>)
   d434c:	681b      	ldr	r3, [r3, #0]
   d434e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4350:	9301      	str	r3, [sp, #4]
   d4352:	bd08      	pop	{r3, pc}
   d4354:	00030228 	.word	0x00030228

000d4358 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4358:	b508      	push	{r3, lr}
   d435a:	4b02      	ldr	r3, [pc, #8]	; (d4364 <HAL_I2C_Peek_Data+0xc>)
   d435c:	681b      	ldr	r3, [r3, #0]
   d435e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4360:	9301      	str	r3, [sp, #4]
   d4362:	bd08      	pop	{r3, pc}
   d4364:	00030228 	.word	0x00030228

000d4368 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4368:	b508      	push	{r3, lr}
   d436a:	4b02      	ldr	r3, [pc, #8]	; (d4374 <HAL_I2C_Flush_Data+0xc>)
   d436c:	681b      	ldr	r3, [r3, #0]
   d436e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4370:	9301      	str	r3, [sp, #4]
   d4372:	bd08      	pop	{r3, pc}
   d4374:	00030228 	.word	0x00030228

000d4378 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4378:	b508      	push	{r3, lr}
   d437a:	4b02      	ldr	r3, [pc, #8]	; (d4384 <HAL_I2C_Is_Enabled+0xc>)
   d437c:	681b      	ldr	r3, [r3, #0]
   d437e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4380:	9301      	str	r3, [sp, #4]
   d4382:	bd08      	pop	{r3, pc}
   d4384:	00030228 	.word	0x00030228

000d4388 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d4388:	b508      	push	{r3, lr}
   d438a:	4b02      	ldr	r3, [pc, #8]	; (d4394 <HAL_I2C_Init+0xc>)
   d438c:	681b      	ldr	r3, [r3, #0]
   d438e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4390:	9301      	str	r3, [sp, #4]
   d4392:	bd08      	pop	{r3, pc}
   d4394:	00030228 	.word	0x00030228

000d4398 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4398:	b508      	push	{r3, lr}
   d439a:	4b02      	ldr	r3, [pc, #8]	; (d43a4 <inet_inet_ntop+0xc>)
   d439c:	681b      	ldr	r3, [r3, #0]
   d439e:	695b      	ldr	r3, [r3, #20]
   d43a0:	9301      	str	r3, [sp, #4]
   d43a2:	bd08      	pop	{r3, pc}
   d43a4:	00030264 	.word	0x00030264

000d43a8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d43a8:	b508      	push	{r3, lr}
   d43aa:	4b02      	ldr	r3, [pc, #8]	; (d43b4 <netdb_freeaddrinfo+0xc>)
   d43ac:	681b      	ldr	r3, [r3, #0]
   d43ae:	689b      	ldr	r3, [r3, #8]
   d43b0:	9301      	str	r3, [sp, #4]
   d43b2:	bd08      	pop	{r3, pc}
   d43b4:	00030268 	.word	0x00030268

000d43b8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d43b8:	b508      	push	{r3, lr}
   d43ba:	4b02      	ldr	r3, [pc, #8]	; (d43c4 <netdb_getaddrinfo+0xc>)
   d43bc:	681b      	ldr	r3, [r3, #0]
   d43be:	68db      	ldr	r3, [r3, #12]
   d43c0:	9301      	str	r3, [sp, #4]
   d43c2:	bd08      	pop	{r3, pc}
   d43c4:	00030268 	.word	0x00030268

000d43c8 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d43c8:	b508      	push	{r3, lr}
   d43ca:	4b02      	ldr	r3, [pc, #8]	; (d43d4 <HAL_SPI_Init+0xc>)
   d43cc:	681b      	ldr	r3, [r3, #0]
   d43ce:	69db      	ldr	r3, [r3, #28]
   d43d0:	9301      	str	r3, [sp, #4]
   d43d2:	bd08      	pop	{r3, pc}
   d43d4:	00030230 	.word	0x00030230

000d43d8 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d43d8:	b508      	push	{r3, lr}
   d43da:	4b02      	ldr	r3, [pc, #8]	; (d43e4 <HAL_SPI_Is_Enabled+0xc>)
   d43dc:	681b      	ldr	r3, [r3, #0]
   d43de:	6a1b      	ldr	r3, [r3, #32]
   d43e0:	9301      	str	r3, [sp, #4]
   d43e2:	bd08      	pop	{r3, pc}
   d43e4:	00030230 	.word	0x00030230

000d43e8 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d43e8:	b508      	push	{r3, lr}
   d43ea:	4b02      	ldr	r3, [pc, #8]	; (d43f4 <HAL_USART_Init+0xc>)
   d43ec:	681b      	ldr	r3, [r3, #0]
   d43ee:	681b      	ldr	r3, [r3, #0]
   d43f0:	9301      	str	r3, [sp, #4]
   d43f2:	bd08      	pop	{r3, pc}
   d43f4:	0003023c 	.word	0x0003023c

000d43f8 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d43f8:	b508      	push	{r3, lr}
   d43fa:	4b02      	ldr	r3, [pc, #8]	; (d4404 <HAL_USART_Write_Data+0xc>)
   d43fc:	681b      	ldr	r3, [r3, #0]
   d43fe:	68db      	ldr	r3, [r3, #12]
   d4400:	9301      	str	r3, [sp, #4]
   d4402:	bd08      	pop	{r3, pc}
   d4404:	0003023c 	.word	0x0003023c

000d4408 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4408:	b508      	push	{r3, lr}
   d440a:	4b02      	ldr	r3, [pc, #8]	; (d4414 <HAL_USART_Available_Data+0xc>)
   d440c:	681b      	ldr	r3, [r3, #0]
   d440e:	691b      	ldr	r3, [r3, #16]
   d4410:	9301      	str	r3, [sp, #4]
   d4412:	bd08      	pop	{r3, pc}
   d4414:	0003023c 	.word	0x0003023c

000d4418 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4418:	b508      	push	{r3, lr}
   d441a:	4b02      	ldr	r3, [pc, #8]	; (d4424 <HAL_USART_Read_Data+0xc>)
   d441c:	681b      	ldr	r3, [r3, #0]
   d441e:	695b      	ldr	r3, [r3, #20]
   d4420:	9301      	str	r3, [sp, #4]
   d4422:	bd08      	pop	{r3, pc}
   d4424:	0003023c 	.word	0x0003023c

000d4428 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4428:	b508      	push	{r3, lr}
   d442a:	4b02      	ldr	r3, [pc, #8]	; (d4434 <HAL_USART_Peek_Data+0xc>)
   d442c:	681b      	ldr	r3, [r3, #0]
   d442e:	699b      	ldr	r3, [r3, #24]
   d4430:	9301      	str	r3, [sp, #4]
   d4432:	bd08      	pop	{r3, pc}
   d4434:	0003023c 	.word	0x0003023c

000d4438 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4438:	b508      	push	{r3, lr}
   d443a:	4b02      	ldr	r3, [pc, #8]	; (d4444 <HAL_USART_Flush_Data+0xc>)
   d443c:	681b      	ldr	r3, [r3, #0]
   d443e:	69db      	ldr	r3, [r3, #28]
   d4440:	9301      	str	r3, [sp, #4]
   d4442:	bd08      	pop	{r3, pc}
   d4444:	0003023c 	.word	0x0003023c

000d4448 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4448:	b508      	push	{r3, lr}
   d444a:	4b02      	ldr	r3, [pc, #8]	; (d4454 <HAL_USART_Is_Enabled+0xc>)
   d444c:	681b      	ldr	r3, [r3, #0]
   d444e:	6a1b      	ldr	r3, [r3, #32]
   d4450:	9301      	str	r3, [sp, #4]
   d4452:	bd08      	pop	{r3, pc}
   d4454:	0003023c 	.word	0x0003023c

000d4458 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4458:	b508      	push	{r3, lr}
   d445a:	4b02      	ldr	r3, [pc, #8]	; (d4464 <HAL_USART_Available_Data_For_Write+0xc>)
   d445c:	681b      	ldr	r3, [r3, #0]
   d445e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4460:	9301      	str	r3, [sp, #4]
   d4462:	bd08      	pop	{r3, pc}
   d4464:	0003023c 	.word	0x0003023c

000d4468 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4468:	b508      	push	{r3, lr}
   d446a:	4b02      	ldr	r3, [pc, #8]	; (d4474 <HAL_USB_USART_Init+0xc>)
   d446c:	681b      	ldr	r3, [r3, #0]
   d446e:	681b      	ldr	r3, [r3, #0]
   d4470:	9301      	str	r3, [sp, #4]
   d4472:	bd08      	pop	{r3, pc}
   d4474:	0003024c 	.word	0x0003024c

000d4478 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4478:	b508      	push	{r3, lr}
   d447a:	4b02      	ldr	r3, [pc, #8]	; (d4484 <HAL_USB_USART_Begin+0xc>)
   d447c:	681b      	ldr	r3, [r3, #0]
   d447e:	685b      	ldr	r3, [r3, #4]
   d4480:	9301      	str	r3, [sp, #4]
   d4482:	bd08      	pop	{r3, pc}
   d4484:	0003024c 	.word	0x0003024c

000d4488 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4488:	b508      	push	{r3, lr}
   d448a:	4b02      	ldr	r3, [pc, #8]	; (d4494 <HAL_USB_USART_Available_Data+0xc>)
   d448c:	681b      	ldr	r3, [r3, #0]
   d448e:	691b      	ldr	r3, [r3, #16]
   d4490:	9301      	str	r3, [sp, #4]
   d4492:	bd08      	pop	{r3, pc}
   d4494:	0003024c 	.word	0x0003024c

000d4498 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4498:	b508      	push	{r3, lr}
   d449a:	4b02      	ldr	r3, [pc, #8]	; (d44a4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d449c:	681b      	ldr	r3, [r3, #0]
   d449e:	695b      	ldr	r3, [r3, #20]
   d44a0:	9301      	str	r3, [sp, #4]
   d44a2:	bd08      	pop	{r3, pc}
   d44a4:	0003024c 	.word	0x0003024c

000d44a8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d44a8:	b508      	push	{r3, lr}
   d44aa:	4b02      	ldr	r3, [pc, #8]	; (d44b4 <HAL_USB_USART_Receive_Data+0xc>)
   d44ac:	681b      	ldr	r3, [r3, #0]
   d44ae:	699b      	ldr	r3, [r3, #24]
   d44b0:	9301      	str	r3, [sp, #4]
   d44b2:	bd08      	pop	{r3, pc}
   d44b4:	0003024c 	.word	0x0003024c

000d44b8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d44b8:	b508      	push	{r3, lr}
   d44ba:	4b02      	ldr	r3, [pc, #8]	; (d44c4 <HAL_USB_USART_Send_Data+0xc>)
   d44bc:	681b      	ldr	r3, [r3, #0]
   d44be:	69db      	ldr	r3, [r3, #28]
   d44c0:	9301      	str	r3, [sp, #4]
   d44c2:	bd08      	pop	{r3, pc}
   d44c4:	0003024c 	.word	0x0003024c

000d44c8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d44c8:	b508      	push	{r3, lr}
   d44ca:	4b02      	ldr	r3, [pc, #8]	; (d44d4 <HAL_USB_USART_Flush_Data+0xc>)
   d44cc:	681b      	ldr	r3, [r3, #0]
   d44ce:	6a1b      	ldr	r3, [r3, #32]
   d44d0:	9301      	str	r3, [sp, #4]
   d44d2:	bd08      	pop	{r3, pc}
   d44d4:	0003024c 	.word	0x0003024c

000d44d8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d44d8:	b508      	push	{r3, lr}
   d44da:	4b02      	ldr	r3, [pc, #8]	; (d44e4 <set_system_mode+0xc>)
   d44dc:	681b      	ldr	r3, [r3, #0]
   d44de:	685b      	ldr	r3, [r3, #4]
   d44e0:	9301      	str	r3, [sp, #4]
   d44e2:	bd08      	pop	{r3, pc}
   d44e4:	00030220 	.word	0x00030220

000d44e8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d44e8:	b508      	push	{r3, lr}
   d44ea:	4b03      	ldr	r3, [pc, #12]	; (d44f8 <system_ctrl_set_app_request_handler+0x10>)
   d44ec:	681b      	ldr	r3, [r3, #0]
   d44ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d44f2:	9301      	str	r3, [sp, #4]
   d44f4:	bd08      	pop	{r3, pc}
   d44f6:	0000      	.short	0x0000
   d44f8:	00030220 	.word	0x00030220

000d44fc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d44fc:	b508      	push	{r3, lr}
   d44fe:	4b03      	ldr	r3, [pc, #12]	; (d450c <system_ctrl_set_result+0x10>)
   d4500:	681b      	ldr	r3, [r3, #0]
   d4502:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4506:	9301      	str	r3, [sp, #4]
   d4508:	bd08      	pop	{r3, pc}
   d450a:	0000      	.short	0x0000
   d450c:	00030220 	.word	0x00030220

000d4510 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4510:	b508      	push	{r3, lr}
   d4512:	4b02      	ldr	r3, [pc, #8]	; (d451c <spark_set_random_seed_from_cloud_handler+0xc>)
   d4514:	681b      	ldr	r3, [r3, #0]
   d4516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4518:	9301      	str	r3, [sp, #4]
   d451a:	bd08      	pop	{r3, pc}
   d451c:	00030244 	.word	0x00030244

000d4520 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4520:	b508      	push	{r3, lr}
   d4522:	4b02      	ldr	r3, [pc, #8]	; (d452c <network_connect+0xc>)
   d4524:	681b      	ldr	r3, [r3, #0]
   d4526:	685b      	ldr	r3, [r3, #4]
   d4528:	9301      	str	r3, [sp, #4]
   d452a:	bd08      	pop	{r3, pc}
   d452c:	00030240 	.word	0x00030240

000d4530 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4530:	b508      	push	{r3, lr}
   d4532:	4b02      	ldr	r3, [pc, #8]	; (d453c <network_connecting+0xc>)
   d4534:	681b      	ldr	r3, [r3, #0]
   d4536:	689b      	ldr	r3, [r3, #8]
   d4538:	9301      	str	r3, [sp, #4]
   d453a:	bd08      	pop	{r3, pc}
   d453c:	00030240 	.word	0x00030240

000d4540 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4540:	b508      	push	{r3, lr}
   d4542:	4b02      	ldr	r3, [pc, #8]	; (d454c <network_disconnect+0xc>)
   d4544:	681b      	ldr	r3, [r3, #0]
   d4546:	68db      	ldr	r3, [r3, #12]
   d4548:	9301      	str	r3, [sp, #4]
   d454a:	bd08      	pop	{r3, pc}
   d454c:	00030240 	.word	0x00030240

000d4550 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4550:	b508      	push	{r3, lr}
   d4552:	4b02      	ldr	r3, [pc, #8]	; (d455c <network_ready+0xc>)
   d4554:	681b      	ldr	r3, [r3, #0]
   d4556:	691b      	ldr	r3, [r3, #16]
   d4558:	9301      	str	r3, [sp, #4]
   d455a:	bd08      	pop	{r3, pc}
   d455c:	00030240 	.word	0x00030240

000d4560 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4560:	b508      	push	{r3, lr}
   d4562:	4b02      	ldr	r3, [pc, #8]	; (d456c <network_on+0xc>)
   d4564:	681b      	ldr	r3, [r3, #0]
   d4566:	695b      	ldr	r3, [r3, #20]
   d4568:	9301      	str	r3, [sp, #4]
   d456a:	bd08      	pop	{r3, pc}
   d456c:	00030240 	.word	0x00030240

000d4570 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4570:	b508      	push	{r3, lr}
   d4572:	4b02      	ldr	r3, [pc, #8]	; (d457c <network_off+0xc>)
   d4574:	681b      	ldr	r3, [r3, #0]
   d4576:	699b      	ldr	r3, [r3, #24]
   d4578:	9301      	str	r3, [sp, #4]
   d457a:	bd08      	pop	{r3, pc}
   d457c:	00030240 	.word	0x00030240

000d4580 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4580:	b508      	push	{r3, lr}
   d4582:	4b02      	ldr	r3, [pc, #8]	; (d458c <network_listen+0xc>)
   d4584:	681b      	ldr	r3, [r3, #0]
   d4586:	69db      	ldr	r3, [r3, #28]
   d4588:	9301      	str	r3, [sp, #4]
   d458a:	bd08      	pop	{r3, pc}
   d458c:	00030240 	.word	0x00030240

000d4590 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4590:	b508      	push	{r3, lr}
   d4592:	4b02      	ldr	r3, [pc, #8]	; (d459c <network_listening+0xc>)
   d4594:	681b      	ldr	r3, [r3, #0]
   d4596:	6a1b      	ldr	r3, [r3, #32]
   d4598:	9301      	str	r3, [sp, #4]
   d459a:	bd08      	pop	{r3, pc}
   d459c:	00030240 	.word	0x00030240

000d45a0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d45a0:	b508      	push	{r3, lr}
   d45a2:	4b02      	ldr	r3, [pc, #8]	; (d45ac <network_set_listen_timeout+0xc>)
   d45a4:	681b      	ldr	r3, [r3, #0]
   d45a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d45a8:	9301      	str	r3, [sp, #4]
   d45aa:	bd08      	pop	{r3, pc}
   d45ac:	00030240 	.word	0x00030240

000d45b0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d45b0:	b508      	push	{r3, lr}
   d45b2:	4b02      	ldr	r3, [pc, #8]	; (d45bc <network_get_listen_timeout+0xc>)
   d45b4:	681b      	ldr	r3, [r3, #0]
   d45b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d45b8:	9301      	str	r3, [sp, #4]
   d45ba:	bd08      	pop	{r3, pc}
   d45bc:	00030240 	.word	0x00030240

000d45c0 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d45c0:	b508      	push	{r3, lr}
   d45c2:	4b02      	ldr	r3, [pc, #8]	; (d45cc <malloc+0xc>)
   d45c4:	681b      	ldr	r3, [r3, #0]
   d45c6:	681b      	ldr	r3, [r3, #0]
   d45c8:	9301      	str	r3, [sp, #4]
   d45ca:	bd08      	pop	{r3, pc}
   d45cc:	0003021c 	.word	0x0003021c

000d45d0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d45d0:	b508      	push	{r3, lr}
   d45d2:	4b02      	ldr	r3, [pc, #8]	; (d45dc <free+0xc>)
   d45d4:	681b      	ldr	r3, [r3, #0]
   d45d6:	685b      	ldr	r3, [r3, #4]
   d45d8:	9301      	str	r3, [sp, #4]
   d45da:	bd08      	pop	{r3, pc}
   d45dc:	0003021c 	.word	0x0003021c

000d45e0 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d45e0:	b508      	push	{r3, lr}
   d45e2:	4b02      	ldr	r3, [pc, #8]	; (d45ec <vsnprintf+0xc>)
   d45e4:	681b      	ldr	r3, [r3, #0]
   d45e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d45e8:	9301      	str	r3, [sp, #4]
   d45ea:	bd08      	pop	{r3, pc}
   d45ec:	0003021c 	.word	0x0003021c

000d45f0 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d45f0:	b508      	push	{r3, lr}
   d45f2:	4b02      	ldr	r3, [pc, #8]	; (d45fc <__errno+0xc>)
   d45f4:	681b      	ldr	r3, [r3, #0]
   d45f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d45f8:	9301      	str	r3, [sp, #4]
   d45fa:	bd08      	pop	{r3, pc}
   d45fc:	0003021c 	.word	0x0003021c

000d4600 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4600:	b510      	push	{r4, lr}
   d4602:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4604:	6800      	ldr	r0, [r0, #0]
   d4606:	b108      	cbz	r0, d460c <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4608:	f7ff fe5e 	bl	d42c8 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d460c:	4620      	mov	r0, r4
   d460e:	bd10      	pop	{r4, pc}

000d4610 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4610:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4612:	4c06      	ldr	r4, [pc, #24]	; (d462c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4614:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d4616:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4618:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d461a:	f7ff fe4d 	bl	d42b8 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d461e:	4620      	mov	r0, r4
   d4620:	4a03      	ldr	r2, [pc, #12]	; (d4630 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4622:	4904      	ldr	r1, [pc, #16]	; (d4634 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4628:	f000 bdea 	b.w	d5200 <__aeabi_atexit>
   d462c:	2003e4a4 	.word	0x2003e4a4
   d4630:	2003e488 	.word	0x2003e488
   d4634:	000d4601 	.word	0x000d4601

000d4638 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d4638:	2200      	movs	r2, #0
   d463a:	4611      	mov	r1, r2
   d463c:	6840      	ldr	r0, [r0, #4]
   d463e:	f7ff bf87 	b.w	d4550 <network_ready>

000d4642 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4642:	2200      	movs	r2, #0
   d4644:	4611      	mov	r1, r2
   d4646:	6840      	ldr	r0, [r0, #4]
   d4648:	f7ff bfa2 	b.w	d4590 <network_listening>

000d464c <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d464c:	2200      	movs	r2, #0
   d464e:	4611      	mov	r1, r2
   d4650:	6840      	ldr	r0, [r0, #4]
   d4652:	f7ff bfad 	b.w	d45b0 <network_get_listen_timeout>

000d4656 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4656:	2200      	movs	r2, #0
   d4658:	6840      	ldr	r0, [r0, #4]
   d465a:	f7ff bfa1 	b.w	d45a0 <network_set_listen_timeout>

000d465e <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d465e:	2200      	movs	r2, #0
   d4660:	f081 0101 	eor.w	r1, r1, #1
   d4664:	6840      	ldr	r0, [r0, #4]
   d4666:	f7ff bf8b 	b.w	d4580 <network_listen>

000d466a <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d466a:	2300      	movs	r3, #0
   d466c:	461a      	mov	r2, r3
   d466e:	4619      	mov	r1, r3
   d4670:	6840      	ldr	r0, [r0, #4]
   d4672:	f7ff bf7d 	b.w	d4570 <network_off>

000d4676 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d4676:	2300      	movs	r3, #0
   d4678:	461a      	mov	r2, r3
   d467a:	4619      	mov	r1, r3
   d467c:	6840      	ldr	r0, [r0, #4]
   d467e:	f7ff bf6f 	b.w	d4560 <network_on>

000d4682 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4682:	2200      	movs	r2, #0
   d4684:	4611      	mov	r1, r2
   d4686:	6840      	ldr	r0, [r0, #4]
   d4688:	f7ff bf52 	b.w	d4530 <network_connecting>

000d468c <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d468c:	2200      	movs	r2, #0
   d468e:	2102      	movs	r1, #2
   d4690:	6840      	ldr	r0, [r0, #4]
   d4692:	f7ff bf55 	b.w	d4540 <network_disconnect>

000d4696 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4696:	2300      	movs	r3, #0
   d4698:	461a      	mov	r2, r3
   d469a:	6840      	ldr	r0, [r0, #4]
   d469c:	f7ff bf40 	b.w	d4520 <network_connect>

000d46a0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d46a0:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d46a2:	4c08      	ldr	r4, [pc, #32]	; (d46c4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d46a4:	2528      	movs	r5, #40	; 0x28
   d46a6:	462a      	mov	r2, r5
   d46a8:	2100      	movs	r1, #0
   d46aa:	4620      	mov	r0, r4
   d46ac:	f002 fd1d 	bl	d70ea <memset>
        cid = -1;
   d46b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d46b4:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d46b6:	4b04      	ldr	r3, [pc, #16]	; (d46c8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d46b8:	8025      	strh	r5, [r4, #0]
   d46ba:	2204      	movs	r2, #4
   d46bc:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d46be:	4a03      	ldr	r2, [pc, #12]	; (d46cc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d46c0:	601a      	str	r2, [r3, #0]
   d46c2:	bd38      	pop	{r3, r4, r5, pc}
   d46c4:	2003e4b0 	.word	0x2003e4b0
   d46c8:	2003e4a8 	.word	0x2003e4a8
   d46cc:	000d71a4 	.word	0x000d71a4

000d46d0 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d46d0:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d46d2:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d46d4:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d46d6:	b113      	cbz	r3, d46de <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d46d8:	2203      	movs	r2, #3
   d46da:	4601      	mov	r1, r0
   d46dc:	4798      	blx	r3
    }
   d46de:	4620      	mov	r0, r4
   d46e0:	bd10      	pop	{r4, pc}

000d46e2 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d46e2:	2200      	movs	r2, #0
   d46e4:	4611      	mov	r1, r2
   d46e6:	6840      	ldr	r0, [r0, #4]
   d46e8:	f7ff bf52 	b.w	d4590 <network_listening>

000d46ec <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d46ec:	2200      	movs	r2, #0
   d46ee:	4611      	mov	r1, r2
   d46f0:	6840      	ldr	r0, [r0, #4]
   d46f2:	f7ff bf5d 	b.w	d45b0 <network_get_listen_timeout>

000d46f6 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d46f6:	2200      	movs	r2, #0
   d46f8:	6840      	ldr	r0, [r0, #4]
   d46fa:	f7ff bf51 	b.w	d45a0 <network_set_listen_timeout>

000d46fe <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d46fe:	2200      	movs	r2, #0
   d4700:	f081 0101 	eor.w	r1, r1, #1
   d4704:	6840      	ldr	r0, [r0, #4]
   d4706:	f7ff bf3b 	b.w	d4580 <network_listen>

000d470a <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d470a:	2300      	movs	r3, #0
   d470c:	461a      	mov	r2, r3
   d470e:	4619      	mov	r1, r3
   d4710:	6840      	ldr	r0, [r0, #4]
   d4712:	f7ff bf2d 	b.w	d4570 <network_off>

000d4716 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4716:	2300      	movs	r3, #0
   d4718:	461a      	mov	r2, r3
   d471a:	4619      	mov	r1, r3
   d471c:	6840      	ldr	r0, [r0, #4]
   d471e:	f7ff bf1f 	b.w	d4560 <network_on>

000d4722 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4722:	2200      	movs	r2, #0
   d4724:	4611      	mov	r1, r2
   d4726:	6840      	ldr	r0, [r0, #4]
   d4728:	f7ff bf12 	b.w	d4550 <network_ready>

000d472c <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d472c:	2200      	movs	r2, #0
   d472e:	4611      	mov	r1, r2
   d4730:	6840      	ldr	r0, [r0, #4]
   d4732:	f7ff befd 	b.w	d4530 <network_connecting>

000d4736 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4736:	2200      	movs	r2, #0
   d4738:	2102      	movs	r1, #2
   d473a:	6840      	ldr	r0, [r0, #4]
   d473c:	f7ff bf00 	b.w	d4540 <network_disconnect>

000d4740 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4740:	2300      	movs	r3, #0
   d4742:	461a      	mov	r2, r3
   d4744:	6840      	ldr	r0, [r0, #4]
   d4746:	f7ff beeb 	b.w	d4520 <network_connect>
	...

000d474c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d474c:	4b02      	ldr	r3, [pc, #8]	; (d4758 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d474e:	2203      	movs	r2, #3
   d4750:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4752:	4a02      	ldr	r2, [pc, #8]	; (d475c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4754:	601a      	str	r2, [r3, #0]
   d4756:	4770      	bx	lr
   d4758:	2003e4d8 	.word	0x2003e4d8
   d475c:	000d71d8 	.word	0x000d71d8

000d4760 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d4760:	4770      	bx	lr

000d4762 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4762:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4764:	4606      	mov	r6, r0
   d4766:	4615      	mov	r5, r2
   d4768:	460c      	mov	r4, r1
   d476a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d476c:	42bc      	cmp	r4, r7
   d476e:	d006      	beq.n	d477e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4770:	6833      	ldr	r3, [r6, #0]
   d4772:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4776:	689b      	ldr	r3, [r3, #8]
   d4778:	4630      	mov	r0, r6
   d477a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d477c:	e7f6      	b.n	d476c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d477e:	4628      	mov	r0, r5
   d4780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4782 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d4782:	2200      	movs	r2, #0
   d4784:	7c00      	ldrb	r0, [r0, #16]
   d4786:	f7ff bdcf 	b.w	d4328 <HAL_I2C_Write_Data>

000d478a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d478a:	2100      	movs	r1, #0
   d478c:	7c00      	ldrb	r0, [r0, #16]
   d478e:	f7ff bdd3 	b.w	d4338 <HAL_I2C_Available_Data>

000d4792 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d4792:	2100      	movs	r1, #0
   d4794:	7c00      	ldrb	r0, [r0, #16]
   d4796:	f7ff bdd7 	b.w	d4348 <HAL_I2C_Read_Data>

000d479a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d479a:	2100      	movs	r1, #0
   d479c:	7c00      	ldrb	r0, [r0, #16]
   d479e:	f7ff bddb 	b.w	d4358 <HAL_I2C_Peek_Data>

000d47a2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d47a2:	2100      	movs	r1, #0
   d47a4:	7c00      	ldrb	r0, [r0, #16]
   d47a6:	f7ff bddf 	b.w	d4368 <HAL_I2C_Flush_Data>

000d47aa <_ZN7TwoWireD0Ev>:
   d47aa:	b510      	push	{r4, lr}
   d47ac:	2114      	movs	r1, #20
   d47ae:	4604      	mov	r4, r0
   d47b0:	f000 fd2b 	bl	d520a <_ZdlPvj>
   d47b4:	4620      	mov	r0, r4
   d47b6:	bd10      	pop	{r4, pc}

000d47b8 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d47b8:	b510      	push	{r4, lr}
   d47ba:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d47bc:	2300      	movs	r3, #0
   d47be:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d47c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d47c4:	60a3      	str	r3, [r4, #8]
   d47c6:	4b04      	ldr	r3, [pc, #16]	; (d47d8 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d47c8:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d47ca:	4608      	mov	r0, r1
   d47cc:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d47ce:	4611      	mov	r1, r2
   d47d0:	f7ff fdda 	bl	d4388 <HAL_I2C_Init>
}
   d47d4:	4620      	mov	r0, r4
   d47d6:	bd10      	pop	{r4, pc}
   d47d8:	000d720c 	.word	0x000d720c

000d47dc <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d47dc:	2100      	movs	r1, #0
   d47de:	7c00      	ldrb	r0, [r0, #16]
   d47e0:	f7ff bdca 	b.w	d4378 <HAL_I2C_Is_Enabled>

000d47e4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d47e4:	4770      	bx	lr

000d47e6 <_ZN9IPAddressD0Ev>:
   d47e6:	b510      	push	{r4, lr}
   d47e8:	2118      	movs	r1, #24
   d47ea:	4604      	mov	r4, r0
   d47ec:	f000 fd0d 	bl	d520a <_ZdlPvj>
   d47f0:	4620      	mov	r0, r4
   d47f2:	bd10      	pop	{r4, pc}

000d47f4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d47f4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d47f6:	7d03      	ldrb	r3, [r0, #20]
   d47f8:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d47fa:	b08d      	sub	sp, #52	; 0x34
   d47fc:	460e      	mov	r6, r1
   d47fe:	f100 0704 	add.w	r7, r0, #4
   d4802:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4806:	d002      	beq.n	d480e <_ZNK9IPAddress7printToER5Print+0x1a>
   d4808:	f100 0508 	add.w	r5, r0, #8
   d480c:	e018      	b.n	d4840 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d480e:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4810:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4812:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4816:	232f      	movs	r3, #47	; 0x2f
   d4818:	462a      	mov	r2, r5
   d481a:	200a      	movs	r0, #10
   d481c:	f7ff fdbc 	bl	d4398 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4820:	4628      	mov	r0, r5
   d4822:	f002 fc93 	bl	d714c <strlen>
   d4826:	6833      	ldr	r3, [r6, #0]
   d4828:	4602      	mov	r2, r0
   d482a:	68db      	ldr	r3, [r3, #12]
   d482c:	4629      	mov	r1, r5
   d482e:	4630      	mov	r0, r6
   d4830:	4798      	blx	r3
   d4832:	e00f      	b.n	d4854 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d4834:	b124      	cbz	r4, d4840 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d4836:	212e      	movs	r1, #46	; 0x2e
   d4838:	4630      	mov	r0, r6
   d483a:	f000 f9d5 	bl	d4be8 <_ZN5Print5printEc>
   d483e:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4840:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4844:	220a      	movs	r2, #10
   d4846:	4630      	mov	r0, r6
   d4848:	f000 f9dd 	bl	d4c06 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d484c:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d484e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4850:	d1f0      	bne.n	d4834 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4852:	4620      	mov	r0, r4
    }
    return n;
}
   d4854:	b00d      	add	sp, #52	; 0x34
   d4856:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4858 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d4858:	b510      	push	{r4, lr}
   d485a:	4b05      	ldr	r3, [pc, #20]	; (d4870 <_ZN9IPAddressC1Ev+0x18>)
   d485c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d485e:	2211      	movs	r2, #17
   d4860:	f840 3b04 	str.w	r3, [r0], #4
   d4864:	2100      	movs	r1, #0
   d4866:	f002 fc40 	bl	d70ea <memset>
{
    clear();
}
   d486a:	4620      	mov	r0, r4
   d486c:	bd10      	pop	{r4, pc}
   d486e:	bf00      	nop
   d4870:	000d7234 	.word	0x000d7234

000d4874 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d4874:	4603      	mov	r3, r0
   d4876:	4a07      	ldr	r2, [pc, #28]	; (d4894 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4878:	b510      	push	{r4, lr}
   d487a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d487e:	f101 0210 	add.w	r2, r1, #16
   d4882:	f851 4b04 	ldr.w	r4, [r1], #4
   d4886:	f843 4b04 	str.w	r4, [r3], #4
   d488a:	4291      	cmp	r1, r2
   d488c:	d1f9      	bne.n	d4882 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d488e:	780a      	ldrb	r2, [r1, #0]
   d4890:	701a      	strb	r2, [r3, #0]
}
   d4892:	bd10      	pop	{r4, pc}
   d4894:	000d7234 	.word	0x000d7234

000d4898 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d4898:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d489a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d489e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d48a2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d48a6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d48aa:	2304      	movs	r3, #4
   d48ac:	6041      	str	r1, [r0, #4]
   d48ae:	7503      	strb	r3, [r0, #20]
   d48b0:	bd10      	pop	{r4, pc}

000d48b2 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d48b2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d48b4:	780d      	ldrb	r5, [r1, #0]
   d48b6:	788b      	ldrb	r3, [r1, #2]
   d48b8:	784a      	ldrb	r2, [r1, #1]
   d48ba:	78c9      	ldrb	r1, [r1, #3]
   d48bc:	9100      	str	r1, [sp, #0]
   d48be:	4629      	mov	r1, r5
   d48c0:	f7ff ffea 	bl	d4898 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d48c4:	b003      	add	sp, #12
   d48c6:	bd30      	pop	{r4, r5, pc}

000d48c8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d48c8:	4b01      	ldr	r3, [pc, #4]	; (d48d0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d48ca:	4a02      	ldr	r2, [pc, #8]	; (d48d4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d48cc:	601a      	str	r2, [r3, #0]
   d48ce:	4770      	bx	lr
   d48d0:	2003e4e0 	.word	0x2003e4e0
   d48d4:	000d72b3 	.word	0x000d72b3

000d48d8 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d48d8:	2200      	movs	r2, #0
   d48da:	4611      	mov	r1, r2
   d48dc:	6840      	ldr	r0, [r0, #4]
   d48de:	f7ff be57 	b.w	d4590 <network_listening>

000d48e2 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d48e2:	2200      	movs	r2, #0
   d48e4:	4611      	mov	r1, r2
   d48e6:	6840      	ldr	r0, [r0, #4]
   d48e8:	f7ff be62 	b.w	d45b0 <network_get_listen_timeout>

000d48ec <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d48ec:	2200      	movs	r2, #0
   d48ee:	6840      	ldr	r0, [r0, #4]
   d48f0:	f7ff be56 	b.w	d45a0 <network_set_listen_timeout>

000d48f4 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d48f4:	2200      	movs	r2, #0
   d48f6:	f081 0101 	eor.w	r1, r1, #1
   d48fa:	6840      	ldr	r0, [r0, #4]
   d48fc:	f7ff be40 	b.w	d4580 <network_listen>

000d4900 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d4900:	2300      	movs	r3, #0
   d4902:	461a      	mov	r2, r3
   d4904:	2101      	movs	r1, #1
   d4906:	6840      	ldr	r0, [r0, #4]
   d4908:	f7ff be32 	b.w	d4570 <network_off>

000d490c <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d490c:	2300      	movs	r3, #0
   d490e:	461a      	mov	r2, r3
   d4910:	4619      	mov	r1, r3
   d4912:	6840      	ldr	r0, [r0, #4]
   d4914:	f7ff be24 	b.w	d4560 <network_on>

000d4918 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4918:	2200      	movs	r2, #0
   d491a:	4611      	mov	r1, r2
   d491c:	6840      	ldr	r0, [r0, #4]
   d491e:	f7ff be17 	b.w	d4550 <network_ready>

000d4922 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4922:	2200      	movs	r2, #0
   d4924:	4611      	mov	r1, r2
   d4926:	6840      	ldr	r0, [r0, #4]
   d4928:	f7ff be02 	b.w	d4530 <network_connecting>

000d492c <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d492c:	2200      	movs	r2, #0
   d492e:	2102      	movs	r1, #2
   d4930:	6840      	ldr	r0, [r0, #4]
   d4932:	f7ff be05 	b.w	d4540 <network_disconnect>

000d4936 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4936:	2300      	movs	r3, #0
   d4938:	461a      	mov	r2, r3
   d493a:	6840      	ldr	r0, [r0, #4]
   d493c:	f7ff bdf0 	b.w	d4520 <network_connect>

000d4940 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d4940:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4942:	4605      	mov	r5, r0
   d4944:	b188      	cbz	r0, d496a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4946:	6804      	ldr	r4, [r0, #0]
   d4948:	b14c      	cbz	r4, d495e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d494a:	68a3      	ldr	r3, [r4, #8]
   d494c:	b11b      	cbz	r3, d4956 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d494e:	2203      	movs	r2, #3
   d4950:	4621      	mov	r1, r4
   d4952:	4620      	mov	r0, r4
   d4954:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4956:	2110      	movs	r1, #16
   d4958:	4620      	mov	r0, r4
   d495a:	f000 fc56 	bl	d520a <_ZdlPvj>
   d495e:	4628      	mov	r0, r5
   d4960:	2114      	movs	r1, #20
      }
   d4962:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4966:	f000 bc50 	b.w	d520a <_ZdlPvj>
   d496a:	bd38      	pop	{r3, r4, r5, pc}

000d496c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d496c:	b110      	cbz	r0, d4974 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d496e:	6803      	ldr	r3, [r0, #0]
   d4970:	685b      	ldr	r3, [r3, #4]
   d4972:	4718      	bx	r3
   d4974:	4770      	bx	lr

000d4976 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d4976:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4978:	6803      	ldr	r3, [r0, #0]
   d497a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d497c:	b1bb      	cbz	r3, d49ae <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d497e:	6858      	ldr	r0, [r3, #4]
   d4980:	f7ff fc82 	bl	d4288 <os_thread_is_current>
   d4984:	b978      	cbnz	r0, d49a6 <_ZN6ThreadD1Ev+0x30>
   d4986:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d4988:	7c5a      	ldrb	r2, [r3, #17]
   d498a:	b912      	cbnz	r2, d4992 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d498c:	6858      	ldr	r0, [r3, #4]
   d498e:	f7ff fc83 	bl	d4298 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d4992:	6823      	ldr	r3, [r4, #0]
   d4994:	6858      	ldr	r0, [r3, #4]
   d4996:	f7ff fc87 	bl	d42a8 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d499a:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d499c:	2300      	movs	r3, #0
   d499e:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d49a0:	b128      	cbz	r0, d49ae <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d49a2:	f7ff ffcd 	bl	d4940 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d49a6:	6820      	ldr	r0, [r4, #0]
   d49a8:	b108      	cbz	r0, d49ae <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d49aa:	f7ff ffc9 	bl	d4940 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d49ae:	4620      	mov	r0, r4
   d49b0:	bd10      	pop	{r4, pc}

000d49b2 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d49b2:	b538      	push	{r3, r4, r5, lr}
   d49b4:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d49b6:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d49ba:	b108      	cbz	r0, d49c0 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d49bc:	f7ff fb71 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d49c0:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d49c4:	b108      	cbz	r0, d49ca <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d49c6:	f7ff fc7f 	bl	d42c8 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d49ca:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d49ce:	b135      	cbz	r5, d49de <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d49d0:	4628      	mov	r0, r5
   d49d2:	f7ff ffd0 	bl	d4976 <_ZN6ThreadD1Ev>
   d49d6:	2104      	movs	r1, #4
   d49d8:	4628      	mov	r0, r5
   d49da:	f000 fc16 	bl	d520a <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d49de:	6820      	ldr	r0, [r4, #0]
   d49e0:	b108      	cbz	r0, d49e6 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d49e2:	f7ff ffc3 	bl	d496c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d49e6:	4620      	mov	r0, r4
   d49e8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d49ec <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d49ec:	b510      	push	{r4, lr}
   d49ee:	4b04      	ldr	r3, [pc, #16]	; (d4a00 <_ZN5spark9MeshClassD1Ev+0x14>)
   d49f0:	4604      	mov	r4, r0
   d49f2:	f840 3b08 	str.w	r3, [r0], #8
   d49f6:	f7ff ffdc 	bl	d49b2 <_ZN5spark11MeshPublishD1Ev>
   d49fa:	4620      	mov	r0, r4
   d49fc:	bd10      	pop	{r4, pc}
   d49fe:	bf00      	nop
   d4a00:	000d7328 	.word	0x000d7328

000d4a04 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d4a04:	b538      	push	{r3, r4, r5, lr}
   d4a06:	4c0e      	ldr	r4, [pc, #56]	; (d4a40 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d4a08:	4b0e      	ldr	r3, [pc, #56]	; (d4a44 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d4a0a:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d4a0c:	2500      	movs	r5, #0
   d4a0e:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d4a10:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d4a14:	6063      	str	r3, [r4, #4]
   d4a16:	60a5      	str	r5, [r4, #8]
   d4a18:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4a1c:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d4a20:	f7ff fc4a 	bl	d42b8 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d4a24:	4b08      	ldr	r3, [pc, #32]	; (d4a48 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d4a26:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4a2a:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d4a2e:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d4a30:	4620      	mov	r0, r4
   d4a32:	4a06      	ldr	r2, [pc, #24]	; (d4a4c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d4a34:	4906      	ldr	r1, [pc, #24]	; (d4a50 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d4a36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d4a3a:	f000 bbe1 	b.w	d5200 <__aeabi_atexit>
   d4a3e:	bf00      	nop
   d4a40:	2003e4e4 	.word	0x2003e4e4
   d4a44:	000d735c 	.word	0x000d735c
   d4a48:	000d7328 	.word	0x000d7328
   d4a4c:	2003e488 	.word	0x2003e488
   d4a50:	000d49ed 	.word	0x000d49ed

000d4a54 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d4a54:	2300      	movs	r3, #0
   d4a56:	461a      	mov	r2, r3
   d4a58:	6840      	ldr	r0, [r0, #4]
   d4a5a:	f7ff bd61 	b.w	d4520 <network_connect>

000d4a5e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d4a5e:	2200      	movs	r2, #0
   d4a60:	2102      	movs	r1, #2
   d4a62:	6840      	ldr	r0, [r0, #4]
   d4a64:	f7ff bd6c 	b.w	d4540 <network_disconnect>

000d4a68 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d4a68:	2200      	movs	r2, #0
   d4a6a:	4611      	mov	r1, r2
   d4a6c:	6840      	ldr	r0, [r0, #4]
   d4a6e:	f7ff bd5f 	b.w	d4530 <network_connecting>

000d4a72 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d4a72:	2200      	movs	r2, #0
   d4a74:	4611      	mov	r1, r2
   d4a76:	6840      	ldr	r0, [r0, #4]
   d4a78:	f7ff bd6a 	b.w	d4550 <network_ready>

000d4a7c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d4a7c:	2300      	movs	r3, #0
   d4a7e:	461a      	mov	r2, r3
   d4a80:	4619      	mov	r1, r3
   d4a82:	6840      	ldr	r0, [r0, #4]
   d4a84:	f7ff bd6c 	b.w	d4560 <network_on>

000d4a88 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d4a88:	2300      	movs	r3, #0
   d4a8a:	461a      	mov	r2, r3
   d4a8c:	4619      	mov	r1, r3
   d4a8e:	6840      	ldr	r0, [r0, #4]
   d4a90:	f7ff bd6e 	b.w	d4570 <network_off>

000d4a94 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d4a94:	2200      	movs	r2, #0
   d4a96:	f081 0101 	eor.w	r1, r1, #1
   d4a9a:	6840      	ldr	r0, [r0, #4]
   d4a9c:	f7ff bd70 	b.w	d4580 <network_listen>

000d4aa0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d4aa0:	2200      	movs	r2, #0
   d4aa2:	6840      	ldr	r0, [r0, #4]
   d4aa4:	f7ff bd7c 	b.w	d45a0 <network_set_listen_timeout>

000d4aa8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d4aa8:	2200      	movs	r2, #0
   d4aaa:	4611      	mov	r1, r2
   d4aac:	6840      	ldr	r0, [r0, #4]
   d4aae:	f7ff bd7f 	b.w	d45b0 <network_get_listen_timeout>

000d4ab2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d4ab2:	2200      	movs	r2, #0
   d4ab4:	4611      	mov	r1, r2
   d4ab6:	6840      	ldr	r0, [r0, #4]
   d4ab8:	f7ff bd6a 	b.w	d4590 <network_listening>

000d4abc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d4abc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4ac0:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d4ac2:	b095      	sub	sp, #84	; 0x54
   d4ac4:	4616      	mov	r6, r2
   d4ac6:	460d      	mov	r5, r1
   d4ac8:	4607      	mov	r7, r0
    IPAddress addr;
   d4aca:	f7ff fec5 	bl	d4858 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d4ace:	4621      	mov	r1, r4
   d4ad0:	2220      	movs	r2, #32
   d4ad2:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4ad4:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d4ad6:	f002 fb08 	bl	d70ea <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d4ada:	2340      	movs	r3, #64	; 0x40
   d4adc:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d4ade:	4621      	mov	r1, r4
   d4ae0:	466b      	mov	r3, sp
   d4ae2:	aa0c      	add	r2, sp, #48	; 0x30
   d4ae4:	4630      	mov	r0, r6
   d4ae6:	f7ff fc67 	bl	d43b8 <netdb_getaddrinfo>
    if (!r) {
   d4aea:	4604      	mov	r4, r0
   d4aec:	2800      	cmp	r0, #0
   d4aee:	d144      	bne.n	d4b7a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4af0:	4602      	mov	r2, r0
   d4af2:	2101      	movs	r1, #1
   d4af4:	6868      	ldr	r0, [r5, #4]
   d4af6:	f7ff fd2b 	bl	d4550 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4afa:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4afc:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4afe:	4622      	mov	r2, r4
   d4b00:	6868      	ldr	r0, [r5, #4]
   d4b02:	f7ff fd25 	bl	d4550 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4b06:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4b08:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d4b0a:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4b0c:	2e00      	cmp	r6, #0
   d4b0e:	d034      	beq.n	d4b7a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d4b10:	2900      	cmp	r1, #0
   d4b12:	d132      	bne.n	d4b7a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d4b14:	6873      	ldr	r3, [r6, #4]
   d4b16:	2b02      	cmp	r3, #2
   d4b18:	d002      	beq.n	d4b20 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d4b1a:	2b0a      	cmp	r3, #10
   d4b1c:	d009      	beq.n	d4b32 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d4b1e:	e02a      	b.n	d4b76 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d4b20:	f1b8 0f00 	cmp.w	r8, #0
   d4b24:	d027      	beq.n	d4b76 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d4b26:	6971      	ldr	r1, [r6, #20]
   d4b28:	4638      	mov	r0, r7
   d4b2a:	3104      	adds	r1, #4
   d4b2c:	f7ff fec1 	bl	d48b2 <_ZN9IPAddressaSEPKh>
   d4b30:	e020      	b.n	d4b74 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d4b32:	f1b9 0f00 	cmp.w	r9, #0
   d4b36:	d01e      	beq.n	d4b76 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d4b38:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d4b3a:	2211      	movs	r2, #17
   d4b3c:	a801      	add	r0, sp, #4
   d4b3e:	f002 fad4 	bl	d70ea <memset>
                    a.v = 6;
   d4b42:	2306      	movs	r3, #6
   d4b44:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d4b48:	ad01      	add	r5, sp, #4
   d4b4a:	f104 0308 	add.w	r3, r4, #8
   d4b4e:	3418      	adds	r4, #24
   d4b50:	6818      	ldr	r0, [r3, #0]
   d4b52:	6859      	ldr	r1, [r3, #4]
   d4b54:	462a      	mov	r2, r5
   d4b56:	c203      	stmia	r2!, {r0, r1}
   d4b58:	3308      	adds	r3, #8
   d4b5a:	42a3      	cmp	r3, r4
   d4b5c:	4615      	mov	r5, r2
   d4b5e:	d1f7      	bne.n	d4b50 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d4b60:	a901      	add	r1, sp, #4
   d4b62:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d4b64:	ad07      	add	r5, sp, #28
   d4b66:	f7ff fe85 	bl	d4874 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d4b6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4b6c:	1d3c      	adds	r4, r7, #4
   d4b6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4b70:	682b      	ldr	r3, [r5, #0]
   d4b72:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d4b74:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4b76:	69f6      	ldr	r6, [r6, #28]
   d4b78:	e7c8      	b.n	d4b0c <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d4b7a:	9800      	ldr	r0, [sp, #0]
   d4b7c:	f7ff fc14 	bl	d43a8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d4b80:	4638      	mov	r0, r7
   d4b82:	b015      	add	sp, #84	; 0x54
   d4b84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d4b88 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d4b88:	4b02      	ldr	r3, [pc, #8]	; (d4b94 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d4b8a:	4a03      	ldr	r2, [pc, #12]	; (d4b98 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d4b8c:	601a      	str	r2, [r3, #0]
   d4b8e:	2200      	movs	r2, #0
   d4b90:	605a      	str	r2, [r3, #4]
   d4b92:	4770      	bx	lr
   d4b94:	2003e6b8 	.word	0x2003e6b8
   d4b98:	000d735c 	.word	0x000d735c

000d4b9c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4b9e:	4606      	mov	r6, r0
   d4ba0:	460d      	mov	r5, r1
   d4ba2:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d4ba4:	2400      	movs	r4, #0
  while (size--) {
   d4ba6:	42bd      	cmp	r5, r7
   d4ba8:	d00c      	beq.n	d4bc4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4baa:	6833      	ldr	r3, [r6, #0]
   d4bac:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4bb0:	689b      	ldr	r3, [r3, #8]
   d4bb2:	4630      	mov	r0, r6
   d4bb4:	4798      	blx	r3
     if (chunk>=0)
   d4bb6:	2800      	cmp	r0, #0
   d4bb8:	db01      	blt.n	d4bbe <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4bba:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d4bbc:	e7f3      	b.n	d4ba6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4bbe:	2c00      	cmp	r4, #0
   d4bc0:	bf08      	it	eq
   d4bc2:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d4bc4:	4620      	mov	r0, r4
   d4bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4bc8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4bc8:	b570      	push	{r4, r5, r6, lr}
   d4bca:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4bcc:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d4bce:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d4bd0:	b149      	cbz	r1, d4be6 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d4bd2:	f002 fabb 	bl	d714c <strlen>
   d4bd6:	682b      	ldr	r3, [r5, #0]
   d4bd8:	4602      	mov	r2, r0
   d4bda:	4621      	mov	r1, r4
   d4bdc:	4628      	mov	r0, r5
   d4bde:	68db      	ldr	r3, [r3, #12]
    }
   d4be0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4be4:	4718      	bx	r3
    }
   d4be6:	bd70      	pop	{r4, r5, r6, pc}

000d4be8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4be8:	6803      	ldr	r3, [r0, #0]
   d4bea:	689b      	ldr	r3, [r3, #8]
   d4bec:	4718      	bx	r3

000d4bee <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4bee:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4bf0:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4bf2:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4bf4:	f7ff fff8 	bl	d4be8 <_ZN5Print5printEc>
  n += print('\n');
   d4bf8:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d4bfa:	4604      	mov	r4, r0
  n += print('\n');
   d4bfc:	4628      	mov	r0, r5
   d4bfe:	f7ff fff3 	bl	d4be8 <_ZN5Print5printEc>
  return n;
}
   d4c02:	4420      	add	r0, r4
   d4c04:	bd38      	pop	{r3, r4, r5, pc}

000d4c06 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4c06:	b530      	push	{r4, r5, lr}
   d4c08:	b08b      	sub	sp, #44	; 0x2c
   d4c0a:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4c0c:	2100      	movs	r1, #0
   d4c0e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4c12:	2a01      	cmp	r2, #1
   d4c14:	bf98      	it	ls
   d4c16:	220a      	movls	r2, #10
   d4c18:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d4c1c:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d4c20:	fb05 3312 	mls	r3, r5, r2, r3
   d4c24:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4c28:	2b09      	cmp	r3, #9
   d4c2a:	bf94      	ite	ls
   d4c2c:	3330      	addls	r3, #48	; 0x30
   d4c2e:	3337      	addhi	r3, #55	; 0x37
   d4c30:	b2db      	uxtb	r3, r3
   d4c32:	4621      	mov	r1, r4
   d4c34:	f804 3901 	strb.w	r3, [r4], #-1
   d4c38:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d4c3a:	2d00      	cmp	r5, #0
   d4c3c:	d1ee      	bne.n	d4c1c <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d4c3e:	f7ff ffc3 	bl	d4bc8 <_ZN5Print5writeEPKc>
}
   d4c42:	b00b      	add	sp, #44	; 0x2c
   d4c44:	bd30      	pop	{r4, r5, pc}

000d4c46 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d4c46:	b40c      	push	{r2, r3}
   d4c48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4c4c:	b087      	sub	sp, #28
   d4c4e:	af00      	add	r7, sp, #0
   d4c50:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d4c54:	4605      	mov	r5, r0
   d4c56:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d4c5a:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d4c5c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d4c5e:	4623      	mov	r3, r4
   d4c60:	464a      	mov	r2, r9
   d4c62:	2114      	movs	r1, #20
   d4c64:	1d38      	adds	r0, r7, #4
   d4c66:	f7ff fcbb 	bl	d45e0 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d4c6a:	2813      	cmp	r0, #19
   d4c6c:	d805      	bhi.n	d4c7a <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4c6e:	1d39      	adds	r1, r7, #4
   d4c70:	4628      	mov	r0, r5
   d4c72:	f7ff ffa9 	bl	d4bc8 <_ZN5Print5writeEPKc>
   d4c76:	4604      	mov	r4, r0
   d4c78:	e013      	b.n	d4ca2 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d4c7a:	f100 0308 	add.w	r3, r0, #8
   d4c7e:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d4c82:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d4c84:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d4c88:	1c41      	adds	r1, r0, #1
   d4c8a:	4623      	mov	r3, r4
   d4c8c:	464a      	mov	r2, r9
   d4c8e:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d4c90:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d4c92:	f7ff fca5 	bl	d45e0 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4c96:	4669      	mov	r1, sp
   d4c98:	4628      	mov	r0, r5
   d4c9a:	f7ff ff95 	bl	d4bc8 <_ZN5Print5writeEPKc>
   d4c9e:	4604      	mov	r4, r0
   d4ca0:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d4ca2:	b11e      	cbz	r6, d4cac <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d4ca4:	4628      	mov	r0, r5
   d4ca6:	f7ff ffa2 	bl	d4bee <_ZN5Print7printlnEv>
   d4caa:	4404      	add	r4, r0
    return n;
}
   d4cac:	4620      	mov	r0, r4
   d4cae:	371c      	adds	r7, #28
   d4cb0:	46bd      	mov	sp, r7
   d4cb2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4cb6:	b002      	add	sp, #8
   d4cb8:	4770      	bx	lr

000d4cba <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4cba:	b510      	push	{r4, lr}
   d4cbc:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4cbe:	f7ff fd07 	bl	d46d0 <_ZNSt14_Function_baseD1Ev>
   d4cc2:	4620      	mov	r0, r4
   d4cc4:	bd10      	pop	{r4, pc}
	...

000d4cc8 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4cc8:	4803      	ldr	r0, [pc, #12]	; (d4cd8 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4cca:	4a04      	ldr	r2, [pc, #16]	; (d4cdc <_GLOBAL__sub_I_RGB+0x14>)
   d4ccc:	4904      	ldr	r1, [pc, #16]	; (d4ce0 <_GLOBAL__sub_I_RGB+0x18>)
   d4cce:	2300      	movs	r3, #0
   d4cd0:	6083      	str	r3, [r0, #8]
   d4cd2:	f000 ba95 	b.w	d5200 <__aeabi_atexit>
   d4cd6:	bf00      	nop
   d4cd8:	2003e6c0 	.word	0x2003e6c0
   d4cdc:	2003e488 	.word	0x2003e488
   d4ce0:	000d4cbb 	.word	0x000d4cbb

000d4ce4 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d4ce4:	4770      	bx	lr

000d4ce6 <_ZN8SPIClassD0Ev>:
   d4ce6:	b510      	push	{r4, lr}
   d4ce8:	210c      	movs	r1, #12
   d4cea:	4604      	mov	r4, r0
   d4cec:	f000 fa8d 	bl	d520a <_ZdlPvj>
   d4cf0:	4620      	mov	r0, r4
   d4cf2:	bd10      	pop	{r4, pc}

000d4cf4 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d4cf4:	b510      	push	{r4, lr}
   d4cf6:	4b05      	ldr	r3, [pc, #20]	; (d4d0c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x18>)
   d4cf8:	6003      	str	r3, [r0, #0]
   d4cfa:	4604      	mov	r4, r0
{
    _spi = spi;
   d4cfc:	7101      	strb	r1, [r0, #4]
    HAL_SPI_Init(_spi);
   d4cfe:	4608      	mov	r0, r1
   d4d00:	f7ff fb62 	bl	d43c8 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d4d04:	2300      	movs	r3, #0
   d4d06:	60a3      	str	r3, [r4, #8]
}
   d4d08:	4620      	mov	r0, r4
   d4d0a:	bd10      	pop	{r4, pc}
   d4d0c:	000d7390 	.word	0x000d7390

000d4d10 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d4d10:	7900      	ldrb	r0, [r0, #4]
   d4d12:	f7ff bb61 	b.w	d43d8 <HAL_SPI_Is_Enabled>

000d4d16 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d4d16:	b510      	push	{r4, lr}
   d4d18:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4d1a:	6800      	ldr	r0, [r0, #0]
   d4d1c:	b118      	cbz	r0, d4d26 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d4d1e:	f7ff fc57 	bl	d45d0 <free>
            wakeupSource_ = nullptr;
   d4d22:	2300      	movs	r3, #0
   d4d24:	6023      	str	r3, [r4, #0]
   d4d26:	bd10      	pop	{r4, pc}

000d4d28 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4d28:	b510      	push	{r4, lr}
   d4d2a:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d4d2c:	f7ff fff3 	bl	d4d16 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4d30:	4620      	mov	r0, r4
   d4d32:	bd10      	pop	{r4, pc}

000d4d34 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4d34:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4d36:	4c09      	ldr	r4, [pc, #36]	; (d4d5c <_GLOBAL__sub_I_System+0x28>)
   d4d38:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4d3a:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4d3e:	6020      	str	r0, [r4, #0]
   d4d40:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4d42:	71a0      	strb	r0, [r4, #6]
   d4d44:	8120      	strh	r0, [r4, #8]
   d4d46:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4d48:	f7ff fbc6 	bl	d44d8 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4d4c:	4620      	mov	r0, r4
   d4d4e:	4a04      	ldr	r2, [pc, #16]	; (d4d60 <_GLOBAL__sub_I_System+0x2c>)
   d4d50:	4904      	ldr	r1, [pc, #16]	; (d4d64 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4d52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4d56:	f000 ba53 	b.w	d5200 <__aeabi_atexit>
   d4d5a:	bf00      	nop
   d4d5c:	2003e6d0 	.word	0x2003e6d0
   d4d60:	2003e488 	.word	0x2003e488
   d4d64:	000d4d29 	.word	0x000d4d29

000d4d68 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4d68:	4b02      	ldr	r3, [pc, #8]	; (d4d74 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4d6a:	681a      	ldr	r2, [r3, #0]
   d4d6c:	4b02      	ldr	r3, [pc, #8]	; (d4d78 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4d6e:	601a      	str	r2, [r3, #0]
   d4d70:	4770      	bx	lr
   d4d72:	bf00      	nop
   d4d74:	2003e41c 	.word	0x2003e41c
   d4d78:	2003e6dc 	.word	0x2003e6dc

000d4d7c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d4d7c:	4770      	bx	lr

000d4d7e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4d7e:	7441      	strb	r1, [r0, #17]
   d4d80:	4770      	bx	lr

000d4d82 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d4d82:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d4d84:	7c00      	ldrb	r0, [r0, #16]
   d4d86:	f7ff fb67 	bl	d4458 <HAL_USART_Available_Data_For_Write>
}
   d4d8a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4d8e:	bd08      	pop	{r3, pc}

000d4d90 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d4d90:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d4d92:	7c00      	ldrb	r0, [r0, #16]
   d4d94:	f7ff fb38 	bl	d4408 <HAL_USART_Available_Data>
}
   d4d98:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4d9c:	bd08      	pop	{r3, pc}

000d4d9e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d4d9e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d4da0:	7c00      	ldrb	r0, [r0, #16]
   d4da2:	f7ff fb41 	bl	d4428 <HAL_USART_Peek_Data>
}
   d4da6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4daa:	bf28      	it	cs
   d4dac:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d4db0:	bd08      	pop	{r3, pc}

000d4db2 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d4db2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d4db4:	7c00      	ldrb	r0, [r0, #16]
   d4db6:	f7ff fb2f 	bl	d4418 <HAL_USART_Read_Data>
}
   d4dba:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4dbe:	bf28      	it	cs
   d4dc0:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d4dc4:	bd08      	pop	{r3, pc}

000d4dc6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d4dc6:	7c00      	ldrb	r0, [r0, #16]
   d4dc8:	f7ff bb36 	b.w	d4438 <HAL_USART_Flush_Data>

000d4dcc <_ZN11USARTSerialD0Ev>:
   d4dcc:	b510      	push	{r4, lr}
   d4dce:	2114      	movs	r1, #20
   d4dd0:	4604      	mov	r4, r0
   d4dd2:	f000 fa1a 	bl	d520a <_ZdlPvj>
   d4dd6:	4620      	mov	r0, r4
   d4dd8:	bd10      	pop	{r4, pc}

000d4dda <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d4dda:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4ddc:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d4dde:	4604      	mov	r4, r0
   d4de0:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4de2:	b925      	cbnz	r5, d4dee <_ZN11USARTSerial5writeEh+0x14>
   d4de4:	7c00      	ldrb	r0, [r0, #16]
   d4de6:	f7ff fb37 	bl	d4458 <HAL_USART_Available_Data_For_Write>
   d4dea:	2800      	cmp	r0, #0
   d4dec:	dd05      	ble.n	d4dfa <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4dee:	4631      	mov	r1, r6
   d4df0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d4df2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4df6:	f7ff baff 	b.w	d43f8 <HAL_USART_Write_Data>
  }
  return 0;
}
   d4dfa:	4628      	mov	r0, r5
   d4dfc:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4e00 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d4e00:	b510      	push	{r4, lr}
   d4e02:	4604      	mov	r4, r0
   d4e04:	4608      	mov	r0, r1
   d4e06:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4e08:	2200      	movs	r2, #0
   d4e0a:	6062      	str	r2, [r4, #4]
   d4e0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4e10:	60a2      	str	r2, [r4, #8]
   d4e12:	4a05      	ldr	r2, [pc, #20]	; (d4e28 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d4e14:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d4e16:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d4e18:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d4e1a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d4e1c:	461a      	mov	r2, r3
   d4e1e:	f7ff fae3 	bl	d43e8 <HAL_USART_Init>
}
   d4e22:	4620      	mov	r0, r4
   d4e24:	bd10      	pop	{r4, pc}
   d4e26:	bf00      	nop
   d4e28:	000d73cc 	.word	0x000d73cc

000d4e2c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d4e2c:	7c00      	ldrb	r0, [r0, #16]
   d4e2e:	f7ff bb0b 	b.w	d4448 <HAL_USART_Is_Enabled>
	...

000d4e34 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d4e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   d4e36:	4c19      	ldr	r4, [pc, #100]	; (d4e9c <_Z22__fetch_global_Serial1v+0x68>)
   d4e38:	6825      	ldr	r5, [r4, #0]
   d4e3a:	b94d      	cbnz	r5, d4e50 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
   d4e3c:	2084      	movs	r0, #132	; 0x84
   d4e3e:	f7ff f92c 	bl	d409a <_Znwj>
   d4e42:	4606      	mov	r6, r0
   d4e44:	b118      	cbz	r0, d4e4e <_Z22__fetch_global_Serial1v+0x1a>
   d4e46:	2284      	movs	r2, #132	; 0x84
   d4e48:	4629      	mov	r1, r5
   d4e4a:	f002 f94e 	bl	d70ea <memset>
   d4e4e:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
   d4e50:	4d13      	ldr	r5, [pc, #76]	; (d4ea0 <_Z22__fetch_global_Serial1v+0x6c>)
   d4e52:	682e      	ldr	r6, [r5, #0]
   d4e54:	b94e      	cbnz	r6, d4e6a <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
   d4e56:	2084      	movs	r0, #132	; 0x84
   d4e58:	f7ff f91f 	bl	d409a <_Znwj>
   d4e5c:	4607      	mov	r7, r0
   d4e5e:	b118      	cbz	r0, d4e68 <_Z22__fetch_global_Serial1v+0x34>
   d4e60:	2284      	movs	r2, #132	; 0x84
   d4e62:	4631      	mov	r1, r6
   d4e64:	f002 f941 	bl	d70ea <memset>
   d4e68:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d4e6a:	4f0e      	ldr	r7, [pc, #56]	; (d4ea4 <_Z22__fetch_global_Serial1v+0x70>)
   d4e6c:	6839      	ldr	r1, [r7, #0]
   d4e6e:	f011 0601 	ands.w	r6, r1, #1
   d4e72:	d111      	bne.n	d4e98 <_Z22__fetch_global_Serial1v+0x64>
   d4e74:	4638      	mov	r0, r7
   d4e76:	f7ff f916 	bl	d40a6 <__cxa_guard_acquire>
   d4e7a:	b168      	cbz	r0, d4e98 <_Z22__fetch_global_Serial1v+0x64>
   d4e7c:	6822      	ldr	r2, [r4, #0]
   d4e7e:	682b      	ldr	r3, [r5, #0]
   d4e80:	4809      	ldr	r0, [pc, #36]	; (d4ea8 <_Z22__fetch_global_Serial1v+0x74>)
   d4e82:	4631      	mov	r1, r6
   d4e84:	f7ff ffbc 	bl	d4e00 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d4e88:	4638      	mov	r0, r7
   d4e8a:	f7ff f911 	bl	d40b0 <__cxa_guard_release>
   d4e8e:	4a07      	ldr	r2, [pc, #28]	; (d4eac <_Z22__fetch_global_Serial1v+0x78>)
   d4e90:	4907      	ldr	r1, [pc, #28]	; (d4eb0 <_Z22__fetch_global_Serial1v+0x7c>)
   d4e92:	4805      	ldr	r0, [pc, #20]	; (d4ea8 <_Z22__fetch_global_Serial1v+0x74>)
   d4e94:	f000 f9b4 	bl	d5200 <__aeabi_atexit>
#endif
	return serial1;
}
   d4e98:	4803      	ldr	r0, [pc, #12]	; (d4ea8 <_Z22__fetch_global_Serial1v+0x74>)
   d4e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4e9c:	2003e6fc 	.word	0x2003e6fc
   d4ea0:	2003e6f4 	.word	0x2003e6f4
   d4ea4:	2003e6f8 	.word	0x2003e6f8
   d4ea8:	2003e6e0 	.word	0x2003e6e0
   d4eac:	2003e488 	.word	0x2003e488
   d4eb0:	000d4d7d 	.word	0x000d4d7d

000d4eb4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4eb4:	7441      	strb	r1, [r0, #17]
   d4eb6:	4770      	bx	lr

000d4eb8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d4eb8:	4770      	bx	lr

000d4eba <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d4eba:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d4ebc:	2100      	movs	r1, #0
   d4ebe:	7c00      	ldrb	r0, [r0, #16]
   d4ec0:	f7ff faf2 	bl	d44a8 <HAL_USB_USART_Receive_Data>
}
   d4ec4:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4ec8:	bf28      	it	cs
   d4eca:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d4ece:	bd08      	pop	{r3, pc}

000d4ed0 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d4ed0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d4ed2:	2101      	movs	r1, #1
   d4ed4:	7c00      	ldrb	r0, [r0, #16]
   d4ed6:	f7ff fae7 	bl	d44a8 <HAL_USB_USART_Receive_Data>
}
   d4eda:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4ede:	bf28      	it	cs
   d4ee0:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d4ee4:	bd08      	pop	{r3, pc}

000d4ee6 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d4ee6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d4ee8:	7c00      	ldrb	r0, [r0, #16]
   d4eea:	f7ff fad5 	bl	d4498 <HAL_USB_USART_Available_Data_For_Write>
}
   d4eee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4ef2:	bd08      	pop	{r3, pc}

000d4ef4 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d4ef4:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d4ef6:	7c00      	ldrb	r0, [r0, #16]
   d4ef8:	f7ff fac6 	bl	d4488 <HAL_USB_USART_Available_Data>
}
   d4efc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4f00:	bd08      	pop	{r3, pc}

000d4f02 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d4f02:	7c00      	ldrb	r0, [r0, #16]
   d4f04:	f7ff bae0 	b.w	d44c8 <HAL_USB_USART_Flush_Data>

000d4f08 <_ZN9USBSerialD0Ev>:
   d4f08:	b510      	push	{r4, lr}
   d4f0a:	2114      	movs	r1, #20
   d4f0c:	4604      	mov	r4, r0
   d4f0e:	f000 f97c 	bl	d520a <_ZdlPvj>
   d4f12:	4620      	mov	r0, r4
   d4f14:	bd10      	pop	{r4, pc}

000d4f16 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4f16:	b538      	push	{r3, r4, r5, lr}
   d4f18:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4f1a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4f1c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4f1e:	f7ff fabb 	bl	d4498 <HAL_USB_USART_Available_Data_For_Write>
   d4f22:	2800      	cmp	r0, #0
   d4f24:	dc01      	bgt.n	d4f2a <_ZN9USBSerial5writeEh+0x14>
   d4f26:	7c60      	ldrb	r0, [r4, #17]
   d4f28:	b128      	cbz	r0, d4f36 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d4f2a:	4629      	mov	r1, r5
   d4f2c:	7c20      	ldrb	r0, [r4, #16]
   d4f2e:	f7ff fac3 	bl	d44b8 <HAL_USB_USART_Send_Data>
   d4f32:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d4f36:	bd38      	pop	{r3, r4, r5, pc}

000d4f38 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4f38:	b510      	push	{r4, lr}
   d4f3a:	4604      	mov	r4, r0
   d4f3c:	2300      	movs	r3, #0
   d4f3e:	6063      	str	r3, [r4, #4]
   d4f40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4f44:	60a3      	str	r3, [r4, #8]
   d4f46:	4b05      	ldr	r3, [pc, #20]	; (d4f5c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d4f48:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d4f4a:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4f4c:	4608      	mov	r0, r1
{
  _serial = serial;
   d4f4e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d4f50:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d4f52:	4611      	mov	r1, r2
   d4f54:	f7ff fa88 	bl	d4468 <HAL_USB_USART_Init>
}
   d4f58:	4620      	mov	r0, r4
   d4f5a:	bd10      	pop	{r4, pc}
   d4f5c:	000d73fc 	.word	0x000d73fc

000d4f60 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d4f60:	2200      	movs	r2, #0
   d4f62:	7c00      	ldrb	r0, [r0, #16]
   d4f64:	f7ff ba88 	b.w	d4478 <HAL_USB_USART_Begin>

000d4f68 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4f68:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d4f6a:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4f6c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d4f6e:	2100      	movs	r1, #0
   d4f70:	f002 f8bb 	bl	d70ea <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d4f74:	4620      	mov	r0, r4
   d4f76:	bd10      	pop	{r4, pc}

000d4f78 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d4f78:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4f7a:	4d0e      	ldr	r5, [pc, #56]	; (d4fb4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d4f7c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d4f7e:	a801      	add	r0, sp, #4
   d4f80:	f7ff fff2 	bl	d4f68 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4f84:	6829      	ldr	r1, [r5, #0]
   d4f86:	f011 0401 	ands.w	r4, r1, #1
   d4f8a:	d110      	bne.n	d4fae <_Z16_fetch_usbserialv+0x36>
   d4f8c:	4628      	mov	r0, r5
   d4f8e:	f7ff f88a 	bl	d40a6 <__cxa_guard_acquire>
   d4f92:	b160      	cbz	r0, d4fae <_Z16_fetch_usbserialv+0x36>
   d4f94:	aa01      	add	r2, sp, #4
   d4f96:	4621      	mov	r1, r4
   d4f98:	4807      	ldr	r0, [pc, #28]	; (d4fb8 <_Z16_fetch_usbserialv+0x40>)
   d4f9a:	f7ff ffcd 	bl	d4f38 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d4f9e:	4628      	mov	r0, r5
   d4fa0:	f7ff f886 	bl	d40b0 <__cxa_guard_release>
   d4fa4:	4a05      	ldr	r2, [pc, #20]	; (d4fbc <_Z16_fetch_usbserialv+0x44>)
   d4fa6:	4906      	ldr	r1, [pc, #24]	; (d4fc0 <_Z16_fetch_usbserialv+0x48>)
   d4fa8:	4803      	ldr	r0, [pc, #12]	; (d4fb8 <_Z16_fetch_usbserialv+0x40>)
   d4faa:	f000 f929 	bl	d5200 <__aeabi_atexit>
	return _usbserial;
}
   d4fae:	4802      	ldr	r0, [pc, #8]	; (d4fb8 <_Z16_fetch_usbserialv+0x40>)
   d4fb0:	b007      	add	sp, #28
   d4fb2:	bd30      	pop	{r4, r5, pc}
   d4fb4:	2003e700 	.word	0x2003e700
   d4fb8:	2003e704 	.word	0x2003e704
   d4fbc:	2003e488 	.word	0x2003e488
   d4fc0:	000d4eb9 	.word	0x000d4eb9

000d4fc4 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d4fc4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d4fc6:	4b0c      	ldr	r3, [pc, #48]	; (d4ff8 <serialEventRun+0x34>)
   d4fc8:	b133      	cbz	r3, d4fd8 <serialEventRun+0x14>
   d4fca:	f7ff ffd5 	bl	d4f78 <_Z16_fetch_usbserialv>
   d4fce:	6803      	ldr	r3, [r0, #0]
   d4fd0:	691b      	ldr	r3, [r3, #16]
   d4fd2:	4798      	blx	r3
   d4fd4:	2800      	cmp	r0, #0
   d4fd6:	dc09      	bgt.n	d4fec <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d4fd8:	4b08      	ldr	r3, [pc, #32]	; (d4ffc <serialEventRun+0x38>)
   d4fda:	b163      	cbz	r3, d4ff6 <serialEventRun+0x32>
   d4fdc:	f7ff ff2a 	bl	d4e34 <_Z22__fetch_global_Serial1v>
   d4fe0:	6803      	ldr	r3, [r0, #0]
   d4fe2:	691b      	ldr	r3, [r3, #16]
   d4fe4:	4798      	blx	r3
   d4fe6:	2800      	cmp	r0, #0
   d4fe8:	dc03      	bgt.n	d4ff2 <serialEventRun+0x2e>
   d4fea:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d4fec:	f3af 8000 	nop.w
   d4ff0:	e7f2      	b.n	d4fd8 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d4ff2:	f3af 8000 	nop.w
   d4ff6:	bd08      	pop	{r3, pc}
	...

000d5000 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5000:	b508      	push	{r3, lr}
	serialEventRun();
   d5002:	f7ff ffdf 	bl	d4fc4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5006:	f7ff f96f 	bl	d42e8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d500a:	4b01      	ldr	r3, [pc, #4]	; (d5010 <_post_loop+0x10>)
   d500c:	6018      	str	r0, [r3, #0]
   d500e:	bd08      	pop	{r3, pc}
   d5010:	2003e720 	.word	0x2003e720

000d5014 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5014:	4802      	ldr	r0, [pc, #8]	; (d5020 <_Z33system_initialize_user_backup_ramv+0xc>)
   d5016:	4a03      	ldr	r2, [pc, #12]	; (d5024 <_Z33system_initialize_user_backup_ramv+0x10>)
   d5018:	4903      	ldr	r1, [pc, #12]	; (d5028 <_Z33system_initialize_user_backup_ramv+0x14>)
   d501a:	1a12      	subs	r2, r2, r0
   d501c:	f002 b85a 	b.w	d70d4 <memcpy>
   d5020:	2003f400 	.word	0x2003f400
   d5024:	2003f404 	.word	0x2003f404
   d5028:	000d74e0 	.word	0x000d74e0

000d502c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d502c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d502e:	2300      	movs	r3, #0
   d5030:	9300      	str	r3, [sp, #0]
   d5032:	461a      	mov	r2, r3
   d5034:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5038:	f7ff fa60 	bl	d44fc <system_ctrl_set_result>
}
   d503c:	b003      	add	sp, #12
   d503e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5044 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5044:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5046:	8843      	ldrh	r3, [r0, #2]
   d5048:	2b0a      	cmp	r3, #10
   d504a:	d008      	beq.n	d505e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d504c:	2b50      	cmp	r3, #80	; 0x50
   d504e:	d109      	bne.n	d5064 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5050:	4b09      	ldr	r3, [pc, #36]	; (d5078 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5052:	681b      	ldr	r3, [r3, #0]
   d5054:	b13b      	cbz	r3, d5066 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d5056:	b003      	add	sp, #12
   d5058:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d505c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d505e:	f7ff ffe5 	bl	d502c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d5062:	e006      	b.n	d5072 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5064:	2300      	movs	r3, #0
   d5066:	9300      	str	r3, [sp, #0]
   d5068:	461a      	mov	r2, r3
   d506a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d506e:	f7ff fa45 	bl	d44fc <system_ctrl_set_result>
        break;
    }
}
   d5072:	b003      	add	sp, #12
   d5074:	f85d fb04 	ldr.w	pc, [sp], #4
   d5078:	2003e718 	.word	0x2003e718

000d507c <module_user_init_hook>:

void module_user_init_hook()
{
   d507c:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d507e:	4c10      	ldr	r4, [pc, #64]	; (d50c0 <module_user_init_hook+0x44>)
   d5080:	4d10      	ldr	r5, [pc, #64]	; (d50c4 <module_user_init_hook+0x48>)
   d5082:	6823      	ldr	r3, [r4, #0]
   d5084:	42ab      	cmp	r3, r5
   d5086:	4b10      	ldr	r3, [pc, #64]	; (d50c8 <module_user_init_hook+0x4c>)
   d5088:	bf0c      	ite	eq
   d508a:	2201      	moveq	r2, #1
   d508c:	2200      	movne	r2, #0
   d508e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5090:	d002      	beq.n	d5098 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d5092:	f7ff ffbf 	bl	d5014 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d5096:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5098:	f7ff f91e 	bl	d42d8 <HAL_RNG_GetRandomNumber>
   d509c:	4604      	mov	r4, r0
    srand(seed);
   d509e:	f002 f82d 	bl	d70fc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d50a2:	4b0a      	ldr	r3, [pc, #40]	; (d50cc <module_user_init_hook+0x50>)
   d50a4:	b113      	cbz	r3, d50ac <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d50a6:	4620      	mov	r0, r4
   d50a8:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d50ac:	2100      	movs	r1, #0
   d50ae:	4807      	ldr	r0, [pc, #28]	; (d50cc <module_user_init_hook+0x50>)
   d50b0:	f7ff fa2e 	bl	d4510 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d50b4:	2100      	movs	r1, #0
   d50b6:	4806      	ldr	r0, [pc, #24]	; (d50d0 <module_user_init_hook+0x54>)
}
   d50b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d50bc:	f7ff ba14 	b.w	d44e8 <system_ctrl_set_app_request_handler>
   d50c0:	2003f400 	.word	0x2003f400
   d50c4:	9a271c1e 	.word	0x9a271c1e
   d50c8:	2003e71c 	.word	0x2003e71c
   d50cc:	00000000 	.word	0x00000000
   d50d0:	000d5045 	.word	0x000d5045

000d50d4 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d50d4:	b510      	push	{r4, lr}
   d50d6:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d50d8:	f000 f872 	bl	d51c0 <_ZN8particle7globals11instanceSpiEv>
   d50dc:	f7ff fe18 	bl	d4d10 <_ZN8SPIClass9isEnabledEv>
   d50e0:	b128      	cbz	r0, d50ee <pinAvailable+0x1a>
   d50e2:	f1a4 030b 	sub.w	r3, r4, #11
   d50e6:	2b02      	cmp	r3, #2
   d50e8:	d801      	bhi.n	d50ee <pinAvailable+0x1a>
  {
    return 0; // 'pin' is used
   d50ea:	2000      	movs	r0, #0
   d50ec:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d50ee:	f000 f841 	bl	d5174 <_Z19__fetch_global_Wirev>
   d50f2:	f7ff fb73 	bl	d47dc <_ZN7TwoWire9isEnabledEv>
   d50f6:	b108      	cbz	r0, d50fc <pinAvailable+0x28>
   d50f8:	2c01      	cmp	r4, #1
   d50fa:	d9f6      	bls.n	d50ea <pinAvailable+0x16>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d50fc:	f7ff fe9a 	bl	d4e34 <_Z22__fetch_global_Serial1v>
   d5100:	f7ff fe94 	bl	d4e2c <_ZN11USARTSerial9isEnabledEv>
   d5104:	b118      	cbz	r0, d510e <pinAvailable+0x3a>
   d5106:	f1a4 0309 	sub.w	r3, r4, #9
   d510a:	2b01      	cmp	r3, #1
   d510c:	d9ed      	bls.n	d50ea <pinAvailable+0x16>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d510e:	2c23      	cmp	r4, #35	; 0x23
   d5110:	bf8c      	ite	hi
   d5112:	2000      	movhi	r0, #0
   d5114:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d5116:	bd10      	pop	{r4, pc}

000d5118 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5118:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d511a:	b538      	push	{r3, r4, r5, lr}
   d511c:	4604      	mov	r4, r0
   d511e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5120:	d80a      	bhi.n	d5138 <pinMode+0x20>
   d5122:	29ff      	cmp	r1, #255	; 0xff
   d5124:	d008      	beq.n	d5138 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d5126:	f7ff ffd5 	bl	d50d4 <pinAvailable>
   d512a:	b128      	cbz	r0, d5138 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d512c:	4629      	mov	r1, r5
   d512e:	4620      	mov	r0, r4
}
   d5130:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5134:	f7ff b8e8 	b.w	d4308 <HAL_Pin_Mode>
   d5138:	bd38      	pop	{r3, r4, r5, pc}

000d513a <pulseIn>:
 */
uint32_t pulseIn(pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return HAL_Pulse_In(pin, value);
   d513a:	f7ff b8ed 	b.w	d4318 <HAL_Pulse_In>
	...

000d5140 <_Z17acquireWireBufferv>:
   d5140:	b570      	push	{r4, r5, r6, lr}
   d5142:	4604      	mov	r4, r0
   d5144:	2514      	movs	r5, #20
   d5146:	462a      	mov	r2, r5
   d5148:	4e09      	ldr	r6, [pc, #36]	; (d5170 <_Z17acquireWireBufferv+0x30>)
   d514a:	2100      	movs	r1, #0
   d514c:	f001 ffcd 	bl	d70ea <memset>
   d5150:	8025      	strh	r5, [r4, #0]
   d5152:	2520      	movs	r5, #32
   d5154:	4631      	mov	r1, r6
   d5156:	60a5      	str	r5, [r4, #8]
   d5158:	6125      	str	r5, [r4, #16]
   d515a:	4628      	mov	r0, r5
   d515c:	f000 f86f 	bl	d523e <_ZnajRKSt9nothrow_t>
   d5160:	4631      	mov	r1, r6
   d5162:	6060      	str	r0, [r4, #4]
   d5164:	4628      	mov	r0, r5
   d5166:	f000 f86a 	bl	d523e <_ZnajRKSt9nothrow_t>
   d516a:	60e0      	str	r0, [r4, #12]
   d516c:	4620      	mov	r0, r4
   d516e:	bd70      	pop	{r4, r5, r6, pc}
   d5170:	000d7424 	.word	0x000d7424

000d5174 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5174:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5176:	4d0e      	ldr	r5, [pc, #56]	; (d51b0 <_Z19__fetch_global_Wirev+0x3c>)
   d5178:	6829      	ldr	r1, [r5, #0]
   d517a:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d517e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5180:	d113      	bne.n	d51aa <_Z19__fetch_global_Wirev+0x36>
   d5182:	4628      	mov	r0, r5
   d5184:	f7fe ff8f 	bl	d40a6 <__cxa_guard_acquire>
   d5188:	b178      	cbz	r0, d51aa <_Z19__fetch_global_Wirev+0x36>
   d518a:	a801      	add	r0, sp, #4
   d518c:	f7ff ffd8 	bl	d5140 <_Z17acquireWireBufferv>
   d5190:	aa01      	add	r2, sp, #4
   d5192:	4621      	mov	r1, r4
   d5194:	4807      	ldr	r0, [pc, #28]	; (d51b4 <_Z19__fetch_global_Wirev+0x40>)
   d5196:	f7ff fb0f 	bl	d47b8 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d519a:	4628      	mov	r0, r5
   d519c:	f7fe ff88 	bl	d40b0 <__cxa_guard_release>
   d51a0:	4a05      	ldr	r2, [pc, #20]	; (d51b8 <_Z19__fetch_global_Wirev+0x44>)
   d51a2:	4906      	ldr	r1, [pc, #24]	; (d51bc <_Z19__fetch_global_Wirev+0x48>)
   d51a4:	4803      	ldr	r0, [pc, #12]	; (d51b4 <_Z19__fetch_global_Wirev+0x40>)
   d51a6:	f000 f82b 	bl	d5200 <__aeabi_atexit>
	return wire;
}
   d51aa:	4802      	ldr	r0, [pc, #8]	; (d51b4 <_Z19__fetch_global_Wirev+0x40>)
   d51ac:	b007      	add	sp, #28
   d51ae:	bd30      	pop	{r4, r5, pc}
   d51b0:	2003e724 	.word	0x2003e724
   d51b4:	2003e728 	.word	0x2003e728
   d51b8:	2003e488 	.word	0x2003e488
   d51bc:	000d4761 	.word	0x000d4761

000d51c0 <_ZN8particle7globals11instanceSpiEv>:
#ifndef SPARK_WIRING_NO_SPI

namespace particle {
namespace globals {

SPIClass& instanceSpi() {
   d51c0:	b538      	push	{r3, r4, r5, lr}
    static SPIClass instance(HAL_SPI_INTERFACE1);
   d51c2:	4d0b      	ldr	r5, [pc, #44]	; (d51f0 <_ZN8particle7globals11instanceSpiEv+0x30>)
   d51c4:	6829      	ldr	r1, [r5, #0]
   d51c6:	f011 0401 	ands.w	r4, r1, #1
   d51ca:	d10f      	bne.n	d51ec <_ZN8particle7globals11instanceSpiEv+0x2c>
   d51cc:	4628      	mov	r0, r5
   d51ce:	f7fe ff6a 	bl	d40a6 <__cxa_guard_acquire>
   d51d2:	b158      	cbz	r0, d51ec <_ZN8particle7globals11instanceSpiEv+0x2c>
   d51d4:	4621      	mov	r1, r4
   d51d6:	4807      	ldr	r0, [pc, #28]	; (d51f4 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d51d8:	f7ff fd8c 	bl	d4cf4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d51dc:	4628      	mov	r0, r5
   d51de:	f7fe ff67 	bl	d40b0 <__cxa_guard_release>
   d51e2:	4a05      	ldr	r2, [pc, #20]	; (d51f8 <_ZN8particle7globals11instanceSpiEv+0x38>)
   d51e4:	4905      	ldr	r1, [pc, #20]	; (d51fc <_ZN8particle7globals11instanceSpiEv+0x3c>)
   d51e6:	4803      	ldr	r0, [pc, #12]	; (d51f4 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d51e8:	f000 f80a 	bl	d5200 <__aeabi_atexit>
    return instance;
}
   d51ec:	4801      	ldr	r0, [pc, #4]	; (d51f4 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d51ee:	bd38      	pop	{r3, r4, r5, pc}
   d51f0:	2003e748 	.word	0x2003e748
   d51f4:	2003e73c 	.word	0x2003e73c
   d51f8:	2003e488 	.word	0x2003e488
   d51fc:	000d4ce5 	.word	0x000d4ce5

000d5200 <__aeabi_atexit>:
   d5200:	460b      	mov	r3, r1
   d5202:	4601      	mov	r1, r0
   d5204:	4618      	mov	r0, r3
   d5206:	f001 bf57 	b.w	d70b8 <__cxa_atexit>

000d520a <_ZdlPvj>:
   d520a:	f7fe bf48 	b.w	d409e <_ZdlPv>
	...

000d5210 <_ZSt15get_new_handlerv>:
   d5210:	4b02      	ldr	r3, [pc, #8]	; (d521c <_ZSt15get_new_handlerv+0xc>)
   d5212:	6818      	ldr	r0, [r3, #0]
   d5214:	f3bf 8f5f 	dmb	sy
   d5218:	4770      	bx	lr
   d521a:	bf00      	nop
   d521c:	2003e74c 	.word	0x2003e74c

000d5220 <_ZnwjRKSt9nothrow_t>:
   d5220:	b510      	push	{r4, lr}
   d5222:	2800      	cmp	r0, #0
   d5224:	bf14      	ite	ne
   d5226:	4604      	movne	r4, r0
   d5228:	2401      	moveq	r4, #1
   d522a:	4620      	mov	r0, r4
   d522c:	f7ff f9c8 	bl	d45c0 <malloc>
   d5230:	b920      	cbnz	r0, d523c <_ZnwjRKSt9nothrow_t+0x1c>
   d5232:	f7ff ffed 	bl	d5210 <_ZSt15get_new_handlerv>
   d5236:	b108      	cbz	r0, d523c <_ZnwjRKSt9nothrow_t+0x1c>
   d5238:	4780      	blx	r0
   d523a:	e7f6      	b.n	d522a <_ZnwjRKSt9nothrow_t+0xa>
   d523c:	bd10      	pop	{r4, pc}

000d523e <_ZnajRKSt9nothrow_t>:
   d523e:	f7ff bfef 	b.w	d5220 <_ZnwjRKSt9nothrow_t>
	...

000d5244 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5244:	4b24      	ldr	r3, [pc, #144]	; (d52d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d5246:	681a      	ldr	r2, [r3, #0]
   d5248:	07d0      	lsls	r0, r2, #31
   d524a:	bf5c      	itt	pl
   d524c:	2201      	movpl	r2, #1
   d524e:	601a      	strpl	r2, [r3, #0]
   d5250:	4b22      	ldr	r3, [pc, #136]	; (d52dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5252:	681a      	ldr	r2, [r3, #0]
   d5254:	07d1      	lsls	r1, r2, #31
   d5256:	bf5c      	itt	pl
   d5258:	2201      	movpl	r2, #1
   d525a:	601a      	strpl	r2, [r3, #0]
   d525c:	4b20      	ldr	r3, [pc, #128]	; (d52e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d525e:	681a      	ldr	r2, [r3, #0]
   d5260:	07d2      	lsls	r2, r2, #31
   d5262:	bf5c      	itt	pl
   d5264:	2201      	movpl	r2, #1
   d5266:	601a      	strpl	r2, [r3, #0]
   d5268:	4b1e      	ldr	r3, [pc, #120]	; (d52e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d526a:	681a      	ldr	r2, [r3, #0]
   d526c:	07d0      	lsls	r0, r2, #31
   d526e:	bf5c      	itt	pl
   d5270:	2201      	movpl	r2, #1
   d5272:	601a      	strpl	r2, [r3, #0]
   d5274:	4b1c      	ldr	r3, [pc, #112]	; (d52e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d5276:	681a      	ldr	r2, [r3, #0]
   d5278:	07d1      	lsls	r1, r2, #31
   d527a:	bf5c      	itt	pl
   d527c:	2201      	movpl	r2, #1
   d527e:	601a      	strpl	r2, [r3, #0]
   d5280:	4b1a      	ldr	r3, [pc, #104]	; (d52ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d5282:	681a      	ldr	r2, [r3, #0]
   d5284:	07d2      	lsls	r2, r2, #31
   d5286:	bf5c      	itt	pl
   d5288:	2201      	movpl	r2, #1
   d528a:	601a      	strpl	r2, [r3, #0]
   d528c:	4b18      	ldr	r3, [pc, #96]	; (d52f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d528e:	681a      	ldr	r2, [r3, #0]
   d5290:	07d0      	lsls	r0, r2, #31
   d5292:	bf5c      	itt	pl
   d5294:	2201      	movpl	r2, #1
   d5296:	601a      	strpl	r2, [r3, #0]
   d5298:	4b16      	ldr	r3, [pc, #88]	; (d52f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d529a:	681a      	ldr	r2, [r3, #0]
   d529c:	07d1      	lsls	r1, r2, #31
   d529e:	bf5c      	itt	pl
   d52a0:	2201      	movpl	r2, #1
   d52a2:	601a      	strpl	r2, [r3, #0]
   d52a4:	4b14      	ldr	r3, [pc, #80]	; (d52f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d52a6:	681a      	ldr	r2, [r3, #0]
   d52a8:	07d2      	lsls	r2, r2, #31
   d52aa:	bf5c      	itt	pl
   d52ac:	2201      	movpl	r2, #1
   d52ae:	601a      	strpl	r2, [r3, #0]
   d52b0:	4b12      	ldr	r3, [pc, #72]	; (d52fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d52b2:	681a      	ldr	r2, [r3, #0]
   d52b4:	07d0      	lsls	r0, r2, #31
   d52b6:	bf5c      	itt	pl
   d52b8:	2201      	movpl	r2, #1
   d52ba:	601a      	strpl	r2, [r3, #0]
   d52bc:	4b10      	ldr	r3, [pc, #64]	; (d5300 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d52be:	681a      	ldr	r2, [r3, #0]
   d52c0:	07d1      	lsls	r1, r2, #31
   d52c2:	bf5c      	itt	pl
   d52c4:	2201      	movpl	r2, #1
   d52c6:	601a      	strpl	r2, [r3, #0]
   d52c8:	4b0e      	ldr	r3, [pc, #56]	; (d5304 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d52ca:	681a      	ldr	r2, [r3, #0]
   d52cc:	07d2      	lsls	r2, r2, #31
   d52ce:	bf5c      	itt	pl
   d52d0:	2201      	movpl	r2, #1
   d52d2:	601a      	strpl	r2, [r3, #0]
   d52d4:	4770      	bx	lr
   d52d6:	bf00      	nop
   d52d8:	2003e77c 	.word	0x2003e77c
   d52dc:	2003e778 	.word	0x2003e778
   d52e0:	2003e774 	.word	0x2003e774
   d52e4:	2003e770 	.word	0x2003e770
   d52e8:	2003e76c 	.word	0x2003e76c
   d52ec:	2003e768 	.word	0x2003e768
   d52f0:	2003e764 	.word	0x2003e764
   d52f4:	2003e760 	.word	0x2003e760
   d52f8:	2003e75c 	.word	0x2003e75c
   d52fc:	2003e758 	.word	0x2003e758
   d5300:	2003e754 	.word	0x2003e754
   d5304:	2003e750 	.word	0x2003e750

000d5308 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5308:	4b18      	ldr	r3, [pc, #96]	; (d536c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d530a:	681a      	ldr	r2, [r3, #0]
   d530c:	07d1      	lsls	r1, r2, #31
   d530e:	bf5c      	itt	pl
   d5310:	2201      	movpl	r2, #1
   d5312:	601a      	strpl	r2, [r3, #0]
   d5314:	4b16      	ldr	r3, [pc, #88]	; (d5370 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5316:	681a      	ldr	r2, [r3, #0]
   d5318:	07d2      	lsls	r2, r2, #31
   d531a:	bf5c      	itt	pl
   d531c:	2201      	movpl	r2, #1
   d531e:	601a      	strpl	r2, [r3, #0]
   d5320:	4b14      	ldr	r3, [pc, #80]	; (d5374 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5322:	681a      	ldr	r2, [r3, #0]
   d5324:	07d0      	lsls	r0, r2, #31
   d5326:	bf5c      	itt	pl
   d5328:	2201      	movpl	r2, #1
   d532a:	601a      	strpl	r2, [r3, #0]
   d532c:	4b12      	ldr	r3, [pc, #72]	; (d5378 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d532e:	681a      	ldr	r2, [r3, #0]
   d5330:	07d1      	lsls	r1, r2, #31
   d5332:	bf5c      	itt	pl
   d5334:	2201      	movpl	r2, #1
   d5336:	601a      	strpl	r2, [r3, #0]
   d5338:	4b10      	ldr	r3, [pc, #64]	; (d537c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d533a:	681a      	ldr	r2, [r3, #0]
   d533c:	07d2      	lsls	r2, r2, #31
   d533e:	bf5c      	itt	pl
   d5340:	2201      	movpl	r2, #1
   d5342:	601a      	strpl	r2, [r3, #0]
   d5344:	4b0e      	ldr	r3, [pc, #56]	; (d5380 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5346:	681a      	ldr	r2, [r3, #0]
   d5348:	07d0      	lsls	r0, r2, #31
   d534a:	bf5c      	itt	pl
   d534c:	2201      	movpl	r2, #1
   d534e:	601a      	strpl	r2, [r3, #0]
   d5350:	4b0c      	ldr	r3, [pc, #48]	; (d5384 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5352:	681a      	ldr	r2, [r3, #0]
   d5354:	07d1      	lsls	r1, r2, #31
   d5356:	bf5c      	itt	pl
   d5358:	2201      	movpl	r2, #1
   d535a:	601a      	strpl	r2, [r3, #0]
   d535c:	4b0a      	ldr	r3, [pc, #40]	; (d5388 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d535e:	681a      	ldr	r2, [r3, #0]
   d5360:	07d2      	lsls	r2, r2, #31
   d5362:	bf5c      	itt	pl
   d5364:	2201      	movpl	r2, #1
   d5366:	601a      	strpl	r2, [r3, #0]
   d5368:	4770      	bx	lr
   d536a:	bf00      	nop
   d536c:	2003e79c 	.word	0x2003e79c
   d5370:	2003e798 	.word	0x2003e798
   d5374:	2003e794 	.word	0x2003e794
   d5378:	2003e790 	.word	0x2003e790
   d537c:	2003e78c 	.word	0x2003e78c
   d5380:	2003e788 	.word	0x2003e788
   d5384:	2003e784 	.word	0x2003e784
   d5388:	2003e780 	.word	0x2003e780

000d538c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d538c:	4b18      	ldr	r3, [pc, #96]	; (d53f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d538e:	681a      	ldr	r2, [r3, #0]
   d5390:	07d1      	lsls	r1, r2, #31
   d5392:	bf5c      	itt	pl
   d5394:	2201      	movpl	r2, #1
   d5396:	601a      	strpl	r2, [r3, #0]
   d5398:	4b16      	ldr	r3, [pc, #88]	; (d53f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d539a:	681a      	ldr	r2, [r3, #0]
   d539c:	07d2      	lsls	r2, r2, #31
   d539e:	bf5c      	itt	pl
   d53a0:	2201      	movpl	r2, #1
   d53a2:	601a      	strpl	r2, [r3, #0]
   d53a4:	4b14      	ldr	r3, [pc, #80]	; (d53f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d53a6:	681a      	ldr	r2, [r3, #0]
   d53a8:	07d0      	lsls	r0, r2, #31
   d53aa:	bf5c      	itt	pl
   d53ac:	2201      	movpl	r2, #1
   d53ae:	601a      	strpl	r2, [r3, #0]
   d53b0:	4b12      	ldr	r3, [pc, #72]	; (d53fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d53b2:	681a      	ldr	r2, [r3, #0]
   d53b4:	07d1      	lsls	r1, r2, #31
   d53b6:	bf5c      	itt	pl
   d53b8:	2201      	movpl	r2, #1
   d53ba:	601a      	strpl	r2, [r3, #0]
   d53bc:	4b10      	ldr	r3, [pc, #64]	; (d5400 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d53be:	681a      	ldr	r2, [r3, #0]
   d53c0:	07d2      	lsls	r2, r2, #31
   d53c2:	bf5c      	itt	pl
   d53c4:	2201      	movpl	r2, #1
   d53c6:	601a      	strpl	r2, [r3, #0]
   d53c8:	4b0e      	ldr	r3, [pc, #56]	; (d5404 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d53ca:	681a      	ldr	r2, [r3, #0]
   d53cc:	07d0      	lsls	r0, r2, #31
   d53ce:	bf5c      	itt	pl
   d53d0:	2201      	movpl	r2, #1
   d53d2:	601a      	strpl	r2, [r3, #0]
   d53d4:	4b0c      	ldr	r3, [pc, #48]	; (d5408 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d53d6:	681a      	ldr	r2, [r3, #0]
   d53d8:	07d1      	lsls	r1, r2, #31
   d53da:	bf5c      	itt	pl
   d53dc:	2201      	movpl	r2, #1
   d53de:	601a      	strpl	r2, [r3, #0]
   d53e0:	4b0a      	ldr	r3, [pc, #40]	; (d540c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d53e2:	681a      	ldr	r2, [r3, #0]
   d53e4:	07d2      	lsls	r2, r2, #31
   d53e6:	bf5c      	itt	pl
   d53e8:	2201      	movpl	r2, #1
   d53ea:	601a      	strpl	r2, [r3, #0]
   d53ec:	4770      	bx	lr
   d53ee:	bf00      	nop
   d53f0:	2003e7bc 	.word	0x2003e7bc
   d53f4:	2003e7b8 	.word	0x2003e7b8
   d53f8:	2003e7b4 	.word	0x2003e7b4
   d53fc:	2003e7b0 	.word	0x2003e7b0
   d5400:	2003e7ac 	.word	0x2003e7ac
   d5404:	2003e7a8 	.word	0x2003e7a8
   d5408:	2003e7a4 	.word	0x2003e7a4
   d540c:	2003e7a0 	.word	0x2003e7a0

000d5410 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5410:	4b24      	ldr	r3, [pc, #144]	; (d54a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d5412:	681a      	ldr	r2, [r3, #0]
   d5414:	07d0      	lsls	r0, r2, #31
   d5416:	bf5c      	itt	pl
   d5418:	2201      	movpl	r2, #1
   d541a:	601a      	strpl	r2, [r3, #0]
   d541c:	4b22      	ldr	r3, [pc, #136]	; (d54a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d541e:	681a      	ldr	r2, [r3, #0]
   d5420:	07d1      	lsls	r1, r2, #31
   d5422:	bf5c      	itt	pl
   d5424:	2201      	movpl	r2, #1
   d5426:	601a      	strpl	r2, [r3, #0]
   d5428:	4b20      	ldr	r3, [pc, #128]	; (d54ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d542a:	681a      	ldr	r2, [r3, #0]
   d542c:	07d2      	lsls	r2, r2, #31
   d542e:	bf5c      	itt	pl
   d5430:	2201      	movpl	r2, #1
   d5432:	601a      	strpl	r2, [r3, #0]
   d5434:	4b1e      	ldr	r3, [pc, #120]	; (d54b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d5436:	681a      	ldr	r2, [r3, #0]
   d5438:	07d0      	lsls	r0, r2, #31
   d543a:	bf5c      	itt	pl
   d543c:	2201      	movpl	r2, #1
   d543e:	601a      	strpl	r2, [r3, #0]
   d5440:	4b1c      	ldr	r3, [pc, #112]	; (d54b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d5442:	681a      	ldr	r2, [r3, #0]
   d5444:	07d1      	lsls	r1, r2, #31
   d5446:	bf5c      	itt	pl
   d5448:	2201      	movpl	r2, #1
   d544a:	601a      	strpl	r2, [r3, #0]
   d544c:	4b1a      	ldr	r3, [pc, #104]	; (d54b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d544e:	681a      	ldr	r2, [r3, #0]
   d5450:	07d2      	lsls	r2, r2, #31
   d5452:	bf5c      	itt	pl
   d5454:	2201      	movpl	r2, #1
   d5456:	601a      	strpl	r2, [r3, #0]
   d5458:	4b18      	ldr	r3, [pc, #96]	; (d54bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d545a:	681a      	ldr	r2, [r3, #0]
   d545c:	07d0      	lsls	r0, r2, #31
   d545e:	bf5c      	itt	pl
   d5460:	2201      	movpl	r2, #1
   d5462:	601a      	strpl	r2, [r3, #0]
   d5464:	4b16      	ldr	r3, [pc, #88]	; (d54c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5466:	681a      	ldr	r2, [r3, #0]
   d5468:	07d1      	lsls	r1, r2, #31
   d546a:	bf5c      	itt	pl
   d546c:	2201      	movpl	r2, #1
   d546e:	601a      	strpl	r2, [r3, #0]
   d5470:	4b14      	ldr	r3, [pc, #80]	; (d54c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d5472:	681a      	ldr	r2, [r3, #0]
   d5474:	07d2      	lsls	r2, r2, #31
   d5476:	bf5c      	itt	pl
   d5478:	2201      	movpl	r2, #1
   d547a:	601a      	strpl	r2, [r3, #0]
   d547c:	4b12      	ldr	r3, [pc, #72]	; (d54c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d547e:	681a      	ldr	r2, [r3, #0]
   d5480:	07d0      	lsls	r0, r2, #31
   d5482:	bf5c      	itt	pl
   d5484:	2201      	movpl	r2, #1
   d5486:	601a      	strpl	r2, [r3, #0]
   d5488:	4b10      	ldr	r3, [pc, #64]	; (d54cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d548a:	681a      	ldr	r2, [r3, #0]
   d548c:	07d1      	lsls	r1, r2, #31
   d548e:	bf5c      	itt	pl
   d5490:	2201      	movpl	r2, #1
   d5492:	601a      	strpl	r2, [r3, #0]
   d5494:	4b0e      	ldr	r3, [pc, #56]	; (d54d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d5496:	681a      	ldr	r2, [r3, #0]
   d5498:	07d2      	lsls	r2, r2, #31
   d549a:	bf5c      	itt	pl
   d549c:	2201      	movpl	r2, #1
   d549e:	601a      	strpl	r2, [r3, #0]
   d54a0:	4770      	bx	lr
   d54a2:	bf00      	nop
   d54a4:	2003e7ec 	.word	0x2003e7ec
   d54a8:	2003e7e8 	.word	0x2003e7e8
   d54ac:	2003e7e4 	.word	0x2003e7e4
   d54b0:	2003e7e0 	.word	0x2003e7e0
   d54b4:	2003e7dc 	.word	0x2003e7dc
   d54b8:	2003e7d8 	.word	0x2003e7d8
   d54bc:	2003e7d4 	.word	0x2003e7d4
   d54c0:	2003e7d0 	.word	0x2003e7d0
   d54c4:	2003e7cc 	.word	0x2003e7cc
   d54c8:	2003e7c8 	.word	0x2003e7c8
   d54cc:	2003e7c4 	.word	0x2003e7c4
   d54d0:	2003e7c0 	.word	0x2003e7c0
   d54d4:	00000000 	.word	0x00000000

000d54d8 <pow>:
   d54d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d54dc:	ed2d 8b02 	vpush	{d8}
   d54e0:	f8df a324 	ldr.w	sl, [pc, #804]	; d5808 <pow+0x330>
   d54e4:	b08b      	sub	sp, #44	; 0x2c
   d54e6:	ec57 6b10 	vmov	r6, r7, d0
   d54ea:	ec55 4b11 	vmov	r4, r5, d1
   d54ee:	f000 f98f 	bl	d5810 <__ieee754_pow>
   d54f2:	f99a 8000 	ldrsb.w	r8, [sl]
   d54f6:	eeb0 8a40 	vmov.f32	s16, s0
   d54fa:	eef0 8a60 	vmov.f32	s17, s1
   d54fe:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   d5502:	d048      	beq.n	d5596 <pow+0xbe>
   d5504:	4622      	mov	r2, r4
   d5506:	462b      	mov	r3, r5
   d5508:	4620      	mov	r0, r4
   d550a:	4629      	mov	r1, r5
   d550c:	f001 fd6e 	bl	d6fec <__aeabi_dcmpun>
   d5510:	4683      	mov	fp, r0
   d5512:	2800      	cmp	r0, #0
   d5514:	d13f      	bne.n	d5596 <pow+0xbe>
   d5516:	4632      	mov	r2, r6
   d5518:	463b      	mov	r3, r7
   d551a:	4630      	mov	r0, r6
   d551c:	4639      	mov	r1, r7
   d551e:	f001 fd65 	bl	d6fec <__aeabi_dcmpun>
   d5522:	4681      	mov	r9, r0
   d5524:	2800      	cmp	r0, #0
   d5526:	f040 8090 	bne.w	d564a <pow+0x172>
   d552a:	4630      	mov	r0, r6
   d552c:	4639      	mov	r1, r7
   d552e:	2200      	movs	r2, #0
   d5530:	2300      	movs	r3, #0
   d5532:	f001 fd29 	bl	d6f88 <__aeabi_dcmpeq>
   d5536:	2800      	cmp	r0, #0
   d5538:	d036      	beq.n	d55a8 <pow+0xd0>
   d553a:	2200      	movs	r2, #0
   d553c:	2300      	movs	r3, #0
   d553e:	4620      	mov	r0, r4
   d5540:	4629      	mov	r1, r5
   d5542:	f001 fd21 	bl	d6f88 <__aeabi_dcmpeq>
   d5546:	4683      	mov	fp, r0
   d5548:	b1b8      	cbz	r0, d557a <pow+0xa2>
   d554a:	ed9f 7ba5 	vldr	d7, [pc, #660]	; d57e0 <pow+0x308>
   d554e:	2201      	movs	r2, #1
   d5550:	4ba9      	ldr	r3, [pc, #676]	; (d57f8 <pow+0x320>)
   d5552:	f8cd 9020 	str.w	r9, [sp, #32]
   d5556:	9200      	str	r2, [sp, #0]
   d5558:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d555c:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d5560:	ed8d 7b06 	vstr	d7, [sp, #24]
   d5564:	9301      	str	r3, [sp, #4]
   d5566:	f1b8 0f00 	cmp.w	r8, #0
   d556a:	d05b      	beq.n	d5624 <pow+0x14c>
   d556c:	ed9f 0b9e 	vldr	d0, [pc, #632]	; d57e8 <pow+0x310>
   d5570:	b00b      	add	sp, #44	; 0x2c
   d5572:	ecbd 8b02 	vpop	{d8}
   d5576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d557a:	ec45 4b10 	vmov	d0, r4, r5
   d557e:	f000 ffa7 	bl	d64d0 <finite>
   d5582:	b140      	cbz	r0, d5596 <pow+0xbe>
   d5584:	2200      	movs	r2, #0
   d5586:	2300      	movs	r3, #0
   d5588:	4620      	mov	r0, r4
   d558a:	4629      	mov	r1, r5
   d558c:	f001 fd06 	bl	d6f9c <__aeabi_dcmplt>
   d5590:	2800      	cmp	r0, #0
   d5592:	f040 80c5 	bne.w	d5720 <pow+0x248>
   d5596:	eeb0 0a48 	vmov.f32	s0, s16
   d559a:	eef0 0a68 	vmov.f32	s1, s17
   d559e:	b00b      	add	sp, #44	; 0x2c
   d55a0:	ecbd 8b02 	vpop	{d8}
   d55a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d55a8:	eeb0 0a48 	vmov.f32	s0, s16
   d55ac:	eef0 0a68 	vmov.f32	s1, s17
   d55b0:	f000 ff8e 	bl	d64d0 <finite>
   d55b4:	4680      	mov	r8, r0
   d55b6:	2800      	cmp	r0, #0
   d55b8:	d061      	beq.n	d567e <pow+0x1a6>
   d55ba:	f04f 0800 	mov.w	r8, #0
   d55be:	f04f 0900 	mov.w	r9, #0
   d55c2:	ec51 0b18 	vmov	r0, r1, d8
   d55c6:	4642      	mov	r2, r8
   d55c8:	464b      	mov	r3, r9
   d55ca:	f001 fcdd 	bl	d6f88 <__aeabi_dcmpeq>
   d55ce:	2800      	cmp	r0, #0
   d55d0:	d0e1      	beq.n	d5596 <pow+0xbe>
   d55d2:	ec47 6b10 	vmov	d0, r6, r7
   d55d6:	f000 ff7b 	bl	d64d0 <finite>
   d55da:	2800      	cmp	r0, #0
   d55dc:	d0db      	beq.n	d5596 <pow+0xbe>
   d55de:	ec45 4b10 	vmov	d0, r4, r5
   d55e2:	f000 ff75 	bl	d64d0 <finite>
   d55e6:	2800      	cmp	r0, #0
   d55e8:	d0d5      	beq.n	d5596 <pow+0xbe>
   d55ea:	f99a 3000 	ldrsb.w	r3, [sl]
   d55ee:	4a82      	ldr	r2, [pc, #520]	; (d57f8 <pow+0x320>)
   d55f0:	9201      	str	r2, [sp, #4]
   d55f2:	2104      	movs	r1, #4
   d55f4:	2200      	movs	r2, #0
   d55f6:	2b02      	cmp	r3, #2
   d55f8:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d55fc:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d5600:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d5604:	9100      	str	r1, [sp, #0]
   d5606:	9208      	str	r2, [sp, #32]
   d5608:	d003      	beq.n	d5612 <pow+0x13a>
   d560a:	4668      	mov	r0, sp
   d560c:	f000 ff68 	bl	d64e0 <matherr>
   d5610:	b970      	cbnz	r0, d5630 <pow+0x158>
   d5612:	f7fe ffed 	bl	d45f0 <__errno>
   d5616:	2322      	movs	r3, #34	; 0x22
   d5618:	6003      	str	r3, [r0, #0]
   d561a:	e009      	b.n	d5630 <pow+0x158>
   d561c:	ed9f 7b70 	vldr	d7, [pc, #448]	; d57e0 <pow+0x308>
   d5620:	ed8d 7b06 	vstr	d7, [sp, #24]
   d5624:	4668      	mov	r0, sp
   d5626:	f000 ff5b 	bl	d64e0 <matherr>
   d562a:	2800      	cmp	r0, #0
   d562c:	f000 808e 	beq.w	d574c <pow+0x274>
   d5630:	9b08      	ldr	r3, [sp, #32]
   d5632:	b11b      	cbz	r3, d563c <pow+0x164>
   d5634:	f7fe ffdc 	bl	d45f0 <__errno>
   d5638:	9b08      	ldr	r3, [sp, #32]
   d563a:	6003      	str	r3, [r0, #0]
   d563c:	ed9d 0b06 	vldr	d0, [sp, #24]
   d5640:	b00b      	add	sp, #44	; 0x2c
   d5642:	ecbd 8b02 	vpop	{d8}
   d5646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d564a:	2200      	movs	r2, #0
   d564c:	2300      	movs	r3, #0
   d564e:	4620      	mov	r0, r4
   d5650:	4629      	mov	r1, r5
   d5652:	f001 fc99 	bl	d6f88 <__aeabi_dcmpeq>
   d5656:	2800      	cmp	r0, #0
   d5658:	d09d      	beq.n	d5596 <pow+0xbe>
   d565a:	ed9f 0b63 	vldr	d0, [pc, #396]	; d57e8 <pow+0x310>
   d565e:	4b66      	ldr	r3, [pc, #408]	; (d57f8 <pow+0x320>)
   d5660:	f8cd b020 	str.w	fp, [sp, #32]
   d5664:	2201      	movs	r2, #1
   d5666:	f1b8 0f02 	cmp.w	r8, #2
   d566a:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d566e:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d5672:	ed8d 0b06 	vstr	d0, [sp, #24]
   d5676:	e88d 000c 	stmia.w	sp, {r2, r3}
   d567a:	d1d3      	bne.n	d5624 <pow+0x14c>
   d567c:	e78f      	b.n	d559e <pow+0xc6>
   d567e:	ec47 6b10 	vmov	d0, r6, r7
   d5682:	f000 ff25 	bl	d64d0 <finite>
   d5686:	2800      	cmp	r0, #0
   d5688:	d097      	beq.n	d55ba <pow+0xe2>
   d568a:	ec45 4b10 	vmov	d0, r4, r5
   d568e:	f000 ff1f 	bl	d64d0 <finite>
   d5692:	2800      	cmp	r0, #0
   d5694:	d091      	beq.n	d55ba <pow+0xe2>
   d5696:	ec53 2b18 	vmov	r2, r3, d8
   d569a:	ee18 0a10 	vmov	r0, s16
   d569e:	4619      	mov	r1, r3
   d56a0:	f001 fca4 	bl	d6fec <__aeabi_dcmpun>
   d56a4:	2800      	cmp	r0, #0
   d56a6:	d17c      	bne.n	d57a2 <pow+0x2ca>
   d56a8:	2303      	movs	r3, #3
   d56aa:	f99a 8000 	ldrsb.w	r8, [sl]
   d56ae:	9300      	str	r3, [sp, #0]
   d56b0:	4b51      	ldr	r3, [pc, #324]	; (d57f8 <pow+0x320>)
   d56b2:	9008      	str	r0, [sp, #32]
   d56b4:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d56b8:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d56bc:	9301      	str	r3, [sp, #4]
   d56be:	f1b8 0f00 	cmp.w	r8, #0
   d56c2:	d148      	bne.n	d5756 <pow+0x27e>
   d56c4:	f8df 9144 	ldr.w	r9, [pc, #324]	; d580c <pow+0x334>
   d56c8:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
   d56cc:	2200      	movs	r2, #0
   d56ce:	2300      	movs	r3, #0
   d56d0:	4630      	mov	r0, r6
   d56d2:	4639      	mov	r1, r7
   d56d4:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d56d8:	f001 fc60 	bl	d6f9c <__aeabi_dcmplt>
   d56dc:	2800      	cmp	r0, #0
   d56de:	d094      	beq.n	d560a <pow+0x132>
   d56e0:	2200      	movs	r2, #0
   d56e2:	4b46      	ldr	r3, [pc, #280]	; (d57fc <pow+0x324>)
   d56e4:	4620      	mov	r0, r4
   d56e6:	4629      	mov	r1, r5
   d56e8:	f001 f9e6 	bl	d6ab8 <__aeabi_dmul>
   d56ec:	4604      	mov	r4, r0
   d56ee:	460d      	mov	r5, r1
   d56f0:	ec45 4b10 	vmov	d0, r4, r5
   d56f4:	f000 ff00 	bl	d64f8 <rint>
   d56f8:	4620      	mov	r0, r4
   d56fa:	ec53 2b10 	vmov	r2, r3, d0
   d56fe:	4629      	mov	r1, r5
   d5700:	f001 fc42 	bl	d6f88 <__aeabi_dcmpeq>
   d5704:	2800      	cmp	r0, #0
   d5706:	d149      	bne.n	d579c <pow+0x2c4>
   d5708:	4b3d      	ldr	r3, [pc, #244]	; (d5800 <pow+0x328>)
   d570a:	f99a 8000 	ldrsb.w	r8, [sl]
   d570e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d5712:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d5716:	f1b8 0f02 	cmp.w	r8, #2
   d571a:	f47f af76 	bne.w	d560a <pow+0x132>
   d571e:	e778      	b.n	d5612 <pow+0x13a>
   d5720:	4a35      	ldr	r2, [pc, #212]	; (d57f8 <pow+0x320>)
   d5722:	f99a 3000 	ldrsb.w	r3, [sl]
   d5726:	f8cd b020 	str.w	fp, [sp, #32]
   d572a:	2101      	movs	r1, #1
   d572c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d5730:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d5734:	e88d 0006 	stmia.w	sp, {r1, r2}
   d5738:	2b00      	cmp	r3, #0
   d573a:	f43f af6f 	beq.w	d561c <pow+0x144>
   d573e:	4931      	ldr	r1, [pc, #196]	; (d5804 <pow+0x32c>)
   d5740:	2000      	movs	r0, #0
   d5742:	2b02      	cmp	r3, #2
   d5744:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d5748:	f47f af6c 	bne.w	d5624 <pow+0x14c>
   d574c:	f7fe ff50 	bl	d45f0 <__errno>
   d5750:	2321      	movs	r3, #33	; 0x21
   d5752:	6003      	str	r3, [r0, #0]
   d5754:	e76c      	b.n	d5630 <pow+0x158>
   d5756:	ed9f 7b26 	vldr	d7, [pc, #152]	; d57f0 <pow+0x318>
   d575a:	2200      	movs	r2, #0
   d575c:	2300      	movs	r3, #0
   d575e:	4630      	mov	r0, r6
   d5760:	4639      	mov	r1, r7
   d5762:	ed8d 7b06 	vstr	d7, [sp, #24]
   d5766:	f001 fc19 	bl	d6f9c <__aeabi_dcmplt>
   d576a:	2800      	cmp	r0, #0
   d576c:	d0d3      	beq.n	d5716 <pow+0x23e>
   d576e:	2200      	movs	r2, #0
   d5770:	4b22      	ldr	r3, [pc, #136]	; (d57fc <pow+0x324>)
   d5772:	4620      	mov	r0, r4
   d5774:	4629      	mov	r1, r5
   d5776:	f001 f99f 	bl	d6ab8 <__aeabi_dmul>
   d577a:	4604      	mov	r4, r0
   d577c:	460d      	mov	r5, r1
   d577e:	ec45 4b10 	vmov	d0, r4, r5
   d5782:	f000 feb9 	bl	d64f8 <rint>
   d5786:	4620      	mov	r0, r4
   d5788:	ec53 2b10 	vmov	r2, r3, d0
   d578c:	4629      	mov	r1, r5
   d578e:	f001 fbfb 	bl	d6f88 <__aeabi_dcmpeq>
   d5792:	b918      	cbnz	r0, d579c <pow+0x2c4>
   d5794:	4b1b      	ldr	r3, [pc, #108]	; (d5804 <pow+0x32c>)
   d5796:	2200      	movs	r2, #0
   d5798:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d579c:	f99a 8000 	ldrsb.w	r8, [sl]
   d57a0:	e7b9      	b.n	d5716 <pow+0x23e>
   d57a2:	4b15      	ldr	r3, [pc, #84]	; (d57f8 <pow+0x320>)
   d57a4:	f99a 9000 	ldrsb.w	r9, [sl]
   d57a8:	f8cd 8020 	str.w	r8, [sp, #32]
   d57ac:	2201      	movs	r2, #1
   d57ae:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d57b2:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d57b6:	e88d 000c 	stmia.w	sp, {r2, r3}
   d57ba:	f1b9 0f00 	cmp.w	r9, #0
   d57be:	f43f af2d 	beq.w	d561c <pow+0x144>
   d57c2:	2200      	movs	r2, #0
   d57c4:	2300      	movs	r3, #0
   d57c6:	4610      	mov	r0, r2
   d57c8:	4619      	mov	r1, r3
   d57ca:	f001 fa9f 	bl	d6d0c <__aeabi_ddiv>
   d57ce:	f1b9 0f02 	cmp.w	r9, #2
   d57d2:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d57d6:	d0b9      	beq.n	d574c <pow+0x274>
   d57d8:	e724      	b.n	d5624 <pow+0x14c>
   d57da:	bf00      	nop
   d57dc:	f3af 8000 	nop.w
	...
   d57ec:	3ff00000 	.word	0x3ff00000
   d57f0:	00000000 	.word	0x00000000
   d57f4:	7ff00000 	.word	0x7ff00000
   d57f8:	000d7428 	.word	0x000d7428
   d57fc:	3fe00000 	.word	0x3fe00000
   d5800:	c7efffff 	.word	0xc7efffff
   d5804:	fff00000 	.word	0xfff00000
   d5808:	2003e420 	.word	0x2003e420
   d580c:	47efffff 	.word	0x47efffff

000d5810 <__ieee754_pow>:
   d5810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5814:	ec51 0b11 	vmov	r0, r1, d1
   d5818:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   d581c:	ea58 0400 	orrs.w	r4, r8, r0
   d5820:	b093      	sub	sp, #76	; 0x4c
   d5822:	d03c      	beq.n	d589e <__ieee754_pow+0x8e>
   d5824:	ec53 2b10 	vmov	r2, r3, d0
   d5828:	4e6d      	ldr	r6, [pc, #436]	; (d59e0 <__ieee754_pow+0x1d0>)
   d582a:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   d582e:	42b4      	cmp	r4, r6
   d5830:	ee10 aa10 	vmov	sl, s0
   d5834:	461d      	mov	r5, r3
   d5836:	dc2b      	bgt.n	d5890 <__ieee754_pow+0x80>
   d5838:	4689      	mov	r9, r1
   d583a:	ee11 ea10 	vmov	lr, s2
   d583e:	d026      	beq.n	d588e <__ieee754_pow+0x7e>
   d5840:	45b0      	cmp	r8, r6
   d5842:	dc25      	bgt.n	d5890 <__ieee754_pow+0x80>
   d5844:	4e66      	ldr	r6, [pc, #408]	; (d59e0 <__ieee754_pow+0x1d0>)
   d5846:	45b0      	cmp	r8, r6
   d5848:	d077      	beq.n	d593a <__ieee754_pow+0x12a>
   d584a:	2d00      	cmp	r5, #0
   d584c:	4616      	mov	r6, r2
   d584e:	461f      	mov	r7, r3
   d5850:	e9cd 0100 	strd	r0, r1, [sp]
   d5854:	db75      	blt.n	d5942 <__ieee754_pow+0x132>
   d5856:	f04f 0b00 	mov.w	fp, #0
   d585a:	f1be 0f00 	cmp.w	lr, #0
   d585e:	d12d      	bne.n	d58bc <__ieee754_pow+0xac>
   d5860:	4b5f      	ldr	r3, [pc, #380]	; (d59e0 <__ieee754_pow+0x1d0>)
   d5862:	4598      	cmp	r8, r3
   d5864:	f000 8089 	beq.w	d597a <__ieee754_pow+0x16a>
   d5868:	4b5e      	ldr	r3, [pc, #376]	; (d59e4 <__ieee754_pow+0x1d4>)
   d586a:	4598      	cmp	r8, r3
   d586c:	d05e      	beq.n	d592c <__ieee754_pow+0x11c>
   d586e:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
   d5872:	f000 83de 	beq.w	d6032 <__ieee754_pow+0x822>
   d5876:	4b5c      	ldr	r3, [pc, #368]	; (d59e8 <__ieee754_pow+0x1d8>)
   d5878:	4599      	cmp	r9, r3
   d587a:	d11f      	bne.n	d58bc <__ieee754_pow+0xac>
   d587c:	2d00      	cmp	r5, #0
   d587e:	db1d      	blt.n	d58bc <__ieee754_pow+0xac>
   d5880:	ec47 6b10 	vmov	d0, r6, r7
   d5884:	b013      	add	sp, #76	; 0x4c
   d5886:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d588a:	f000 bd49 	b.w	d6320 <__ieee754_sqrt>
   d588e:	b15a      	cbz	r2, d58a8 <__ieee754_pow+0x98>
   d5890:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
   d5894:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
   d5898:	ea54 030a 	orrs.w	r3, r4, sl
   d589c:	d106      	bne.n	d58ac <__ieee754_pow+0x9c>
   d589e:	ed9f 0b4a 	vldr	d0, [pc, #296]	; d59c8 <__ieee754_pow+0x1b8>
   d58a2:	b013      	add	sp, #76	; 0x4c
   d58a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d58a8:	45a0      	cmp	r8, r4
   d58aa:	ddcb      	ble.n	d5844 <__ieee754_pow+0x34>
   d58ac:	484f      	ldr	r0, [pc, #316]	; (d59ec <__ieee754_pow+0x1dc>)
   d58ae:	b013      	add	sp, #76	; 0x4c
   d58b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d58b4:	f000 be18 	b.w	d64e8 <nan>
   d58b8:	f04f 0b00 	mov.w	fp, #0
   d58bc:	ec47 6b10 	vmov	d0, r6, r7
   d58c0:	f000 fdfe 	bl	d64c0 <fabs>
   d58c4:	ec51 0b10 	vmov	r0, r1, d0
   d58c8:	f1ba 0f00 	cmp.w	sl, #0
   d58cc:	d01e      	beq.n	d590c <__ieee754_pow+0xfc>
   d58ce:	0fed      	lsrs	r5, r5, #31
   d58d0:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
   d58d4:	ea5b 030a 	orrs.w	r3, fp, sl
   d58d8:	d063      	beq.n	d59a2 <__ieee754_pow+0x192>
   d58da:	4b45      	ldr	r3, [pc, #276]	; (d59f0 <__ieee754_pow+0x1e0>)
   d58dc:	4598      	cmp	r8, r3
   d58de:	f340 808d 	ble.w	d59fc <__ieee754_pow+0x1ec>
   d58e2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   d58e6:	4598      	cmp	r8, r3
   d58e8:	f340 8438 	ble.w	d615c <__ieee754_pow+0x94c>
   d58ec:	4b41      	ldr	r3, [pc, #260]	; (d59f4 <__ieee754_pow+0x1e4>)
   d58ee:	429c      	cmp	r4, r3
   d58f0:	dd62      	ble.n	d59b8 <__ieee754_pow+0x1a8>
   d58f2:	f1b9 0f00 	cmp.w	r9, #0
   d58f6:	dd62      	ble.n	d59be <__ieee754_pow+0x1ae>
   d58f8:	a335      	add	r3, pc, #212	; (adr r3, d59d0 <__ieee754_pow+0x1c0>)
   d58fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   d58fe:	4610      	mov	r0, r2
   d5900:	4619      	mov	r1, r3
   d5902:	f001 f8d9 	bl	d6ab8 <__aeabi_dmul>
   d5906:	ec41 0b10 	vmov	d0, r0, r1
   d590a:	e7ca      	b.n	d58a2 <__ieee754_pow+0x92>
   d590c:	b124      	cbz	r4, d5918 <__ieee754_pow+0x108>
   d590e:	4b35      	ldr	r3, [pc, #212]	; (d59e4 <__ieee754_pow+0x1d4>)
   d5910:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
   d5914:	429a      	cmp	r2, r3
   d5916:	d1da      	bne.n	d58ce <__ieee754_pow+0xbe>
   d5918:	f1b9 0f00 	cmp.w	r9, #0
   d591c:	f2c0 83cb 	blt.w	d60b6 <__ieee754_pow+0x8a6>
   d5920:	2d00      	cmp	r5, #0
   d5922:	f2c0 8374 	blt.w	d600e <__ieee754_pow+0x7fe>
   d5926:	ec41 0b10 	vmov	d0, r0, r1
   d592a:	e7ba      	b.n	d58a2 <__ieee754_pow+0x92>
   d592c:	f1b9 0f00 	cmp.w	r9, #0
   d5930:	f2c0 847a 	blt.w	d6228 <__ieee754_pow+0xa18>
   d5934:	ec47 6b10 	vmov	d0, r6, r7
   d5938:	e7b3      	b.n	d58a2 <__ieee754_pow+0x92>
   d593a:	f1be 0f00 	cmp.w	lr, #0
   d593e:	d084      	beq.n	d584a <__ieee754_pow+0x3a>
   d5940:	e7a6      	b.n	d5890 <__ieee754_pow+0x80>
   d5942:	4b2d      	ldr	r3, [pc, #180]	; (d59f8 <__ieee754_pow+0x1e8>)
   d5944:	4598      	cmp	r8, r3
   d5946:	dc29      	bgt.n	d599c <__ieee754_pow+0x18c>
   d5948:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
   d594c:	4598      	cmp	r8, r3
   d594e:	dd82      	ble.n	d5856 <__ieee754_pow+0x46>
   d5950:	ea4f 5328 	mov.w	r3, r8, asr #20
   d5954:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   d5958:	2b14      	cmp	r3, #20
   d595a:	f340 847f 	ble.w	d625c <__ieee754_pow+0xa4c>
   d595e:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
   d5962:	fa2e f203 	lsr.w	r2, lr, r3
   d5966:	fa02 f303 	lsl.w	r3, r2, r3
   d596a:	459e      	cmp	lr, r3
   d596c:	f47f af73 	bne.w	d5856 <__ieee754_pow+0x46>
   d5970:	f002 0201 	and.w	r2, r2, #1
   d5974:	f1c2 0b02 	rsb	fp, r2, #2
   d5978:	e76f      	b.n	d585a <__ieee754_pow+0x4a>
   d597a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
   d597e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   d5982:	ea53 030a 	orrs.w	r3, r3, sl
   d5986:	d08a      	beq.n	d589e <__ieee754_pow+0x8e>
   d5988:	4b1a      	ldr	r3, [pc, #104]	; (d59f4 <__ieee754_pow+0x1e4>)
   d598a:	429c      	cmp	r4, r3
   d598c:	f340 8385 	ble.w	d609a <__ieee754_pow+0x88a>
   d5990:	f1b9 0f00 	cmp.w	r9, #0
   d5994:	db13      	blt.n	d59be <__ieee754_pow+0x1ae>
   d5996:	ed9d 0b00 	vldr	d0, [sp]
   d599a:	e782      	b.n	d58a2 <__ieee754_pow+0x92>
   d599c:	f04f 0b02 	mov.w	fp, #2
   d59a0:	e75b      	b.n	d585a <__ieee754_pow+0x4a>
   d59a2:	4632      	mov	r2, r6
   d59a4:	463b      	mov	r3, r7
   d59a6:	4610      	mov	r0, r2
   d59a8:	4619      	mov	r1, r3
   d59aa:	f000 fed1 	bl	d6750 <__aeabi_dsub>
   d59ae:	4602      	mov	r2, r0
   d59b0:	460b      	mov	r3, r1
   d59b2:	f001 f9ab 	bl	d6d0c <__aeabi_ddiv>
   d59b6:	e7b6      	b.n	d5926 <__ieee754_pow+0x116>
   d59b8:	f1b9 0f00 	cmp.w	r9, #0
   d59bc:	db9c      	blt.n	d58f8 <__ieee754_pow+0xe8>
   d59be:	ed9f 0b06 	vldr	d0, [pc, #24]	; d59d8 <__ieee754_pow+0x1c8>
   d59c2:	e76e      	b.n	d58a2 <__ieee754_pow+0x92>
   d59c4:	f3af 8000 	nop.w
   d59c8:	00000000 	.word	0x00000000
   d59cc:	3ff00000 	.word	0x3ff00000
   d59d0:	8800759c 	.word	0x8800759c
   d59d4:	7e37e43c 	.word	0x7e37e43c
	...
   d59e0:	7ff00000 	.word	0x7ff00000
   d59e4:	3ff00000 	.word	0x3ff00000
   d59e8:	3fe00000 	.word	0x3fe00000
   d59ec:	000d742c 	.word	0x000d742c
   d59f0:	41e00000 	.word	0x41e00000
   d59f4:	3fefffff 	.word	0x3fefffff
   d59f8:	433fffff 	.word	0x433fffff
   d59fc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
   d5a00:	f04f 0200 	mov.w	r2, #0
   d5a04:	da05      	bge.n	d5a12 <__ieee754_pow+0x202>
   d5a06:	4bd6      	ldr	r3, [pc, #856]	; (d5d60 <__ieee754_pow+0x550>)
   d5a08:	f001 f856 	bl	d6ab8 <__aeabi_dmul>
   d5a0c:	f06f 0234 	mvn.w	r2, #52	; 0x34
   d5a10:	460c      	mov	r4, r1
   d5a12:	1523      	asrs	r3, r4, #20
   d5a14:	4ed3      	ldr	r6, [pc, #844]	; (d5d64 <__ieee754_pow+0x554>)
   d5a16:	f3c4 0413 	ubfx	r4, r4, #0, #20
   d5a1a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   d5a1e:	4413      	add	r3, r2
   d5a20:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
   d5a24:	42b4      	cmp	r4, r6
   d5a26:	461a      	mov	r2, r3
   d5a28:	930d      	str	r3, [sp, #52]	; 0x34
   d5a2a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
   d5a2e:	f340 8349 	ble.w	d60c4 <__ieee754_pow+0x8b4>
   d5a32:	4bcd      	ldr	r3, [pc, #820]	; (d5d68 <__ieee754_pow+0x558>)
   d5a34:	429c      	cmp	r4, r3
   d5a36:	f340 842d 	ble.w	d6294 <__ieee754_pow+0xa84>
   d5a3a:	ed9f 7bb3 	vldr	d7, [pc, #716]	; d5d08 <__ieee754_pow+0x4f8>
   d5a3e:	ed8d 7b08 	vstr	d7, [sp, #32]
   d5a42:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d5a46:	ed9f 7bb2 	vldr	d7, [pc, #712]	; d5d10 <__ieee754_pow+0x500>
   d5a4a:	4613      	mov	r3, r2
   d5a4c:	ed8d 7b06 	vstr	d7, [sp, #24]
   d5a50:	3301      	adds	r3, #1
   d5a52:	930d      	str	r3, [sp, #52]	; 0x34
   d5a54:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
   d5a58:	f04f 0800 	mov.w	r8, #0
   d5a5c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d5a60:	4629      	mov	r1, r5
   d5a62:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d5a66:	f000 fe73 	bl	d6750 <__aeabi_dsub>
   d5a6a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d5a6e:	4606      	mov	r6, r0
   d5a70:	460f      	mov	r7, r1
   d5a72:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d5a76:	f000 fe6d 	bl	d6754 <__adddf3>
   d5a7a:	4602      	mov	r2, r0
   d5a7c:	460b      	mov	r3, r1
   d5a7e:	2000      	movs	r0, #0
   d5a80:	49ba      	ldr	r1, [pc, #744]	; (d5d6c <__ieee754_pow+0x55c>)
   d5a82:	f001 f943 	bl	d6d0c <__aeabi_ddiv>
   d5a86:	4603      	mov	r3, r0
   d5a88:	460c      	mov	r4, r1
   d5a8a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
   d5a8e:	4602      	mov	r2, r0
   d5a90:	460b      	mov	r3, r1
   d5a92:	4630      	mov	r0, r6
   d5a94:	4639      	mov	r1, r7
   d5a96:	f001 f80f 	bl	d6ab8 <__aeabi_dmul>
   d5a9a:	106b      	asrs	r3, r5, #1
   d5a9c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   d5aa0:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
   d5aa4:	eb03 0508 	add.w	r5, r3, r8
   d5aa8:	460a      	mov	r2, r1
   d5aaa:	2300      	movs	r3, #0
   d5aac:	4601      	mov	r1, r0
   d5aae:	e9cd 1202 	strd	r1, r2, [sp, #8]
   d5ab2:	9302      	str	r3, [sp, #8]
   d5ab4:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
   d5ab8:	2400      	movs	r4, #0
   d5aba:	e9cd 1204 	strd	r1, r2, [sp, #16]
   d5abe:	462b      	mov	r3, r5
   d5ac0:	4622      	mov	r2, r4
   d5ac2:	4640      	mov	r0, r8
   d5ac4:	4649      	mov	r1, r9
   d5ac6:	f000 fff7 	bl	d6ab8 <__aeabi_dmul>
   d5aca:	4602      	mov	r2, r0
   d5acc:	460b      	mov	r3, r1
   d5ace:	4630      	mov	r0, r6
   d5ad0:	4639      	mov	r1, r7
   d5ad2:	f000 fe3d 	bl	d6750 <__aeabi_dsub>
   d5ad6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d5ada:	4606      	mov	r6, r0
   d5adc:	460f      	mov	r7, r1
   d5ade:	4620      	mov	r0, r4
   d5ae0:	4629      	mov	r1, r5
   d5ae2:	f000 fe35 	bl	d6750 <__aeabi_dsub>
   d5ae6:	4602      	mov	r2, r0
   d5ae8:	460b      	mov	r3, r1
   d5aea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d5aee:	f000 fe2f 	bl	d6750 <__aeabi_dsub>
   d5af2:	4642      	mov	r2, r8
   d5af4:	464b      	mov	r3, r9
   d5af6:	f000 ffdf 	bl	d6ab8 <__aeabi_dmul>
   d5afa:	4602      	mov	r2, r0
   d5afc:	460b      	mov	r3, r1
   d5afe:	4630      	mov	r0, r6
   d5b00:	4639      	mov	r1, r7
   d5b02:	f000 fe25 	bl	d6750 <__aeabi_dsub>
   d5b06:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   d5b0a:	f000 ffd5 	bl	d6ab8 <__aeabi_dmul>
   d5b0e:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
   d5b12:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d5b16:	4622      	mov	r2, r4
   d5b18:	462b      	mov	r3, r5
   d5b1a:	4620      	mov	r0, r4
   d5b1c:	4629      	mov	r1, r5
   d5b1e:	f000 ffcb 	bl	d6ab8 <__aeabi_dmul>
   d5b22:	a37d      	add	r3, pc, #500	; (adr r3, d5d18 <__ieee754_pow+0x508>)
   d5b24:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5b28:	4604      	mov	r4, r0
   d5b2a:	460d      	mov	r5, r1
   d5b2c:	f000 ffc4 	bl	d6ab8 <__aeabi_dmul>
   d5b30:	a37b      	add	r3, pc, #492	; (adr r3, d5d20 <__ieee754_pow+0x510>)
   d5b32:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5b36:	f000 fe0d 	bl	d6754 <__adddf3>
   d5b3a:	4622      	mov	r2, r4
   d5b3c:	462b      	mov	r3, r5
   d5b3e:	f000 ffbb 	bl	d6ab8 <__aeabi_dmul>
   d5b42:	a379      	add	r3, pc, #484	; (adr r3, d5d28 <__ieee754_pow+0x518>)
   d5b44:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5b48:	f000 fe04 	bl	d6754 <__adddf3>
   d5b4c:	4622      	mov	r2, r4
   d5b4e:	462b      	mov	r3, r5
   d5b50:	f000 ffb2 	bl	d6ab8 <__aeabi_dmul>
   d5b54:	a376      	add	r3, pc, #472	; (adr r3, d5d30 <__ieee754_pow+0x520>)
   d5b56:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5b5a:	f000 fdfb 	bl	d6754 <__adddf3>
   d5b5e:	4622      	mov	r2, r4
   d5b60:	462b      	mov	r3, r5
   d5b62:	f000 ffa9 	bl	d6ab8 <__aeabi_dmul>
   d5b66:	a374      	add	r3, pc, #464	; (adr r3, d5d38 <__ieee754_pow+0x528>)
   d5b68:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5b6c:	f000 fdf2 	bl	d6754 <__adddf3>
   d5b70:	4622      	mov	r2, r4
   d5b72:	462b      	mov	r3, r5
   d5b74:	f000 ffa0 	bl	d6ab8 <__aeabi_dmul>
   d5b78:	a371      	add	r3, pc, #452	; (adr r3, d5d40 <__ieee754_pow+0x530>)
   d5b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5b7e:	f000 fde9 	bl	d6754 <__adddf3>
   d5b82:	4622      	mov	r2, r4
   d5b84:	4606      	mov	r6, r0
   d5b86:	460f      	mov	r7, r1
   d5b88:	462b      	mov	r3, r5
   d5b8a:	4620      	mov	r0, r4
   d5b8c:	4629      	mov	r1, r5
   d5b8e:	f000 ff93 	bl	d6ab8 <__aeabi_dmul>
   d5b92:	4602      	mov	r2, r0
   d5b94:	460b      	mov	r3, r1
   d5b96:	4630      	mov	r0, r6
   d5b98:	4639      	mov	r1, r7
   d5b9a:	f000 ff8d 	bl	d6ab8 <__aeabi_dmul>
   d5b9e:	4642      	mov	r2, r8
   d5ba0:	4604      	mov	r4, r0
   d5ba2:	460d      	mov	r5, r1
   d5ba4:	464b      	mov	r3, r9
   d5ba6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d5baa:	f000 fdd3 	bl	d6754 <__adddf3>
   d5bae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d5bb2:	f000 ff81 	bl	d6ab8 <__aeabi_dmul>
   d5bb6:	4622      	mov	r2, r4
   d5bb8:	462b      	mov	r3, r5
   d5bba:	f000 fdcb 	bl	d6754 <__adddf3>
   d5bbe:	4642      	mov	r2, r8
   d5bc0:	4606      	mov	r6, r0
   d5bc2:	460f      	mov	r7, r1
   d5bc4:	464b      	mov	r3, r9
   d5bc6:	4640      	mov	r0, r8
   d5bc8:	4649      	mov	r1, r9
   d5bca:	f000 ff75 	bl	d6ab8 <__aeabi_dmul>
   d5bce:	2200      	movs	r2, #0
   d5bd0:	4b67      	ldr	r3, [pc, #412]	; (d5d70 <__ieee754_pow+0x560>)
   d5bd2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d5bd6:	f000 fdbd 	bl	d6754 <__adddf3>
   d5bda:	4632      	mov	r2, r6
   d5bdc:	463b      	mov	r3, r7
   d5bde:	f000 fdb9 	bl	d6754 <__adddf3>
   d5be2:	9802      	ldr	r0, [sp, #8]
   d5be4:	460d      	mov	r5, r1
   d5be6:	4604      	mov	r4, r0
   d5be8:	4622      	mov	r2, r4
   d5bea:	462b      	mov	r3, r5
   d5bec:	4640      	mov	r0, r8
   d5bee:	4649      	mov	r1, r9
   d5bf0:	f000 ff62 	bl	d6ab8 <__aeabi_dmul>
   d5bf4:	2200      	movs	r2, #0
   d5bf6:	4680      	mov	r8, r0
   d5bf8:	4689      	mov	r9, r1
   d5bfa:	4b5d      	ldr	r3, [pc, #372]	; (d5d70 <__ieee754_pow+0x560>)
   d5bfc:	4620      	mov	r0, r4
   d5bfe:	4629      	mov	r1, r5
   d5c00:	f000 fda6 	bl	d6750 <__aeabi_dsub>
   d5c04:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d5c08:	f000 fda2 	bl	d6750 <__aeabi_dsub>
   d5c0c:	4602      	mov	r2, r0
   d5c0e:	460b      	mov	r3, r1
   d5c10:	4630      	mov	r0, r6
   d5c12:	4639      	mov	r1, r7
   d5c14:	f000 fd9c 	bl	d6750 <__aeabi_dsub>
   d5c18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d5c1c:	f000 ff4c 	bl	d6ab8 <__aeabi_dmul>
   d5c20:	4622      	mov	r2, r4
   d5c22:	4606      	mov	r6, r0
   d5c24:	460f      	mov	r7, r1
   d5c26:	462b      	mov	r3, r5
   d5c28:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d5c2c:	f000 ff44 	bl	d6ab8 <__aeabi_dmul>
   d5c30:	4602      	mov	r2, r0
   d5c32:	460b      	mov	r3, r1
   d5c34:	4630      	mov	r0, r6
   d5c36:	4639      	mov	r1, r7
   d5c38:	f000 fd8c 	bl	d6754 <__adddf3>
   d5c3c:	4606      	mov	r6, r0
   d5c3e:	460f      	mov	r7, r1
   d5c40:	4602      	mov	r2, r0
   d5c42:	460b      	mov	r3, r1
   d5c44:	4640      	mov	r0, r8
   d5c46:	4649      	mov	r1, r9
   d5c48:	e9cd 8904 	strd	r8, r9, [sp, #16]
   d5c4c:	f000 fd82 	bl	d6754 <__adddf3>
   d5c50:	9802      	ldr	r0, [sp, #8]
   d5c52:	a33d      	add	r3, pc, #244	; (adr r3, d5d48 <__ieee754_pow+0x538>)
   d5c54:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5c58:	4604      	mov	r4, r0
   d5c5a:	460d      	mov	r5, r1
   d5c5c:	f000 ff2c 	bl	d6ab8 <__aeabi_dmul>
   d5c60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d5c64:	4680      	mov	r8, r0
   d5c66:	4689      	mov	r9, r1
   d5c68:	4620      	mov	r0, r4
   d5c6a:	4629      	mov	r1, r5
   d5c6c:	f000 fd70 	bl	d6750 <__aeabi_dsub>
   d5c70:	4602      	mov	r2, r0
   d5c72:	460b      	mov	r3, r1
   d5c74:	4630      	mov	r0, r6
   d5c76:	4639      	mov	r1, r7
   d5c78:	f000 fd6a 	bl	d6750 <__aeabi_dsub>
   d5c7c:	a334      	add	r3, pc, #208	; (adr r3, d5d50 <__ieee754_pow+0x540>)
   d5c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5c82:	f000 ff19 	bl	d6ab8 <__aeabi_dmul>
   d5c86:	a334      	add	r3, pc, #208	; (adr r3, d5d58 <__ieee754_pow+0x548>)
   d5c88:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5c8c:	4606      	mov	r6, r0
   d5c8e:	460f      	mov	r7, r1
   d5c90:	4620      	mov	r0, r4
   d5c92:	4629      	mov	r1, r5
   d5c94:	f000 ff10 	bl	d6ab8 <__aeabi_dmul>
   d5c98:	4602      	mov	r2, r0
   d5c9a:	460b      	mov	r3, r1
   d5c9c:	4630      	mov	r0, r6
   d5c9e:	4639      	mov	r1, r7
   d5ca0:	f000 fd58 	bl	d6754 <__adddf3>
   d5ca4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   d5ca8:	f000 fd54 	bl	d6754 <__adddf3>
   d5cac:	4606      	mov	r6, r0
   d5cae:	980d      	ldr	r0, [sp, #52]	; 0x34
   d5cb0:	460f      	mov	r7, r1
   d5cb2:	f000 fe9b 	bl	d69ec <__aeabi_i2d>
   d5cb6:	4632      	mov	r2, r6
   d5cb8:	4604      	mov	r4, r0
   d5cba:	460d      	mov	r5, r1
   d5cbc:	463b      	mov	r3, r7
   d5cbe:	4640      	mov	r0, r8
   d5cc0:	4649      	mov	r1, r9
   d5cc2:	f000 fd47 	bl	d6754 <__adddf3>
   d5cc6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d5cca:	f000 fd43 	bl	d6754 <__adddf3>
   d5cce:	4622      	mov	r2, r4
   d5cd0:	462b      	mov	r3, r5
   d5cd2:	f000 fd3f 	bl	d6754 <__adddf3>
   d5cd6:	9802      	ldr	r0, [sp, #8]
   d5cd8:	4622      	mov	r2, r4
   d5cda:	462b      	mov	r3, r5
   d5cdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d5ce0:	f000 fd36 	bl	d6750 <__aeabi_dsub>
   d5ce4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d5ce8:	f000 fd32 	bl	d6750 <__aeabi_dsub>
   d5cec:	4642      	mov	r2, r8
   d5cee:	464b      	mov	r3, r9
   d5cf0:	f000 fd2e 	bl	d6750 <__aeabi_dsub>
   d5cf4:	4602      	mov	r2, r0
   d5cf6:	460b      	mov	r3, r1
   d5cf8:	4630      	mov	r0, r6
   d5cfa:	4639      	mov	r1, r7
   d5cfc:	f000 fd28 	bl	d6750 <__aeabi_dsub>
   d5d00:	4680      	mov	r8, r0
   d5d02:	4689      	mov	r9, r1
   d5d04:	e036      	b.n	d5d74 <__ieee754_pow+0x564>
   d5d06:	bf00      	nop
	...
   d5d14:	3ff00000 	.word	0x3ff00000
   d5d18:	4a454eef 	.word	0x4a454eef
   d5d1c:	3fca7e28 	.word	0x3fca7e28
   d5d20:	93c9db65 	.word	0x93c9db65
   d5d24:	3fcd864a 	.word	0x3fcd864a
   d5d28:	a91d4101 	.word	0xa91d4101
   d5d2c:	3fd17460 	.word	0x3fd17460
   d5d30:	518f264d 	.word	0x518f264d
   d5d34:	3fd55555 	.word	0x3fd55555
   d5d38:	db6fabff 	.word	0xdb6fabff
   d5d3c:	3fdb6db6 	.word	0x3fdb6db6
   d5d40:	33333303 	.word	0x33333303
   d5d44:	3fe33333 	.word	0x3fe33333
   d5d48:	e0000000 	.word	0xe0000000
   d5d4c:	3feec709 	.word	0x3feec709
   d5d50:	dc3a03fd 	.word	0xdc3a03fd
   d5d54:	3feec709 	.word	0x3feec709
   d5d58:	145b01f5 	.word	0x145b01f5
   d5d5c:	be3e2fe0 	.word	0xbe3e2fe0
   d5d60:	43400000 	.word	0x43400000
   d5d64:	0003988e 	.word	0x0003988e
   d5d68:	000bb679 	.word	0x000bb679
   d5d6c:	3ff00000 	.word	0x3ff00000
   d5d70:	40080000 	.word	0x40080000
   d5d74:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
   d5d78:	ea53 030a 	orrs.w	r3, r3, sl
   d5d7c:	f000 8188 	beq.w	d6090 <__ieee754_pow+0x880>
   d5d80:	ed9f 7bd7 	vldr	d7, [pc, #860]	; d60e0 <__ieee754_pow+0x8d0>
   d5d84:	ed8d 7b06 	vstr	d7, [sp, #24]
   d5d88:	e9dd ab00 	ldrd	sl, fp, [sp]
   d5d8c:	4653      	mov	r3, sl
   d5d8e:	465c      	mov	r4, fp
   d5d90:	e9cd 3400 	strd	r3, r4, [sp]
   d5d94:	2300      	movs	r3, #0
   d5d96:	9300      	str	r3, [sp, #0]
   d5d98:	e9dd 4500 	ldrd	r4, r5, [sp]
   d5d9c:	4650      	mov	r0, sl
   d5d9e:	4622      	mov	r2, r4
   d5da0:	462b      	mov	r3, r5
   d5da2:	4659      	mov	r1, fp
   d5da4:	f000 fcd4 	bl	d6750 <__aeabi_dsub>
   d5da8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d5dac:	f000 fe84 	bl	d6ab8 <__aeabi_dmul>
   d5db0:	4652      	mov	r2, sl
   d5db2:	4606      	mov	r6, r0
   d5db4:	460f      	mov	r7, r1
   d5db6:	465b      	mov	r3, fp
   d5db8:	4640      	mov	r0, r8
   d5dba:	4649      	mov	r1, r9
   d5dbc:	f000 fe7c 	bl	d6ab8 <__aeabi_dmul>
   d5dc0:	4602      	mov	r2, r0
   d5dc2:	460b      	mov	r3, r1
   d5dc4:	4630      	mov	r0, r6
   d5dc6:	4639      	mov	r1, r7
   d5dc8:	f000 fcc4 	bl	d6754 <__adddf3>
   d5dcc:	4622      	mov	r2, r4
   d5dce:	4680      	mov	r8, r0
   d5dd0:	4689      	mov	r9, r1
   d5dd2:	462b      	mov	r3, r5
   d5dd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d5dd8:	e9cd 8904 	strd	r8, r9, [sp, #16]
   d5ddc:	f000 fe6c 	bl	d6ab8 <__aeabi_dmul>
   d5de0:	460b      	mov	r3, r1
   d5de2:	4602      	mov	r2, r0
   d5de4:	4606      	mov	r6, r0
   d5de6:	460f      	mov	r7, r1
   d5de8:	4640      	mov	r0, r8
   d5dea:	4649      	mov	r1, r9
   d5dec:	f000 fcb2 	bl	d6754 <__adddf3>
   d5df0:	4bd5      	ldr	r3, [pc, #852]	; (d6148 <__ieee754_pow+0x938>)
   d5df2:	4299      	cmp	r1, r3
   d5df4:	4604      	mov	r4, r0
   d5df6:	460d      	mov	r5, r1
   d5df8:	468a      	mov	sl, r1
   d5dfa:	f340 8123 	ble.w	d6044 <__ieee754_pow+0x834>
   d5dfe:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   d5e02:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   d5e06:	4303      	orrs	r3, r0
   d5e08:	f040 8218 	bne.w	d623c <__ieee754_pow+0xa2c>
   d5e0c:	a3b6      	add	r3, pc, #728	; (adr r3, d60e8 <__ieee754_pow+0x8d8>)
   d5e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5e12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d5e16:	f000 fc9d 	bl	d6754 <__adddf3>
   d5e1a:	4632      	mov	r2, r6
   d5e1c:	4680      	mov	r8, r0
   d5e1e:	4689      	mov	r9, r1
   d5e20:	463b      	mov	r3, r7
   d5e22:	4620      	mov	r0, r4
   d5e24:	4629      	mov	r1, r5
   d5e26:	f000 fc93 	bl	d6750 <__aeabi_dsub>
   d5e2a:	4602      	mov	r2, r0
   d5e2c:	460b      	mov	r3, r1
   d5e2e:	4640      	mov	r0, r8
   d5e30:	4649      	mov	r1, r9
   d5e32:	f001 f8d1 	bl	d6fd8 <__aeabi_dcmpgt>
   d5e36:	2800      	cmp	r0, #0
   d5e38:	f040 8200 	bne.w	d623c <__ieee754_pow+0xa2c>
   d5e3c:	46a8      	mov	r8, r5
   d5e3e:	ea4f 5328 	mov.w	r3, r8, asr #20
   d5e42:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   d5e46:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   d5e4a:	fa42 f303 	asr.w	r3, r2, r3
   d5e4e:	4453      	add	r3, sl
   d5e50:	f3c3 520a 	ubfx	r2, r3, #20, #11
   d5e54:	4dbd      	ldr	r5, [pc, #756]	; (d614c <__ieee754_pow+0x93c>)
   d5e56:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   d5e5a:	4115      	asrs	r5, r2
   d5e5c:	f3c3 0b13 	ubfx	fp, r3, #0, #20
   d5e60:	2000      	movs	r0, #0
   d5e62:	f1c2 0414 	rsb	r4, r2, #20
   d5e66:	ea23 0105 	bic.w	r1, r3, r5
   d5e6a:	f44b 1b80 	orr.w	fp, fp, #1048576	; 0x100000
   d5e6e:	f1ba 0f00 	cmp.w	sl, #0
   d5e72:	4602      	mov	r2, r0
   d5e74:	460b      	mov	r3, r1
   d5e76:	fa4b fb04 	asr.w	fp, fp, r4
   d5e7a:	4630      	mov	r0, r6
   d5e7c:	4639      	mov	r1, r7
   d5e7e:	bfb8      	it	lt
   d5e80:	f1cb 0b00 	rsblt	fp, fp, #0
   d5e84:	f000 fc64 	bl	d6750 <__aeabi_dsub>
   d5e88:	4602      	mov	r2, r0
   d5e8a:	460b      	mov	r3, r1
   d5e8c:	4606      	mov	r6, r0
   d5e8e:	460f      	mov	r7, r1
   d5e90:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d5e94:	f000 fc5e 	bl	d6754 <__adddf3>
   d5e98:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
   d5e9c:	2400      	movs	r4, #0
   d5e9e:	a394      	add	r3, pc, #592	; (adr r3, d60f0 <__ieee754_pow+0x8e0>)
   d5ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5ea4:	4620      	mov	r0, r4
   d5ea6:	460d      	mov	r5, r1
   d5ea8:	f000 fe06 	bl	d6ab8 <__aeabi_dmul>
   d5eac:	4632      	mov	r2, r6
   d5eae:	4680      	mov	r8, r0
   d5eb0:	4689      	mov	r9, r1
   d5eb2:	463b      	mov	r3, r7
   d5eb4:	4620      	mov	r0, r4
   d5eb6:	4629      	mov	r1, r5
   d5eb8:	f000 fc4a 	bl	d6750 <__aeabi_dsub>
   d5ebc:	4602      	mov	r2, r0
   d5ebe:	460b      	mov	r3, r1
   d5ec0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d5ec4:	f000 fc44 	bl	d6750 <__aeabi_dsub>
   d5ec8:	a38b      	add	r3, pc, #556	; (adr r3, d60f8 <__ieee754_pow+0x8e8>)
   d5eca:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5ece:	f000 fdf3 	bl	d6ab8 <__aeabi_dmul>
   d5ed2:	a38b      	add	r3, pc, #556	; (adr r3, d6100 <__ieee754_pow+0x8f0>)
   d5ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5ed8:	4606      	mov	r6, r0
   d5eda:	460f      	mov	r7, r1
   d5edc:	4620      	mov	r0, r4
   d5ede:	4629      	mov	r1, r5
   d5ee0:	f000 fdea 	bl	d6ab8 <__aeabi_dmul>
   d5ee4:	4602      	mov	r2, r0
   d5ee6:	460b      	mov	r3, r1
   d5ee8:	4630      	mov	r0, r6
   d5eea:	4639      	mov	r1, r7
   d5eec:	f000 fc32 	bl	d6754 <__adddf3>
   d5ef0:	4606      	mov	r6, r0
   d5ef2:	460f      	mov	r7, r1
   d5ef4:	4602      	mov	r2, r0
   d5ef6:	460b      	mov	r3, r1
   d5ef8:	4640      	mov	r0, r8
   d5efa:	4649      	mov	r1, r9
   d5efc:	f000 fc2a 	bl	d6754 <__adddf3>
   d5f00:	4642      	mov	r2, r8
   d5f02:	464b      	mov	r3, r9
   d5f04:	4604      	mov	r4, r0
   d5f06:	460d      	mov	r5, r1
   d5f08:	f000 fc22 	bl	d6750 <__aeabi_dsub>
   d5f0c:	4602      	mov	r2, r0
   d5f0e:	460b      	mov	r3, r1
   d5f10:	4630      	mov	r0, r6
   d5f12:	4639      	mov	r1, r7
   d5f14:	f000 fc1c 	bl	d6750 <__aeabi_dsub>
   d5f18:	4622      	mov	r2, r4
   d5f1a:	4680      	mov	r8, r0
   d5f1c:	4689      	mov	r9, r1
   d5f1e:	462b      	mov	r3, r5
   d5f20:	4620      	mov	r0, r4
   d5f22:	4629      	mov	r1, r5
   d5f24:	f000 fdc8 	bl	d6ab8 <__aeabi_dmul>
   d5f28:	a377      	add	r3, pc, #476	; (adr r3, d6108 <__ieee754_pow+0x8f8>)
   d5f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5f2e:	4606      	mov	r6, r0
   d5f30:	460f      	mov	r7, r1
   d5f32:	f000 fdc1 	bl	d6ab8 <__aeabi_dmul>
   d5f36:	a376      	add	r3, pc, #472	; (adr r3, d6110 <__ieee754_pow+0x900>)
   d5f38:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5f3c:	f000 fc08 	bl	d6750 <__aeabi_dsub>
   d5f40:	4632      	mov	r2, r6
   d5f42:	463b      	mov	r3, r7
   d5f44:	f000 fdb8 	bl	d6ab8 <__aeabi_dmul>
   d5f48:	a373      	add	r3, pc, #460	; (adr r3, d6118 <__ieee754_pow+0x908>)
   d5f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5f4e:	f000 fc01 	bl	d6754 <__adddf3>
   d5f52:	4632      	mov	r2, r6
   d5f54:	463b      	mov	r3, r7
   d5f56:	f000 fdaf 	bl	d6ab8 <__aeabi_dmul>
   d5f5a:	a371      	add	r3, pc, #452	; (adr r3, d6120 <__ieee754_pow+0x910>)
   d5f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5f60:	f000 fbf6 	bl	d6750 <__aeabi_dsub>
   d5f64:	4632      	mov	r2, r6
   d5f66:	463b      	mov	r3, r7
   d5f68:	f000 fda6 	bl	d6ab8 <__aeabi_dmul>
   d5f6c:	a36e      	add	r3, pc, #440	; (adr r3, d6128 <__ieee754_pow+0x918>)
   d5f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5f72:	f000 fbef 	bl	d6754 <__adddf3>
   d5f76:	4632      	mov	r2, r6
   d5f78:	463b      	mov	r3, r7
   d5f7a:	f000 fd9d 	bl	d6ab8 <__aeabi_dmul>
   d5f7e:	4602      	mov	r2, r0
   d5f80:	460b      	mov	r3, r1
   d5f82:	4620      	mov	r0, r4
   d5f84:	4629      	mov	r1, r5
   d5f86:	f000 fbe3 	bl	d6750 <__aeabi_dsub>
   d5f8a:	4606      	mov	r6, r0
   d5f8c:	460f      	mov	r7, r1
   d5f8e:	4602      	mov	r2, r0
   d5f90:	460b      	mov	r3, r1
   d5f92:	4620      	mov	r0, r4
   d5f94:	4629      	mov	r1, r5
   d5f96:	f000 fd8f 	bl	d6ab8 <__aeabi_dmul>
   d5f9a:	2200      	movs	r2, #0
   d5f9c:	e9cd 0100 	strd	r0, r1, [sp]
   d5fa0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d5fa4:	4630      	mov	r0, r6
   d5fa6:	4639      	mov	r1, r7
   d5fa8:	f000 fbd2 	bl	d6750 <__aeabi_dsub>
   d5fac:	4602      	mov	r2, r0
   d5fae:	460b      	mov	r3, r1
   d5fb0:	e9dd 0100 	ldrd	r0, r1, [sp]
   d5fb4:	f000 feaa 	bl	d6d0c <__aeabi_ddiv>
   d5fb8:	4642      	mov	r2, r8
   d5fba:	4606      	mov	r6, r0
   d5fbc:	460f      	mov	r7, r1
   d5fbe:	464b      	mov	r3, r9
   d5fc0:	4620      	mov	r0, r4
   d5fc2:	4629      	mov	r1, r5
   d5fc4:	f000 fd78 	bl	d6ab8 <__aeabi_dmul>
   d5fc8:	4642      	mov	r2, r8
   d5fca:	464b      	mov	r3, r9
   d5fcc:	f000 fbc2 	bl	d6754 <__adddf3>
   d5fd0:	4602      	mov	r2, r0
   d5fd2:	460b      	mov	r3, r1
   d5fd4:	4630      	mov	r0, r6
   d5fd6:	4639      	mov	r1, r7
   d5fd8:	f000 fbba 	bl	d6750 <__aeabi_dsub>
   d5fdc:	4622      	mov	r2, r4
   d5fde:	462b      	mov	r3, r5
   d5fe0:	f000 fbb6 	bl	d6750 <__aeabi_dsub>
   d5fe4:	4602      	mov	r2, r0
   d5fe6:	460b      	mov	r3, r1
   d5fe8:	2000      	movs	r0, #0
   d5fea:	4959      	ldr	r1, [pc, #356]	; (d6150 <__ieee754_pow+0x940>)
   d5fec:	f000 fbb0 	bl	d6750 <__aeabi_dsub>
   d5ff0:	448a      	add	sl, r1
   d5ff2:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
   d5ff6:	4602      	mov	r2, r0
   d5ff8:	460b      	mov	r3, r1
   d5ffa:	f2c0 815b 	blt.w	d62b4 <__ieee754_pow+0xaa4>
   d5ffe:	4651      	mov	r1, sl
   d6000:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d6004:	f000 fd58 	bl	d6ab8 <__aeabi_dmul>
   d6008:	ec41 0b10 	vmov	d0, r0, r1
   d600c:	e449      	b.n	d58a2 <__ieee754_pow+0x92>
   d600e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
   d6012:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
   d6016:	ea54 030b 	orrs.w	r3, r4, fp
   d601a:	f000 8137 	beq.w	d628c <__ieee754_pow+0xa7c>
   d601e:	f1bb 0f01 	cmp.w	fp, #1
   d6022:	f47f ac80 	bne.w	d5926 <__ieee754_pow+0x116>
   d6026:	4602      	mov	r2, r0
   d6028:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d602c:	ec43 2b10 	vmov	d0, r2, r3
   d6030:	e437      	b.n	d58a2 <__ieee754_pow+0x92>
   d6032:	4632      	mov	r2, r6
   d6034:	463b      	mov	r3, r7
   d6036:	4630      	mov	r0, r6
   d6038:	4639      	mov	r1, r7
   d603a:	f000 fd3d 	bl	d6ab8 <__aeabi_dmul>
   d603e:	ec41 0b10 	vmov	d0, r0, r1
   d6042:	e42e      	b.n	d58a2 <__ieee754_pow+0x92>
   d6044:	4b43      	ldr	r3, [pc, #268]	; (d6154 <__ieee754_pow+0x944>)
   d6046:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   d604a:	4598      	cmp	r8, r3
   d604c:	f340 8115 	ble.w	d627a <__ieee754_pow+0xa6a>
   d6050:	4b41      	ldr	r3, [pc, #260]	; (d6158 <__ieee754_pow+0x948>)
   d6052:	440b      	add	r3, r1
   d6054:	4303      	orrs	r3, r0
   d6056:	d10c      	bne.n	d6072 <__ieee754_pow+0x862>
   d6058:	4632      	mov	r2, r6
   d605a:	463b      	mov	r3, r7
   d605c:	f000 fb78 	bl	d6750 <__aeabi_dsub>
   d6060:	4602      	mov	r2, r0
   d6062:	460b      	mov	r3, r1
   d6064:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d6068:	f000 ffa2 	bl	d6fb0 <__aeabi_dcmple>
   d606c:	2800      	cmp	r0, #0
   d606e:	f43f aee6 	beq.w	d5e3e <__ieee754_pow+0x62e>
   d6072:	a32f      	add	r3, pc, #188	; (adr r3, d6130 <__ieee754_pow+0x920>)
   d6074:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6078:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d607c:	f000 fd1c 	bl	d6ab8 <__aeabi_dmul>
   d6080:	a32b      	add	r3, pc, #172	; (adr r3, d6130 <__ieee754_pow+0x920>)
   d6082:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6086:	f000 fd17 	bl	d6ab8 <__aeabi_dmul>
   d608a:	ec41 0b10 	vmov	d0, r0, r1
   d608e:	e408      	b.n	d58a2 <__ieee754_pow+0x92>
   d6090:	ed9f 7b29 	vldr	d7, [pc, #164]	; d6138 <__ieee754_pow+0x928>
   d6094:	ed8d 7b06 	vstr	d7, [sp, #24]
   d6098:	e676      	b.n	d5d88 <__ieee754_pow+0x578>
   d609a:	f1b9 0f00 	cmp.w	r9, #0
   d609e:	f6bf ac8e 	bge.w	d59be <__ieee754_pow+0x1ae>
   d60a2:	e9dd 3400 	ldrd	r3, r4, [sp]
   d60a6:	ee00 3a10 	vmov	s0, r3
   d60aa:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
   d60ae:	ee00 3a90 	vmov	s1, r3
   d60b2:	f7ff bbf6 	b.w	d58a2 <__ieee754_pow+0x92>
   d60b6:	4602      	mov	r2, r0
   d60b8:	460b      	mov	r3, r1
   d60ba:	2000      	movs	r0, #0
   d60bc:	4924      	ldr	r1, [pc, #144]	; (d6150 <__ieee754_pow+0x940>)
   d60be:	f000 fe25 	bl	d6d0c <__aeabi_ddiv>
   d60c2:	e42d      	b.n	d5920 <__ieee754_pow+0x110>
   d60c4:	ed9f 7b1e 	vldr	d7, [pc, #120]	; d6140 <__ieee754_pow+0x930>
   d60c8:	ed8d 7b08 	vstr	d7, [sp, #32]
   d60cc:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d60d0:	ed9f 7b03 	vldr	d7, [pc, #12]	; d60e0 <__ieee754_pow+0x8d0>
   d60d4:	f04f 0800 	mov.w	r8, #0
   d60d8:	ed8d 7b06 	vstr	d7, [sp, #24]
   d60dc:	e4be      	b.n	d5a5c <__ieee754_pow+0x24c>
   d60de:	bf00      	nop
   d60e0:	00000000 	.word	0x00000000
   d60e4:	3ff00000 	.word	0x3ff00000
   d60e8:	652b82fe 	.word	0x652b82fe
   d60ec:	3c971547 	.word	0x3c971547
   d60f0:	00000000 	.word	0x00000000
   d60f4:	3fe62e43 	.word	0x3fe62e43
   d60f8:	fefa39ef 	.word	0xfefa39ef
   d60fc:	3fe62e42 	.word	0x3fe62e42
   d6100:	0ca86c39 	.word	0x0ca86c39
   d6104:	be205c61 	.word	0xbe205c61
   d6108:	72bea4d0 	.word	0x72bea4d0
   d610c:	3e663769 	.word	0x3e663769
   d6110:	c5d26bf1 	.word	0xc5d26bf1
   d6114:	3ebbbd41 	.word	0x3ebbbd41
   d6118:	af25de2c 	.word	0xaf25de2c
   d611c:	3f11566a 	.word	0x3f11566a
   d6120:	16bebd93 	.word	0x16bebd93
   d6124:	3f66c16c 	.word	0x3f66c16c
   d6128:	5555553e 	.word	0x5555553e
   d612c:	3fc55555 	.word	0x3fc55555
   d6130:	c2f8f359 	.word	0xc2f8f359
   d6134:	01a56e1f 	.word	0x01a56e1f
   d6138:	00000000 	.word	0x00000000
   d613c:	bff00000 	.word	0xbff00000
	...
   d6148:	408fffff 	.word	0x408fffff
   d614c:	000fffff 	.word	0x000fffff
   d6150:	3ff00000 	.word	0x3ff00000
   d6154:	4090cbff 	.word	0x4090cbff
   d6158:	3f6f3400 	.word	0x3f6f3400
   d615c:	4b6c      	ldr	r3, [pc, #432]	; (d6310 <__ieee754_pow+0xb00>)
   d615e:	429c      	cmp	r4, r3
   d6160:	f77f ac2a 	ble.w	d59b8 <__ieee754_pow+0x1a8>
   d6164:	4b6b      	ldr	r3, [pc, #428]	; (d6314 <__ieee754_pow+0xb04>)
   d6166:	429c      	cmp	r4, r3
   d6168:	f73f abc3 	bgt.w	d58f2 <__ieee754_pow+0xe2>
   d616c:	2200      	movs	r2, #0
   d616e:	4b69      	ldr	r3, [pc, #420]	; (d6314 <__ieee754_pow+0xb04>)
   d6170:	f000 faee 	bl	d6750 <__aeabi_dsub>
   d6174:	a356      	add	r3, pc, #344	; (adr r3, d62d0 <__ieee754_pow+0xac0>)
   d6176:	e9d3 2300 	ldrd	r2, r3, [r3]
   d617a:	4604      	mov	r4, r0
   d617c:	460d      	mov	r5, r1
   d617e:	f000 fc9b 	bl	d6ab8 <__aeabi_dmul>
   d6182:	a355      	add	r3, pc, #340	; (adr r3, d62d8 <__ieee754_pow+0xac8>)
   d6184:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6188:	4680      	mov	r8, r0
   d618a:	4689      	mov	r9, r1
   d618c:	4620      	mov	r0, r4
   d618e:	4629      	mov	r1, r5
   d6190:	f000 fc92 	bl	d6ab8 <__aeabi_dmul>
   d6194:	2200      	movs	r2, #0
   d6196:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d619a:	4b5f      	ldr	r3, [pc, #380]	; (d6318 <__ieee754_pow+0xb08>)
   d619c:	4620      	mov	r0, r4
   d619e:	4629      	mov	r1, r5
   d61a0:	f000 fc8a 	bl	d6ab8 <__aeabi_dmul>
   d61a4:	4602      	mov	r2, r0
   d61a6:	460b      	mov	r3, r1
   d61a8:	a14d      	add	r1, pc, #308	; (adr r1, d62e0 <__ieee754_pow+0xad0>)
   d61aa:	e9d1 0100 	ldrd	r0, r1, [r1]
   d61ae:	f000 facf 	bl	d6750 <__aeabi_dsub>
   d61b2:	4622      	mov	r2, r4
   d61b4:	462b      	mov	r3, r5
   d61b6:	f000 fc7f 	bl	d6ab8 <__aeabi_dmul>
   d61ba:	4602      	mov	r2, r0
   d61bc:	460b      	mov	r3, r1
   d61be:	2000      	movs	r0, #0
   d61c0:	4956      	ldr	r1, [pc, #344]	; (d631c <__ieee754_pow+0xb0c>)
   d61c2:	f000 fac5 	bl	d6750 <__aeabi_dsub>
   d61c6:	4622      	mov	r2, r4
   d61c8:	462b      	mov	r3, r5
   d61ca:	4606      	mov	r6, r0
   d61cc:	460f      	mov	r7, r1
   d61ce:	4620      	mov	r0, r4
   d61d0:	4629      	mov	r1, r5
   d61d2:	f000 fc71 	bl	d6ab8 <__aeabi_dmul>
   d61d6:	4602      	mov	r2, r0
   d61d8:	460b      	mov	r3, r1
   d61da:	4630      	mov	r0, r6
   d61dc:	4639      	mov	r1, r7
   d61de:	f000 fc6b 	bl	d6ab8 <__aeabi_dmul>
   d61e2:	a341      	add	r3, pc, #260	; (adr r3, d62e8 <__ieee754_pow+0xad8>)
   d61e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d61e8:	f000 fc66 	bl	d6ab8 <__aeabi_dmul>
   d61ec:	4602      	mov	r2, r0
   d61ee:	460b      	mov	r3, r1
   d61f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d61f4:	f000 faac 	bl	d6750 <__aeabi_dsub>
   d61f8:	4602      	mov	r2, r0
   d61fa:	460b      	mov	r3, r1
   d61fc:	4604      	mov	r4, r0
   d61fe:	460d      	mov	r5, r1
   d6200:	4640      	mov	r0, r8
   d6202:	4649      	mov	r1, r9
   d6204:	f000 faa6 	bl	d6754 <__adddf3>
   d6208:	4642      	mov	r2, r8
   d620a:	464b      	mov	r3, r9
   d620c:	2000      	movs	r0, #0
   d620e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d6212:	f000 fa9d 	bl	d6750 <__aeabi_dsub>
   d6216:	4602      	mov	r2, r0
   d6218:	460b      	mov	r3, r1
   d621a:	4620      	mov	r0, r4
   d621c:	4629      	mov	r1, r5
   d621e:	f000 fa97 	bl	d6750 <__aeabi_dsub>
   d6222:	4680      	mov	r8, r0
   d6224:	4689      	mov	r9, r1
   d6226:	e5a5      	b.n	d5d74 <__ieee754_pow+0x564>
   d6228:	4632      	mov	r2, r6
   d622a:	463b      	mov	r3, r7
   d622c:	2000      	movs	r0, #0
   d622e:	4939      	ldr	r1, [pc, #228]	; (d6314 <__ieee754_pow+0xb04>)
   d6230:	f000 fd6c 	bl	d6d0c <__aeabi_ddiv>
   d6234:	ec41 0b10 	vmov	d0, r0, r1
   d6238:	f7ff bb33 	b.w	d58a2 <__ieee754_pow+0x92>
   d623c:	a32c      	add	r3, pc, #176	; (adr r3, d62f0 <__ieee754_pow+0xae0>)
   d623e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6242:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d6246:	f000 fc37 	bl	d6ab8 <__aeabi_dmul>
   d624a:	a329      	add	r3, pc, #164	; (adr r3, d62f0 <__ieee754_pow+0xae0>)
   d624c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6250:	f000 fc32 	bl	d6ab8 <__aeabi_dmul>
   d6254:	ec41 0b10 	vmov	d0, r0, r1
   d6258:	f7ff bb23 	b.w	d58a2 <__ieee754_pow+0x92>
   d625c:	f1be 0f00 	cmp.w	lr, #0
   d6260:	f47f ab2a 	bne.w	d58b8 <__ieee754_pow+0xa8>
   d6264:	f1c3 0314 	rsb	r3, r3, #20
   d6268:	fa48 f203 	asr.w	r2, r8, r3
   d626c:	fa02 f303 	lsl.w	r3, r2, r3
   d6270:	4598      	cmp	r8, r3
   d6272:	d027      	beq.n	d62c4 <__ieee754_pow+0xab4>
   d6274:	46f3      	mov	fp, lr
   d6276:	f7ff baf7 	b.w	d5868 <__ieee754_pow+0x58>
   d627a:	4b28      	ldr	r3, [pc, #160]	; (d631c <__ieee754_pow+0xb0c>)
   d627c:	4598      	cmp	r8, r3
   d627e:	f73f adde 	bgt.w	d5e3e <__ieee754_pow+0x62e>
   d6282:	e9dd 3400 	ldrd	r3, r4, [sp]
   d6286:	469a      	mov	sl, r3
   d6288:	469b      	mov	fp, r3
   d628a:	e607      	b.n	d5e9c <__ieee754_pow+0x68c>
   d628c:	4602      	mov	r2, r0
   d628e:	460b      	mov	r3, r1
   d6290:	f7ff bb89 	b.w	d59a6 <__ieee754_pow+0x196>
   d6294:	ed9f 7b18 	vldr	d7, [pc, #96]	; d62f8 <__ieee754_pow+0xae8>
   d6298:	ed8d 7b08 	vstr	d7, [sp, #32]
   d629c:	ed9f 7b18 	vldr	d7, [pc, #96]	; d6300 <__ieee754_pow+0xaf0>
   d62a0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d62a4:	ed9f 7b18 	vldr	d7, [pc, #96]	; d6308 <__ieee754_pow+0xaf8>
   d62a8:	f44f 2880 	mov.w	r8, #262144	; 0x40000
   d62ac:	ed8d 7b06 	vstr	d7, [sp, #24]
   d62b0:	f7ff bbd4 	b.w	d5a5c <__ieee754_pow+0x24c>
   d62b4:	4658      	mov	r0, fp
   d62b6:	ec43 2b10 	vmov	d0, r2, r3
   d62ba:	f000 f9b1 	bl	d6620 <scalbn>
   d62be:	ec51 0b10 	vmov	r0, r1, d0
   d62c2:	e69d      	b.n	d6000 <__ieee754_pow+0x7f0>
   d62c4:	f002 0201 	and.w	r2, r2, #1
   d62c8:	f1c2 0b02 	rsb	fp, r2, #2
   d62cc:	f7ff bacc 	b.w	d5868 <__ieee754_pow+0x58>
   d62d0:	60000000 	.word	0x60000000
   d62d4:	3ff71547 	.word	0x3ff71547
   d62d8:	f85ddf44 	.word	0xf85ddf44
   d62dc:	3e54ae0b 	.word	0x3e54ae0b
   d62e0:	55555555 	.word	0x55555555
   d62e4:	3fd55555 	.word	0x3fd55555
   d62e8:	652b82fe 	.word	0x652b82fe
   d62ec:	3ff71547 	.word	0x3ff71547
   d62f0:	8800759c 	.word	0x8800759c
   d62f4:	7e37e43c 	.word	0x7e37e43c
   d62f8:	40000000 	.word	0x40000000
   d62fc:	3fe2b803 	.word	0x3fe2b803
   d6300:	43cfd006 	.word	0x43cfd006
   d6304:	3e4cfdeb 	.word	0x3e4cfdeb
   d6308:	00000000 	.word	0x00000000
   d630c:	3ff80000 	.word	0x3ff80000
   d6310:	3feffffe 	.word	0x3feffffe
   d6314:	3ff00000 	.word	0x3ff00000
   d6318:	3fd00000 	.word	0x3fd00000
   d631c:	3fe00000 	.word	0x3fe00000

000d6320 <__ieee754_sqrt>:
   d6320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6324:	4965      	ldr	r1, [pc, #404]	; (d64bc <__ieee754_sqrt+0x19c>)
   d6326:	ec55 4b10 	vmov	r4, r5, d0
   d632a:	460e      	mov	r6, r1
   d632c:	4029      	ands	r1, r5
   d632e:	42b1      	cmp	r1, r6
   d6330:	f000 8097 	beq.w	d6462 <__ieee754_sqrt+0x142>
   d6334:	2d00      	cmp	r5, #0
   d6336:	462b      	mov	r3, r5
   d6338:	ee10 2a10 	vmov	r2, s0
   d633c:	dd74      	ble.n	d6428 <__ieee754_sqrt+0x108>
   d633e:	152f      	asrs	r7, r5, #20
   d6340:	d07f      	beq.n	d6442 <__ieee754_sqrt+0x122>
   d6342:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   d6346:	f3c3 0313 	ubfx	r3, r3, #0, #20
   d634a:	07f9      	lsls	r1, r7, #31
   d634c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6350:	d465      	bmi.n	d641e <__ieee754_sqrt+0xfe>
   d6352:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
   d6356:	2600      	movs	r6, #0
   d6358:	440b      	add	r3, r1
   d635a:	107f      	asrs	r7, r7, #1
   d635c:	0052      	lsls	r2, r2, #1
   d635e:	46b6      	mov	lr, r6
   d6360:	2016      	movs	r0, #22
   d6362:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   d6366:	eb0e 0401 	add.w	r4, lr, r1
   d636a:	429c      	cmp	r4, r3
   d636c:	ea4f 75d2 	mov.w	r5, r2, lsr #31
   d6370:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d6374:	dc03      	bgt.n	d637e <__ieee754_sqrt+0x5e>
   d6376:	1b1b      	subs	r3, r3, r4
   d6378:	eb04 0e01 	add.w	lr, r4, r1
   d637c:	440e      	add	r6, r1
   d637e:	3801      	subs	r0, #1
   d6380:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   d6384:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d6388:	d1ed      	bne.n	d6366 <__ieee754_sqrt+0x46>
   d638a:	4684      	mov	ip, r0
   d638c:	2420      	movs	r4, #32
   d638e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   d6392:	e009      	b.n	d63a8 <__ieee754_sqrt+0x88>
   d6394:	d020      	beq.n	d63d8 <__ieee754_sqrt+0xb8>
   d6396:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   d639a:	3c01      	subs	r4, #1
   d639c:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d63a0:	442b      	add	r3, r5
   d63a2:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d63a6:	d020      	beq.n	d63ea <__ieee754_sqrt+0xca>
   d63a8:	459e      	cmp	lr, r3
   d63aa:	eb01 050c 	add.w	r5, r1, ip
   d63ae:	daf1      	bge.n	d6394 <__ieee754_sqrt+0x74>
   d63b0:	2d00      	cmp	r5, #0
   d63b2:	eb05 0c01 	add.w	ip, r5, r1
   d63b6:	db09      	blt.n	d63cc <__ieee754_sqrt+0xac>
   d63b8:	46f0      	mov	r8, lr
   d63ba:	4295      	cmp	r5, r2
   d63bc:	ebce 0303 	rsb	r3, lr, r3
   d63c0:	d900      	bls.n	d63c4 <__ieee754_sqrt+0xa4>
   d63c2:	3b01      	subs	r3, #1
   d63c4:	1b52      	subs	r2, r2, r5
   d63c6:	4408      	add	r0, r1
   d63c8:	46c6      	mov	lr, r8
   d63ca:	e7e4      	b.n	d6396 <__ieee754_sqrt+0x76>
   d63cc:	f1bc 0f00 	cmp.w	ip, #0
   d63d0:	dbf2      	blt.n	d63b8 <__ieee754_sqrt+0x98>
   d63d2:	f10e 0801 	add.w	r8, lr, #1
   d63d6:	e7f0      	b.n	d63ba <__ieee754_sqrt+0x9a>
   d63d8:	4295      	cmp	r5, r2
   d63da:	d81e      	bhi.n	d641a <__ieee754_sqrt+0xfa>
   d63dc:	2d00      	cmp	r5, #0
   d63de:	eb05 0c01 	add.w	ip, r5, r1
   d63e2:	db50      	blt.n	d6486 <__ieee754_sqrt+0x166>
   d63e4:	4698      	mov	r8, r3
   d63e6:	2300      	movs	r3, #0
   d63e8:	e7ec      	b.n	d63c4 <__ieee754_sqrt+0xa4>
   d63ea:	4313      	orrs	r3, r2
   d63ec:	d004      	beq.n	d63f8 <__ieee754_sqrt+0xd8>
   d63ee:	1c42      	adds	r2, r0, #1
   d63f0:	d04d      	beq.n	d648e <__ieee754_sqrt+0x16e>
   d63f2:	f000 0301 	and.w	r3, r0, #1
   d63f6:	4418      	add	r0, r3
   d63f8:	0840      	lsrs	r0, r0, #1
   d63fa:	1071      	asrs	r1, r6, #1
   d63fc:	07f3      	lsls	r3, r6, #31
   d63fe:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   d6402:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   d6406:	bf48      	it	mi
   d6408:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   d640c:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   d6410:	4602      	mov	r2, r0
   d6412:	ec43 2b10 	vmov	d0, r2, r3
   d6416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d641a:	4673      	mov	r3, lr
   d641c:	e7bb      	b.n	d6396 <__ieee754_sqrt+0x76>
   d641e:	005b      	lsls	r3, r3, #1
   d6420:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   d6424:	0052      	lsls	r2, r2, #1
   d6426:	e794      	b.n	d6352 <__ieee754_sqrt+0x32>
   d6428:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
   d642c:	4321      	orrs	r1, r4
   d642e:	d028      	beq.n	d6482 <__ieee754_sqrt+0x162>
   d6430:	bbad      	cbnz	r5, d649e <__ieee754_sqrt+0x17e>
   d6432:	462f      	mov	r7, r5
   d6434:	0ad3      	lsrs	r3, r2, #11
   d6436:	3f15      	subs	r7, #21
   d6438:	0552      	lsls	r2, r2, #21
   d643a:	2b00      	cmp	r3, #0
   d643c:	d0fa      	beq.n	d6434 <__ieee754_sqrt+0x114>
   d643e:	02dd      	lsls	r5, r3, #11
   d6440:	d428      	bmi.n	d6494 <__ieee754_sqrt+0x174>
   d6442:	2100      	movs	r1, #0
   d6444:	e000      	b.n	d6448 <__ieee754_sqrt+0x128>
   d6446:	4601      	mov	r1, r0
   d6448:	005b      	lsls	r3, r3, #1
   d644a:	02dc      	lsls	r4, r3, #11
   d644c:	f101 0001 	add.w	r0, r1, #1
   d6450:	d5f9      	bpl.n	d6446 <__ieee754_sqrt+0x126>
   d6452:	f1c0 0420 	rsb	r4, r0, #32
   d6456:	fa22 f404 	lsr.w	r4, r2, r4
   d645a:	4323      	orrs	r3, r4
   d645c:	1a7f      	subs	r7, r7, r1
   d645e:	4082      	lsls	r2, r0
   d6460:	e76f      	b.n	d6342 <__ieee754_sqrt+0x22>
   d6462:	ee10 2a10 	vmov	r2, s0
   d6466:	462b      	mov	r3, r5
   d6468:	ee10 0a10 	vmov	r0, s0
   d646c:	4629      	mov	r1, r5
   d646e:	f000 fb23 	bl	d6ab8 <__aeabi_dmul>
   d6472:	4622      	mov	r2, r4
   d6474:	462b      	mov	r3, r5
   d6476:	f000 f96d 	bl	d6754 <__adddf3>
   d647a:	ec41 0b10 	vmov	d0, r0, r1
   d647e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6486:	f1bc 0f00 	cmp.w	ip, #0
   d648a:	daa2      	bge.n	d63d2 <__ieee754_sqrt+0xb2>
   d648c:	e7aa      	b.n	d63e4 <__ieee754_sqrt+0xc4>
   d648e:	3601      	adds	r6, #1
   d6490:	4620      	mov	r0, r4
   d6492:	e7b2      	b.n	d63fa <__ieee754_sqrt+0xda>
   d6494:	2420      	movs	r4, #32
   d6496:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d649a:	2000      	movs	r0, #0
   d649c:	e7db      	b.n	d6456 <__ieee754_sqrt+0x136>
   d649e:	ee10 2a10 	vmov	r2, s0
   d64a2:	462b      	mov	r3, r5
   d64a4:	4620      	mov	r0, r4
   d64a6:	4629      	mov	r1, r5
   d64a8:	f000 f952 	bl	d6750 <__aeabi_dsub>
   d64ac:	4602      	mov	r2, r0
   d64ae:	460b      	mov	r3, r1
   d64b0:	f000 fc2c 	bl	d6d0c <__aeabi_ddiv>
   d64b4:	ec41 0b10 	vmov	d0, r0, r1
   d64b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d64bc:	7ff00000 	.word	0x7ff00000

000d64c0 <fabs>:
   d64c0:	ec53 2b10 	vmov	r2, r3, d0
   d64c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   d64c8:	ec43 2b10 	vmov	d0, r2, r3
   d64cc:	4770      	bx	lr
   d64ce:	bf00      	nop

000d64d0 <finite>:
   d64d0:	ee10 3a90 	vmov	r3, s1
   d64d4:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
   d64d8:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   d64dc:	0fc0      	lsrs	r0, r0, #31
   d64de:	4770      	bx	lr

000d64e0 <matherr>:
   d64e0:	2000      	movs	r0, #0
   d64e2:	4770      	bx	lr
   d64e4:	0000      	movs	r0, r0
	...

000d64e8 <nan>:
   d64e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; d64f0 <nan+0x8>
   d64ec:	4770      	bx	lr
   d64ee:	bf00      	nop
   d64f0:	00000000 	.word	0x00000000
   d64f4:	7ff80000 	.word	0x7ff80000

000d64f8 <rint>:
   d64f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d64fa:	ec53 2b10 	vmov	r2, r3, d0
   d64fe:	f3c3 560a 	ubfx	r6, r3, #20, #11
   d6502:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   d6506:	2813      	cmp	r0, #19
   d6508:	b083      	sub	sp, #12
   d650a:	4619      	mov	r1, r3
   d650c:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   d6510:	ee10 5a10 	vmov	r5, s0
   d6514:	dc2f      	bgt.n	d6576 <rint+0x7e>
   d6516:	2800      	cmp	r0, #0
   d6518:	db49      	blt.n	d65ae <rint+0xb6>
   d651a:	4e3f      	ldr	r6, [pc, #252]	; (d6618 <rint+0x120>)
   d651c:	4106      	asrs	r6, r0
   d651e:	ea03 0706 	and.w	r7, r3, r6
   d6522:	4317      	orrs	r7, r2
   d6524:	d02c      	beq.n	d6580 <rint+0x88>
   d6526:	0876      	lsrs	r6, r6, #1
   d6528:	4033      	ands	r3, r6
   d652a:	431d      	orrs	r5, r3
   d652c:	d00c      	beq.n	d6548 <rint+0x50>
   d652e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   d6532:	2813      	cmp	r0, #19
   d6534:	ea21 0606 	bic.w	r6, r1, r6
   d6538:	fa43 f100 	asr.w	r1, r3, r0
   d653c:	ea41 0106 	orr.w	r1, r1, r6
   d6540:	bf0c      	ite	eq
   d6542:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   d6546:	2500      	movne	r5, #0
   d6548:	4834      	ldr	r0, [pc, #208]	; (d661c <rint+0x124>)
   d654a:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   d654e:	462a      	mov	r2, r5
   d6550:	e9d4 4500 	ldrd	r4, r5, [r4]
   d6554:	4610      	mov	r0, r2
   d6556:	462b      	mov	r3, r5
   d6558:	4622      	mov	r2, r4
   d655a:	f000 f8fb 	bl	d6754 <__adddf3>
   d655e:	e9cd 0100 	strd	r0, r1, [sp]
   d6562:	4622      	mov	r2, r4
   d6564:	462b      	mov	r3, r5
   d6566:	e9dd 0100 	ldrd	r0, r1, [sp]
   d656a:	f000 f8f1 	bl	d6750 <__aeabi_dsub>
   d656e:	ec41 0b10 	vmov	d0, r0, r1
   d6572:	b003      	add	sp, #12
   d6574:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6576:	2833      	cmp	r0, #51	; 0x33
   d6578:	dd06      	ble.n	d6588 <rint+0x90>
   d657a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   d657e:	d042      	beq.n	d6606 <rint+0x10e>
   d6580:	ec43 2b10 	vmov	d0, r2, r3
   d6584:	b003      	add	sp, #12
   d6586:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6588:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   d658c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d6590:	40f0      	lsrs	r0, r6
   d6592:	4202      	tst	r2, r0
   d6594:	d0f4      	beq.n	d6580 <rint+0x88>
   d6596:	0840      	lsrs	r0, r0, #1
   d6598:	4202      	tst	r2, r0
   d659a:	d0d5      	beq.n	d6548 <rint+0x50>
   d659c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d65a0:	ea25 0000 	bic.w	r0, r5, r0
   d65a4:	fa43 f606 	asr.w	r6, r3, r6
   d65a8:	ea46 0500 	orr.w	r5, r6, r0
   d65ac:	e7cc      	b.n	d6548 <rint+0x50>
   d65ae:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   d65b2:	4310      	orrs	r0, r2
   d65b4:	ee10 7a10 	vmov	r7, s0
   d65b8:	d0e2      	beq.n	d6580 <rint+0x88>
   d65ba:	f3c3 0013 	ubfx	r0, r3, #0, #20
   d65be:	4307      	orrs	r7, r0
   d65c0:	4278      	negs	r0, r7
   d65c2:	4307      	orrs	r7, r0
   d65c4:	4815      	ldr	r0, [pc, #84]	; (d661c <rint+0x124>)
   d65c6:	0c59      	lsrs	r1, r3, #17
   d65c8:	0b3f      	lsrs	r7, r7, #12
   d65ca:	0449      	lsls	r1, r1, #17
   d65cc:	f407 2700 	and.w	r7, r7, #524288	; 0x80000
   d65d0:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   d65d4:	ea47 0301 	orr.w	r3, r7, r1
   d65d8:	e9d0 6700 	ldrd	r6, r7, [r0]
   d65dc:	4619      	mov	r1, r3
   d65de:	4610      	mov	r0, r2
   d65e0:	463b      	mov	r3, r7
   d65e2:	4632      	mov	r2, r6
   d65e4:	f000 f8b6 	bl	d6754 <__adddf3>
   d65e8:	e9cd 0100 	strd	r0, r1, [sp]
   d65ec:	463b      	mov	r3, r7
   d65ee:	4632      	mov	r2, r6
   d65f0:	e9dd 0100 	ldrd	r0, r1, [sp]
   d65f4:	f000 f8ac 	bl	d6750 <__aeabi_dsub>
   d65f8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d65fc:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   d6600:	ec41 0b10 	vmov	d0, r0, r1
   d6604:	e7be      	b.n	d6584 <rint+0x8c>
   d6606:	ee10 0a10 	vmov	r0, s0
   d660a:	4619      	mov	r1, r3
   d660c:	f000 f8a2 	bl	d6754 <__adddf3>
   d6610:	ec41 0b10 	vmov	d0, r0, r1
   d6614:	e7b6      	b.n	d6584 <rint+0x8c>
   d6616:	bf00      	nop
   d6618:	000fffff 	.word	0x000fffff
   d661c:	000d7430 	.word	0x000d7430

000d6620 <scalbn>:
   d6620:	ec53 2b10 	vmov	r2, r3, d0
   d6624:	b570      	push	{r4, r5, r6, lr}
   d6626:	f3c3 540a 	ubfx	r4, r3, #20, #11
   d662a:	4619      	mov	r1, r3
   d662c:	4605      	mov	r5, r0
   d662e:	bb14      	cbnz	r4, d6676 <scalbn+0x56>
   d6630:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   d6634:	4311      	orrs	r1, r2
   d6636:	d02a      	beq.n	d668e <scalbn+0x6e>
   d6638:	4619      	mov	r1, r3
   d663a:	2200      	movs	r2, #0
   d663c:	4b38      	ldr	r3, [pc, #224]	; (d6720 <scalbn+0x100>)
   d663e:	4e39      	ldr	r6, [pc, #228]	; (d6724 <scalbn+0x104>)
   d6640:	ee10 0a10 	vmov	r0, s0
   d6644:	f000 fa38 	bl	d6ab8 <__aeabi_dmul>
   d6648:	42b5      	cmp	r5, r6
   d664a:	4602      	mov	r2, r0
   d664c:	460b      	mov	r3, r1
   d664e:	db1f      	blt.n	d6690 <scalbn+0x70>
   d6650:	f3c1 540a 	ubfx	r4, r1, #20, #11
   d6654:	3c36      	subs	r4, #54	; 0x36
   d6656:	442c      	add	r4, r5
   d6658:	f240 70fe 	movw	r0, #2046	; 0x7fe
   d665c:	4284      	cmp	r4, r0
   d665e:	dc1f      	bgt.n	d66a0 <scalbn+0x80>
   d6660:	2c00      	cmp	r4, #0
   d6662:	dd2d      	ble.n	d66c0 <scalbn+0xa0>
   d6664:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   d6668:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   d666c:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   d6670:	ec43 2b10 	vmov	d0, r2, r3
   d6674:	bd70      	pop	{r4, r5, r6, pc}
   d6676:	f240 70ff 	movw	r0, #2047	; 0x7ff
   d667a:	4284      	cmp	r4, r0
   d667c:	d1eb      	bne.n	d6656 <scalbn+0x36>
   d667e:	ee10 0a10 	vmov	r0, s0
   d6682:	4619      	mov	r1, r3
   d6684:	f000 f866 	bl	d6754 <__adddf3>
   d6688:	ec41 0b10 	vmov	d0, r0, r1
   d668c:	bd70      	pop	{r4, r5, r6, pc}
   d668e:	bd70      	pop	{r4, r5, r6, pc}
   d6690:	a31f      	add	r3, pc, #124	; (adr r3, d6710 <scalbn+0xf0>)
   d6692:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6696:	f000 fa0f 	bl	d6ab8 <__aeabi_dmul>
   d669a:	ec41 0b10 	vmov	d0, r0, r1
   d669e:	bd70      	pop	{r4, r5, r6, pc}
   d66a0:	ec43 2b11 	vmov	d1, r2, r3
   d66a4:	ed9f 0b1c 	vldr	d0, [pc, #112]	; d6718 <scalbn+0xf8>
   d66a8:	f000 f840 	bl	d672c <copysign>
   d66ac:	a31a      	add	r3, pc, #104	; (adr r3, d6718 <scalbn+0xf8>)
   d66ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   d66b2:	ec51 0b10 	vmov	r0, r1, d0
   d66b6:	f000 f9ff 	bl	d6ab8 <__aeabi_dmul>
   d66ba:	ec41 0b10 	vmov	d0, r0, r1
   d66be:	bd70      	pop	{r4, r5, r6, pc}
   d66c0:	f114 0f35 	cmn.w	r4, #53	; 0x35
   d66c4:	da13      	bge.n	d66ee <scalbn+0xce>
   d66c6:	f24c 3150 	movw	r1, #50000	; 0xc350
   d66ca:	428d      	cmp	r5, r1
   d66cc:	ec43 2b11 	vmov	d1, r2, r3
   d66d0:	dce8      	bgt.n	d66a4 <scalbn+0x84>
   d66d2:	ed9f 0b0f 	vldr	d0, [pc, #60]	; d6710 <scalbn+0xf0>
   d66d6:	f000 f829 	bl	d672c <copysign>
   d66da:	a30d      	add	r3, pc, #52	; (adr r3, d6710 <scalbn+0xf0>)
   d66dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d66e0:	ec51 0b10 	vmov	r0, r1, d0
   d66e4:	f000 f9e8 	bl	d6ab8 <__aeabi_dmul>
   d66e8:	ec41 0b10 	vmov	d0, r0, r1
   d66ec:	bd70      	pop	{r4, r5, r6, pc}
   d66ee:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   d66f2:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   d66f6:	3436      	adds	r4, #54	; 0x36
   d66f8:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   d66fc:	4610      	mov	r0, r2
   d66fe:	4619      	mov	r1, r3
   d6700:	2200      	movs	r2, #0
   d6702:	4b09      	ldr	r3, [pc, #36]	; (d6728 <scalbn+0x108>)
   d6704:	f000 f9d8 	bl	d6ab8 <__aeabi_dmul>
   d6708:	ec41 0b10 	vmov	d0, r0, r1
   d670c:	bd70      	pop	{r4, r5, r6, pc}
   d670e:	bf00      	nop
   d6710:	c2f8f359 	.word	0xc2f8f359
   d6714:	01a56e1f 	.word	0x01a56e1f
   d6718:	8800759c 	.word	0x8800759c
   d671c:	7e37e43c 	.word	0x7e37e43c
   d6720:	43500000 	.word	0x43500000
   d6724:	ffff3cb0 	.word	0xffff3cb0
   d6728:	3c900000 	.word	0x3c900000

000d672c <copysign>:
   d672c:	ec53 2b10 	vmov	r2, r3, d0
   d6730:	ee11 0a90 	vmov	r0, s3
   d6734:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   d6738:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   d673c:	ea41 0300 	orr.w	r3, r1, r0
   d6740:	ec43 2b10 	vmov	d0, r2, r3
   d6744:	4770      	bx	lr
   d6746:	bf00      	nop

000d6748 <__aeabi_drsub>:
   d6748:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d674c:	e002      	b.n	d6754 <__adddf3>
   d674e:	bf00      	nop

000d6750 <__aeabi_dsub>:
   d6750:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d6754 <__adddf3>:
   d6754:	b530      	push	{r4, r5, lr}
   d6756:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d675a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d675e:	ea94 0f05 	teq	r4, r5
   d6762:	bf08      	it	eq
   d6764:	ea90 0f02 	teqeq	r0, r2
   d6768:	bf1f      	itttt	ne
   d676a:	ea54 0c00 	orrsne.w	ip, r4, r0
   d676e:	ea55 0c02 	orrsne.w	ip, r5, r2
   d6772:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d6776:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d677a:	f000 80e2 	beq.w	d6942 <__adddf3+0x1ee>
   d677e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d6782:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d6786:	bfb8      	it	lt
   d6788:	426d      	neglt	r5, r5
   d678a:	dd0c      	ble.n	d67a6 <__adddf3+0x52>
   d678c:	442c      	add	r4, r5
   d678e:	ea80 0202 	eor.w	r2, r0, r2
   d6792:	ea81 0303 	eor.w	r3, r1, r3
   d6796:	ea82 0000 	eor.w	r0, r2, r0
   d679a:	ea83 0101 	eor.w	r1, r3, r1
   d679e:	ea80 0202 	eor.w	r2, r0, r2
   d67a2:	ea81 0303 	eor.w	r3, r1, r3
   d67a6:	2d36      	cmp	r5, #54	; 0x36
   d67a8:	bf88      	it	hi
   d67aa:	bd30      	pophi	{r4, r5, pc}
   d67ac:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d67b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d67b4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d67b8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d67bc:	d002      	beq.n	d67c4 <__adddf3+0x70>
   d67be:	4240      	negs	r0, r0
   d67c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d67c4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d67c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d67cc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d67d0:	d002      	beq.n	d67d8 <__adddf3+0x84>
   d67d2:	4252      	negs	r2, r2
   d67d4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d67d8:	ea94 0f05 	teq	r4, r5
   d67dc:	f000 80a7 	beq.w	d692e <__adddf3+0x1da>
   d67e0:	f1a4 0401 	sub.w	r4, r4, #1
   d67e4:	f1d5 0e20 	rsbs	lr, r5, #32
   d67e8:	db0d      	blt.n	d6806 <__adddf3+0xb2>
   d67ea:	fa02 fc0e 	lsl.w	ip, r2, lr
   d67ee:	fa22 f205 	lsr.w	r2, r2, r5
   d67f2:	1880      	adds	r0, r0, r2
   d67f4:	f141 0100 	adc.w	r1, r1, #0
   d67f8:	fa03 f20e 	lsl.w	r2, r3, lr
   d67fc:	1880      	adds	r0, r0, r2
   d67fe:	fa43 f305 	asr.w	r3, r3, r5
   d6802:	4159      	adcs	r1, r3
   d6804:	e00e      	b.n	d6824 <__adddf3+0xd0>
   d6806:	f1a5 0520 	sub.w	r5, r5, #32
   d680a:	f10e 0e20 	add.w	lr, lr, #32
   d680e:	2a01      	cmp	r2, #1
   d6810:	fa03 fc0e 	lsl.w	ip, r3, lr
   d6814:	bf28      	it	cs
   d6816:	f04c 0c02 	orrcs.w	ip, ip, #2
   d681a:	fa43 f305 	asr.w	r3, r3, r5
   d681e:	18c0      	adds	r0, r0, r3
   d6820:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d6824:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6828:	d507      	bpl.n	d683a <__adddf3+0xe6>
   d682a:	f04f 0e00 	mov.w	lr, #0
   d682e:	f1dc 0c00 	rsbs	ip, ip, #0
   d6832:	eb7e 0000 	sbcs.w	r0, lr, r0
   d6836:	eb6e 0101 	sbc.w	r1, lr, r1
   d683a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d683e:	d31b      	bcc.n	d6878 <__adddf3+0x124>
   d6840:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d6844:	d30c      	bcc.n	d6860 <__adddf3+0x10c>
   d6846:	0849      	lsrs	r1, r1, #1
   d6848:	ea5f 0030 	movs.w	r0, r0, rrx
   d684c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d6850:	f104 0401 	add.w	r4, r4, #1
   d6854:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d6858:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d685c:	f080 809a 	bcs.w	d6994 <__adddf3+0x240>
   d6860:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d6864:	bf08      	it	eq
   d6866:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d686a:	f150 0000 	adcs.w	r0, r0, #0
   d686e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6872:	ea41 0105 	orr.w	r1, r1, r5
   d6876:	bd30      	pop	{r4, r5, pc}
   d6878:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d687c:	4140      	adcs	r0, r0
   d687e:	eb41 0101 	adc.w	r1, r1, r1
   d6882:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6886:	f1a4 0401 	sub.w	r4, r4, #1
   d688a:	d1e9      	bne.n	d6860 <__adddf3+0x10c>
   d688c:	f091 0f00 	teq	r1, #0
   d6890:	bf04      	itt	eq
   d6892:	4601      	moveq	r1, r0
   d6894:	2000      	moveq	r0, #0
   d6896:	fab1 f381 	clz	r3, r1
   d689a:	bf08      	it	eq
   d689c:	3320      	addeq	r3, #32
   d689e:	f1a3 030b 	sub.w	r3, r3, #11
   d68a2:	f1b3 0220 	subs.w	r2, r3, #32
   d68a6:	da0c      	bge.n	d68c2 <__adddf3+0x16e>
   d68a8:	320c      	adds	r2, #12
   d68aa:	dd08      	ble.n	d68be <__adddf3+0x16a>
   d68ac:	f102 0c14 	add.w	ip, r2, #20
   d68b0:	f1c2 020c 	rsb	r2, r2, #12
   d68b4:	fa01 f00c 	lsl.w	r0, r1, ip
   d68b8:	fa21 f102 	lsr.w	r1, r1, r2
   d68bc:	e00c      	b.n	d68d8 <__adddf3+0x184>
   d68be:	f102 0214 	add.w	r2, r2, #20
   d68c2:	bfd8      	it	le
   d68c4:	f1c2 0c20 	rsble	ip, r2, #32
   d68c8:	fa01 f102 	lsl.w	r1, r1, r2
   d68cc:	fa20 fc0c 	lsr.w	ip, r0, ip
   d68d0:	bfdc      	itt	le
   d68d2:	ea41 010c 	orrle.w	r1, r1, ip
   d68d6:	4090      	lslle	r0, r2
   d68d8:	1ae4      	subs	r4, r4, r3
   d68da:	bfa2      	ittt	ge
   d68dc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d68e0:	4329      	orrge	r1, r5
   d68e2:	bd30      	popge	{r4, r5, pc}
   d68e4:	ea6f 0404 	mvn.w	r4, r4
   d68e8:	3c1f      	subs	r4, #31
   d68ea:	da1c      	bge.n	d6926 <__adddf3+0x1d2>
   d68ec:	340c      	adds	r4, #12
   d68ee:	dc0e      	bgt.n	d690e <__adddf3+0x1ba>
   d68f0:	f104 0414 	add.w	r4, r4, #20
   d68f4:	f1c4 0220 	rsb	r2, r4, #32
   d68f8:	fa20 f004 	lsr.w	r0, r0, r4
   d68fc:	fa01 f302 	lsl.w	r3, r1, r2
   d6900:	ea40 0003 	orr.w	r0, r0, r3
   d6904:	fa21 f304 	lsr.w	r3, r1, r4
   d6908:	ea45 0103 	orr.w	r1, r5, r3
   d690c:	bd30      	pop	{r4, r5, pc}
   d690e:	f1c4 040c 	rsb	r4, r4, #12
   d6912:	f1c4 0220 	rsb	r2, r4, #32
   d6916:	fa20 f002 	lsr.w	r0, r0, r2
   d691a:	fa01 f304 	lsl.w	r3, r1, r4
   d691e:	ea40 0003 	orr.w	r0, r0, r3
   d6922:	4629      	mov	r1, r5
   d6924:	bd30      	pop	{r4, r5, pc}
   d6926:	fa21 f004 	lsr.w	r0, r1, r4
   d692a:	4629      	mov	r1, r5
   d692c:	bd30      	pop	{r4, r5, pc}
   d692e:	f094 0f00 	teq	r4, #0
   d6932:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d6936:	bf06      	itte	eq
   d6938:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d693c:	3401      	addeq	r4, #1
   d693e:	3d01      	subne	r5, #1
   d6940:	e74e      	b.n	d67e0 <__adddf3+0x8c>
   d6942:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6946:	bf18      	it	ne
   d6948:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d694c:	d029      	beq.n	d69a2 <__adddf3+0x24e>
   d694e:	ea94 0f05 	teq	r4, r5
   d6952:	bf08      	it	eq
   d6954:	ea90 0f02 	teqeq	r0, r2
   d6958:	d005      	beq.n	d6966 <__adddf3+0x212>
   d695a:	ea54 0c00 	orrs.w	ip, r4, r0
   d695e:	bf04      	itt	eq
   d6960:	4619      	moveq	r1, r3
   d6962:	4610      	moveq	r0, r2
   d6964:	bd30      	pop	{r4, r5, pc}
   d6966:	ea91 0f03 	teq	r1, r3
   d696a:	bf1e      	ittt	ne
   d696c:	2100      	movne	r1, #0
   d696e:	2000      	movne	r0, #0
   d6970:	bd30      	popne	{r4, r5, pc}
   d6972:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d6976:	d105      	bne.n	d6984 <__adddf3+0x230>
   d6978:	0040      	lsls	r0, r0, #1
   d697a:	4149      	adcs	r1, r1
   d697c:	bf28      	it	cs
   d697e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d6982:	bd30      	pop	{r4, r5, pc}
   d6984:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d6988:	bf3c      	itt	cc
   d698a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d698e:	bd30      	popcc	{r4, r5, pc}
   d6990:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6994:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d6998:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d699c:	f04f 0000 	mov.w	r0, #0
   d69a0:	bd30      	pop	{r4, r5, pc}
   d69a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d69a6:	bf1a      	itte	ne
   d69a8:	4619      	movne	r1, r3
   d69aa:	4610      	movne	r0, r2
   d69ac:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d69b0:	bf1c      	itt	ne
   d69b2:	460b      	movne	r3, r1
   d69b4:	4602      	movne	r2, r0
   d69b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d69ba:	bf06      	itte	eq
   d69bc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d69c0:	ea91 0f03 	teqeq	r1, r3
   d69c4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d69c8:	bd30      	pop	{r4, r5, pc}
   d69ca:	bf00      	nop

000d69cc <__aeabi_ui2d>:
   d69cc:	f090 0f00 	teq	r0, #0
   d69d0:	bf04      	itt	eq
   d69d2:	2100      	moveq	r1, #0
   d69d4:	4770      	bxeq	lr
   d69d6:	b530      	push	{r4, r5, lr}
   d69d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d69dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d69e0:	f04f 0500 	mov.w	r5, #0
   d69e4:	f04f 0100 	mov.w	r1, #0
   d69e8:	e750      	b.n	d688c <__adddf3+0x138>
   d69ea:	bf00      	nop

000d69ec <__aeabi_i2d>:
   d69ec:	f090 0f00 	teq	r0, #0
   d69f0:	bf04      	itt	eq
   d69f2:	2100      	moveq	r1, #0
   d69f4:	4770      	bxeq	lr
   d69f6:	b530      	push	{r4, r5, lr}
   d69f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d69fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6a00:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d6a04:	bf48      	it	mi
   d6a06:	4240      	negmi	r0, r0
   d6a08:	f04f 0100 	mov.w	r1, #0
   d6a0c:	e73e      	b.n	d688c <__adddf3+0x138>
   d6a0e:	bf00      	nop

000d6a10 <__aeabi_f2d>:
   d6a10:	0042      	lsls	r2, r0, #1
   d6a12:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d6a16:	ea4f 0131 	mov.w	r1, r1, rrx
   d6a1a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d6a1e:	bf1f      	itttt	ne
   d6a20:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d6a24:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6a28:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d6a2c:	4770      	bxne	lr
   d6a2e:	f092 0f00 	teq	r2, #0
   d6a32:	bf14      	ite	ne
   d6a34:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6a38:	4770      	bxeq	lr
   d6a3a:	b530      	push	{r4, r5, lr}
   d6a3c:	f44f 7460 	mov.w	r4, #896	; 0x380
   d6a40:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6a44:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6a48:	e720      	b.n	d688c <__adddf3+0x138>
   d6a4a:	bf00      	nop

000d6a4c <__aeabi_ul2d>:
   d6a4c:	ea50 0201 	orrs.w	r2, r0, r1
   d6a50:	bf08      	it	eq
   d6a52:	4770      	bxeq	lr
   d6a54:	b530      	push	{r4, r5, lr}
   d6a56:	f04f 0500 	mov.w	r5, #0
   d6a5a:	e00a      	b.n	d6a72 <__aeabi_l2d+0x16>

000d6a5c <__aeabi_l2d>:
   d6a5c:	ea50 0201 	orrs.w	r2, r0, r1
   d6a60:	bf08      	it	eq
   d6a62:	4770      	bxeq	lr
   d6a64:	b530      	push	{r4, r5, lr}
   d6a66:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d6a6a:	d502      	bpl.n	d6a72 <__aeabi_l2d+0x16>
   d6a6c:	4240      	negs	r0, r0
   d6a6e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6a72:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6a76:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6a7a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d6a7e:	f43f aedc 	beq.w	d683a <__adddf3+0xe6>
   d6a82:	f04f 0203 	mov.w	r2, #3
   d6a86:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6a8a:	bf18      	it	ne
   d6a8c:	3203      	addne	r2, #3
   d6a8e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6a92:	bf18      	it	ne
   d6a94:	3203      	addne	r2, #3
   d6a96:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d6a9a:	f1c2 0320 	rsb	r3, r2, #32
   d6a9e:	fa00 fc03 	lsl.w	ip, r0, r3
   d6aa2:	fa20 f002 	lsr.w	r0, r0, r2
   d6aa6:	fa01 fe03 	lsl.w	lr, r1, r3
   d6aaa:	ea40 000e 	orr.w	r0, r0, lr
   d6aae:	fa21 f102 	lsr.w	r1, r1, r2
   d6ab2:	4414      	add	r4, r2
   d6ab4:	e6c1      	b.n	d683a <__adddf3+0xe6>
   d6ab6:	bf00      	nop

000d6ab8 <__aeabi_dmul>:
   d6ab8:	b570      	push	{r4, r5, r6, lr}
   d6aba:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6abe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6ac2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6ac6:	bf1d      	ittte	ne
   d6ac8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6acc:	ea94 0f0c 	teqne	r4, ip
   d6ad0:	ea95 0f0c 	teqne	r5, ip
   d6ad4:	f000 f8de 	bleq	d6c94 <__aeabi_dmul+0x1dc>
   d6ad8:	442c      	add	r4, r5
   d6ada:	ea81 0603 	eor.w	r6, r1, r3
   d6ade:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d6ae2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d6ae6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d6aea:	bf18      	it	ne
   d6aec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d6af0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6af4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6af8:	d038      	beq.n	d6b6c <__aeabi_dmul+0xb4>
   d6afa:	fba0 ce02 	umull	ip, lr, r0, r2
   d6afe:	f04f 0500 	mov.w	r5, #0
   d6b02:	fbe1 e502 	umlal	lr, r5, r1, r2
   d6b06:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d6b0a:	fbe0 e503 	umlal	lr, r5, r0, r3
   d6b0e:	f04f 0600 	mov.w	r6, #0
   d6b12:	fbe1 5603 	umlal	r5, r6, r1, r3
   d6b16:	f09c 0f00 	teq	ip, #0
   d6b1a:	bf18      	it	ne
   d6b1c:	f04e 0e01 	orrne.w	lr, lr, #1
   d6b20:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d6b24:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6b28:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d6b2c:	d204      	bcs.n	d6b38 <__aeabi_dmul+0x80>
   d6b2e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d6b32:	416d      	adcs	r5, r5
   d6b34:	eb46 0606 	adc.w	r6, r6, r6
   d6b38:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d6b3c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d6b40:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d6b44:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d6b48:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d6b4c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6b50:	bf88      	it	hi
   d6b52:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6b56:	d81e      	bhi.n	d6b96 <__aeabi_dmul+0xde>
   d6b58:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d6b5c:	bf08      	it	eq
   d6b5e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d6b62:	f150 0000 	adcs.w	r0, r0, #0
   d6b66:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6b6a:	bd70      	pop	{r4, r5, r6, pc}
   d6b6c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d6b70:	ea46 0101 	orr.w	r1, r6, r1
   d6b74:	ea40 0002 	orr.w	r0, r0, r2
   d6b78:	ea81 0103 	eor.w	r1, r1, r3
   d6b7c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d6b80:	bfc2      	ittt	gt
   d6b82:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6b86:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6b8a:	bd70      	popgt	{r4, r5, r6, pc}
   d6b8c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6b90:	f04f 0e00 	mov.w	lr, #0
   d6b94:	3c01      	subs	r4, #1
   d6b96:	f300 80ab 	bgt.w	d6cf0 <__aeabi_dmul+0x238>
   d6b9a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d6b9e:	bfde      	ittt	le
   d6ba0:	2000      	movle	r0, #0
   d6ba2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d6ba6:	bd70      	pople	{r4, r5, r6, pc}
   d6ba8:	f1c4 0400 	rsb	r4, r4, #0
   d6bac:	3c20      	subs	r4, #32
   d6bae:	da35      	bge.n	d6c1c <__aeabi_dmul+0x164>
   d6bb0:	340c      	adds	r4, #12
   d6bb2:	dc1b      	bgt.n	d6bec <__aeabi_dmul+0x134>
   d6bb4:	f104 0414 	add.w	r4, r4, #20
   d6bb8:	f1c4 0520 	rsb	r5, r4, #32
   d6bbc:	fa00 f305 	lsl.w	r3, r0, r5
   d6bc0:	fa20 f004 	lsr.w	r0, r0, r4
   d6bc4:	fa01 f205 	lsl.w	r2, r1, r5
   d6bc8:	ea40 0002 	orr.w	r0, r0, r2
   d6bcc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d6bd0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6bd4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6bd8:	fa21 f604 	lsr.w	r6, r1, r4
   d6bdc:	eb42 0106 	adc.w	r1, r2, r6
   d6be0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6be4:	bf08      	it	eq
   d6be6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6bea:	bd70      	pop	{r4, r5, r6, pc}
   d6bec:	f1c4 040c 	rsb	r4, r4, #12
   d6bf0:	f1c4 0520 	rsb	r5, r4, #32
   d6bf4:	fa00 f304 	lsl.w	r3, r0, r4
   d6bf8:	fa20 f005 	lsr.w	r0, r0, r5
   d6bfc:	fa01 f204 	lsl.w	r2, r1, r4
   d6c00:	ea40 0002 	orr.w	r0, r0, r2
   d6c04:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6c08:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6c0c:	f141 0100 	adc.w	r1, r1, #0
   d6c10:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6c14:	bf08      	it	eq
   d6c16:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6c1a:	bd70      	pop	{r4, r5, r6, pc}
   d6c1c:	f1c4 0520 	rsb	r5, r4, #32
   d6c20:	fa00 f205 	lsl.w	r2, r0, r5
   d6c24:	ea4e 0e02 	orr.w	lr, lr, r2
   d6c28:	fa20 f304 	lsr.w	r3, r0, r4
   d6c2c:	fa01 f205 	lsl.w	r2, r1, r5
   d6c30:	ea43 0302 	orr.w	r3, r3, r2
   d6c34:	fa21 f004 	lsr.w	r0, r1, r4
   d6c38:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6c3c:	fa21 f204 	lsr.w	r2, r1, r4
   d6c40:	ea20 0002 	bic.w	r0, r0, r2
   d6c44:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d6c48:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6c4c:	bf08      	it	eq
   d6c4e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6c52:	bd70      	pop	{r4, r5, r6, pc}
   d6c54:	f094 0f00 	teq	r4, #0
   d6c58:	d10f      	bne.n	d6c7a <__aeabi_dmul+0x1c2>
   d6c5a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d6c5e:	0040      	lsls	r0, r0, #1
   d6c60:	eb41 0101 	adc.w	r1, r1, r1
   d6c64:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6c68:	bf08      	it	eq
   d6c6a:	3c01      	subeq	r4, #1
   d6c6c:	d0f7      	beq.n	d6c5e <__aeabi_dmul+0x1a6>
   d6c6e:	ea41 0106 	orr.w	r1, r1, r6
   d6c72:	f095 0f00 	teq	r5, #0
   d6c76:	bf18      	it	ne
   d6c78:	4770      	bxne	lr
   d6c7a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d6c7e:	0052      	lsls	r2, r2, #1
   d6c80:	eb43 0303 	adc.w	r3, r3, r3
   d6c84:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d6c88:	bf08      	it	eq
   d6c8a:	3d01      	subeq	r5, #1
   d6c8c:	d0f7      	beq.n	d6c7e <__aeabi_dmul+0x1c6>
   d6c8e:	ea43 0306 	orr.w	r3, r3, r6
   d6c92:	4770      	bx	lr
   d6c94:	ea94 0f0c 	teq	r4, ip
   d6c98:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6c9c:	bf18      	it	ne
   d6c9e:	ea95 0f0c 	teqne	r5, ip
   d6ca2:	d00c      	beq.n	d6cbe <__aeabi_dmul+0x206>
   d6ca4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6ca8:	bf18      	it	ne
   d6caa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6cae:	d1d1      	bne.n	d6c54 <__aeabi_dmul+0x19c>
   d6cb0:	ea81 0103 	eor.w	r1, r1, r3
   d6cb4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6cb8:	f04f 0000 	mov.w	r0, #0
   d6cbc:	bd70      	pop	{r4, r5, r6, pc}
   d6cbe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6cc2:	bf06      	itte	eq
   d6cc4:	4610      	moveq	r0, r2
   d6cc6:	4619      	moveq	r1, r3
   d6cc8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6ccc:	d019      	beq.n	d6d02 <__aeabi_dmul+0x24a>
   d6cce:	ea94 0f0c 	teq	r4, ip
   d6cd2:	d102      	bne.n	d6cda <__aeabi_dmul+0x222>
   d6cd4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6cd8:	d113      	bne.n	d6d02 <__aeabi_dmul+0x24a>
   d6cda:	ea95 0f0c 	teq	r5, ip
   d6cde:	d105      	bne.n	d6cec <__aeabi_dmul+0x234>
   d6ce0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d6ce4:	bf1c      	itt	ne
   d6ce6:	4610      	movne	r0, r2
   d6ce8:	4619      	movne	r1, r3
   d6cea:	d10a      	bne.n	d6d02 <__aeabi_dmul+0x24a>
   d6cec:	ea81 0103 	eor.w	r1, r1, r3
   d6cf0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6cf4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6cf8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6cfc:	f04f 0000 	mov.w	r0, #0
   d6d00:	bd70      	pop	{r4, r5, r6, pc}
   d6d02:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6d06:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d6d0a:	bd70      	pop	{r4, r5, r6, pc}

000d6d0c <__aeabi_ddiv>:
   d6d0c:	b570      	push	{r4, r5, r6, lr}
   d6d0e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6d12:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6d16:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6d1a:	bf1d      	ittte	ne
   d6d1c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6d20:	ea94 0f0c 	teqne	r4, ip
   d6d24:	ea95 0f0c 	teqne	r5, ip
   d6d28:	f000 f8a7 	bleq	d6e7a <__aeabi_ddiv+0x16e>
   d6d2c:	eba4 0405 	sub.w	r4, r4, r5
   d6d30:	ea81 0e03 	eor.w	lr, r1, r3
   d6d34:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6d38:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6d3c:	f000 8088 	beq.w	d6e50 <__aeabi_ddiv+0x144>
   d6d40:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6d44:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d6d48:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d6d4c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d6d50:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d6d54:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d6d58:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d6d5c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d6d60:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d6d64:	429d      	cmp	r5, r3
   d6d66:	bf08      	it	eq
   d6d68:	4296      	cmpeq	r6, r2
   d6d6a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d6d6e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d6d72:	d202      	bcs.n	d6d7a <__aeabi_ddiv+0x6e>
   d6d74:	085b      	lsrs	r3, r3, #1
   d6d76:	ea4f 0232 	mov.w	r2, r2, rrx
   d6d7a:	1ab6      	subs	r6, r6, r2
   d6d7c:	eb65 0503 	sbc.w	r5, r5, r3
   d6d80:	085b      	lsrs	r3, r3, #1
   d6d82:	ea4f 0232 	mov.w	r2, r2, rrx
   d6d86:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d6d8a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d6d8e:	ebb6 0e02 	subs.w	lr, r6, r2
   d6d92:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6d96:	bf22      	ittt	cs
   d6d98:	1ab6      	subcs	r6, r6, r2
   d6d9a:	4675      	movcs	r5, lr
   d6d9c:	ea40 000c 	orrcs.w	r0, r0, ip
   d6da0:	085b      	lsrs	r3, r3, #1
   d6da2:	ea4f 0232 	mov.w	r2, r2, rrx
   d6da6:	ebb6 0e02 	subs.w	lr, r6, r2
   d6daa:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6dae:	bf22      	ittt	cs
   d6db0:	1ab6      	subcs	r6, r6, r2
   d6db2:	4675      	movcs	r5, lr
   d6db4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6db8:	085b      	lsrs	r3, r3, #1
   d6dba:	ea4f 0232 	mov.w	r2, r2, rrx
   d6dbe:	ebb6 0e02 	subs.w	lr, r6, r2
   d6dc2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6dc6:	bf22      	ittt	cs
   d6dc8:	1ab6      	subcs	r6, r6, r2
   d6dca:	4675      	movcs	r5, lr
   d6dcc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d6dd0:	085b      	lsrs	r3, r3, #1
   d6dd2:	ea4f 0232 	mov.w	r2, r2, rrx
   d6dd6:	ebb6 0e02 	subs.w	lr, r6, r2
   d6dda:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6dde:	bf22      	ittt	cs
   d6de0:	1ab6      	subcs	r6, r6, r2
   d6de2:	4675      	movcs	r5, lr
   d6de4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6de8:	ea55 0e06 	orrs.w	lr, r5, r6
   d6dec:	d018      	beq.n	d6e20 <__aeabi_ddiv+0x114>
   d6dee:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d6df2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d6df6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d6dfa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d6dfe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d6e02:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d6e06:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d6e0a:	d1c0      	bne.n	d6d8e <__aeabi_ddiv+0x82>
   d6e0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6e10:	d10b      	bne.n	d6e2a <__aeabi_ddiv+0x11e>
   d6e12:	ea41 0100 	orr.w	r1, r1, r0
   d6e16:	f04f 0000 	mov.w	r0, #0
   d6e1a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d6e1e:	e7b6      	b.n	d6d8e <__aeabi_ddiv+0x82>
   d6e20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6e24:	bf04      	itt	eq
   d6e26:	4301      	orreq	r1, r0
   d6e28:	2000      	moveq	r0, #0
   d6e2a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6e2e:	bf88      	it	hi
   d6e30:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6e34:	f63f aeaf 	bhi.w	d6b96 <__aeabi_dmul+0xde>
   d6e38:	ebb5 0c03 	subs.w	ip, r5, r3
   d6e3c:	bf04      	itt	eq
   d6e3e:	ebb6 0c02 	subseq.w	ip, r6, r2
   d6e42:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6e46:	f150 0000 	adcs.w	r0, r0, #0
   d6e4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6e4e:	bd70      	pop	{r4, r5, r6, pc}
   d6e50:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d6e54:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d6e58:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d6e5c:	bfc2      	ittt	gt
   d6e5e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6e62:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6e66:	bd70      	popgt	{r4, r5, r6, pc}
   d6e68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6e6c:	f04f 0e00 	mov.w	lr, #0
   d6e70:	3c01      	subs	r4, #1
   d6e72:	e690      	b.n	d6b96 <__aeabi_dmul+0xde>
   d6e74:	ea45 0e06 	orr.w	lr, r5, r6
   d6e78:	e68d      	b.n	d6b96 <__aeabi_dmul+0xde>
   d6e7a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6e7e:	ea94 0f0c 	teq	r4, ip
   d6e82:	bf08      	it	eq
   d6e84:	ea95 0f0c 	teqeq	r5, ip
   d6e88:	f43f af3b 	beq.w	d6d02 <__aeabi_dmul+0x24a>
   d6e8c:	ea94 0f0c 	teq	r4, ip
   d6e90:	d10a      	bne.n	d6ea8 <__aeabi_ddiv+0x19c>
   d6e92:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6e96:	f47f af34 	bne.w	d6d02 <__aeabi_dmul+0x24a>
   d6e9a:	ea95 0f0c 	teq	r5, ip
   d6e9e:	f47f af25 	bne.w	d6cec <__aeabi_dmul+0x234>
   d6ea2:	4610      	mov	r0, r2
   d6ea4:	4619      	mov	r1, r3
   d6ea6:	e72c      	b.n	d6d02 <__aeabi_dmul+0x24a>
   d6ea8:	ea95 0f0c 	teq	r5, ip
   d6eac:	d106      	bne.n	d6ebc <__aeabi_ddiv+0x1b0>
   d6eae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6eb2:	f43f aefd 	beq.w	d6cb0 <__aeabi_dmul+0x1f8>
   d6eb6:	4610      	mov	r0, r2
   d6eb8:	4619      	mov	r1, r3
   d6eba:	e722      	b.n	d6d02 <__aeabi_dmul+0x24a>
   d6ebc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6ec0:	bf18      	it	ne
   d6ec2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6ec6:	f47f aec5 	bne.w	d6c54 <__aeabi_dmul+0x19c>
   d6eca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d6ece:	f47f af0d 	bne.w	d6cec <__aeabi_dmul+0x234>
   d6ed2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d6ed6:	f47f aeeb 	bne.w	d6cb0 <__aeabi_dmul+0x1f8>
   d6eda:	e712      	b.n	d6d02 <__aeabi_dmul+0x24a>

000d6edc <__gedf2>:
   d6edc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d6ee0:	e006      	b.n	d6ef0 <__cmpdf2+0x4>
   d6ee2:	bf00      	nop

000d6ee4 <__ledf2>:
   d6ee4:	f04f 0c01 	mov.w	ip, #1
   d6ee8:	e002      	b.n	d6ef0 <__cmpdf2+0x4>
   d6eea:	bf00      	nop

000d6eec <__cmpdf2>:
   d6eec:	f04f 0c01 	mov.w	ip, #1
   d6ef0:	f84d cd04 	str.w	ip, [sp, #-4]!
   d6ef4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6ef8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6efc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6f00:	bf18      	it	ne
   d6f02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d6f06:	d01b      	beq.n	d6f40 <__cmpdf2+0x54>
   d6f08:	b001      	add	sp, #4
   d6f0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d6f0e:	bf0c      	ite	eq
   d6f10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d6f14:	ea91 0f03 	teqne	r1, r3
   d6f18:	bf02      	ittt	eq
   d6f1a:	ea90 0f02 	teqeq	r0, r2
   d6f1e:	2000      	moveq	r0, #0
   d6f20:	4770      	bxeq	lr
   d6f22:	f110 0f00 	cmn.w	r0, #0
   d6f26:	ea91 0f03 	teq	r1, r3
   d6f2a:	bf58      	it	pl
   d6f2c:	4299      	cmppl	r1, r3
   d6f2e:	bf08      	it	eq
   d6f30:	4290      	cmpeq	r0, r2
   d6f32:	bf2c      	ite	cs
   d6f34:	17d8      	asrcs	r0, r3, #31
   d6f36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d6f3a:	f040 0001 	orr.w	r0, r0, #1
   d6f3e:	4770      	bx	lr
   d6f40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6f44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6f48:	d102      	bne.n	d6f50 <__cmpdf2+0x64>
   d6f4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6f4e:	d107      	bne.n	d6f60 <__cmpdf2+0x74>
   d6f50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6f54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6f58:	d1d6      	bne.n	d6f08 <__cmpdf2+0x1c>
   d6f5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d6f5e:	d0d3      	beq.n	d6f08 <__cmpdf2+0x1c>
   d6f60:	f85d 0b04 	ldr.w	r0, [sp], #4
   d6f64:	4770      	bx	lr
   d6f66:	bf00      	nop

000d6f68 <__aeabi_cdrcmple>:
   d6f68:	4684      	mov	ip, r0
   d6f6a:	4610      	mov	r0, r2
   d6f6c:	4662      	mov	r2, ip
   d6f6e:	468c      	mov	ip, r1
   d6f70:	4619      	mov	r1, r3
   d6f72:	4663      	mov	r3, ip
   d6f74:	e000      	b.n	d6f78 <__aeabi_cdcmpeq>
   d6f76:	bf00      	nop

000d6f78 <__aeabi_cdcmpeq>:
   d6f78:	b501      	push	{r0, lr}
   d6f7a:	f7ff ffb7 	bl	d6eec <__cmpdf2>
   d6f7e:	2800      	cmp	r0, #0
   d6f80:	bf48      	it	mi
   d6f82:	f110 0f00 	cmnmi.w	r0, #0
   d6f86:	bd01      	pop	{r0, pc}

000d6f88 <__aeabi_dcmpeq>:
   d6f88:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6f8c:	f7ff fff4 	bl	d6f78 <__aeabi_cdcmpeq>
   d6f90:	bf0c      	ite	eq
   d6f92:	2001      	moveq	r0, #1
   d6f94:	2000      	movne	r0, #0
   d6f96:	f85d fb08 	ldr.w	pc, [sp], #8
   d6f9a:	bf00      	nop

000d6f9c <__aeabi_dcmplt>:
   d6f9c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6fa0:	f7ff ffea 	bl	d6f78 <__aeabi_cdcmpeq>
   d6fa4:	bf34      	ite	cc
   d6fa6:	2001      	movcc	r0, #1
   d6fa8:	2000      	movcs	r0, #0
   d6faa:	f85d fb08 	ldr.w	pc, [sp], #8
   d6fae:	bf00      	nop

000d6fb0 <__aeabi_dcmple>:
   d6fb0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6fb4:	f7ff ffe0 	bl	d6f78 <__aeabi_cdcmpeq>
   d6fb8:	bf94      	ite	ls
   d6fba:	2001      	movls	r0, #1
   d6fbc:	2000      	movhi	r0, #0
   d6fbe:	f85d fb08 	ldr.w	pc, [sp], #8
   d6fc2:	bf00      	nop

000d6fc4 <__aeabi_dcmpge>:
   d6fc4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6fc8:	f7ff ffce 	bl	d6f68 <__aeabi_cdrcmple>
   d6fcc:	bf94      	ite	ls
   d6fce:	2001      	movls	r0, #1
   d6fd0:	2000      	movhi	r0, #0
   d6fd2:	f85d fb08 	ldr.w	pc, [sp], #8
   d6fd6:	bf00      	nop

000d6fd8 <__aeabi_dcmpgt>:
   d6fd8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6fdc:	f7ff ffc4 	bl	d6f68 <__aeabi_cdrcmple>
   d6fe0:	bf34      	ite	cc
   d6fe2:	2001      	movcc	r0, #1
   d6fe4:	2000      	movcs	r0, #0
   d6fe6:	f85d fb08 	ldr.w	pc, [sp], #8
   d6fea:	bf00      	nop

000d6fec <__aeabi_dcmpun>:
   d6fec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6ff0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6ff4:	d102      	bne.n	d6ffc <__aeabi_dcmpun+0x10>
   d6ff6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6ffa:	d10a      	bne.n	d7012 <__aeabi_dcmpun+0x26>
   d6ffc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7000:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7004:	d102      	bne.n	d700c <__aeabi_dcmpun+0x20>
   d7006:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d700a:	d102      	bne.n	d7012 <__aeabi_dcmpun+0x26>
   d700c:	f04f 0000 	mov.w	r0, #0
   d7010:	4770      	bx	lr
   d7012:	f04f 0001 	mov.w	r0, #1
   d7016:	4770      	bx	lr

000d7018 <__aeabi_d2f>:
   d7018:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d701c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d7020:	bf24      	itt	cs
   d7022:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d7026:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d702a:	d90d      	bls.n	d7048 <__aeabi_d2f+0x30>
   d702c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d7030:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d7034:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d7038:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d703c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d7040:	bf08      	it	eq
   d7042:	f020 0001 	biceq.w	r0, r0, #1
   d7046:	4770      	bx	lr
   d7048:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d704c:	d121      	bne.n	d7092 <__aeabi_d2f+0x7a>
   d704e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d7052:	bfbc      	itt	lt
   d7054:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d7058:	4770      	bxlt	lr
   d705a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d705e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d7062:	f1c2 0218 	rsb	r2, r2, #24
   d7066:	f1c2 0c20 	rsb	ip, r2, #32
   d706a:	fa10 f30c 	lsls.w	r3, r0, ip
   d706e:	fa20 f002 	lsr.w	r0, r0, r2
   d7072:	bf18      	it	ne
   d7074:	f040 0001 	orrne.w	r0, r0, #1
   d7078:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d707c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d7080:	fa03 fc0c 	lsl.w	ip, r3, ip
   d7084:	ea40 000c 	orr.w	r0, r0, ip
   d7088:	fa23 f302 	lsr.w	r3, r3, r2
   d708c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d7090:	e7cc      	b.n	d702c <__aeabi_d2f+0x14>
   d7092:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d7096:	d107      	bne.n	d70a8 <__aeabi_d2f+0x90>
   d7098:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d709c:	bf1e      	ittt	ne
   d709e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d70a2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d70a6:	4770      	bxne	lr
   d70a8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d70ac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d70b0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d70b4:	4770      	bx	lr
   d70b6:	bf00      	nop

000d70b8 <__cxa_atexit>:
   d70b8:	b510      	push	{r4, lr}
   d70ba:	4c05      	ldr	r4, [pc, #20]	; (d70d0 <__cxa_atexit+0x18>)
   d70bc:	4613      	mov	r3, r2
   d70be:	b12c      	cbz	r4, d70cc <__cxa_atexit+0x14>
   d70c0:	460a      	mov	r2, r1
   d70c2:	4601      	mov	r1, r0
   d70c4:	2002      	movs	r0, #2
   d70c6:	f3af 8000 	nop.w
   d70ca:	bd10      	pop	{r4, pc}
   d70cc:	4620      	mov	r0, r4
   d70ce:	bd10      	pop	{r4, pc}
   d70d0:	00000000 	.word	0x00000000

000d70d4 <memcpy>:
   d70d4:	b510      	push	{r4, lr}
   d70d6:	1e43      	subs	r3, r0, #1
   d70d8:	440a      	add	r2, r1
   d70da:	4291      	cmp	r1, r2
   d70dc:	d004      	beq.n	d70e8 <memcpy+0x14>
   d70de:	f811 4b01 	ldrb.w	r4, [r1], #1
   d70e2:	f803 4f01 	strb.w	r4, [r3, #1]!
   d70e6:	e7f8      	b.n	d70da <memcpy+0x6>
   d70e8:	bd10      	pop	{r4, pc}

000d70ea <memset>:
   d70ea:	4402      	add	r2, r0
   d70ec:	4603      	mov	r3, r0
   d70ee:	4293      	cmp	r3, r2
   d70f0:	d002      	beq.n	d70f8 <memset+0xe>
   d70f2:	f803 1b01 	strb.w	r1, [r3], #1
   d70f6:	e7fa      	b.n	d70ee <memset+0x4>
   d70f8:	4770      	bx	lr
	...

000d70fc <srand>:
   d70fc:	b538      	push	{r3, r4, r5, lr}
   d70fe:	4b12      	ldr	r3, [pc, #72]	; (d7148 <srand+0x4c>)
   d7100:	681c      	ldr	r4, [r3, #0]
   d7102:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7104:	4605      	mov	r5, r0
   d7106:	b9d3      	cbnz	r3, d713e <srand+0x42>
   d7108:	2018      	movs	r0, #24
   d710a:	f7fd fa59 	bl	d45c0 <malloc>
   d710e:	f243 330e 	movw	r3, #13070	; 0x330e
   d7112:	63a0      	str	r0, [r4, #56]	; 0x38
   d7114:	8003      	strh	r3, [r0, #0]
   d7116:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d711a:	8043      	strh	r3, [r0, #2]
   d711c:	f241 2334 	movw	r3, #4660	; 0x1234
   d7120:	8083      	strh	r3, [r0, #4]
   d7122:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d7126:	80c3      	strh	r3, [r0, #6]
   d7128:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d712c:	8103      	strh	r3, [r0, #8]
   d712e:	2305      	movs	r3, #5
   d7130:	8143      	strh	r3, [r0, #10]
   d7132:	230b      	movs	r3, #11
   d7134:	8183      	strh	r3, [r0, #12]
   d7136:	2201      	movs	r2, #1
   d7138:	2300      	movs	r3, #0
   d713a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d713e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7140:	2200      	movs	r2, #0
   d7142:	611d      	str	r5, [r3, #16]
   d7144:	615a      	str	r2, [r3, #20]
   d7146:	bd38      	pop	{r3, r4, r5, pc}
   d7148:	2003e484 	.word	0x2003e484

000d714c <strlen>:
   d714c:	4603      	mov	r3, r0
   d714e:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7152:	2a00      	cmp	r2, #0
   d7154:	d1fb      	bne.n	d714e <strlen+0x2>
   d7156:	1a18      	subs	r0, r3, r0
   d7158:	3801      	subs	r0, #1
   d715a:	4770      	bx	lr

000d715c <dynalib_user>:
   d715c:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d716c:	0000 0000 504c 3a4f 2520 0064 6152 6974     ....LPO: %d.Rati
   d717c:	3a6f 2520 2566 0025 6f43 636e 6e65 7274     o: %f%%.Concentr
   d718c:	7461 6f69 3a6e 2520 2066 6370 2f73 004c     ation: %f pcs/L.

000d719c <_ZTVN5spark13CellularClassE>:
	...
   d71a4:	4697 000d 468d 000d 4683 000d 4639 000d     .F...F...F..9F..
   d71b4:	4677 000d 466b 000d 465f 000d 4657 000d     wF..kF.._F..WF..
   d71c4:	464d 000d 4643 000d 4abd 000d               MF..CF...J..

000d71d0 <_ZTVN5spark13EthernetClassE>:
	...
   d71d8:	4741 000d 4737 000d 472d 000d 4723 000d     AG..7G..-G..#G..
   d71e8:	4717 000d 470b 000d 46ff 000d 46f7 000d     .G...G...F...F..
   d71f8:	46ed 000d 46e3 000d 4abd 000d               .F...F...J..

000d7204 <_ZTV7TwoWire>:
	...
   d720c:	4761 000d 47ab 000d 4783 000d 4763 000d     aG...G...G..cG..
   d721c:	478b 000d 4793 000d 479b 000d 47a3 000d     .G...G...G...G..

000d722c <_ZTV9IPAddress>:
	...
   d7234:	47f5 000d 47e5 000d 47e7 000d 6162 6475     .G...G...G..baud
   d7244:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d7254:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d7264:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d7274:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d7284:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d7294:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d72a4:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d72b4:	7070 2500 3130 7530 0020 205d 2c00 0020     pp.%010u .] ., .
   d72c4:	2928 203a 2000 005b 6f63 6564 3d20 0020     (): . [.code = .
   d72d4:	6925 6400 7465 6961 736c 3d20 0020 0a0d     %i.details = ...
   d72e4:	6600 6c00 006e 6e66 6300 646f 0065 6564     .f.ln.fn.code.de
   d72f4:	6174 6c69 6e00 6e6f 0065 7274 6361 0065     tail.none.trace.
   d7304:	6e69 6f66 7700 7261 006e 7265 6f72 0072     info.warn.error.
   d7314:	6170 696e 0063 6c61 006c 0000               panic.all...

000d7320 <_ZTVN5spark9MeshClassE>:
	...
   d7328:	4937 000d 492d 000d 4923 000d 4919 000d     7I..-I..#I...I..
   d7338:	490d 000d 4901 000d 48f5 000d 48ed 000d     .I...I...H...H..
   d7348:	48e3 000d 48d9 000d 4abd 000d               .H...H...J..

000d7354 <_ZTVN5spark12NetworkClassE>:
	...
   d735c:	4a55 000d 4a5f 000d 4a69 000d 4a73 000d     UJ.._J..iJ..sJ..
   d736c:	4a7d 000d 4a89 000d 4a95 000d 4aa1 000d     }J...J...J...J..
   d737c:	4aa9 000d 4ab3 000d 4abd 000d               .J...J...J..

000d7388 <_ZTV8SPIClass>:
	...
   d7390:	4ce5 000d 4ce7 000d 005a 2b25 3330 3a64     .L...L..Z.%+03d:
   d73a0:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
   d73b0:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
   d73c0:	0000 0000                                   ....

000d73c4 <_ZTV11USARTSerial>:
	...
   d73cc:	4d7d 000d 4dcd 000d 4ddb 000d 4b9d 000d     }M...M...M...K..
   d73dc:	4d91 000d 4db3 000d 4d9f 000d 4dc7 000d     .M...M...M...M..
   d73ec:	4d7f 000d 4d83 000d                         .M...M..

000d73f4 <_ZTV9USBSerial>:
	...
   d73fc:	4eb9 000d 4f09 000d 4f17 000d 4b9d 000d     .N...O...O...K..
   d740c:	4ef5 000d 4ebb 000d 4ed1 000d 4f03 000d     .N...N...N...O..
   d741c:	4ee7 000d 4eb5 000d                         .N...N..

000d7424 <_ZSt7nothrow>:
   d7424:	0000 0000 6f70 0077 0000 0000               ....pow.....

000d7430 <TWO52>:
   d7430:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

000d7440 <__sf_fake_stdin>:
	...

000d7460 <__sf_fake_stdout>:
	...

000d7480 <__sf_fake_stderr>:
	...
   d74a0:	0043                                        C.

000d74a2 <link_const_variable_data_end>:
	...

000d74a4 <link_constructors_location>:
   d74a4:	000d4285 	.word	0x000d4285
   d74a8:	000d4611 	.word	0x000d4611
   d74ac:	000d46a1 	.word	0x000d46a1
   d74b0:	000d474d 	.word	0x000d474d
   d74b4:	000d48c9 	.word	0x000d48c9
   d74b8:	000d4a05 	.word	0x000d4a05
   d74bc:	000d4b89 	.word	0x000d4b89
   d74c0:	000d4cc9 	.word	0x000d4cc9
   d74c4:	000d4d35 	.word	0x000d4d35
   d74c8:	000d4d69 	.word	0x000d4d69
   d74cc:	000d5245 	.word	0x000d5245
   d74d0:	000d5309 	.word	0x000d5309
   d74d4:	000d538d 	.word	0x000d538d
   d74d8:	000d5411 	.word	0x000d5411

000d74dc <link_constructors_end>:
   d74dc:	00000000 	.word	0x00000000
