
/Users/talalagedeon/Desktop/particle-coding/Air-quality/target/1.5.0/boron/Air-quality.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003820  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d7840  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  2003e400  000d7844  0001e400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000384  2003e46c  2003e46c  0002e46c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d78b0  000d78b0  000278b0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d78d8  000d78d8  000278d8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000d6d58  00000000  00000000  000278dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001111c  00000000  00000000  000fe634  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001eacd  00000000  00000000  0010f750  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002560  00000000  00000000  0012e21d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000047c0  00000000  00000000  0013077d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003492d  00000000  00000000  00134f3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00029755  00000000  00000000  0016986a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010569f  00000000  00000000  00192fbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000d0c8  00000000  00000000  00298660  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f003 f9bb 	bl	d73ac <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f003 f9c0 	bl	d73c2 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e400 	.word	0x2003e400
   d404c:	000d7844 	.word	0x000d7844
   d4050:	2003e46c 	.word	0x2003e46c
   d4054:	2003e46c 	.word	0x2003e46c
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f001 f965 	bl	d532c <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d7840 	.word	0x000d7840
   d4084:	000d7804 	.word	0x000d7804

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b816 	b.w	d40b8 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 f923 	bl	d42d8 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f001 b90b 	b.w	d52b0 <_post_loop>

000d409a <_Znwj>:
   d409a:	f000 bb6b 	b.w	d4774 <malloc>

000d409e <_ZdlPv>:
   d409e:	f000 bb71 	b.w	d4784 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f000 bb6f 	b.w	d4784 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <setup>:
unsigned long duration;

float ratio = 0;
float concentration = 0;

void setup() {
   d40b8:	b508      	push	{r3, lr}
  Serial.begin(9600);
   d40ba:	f001 f8b5 	bl	d5228 <_Z16_fetch_usbserialv>
   d40be:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40c2:	f001 f8a5 	bl	d5210 <_ZN9USBSerial5beginEl>

  pinMode( DUST_SENSOR_PIN, INPUT);
   d40c6:	2100      	movs	r1, #0
   d40c8:	2004      	movs	r0, #4
   d40ca:	f001 f97d 	bl	d53c8 <pinMode>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d40ce:	f000 f9d5 	bl	d447c <HAL_Timer_Get_Milli_Seconds>
  lastInterval = millis();
   d40d2:	4b08      	ldr	r3, [pc, #32]	; (d40f4 <setup+0x3c>)
   d40d4:	6018      	str	r0, [r3, #0]

  if (aqSensor.init())
   d40d6:	4808      	ldr	r0, [pc, #32]	; (d40f8 <setup+0x40>)
   d40d8:	f000 f943 	bl	d4362 <_ZN16AirQualitySensor4initEv>
   d40dc:	b118      	cbz	r0, d40e6 <setup+0x2e>
 {
   Serial.println("Air Quality Sensor ready.");
   d40de:	f001 f8a3 	bl	d5228 <_Z16_fetch_usbserialv>
   d40e2:	4906      	ldr	r1, [pc, #24]	; (d40fc <setup+0x44>)
   d40e4:	e002      	b.n	d40ec <setup+0x34>
 }
 else
 {
   Serial.println("Air Quality Sensor ERROR!");
   d40e6:	f001 f89f 	bl	d5228 <_Z16_fetch_usbserialv>
   d40ea:	4905      	ldr	r1, [pc, #20]	; (d4100 <setup+0x48>)
 }

}
   d40ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 {
   Serial.println("Air Quality Sensor ready.");
 }
 else
 {
   Serial.println("Air Quality Sensor ERROR!");
   d40f0:	f000 be6b 	b.w	d4dca <_ZN5Print7printlnEPKc>
   d40f4:	2003e4a0 	.word	0x2003e4a0
   d40f8:	2003e484 	.word	0x2003e484
   d40fc:	000d7448 	.word	0x000d7448
   d4100:	000d7462 	.word	0x000d7462

000d4104 <_Z13getAirQualityv>:
    lastInterval = millis();

  }
}
String getAirQuality()
{
   d4104:	b538      	push	{r3, r4, r5, lr}
   d4106:	4604      	mov	r4, r0
 int quality = aqSensor.slope();
   d4108:	4811      	ldr	r0, [pc, #68]	; (d4150 <_Z13getAirQualityv+0x4c>)
   d410a:	f000 f957 	bl	d43bc <_ZN16AirQualitySensor5slopeEv>
 String qual = "None";
   d410e:	4911      	ldr	r1, [pc, #68]	; (d4154 <_Z13getAirQualityv+0x50>)

  }
}
String getAirQuality()
{
 int quality = aqSensor.slope();
   d4110:	4605      	mov	r5, r0
 String qual = "None";
   d4112:	4620      	mov	r0, r4
   d4114:	f000 ff32 	bl	d4f7c <_ZN6StringC1EPK19__FlashStringHelper>

 if (quality == AirQualitySensor::FORCE_SIGNAL)
   d4118:	4b0f      	ldr	r3, [pc, #60]	; (d4158 <_Z13getAirQualityv+0x54>)
   d411a:	681b      	ldr	r3, [r3, #0]
   d411c:	429d      	cmp	r5, r3
   d411e:	d101      	bne.n	d4124 <_Z13getAirQualityv+0x20>
 {
   qual = "Danger";
   d4120:	490e      	ldr	r1, [pc, #56]	; (d415c <_Z13getAirQualityv+0x58>)
   d4122:	e010      	b.n	d4146 <_Z13getAirQualityv+0x42>
 }
 else if (quality == AirQualitySensor::HIGH_POLLUTION)
   d4124:	4b0e      	ldr	r3, [pc, #56]	; (d4160 <_Z13getAirQualityv+0x5c>)
   d4126:	681b      	ldr	r3, [r3, #0]
   d4128:	429d      	cmp	r5, r3
   d412a:	d101      	bne.n	d4130 <_Z13getAirQualityv+0x2c>
 {
   qual = "High Pollution";
   d412c:	490d      	ldr	r1, [pc, #52]	; (d4164 <_Z13getAirQualityv+0x60>)
   d412e:	e00a      	b.n	d4146 <_Z13getAirQualityv+0x42>
 }
 else if (quality == AirQualitySensor::LOW_POLLUTION)
   d4130:	4b0d      	ldr	r3, [pc, #52]	; (d4168 <_Z13getAirQualityv+0x64>)
   d4132:	681b      	ldr	r3, [r3, #0]
   d4134:	429d      	cmp	r5, r3
   d4136:	d101      	bne.n	d413c <_Z13getAirQualityv+0x38>
 {
   qual = "Low Pollution";
   d4138:	490c      	ldr	r1, [pc, #48]	; (d416c <_Z13getAirQualityv+0x68>)
   d413a:	e004      	b.n	d4146 <_Z13getAirQualityv+0x42>
 }
 else if (quality == AirQualitySensor::FRESH_AIR)
   d413c:	4b0c      	ldr	r3, [pc, #48]	; (d4170 <_Z13getAirQualityv+0x6c>)
   d413e:	681b      	ldr	r3, [r3, #0]
   d4140:	429d      	cmp	r5, r3
   d4142:	d103      	bne.n	d414c <_Z13getAirQualityv+0x48>
 {
   qual = "Fresh Air";
   d4144:	490b      	ldr	r1, [pc, #44]	; (d4174 <_Z13getAirQualityv+0x70>)
   d4146:	4620      	mov	r0, r4
   d4148:	f000 ff2b 	bl	d4fa2 <_ZN6StringaSEPKc>
 }

 return qual;
}
   d414c:	4620      	mov	r0, r4
   d414e:	bd38      	pop	{r3, r4, r5, pc}
   d4150:	2003e484 	.word	0x2003e484
   d4154:	000d747c 	.word	0x000d747c
   d4158:	000d74f8 	.word	0x000d74f8
   d415c:	000d7481 	.word	0x000d7481
   d4160:	000d74f4 	.word	0x000d74f4
   d4164:	000d7488 	.word	0x000d7488
   d4168:	000d74ec 	.word	0x000d74ec
   d416c:	000d7497 	.word	0x000d7497
   d4170:	000d74f0 	.word	0x000d74f0
   d4174:	000d74a5 	.word	0x000d74a5

000d4178 <_Z21getDustSensorReadingsv>:

void getDustSensorReadings()
{
   d4178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d417c:	ed2d 8b02 	vpush	{d8}
  // This particular dust sensor returns 0s often, so let's filter them out by making sure we only
  // capture and use non-zero LPO values for our calculations once we get a good reading.
  if (lowpulseoccupancy == 0)
   d4180:	4c4d      	ldr	r4, [pc, #308]	; (d42b8 <_Z21getDustSensorReadingsv+0x140>)
   d4182:	4b4e      	ldr	r3, [pc, #312]	; (d42bc <_Z21getDustSensorReadingsv+0x144>)
   d4184:	6822      	ldr	r2, [r4, #0]

 return qual;
}

void getDustSensorReadings()
{
   d4186:	b084      	sub	sp, #16
  // This particular dust sensor returns 0s often, so let's filter them out by making sure we only
  // capture and use non-zero LPO values for our calculations once we get a good reading.
  if (lowpulseoccupancy == 0)
   d4188:	b912      	cbnz	r2, d4190 <_Z21getDustSensorReadingsv+0x18>
  {
    lowpulseoccupancy = last_lpo;
   d418a:	681b      	ldr	r3, [r3, #0]
   d418c:	6023      	str	r3, [r4, #0]
   d418e:	e000      	b.n	d4192 <_Z21getDustSensorReadingsv+0x1a>
  }
  else
  {
    last_lpo = lowpulseoccupancy;
   d4190:	601a      	str	r2, [r3, #0]
  }

  ratio = lowpulseoccupancy / (SENSOR_READING_INTERVAL * 10.0);                   // Integer percentage 0=>100
   d4192:	6820      	ldr	r0, [r4, #0]
   d4194:	4d4a      	ldr	r5, [pc, #296]	; (d42c0 <_Z21getDustSensorReadingsv+0x148>)
  concentration = 1.1 * pow(ratio, 3) - 3.8 * pow(ratio, 2) + 520 * ratio + 0.62; // using spec sheet curve
   d4196:	f8df a13c 	ldr.w	sl, [pc, #316]	; d42d4 <_Z21getDustSensorReadingsv+0x15c>
  else
  {
    last_lpo = lowpulseoccupancy;
  }

  ratio = lowpulseoccupancy / (SENSOR_READING_INTERVAL * 10.0);                   // Integer percentage 0=>100
   d419a:	f002 fd83 	bl	d6ca4 <__aeabi_ui2d>
   d419e:	a33c      	add	r3, pc, #240	; (adr r3, d4290 <_Z21getDustSensorReadingsv+0x118>)
   d41a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d41a4:	f002 ff1e 	bl	d6fe4 <__aeabi_ddiv>
   d41a8:	f003 f8a2 	bl	d72f0 <__aeabi_d2f>
   d41ac:	6028      	str	r0, [r5, #0]
  concentration = 1.1 * pow(ratio, 3) - 3.8 * pow(ratio, 2) + 520 * ratio + 0.62; // using spec sheet curve
   d41ae:	f002 fd9b 	bl	d6ce8 <__aeabi_f2d>
   d41b2:	ed9f 1b39 	vldr	d1, [pc, #228]	; d4298 <_Z21getDustSensorReadingsv+0x120>
   d41b6:	ec41 0b10 	vmov	d0, r0, r1
   d41ba:	f001 faf9 	bl	d57b0 <pow>
   d41be:	ed95 8a00 	vldr	s16, [r5]
   d41c2:	ee18 0a10 	vmov	r0, s16
   d41c6:	ed8d 0b02 	vstr	d0, [sp, #8]
   d41ca:	f002 fd8d 	bl	d6ce8 <__aeabi_f2d>
   d41ce:	ed9d 0b02 	vldr	d0, [sp, #8]
   d41d2:	4680      	mov	r8, r0
   d41d4:	4689      	mov	r9, r1
   d41d6:	a332      	add	r3, pc, #200	; (adr r3, d42a0 <_Z21getDustSensorReadingsv+0x128>)
   d41d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d41dc:	ec51 0b10 	vmov	r0, r1, d0
   d41e0:	f002 fdd6 	bl	d6d90 <__aeabi_dmul>
   d41e4:	4642      	mov	r2, r8
   d41e6:	4606      	mov	r6, r0
   d41e8:	460f      	mov	r7, r1
   d41ea:	464b      	mov	r3, r9
   d41ec:	4640      	mov	r0, r8
   d41ee:	4649      	mov	r1, r9
   d41f0:	f002 fdce 	bl	d6d90 <__aeabi_dmul>
   d41f4:	a32c      	add	r3, pc, #176	; (adr r3, d42a8 <_Z21getDustSensorReadingsv+0x130>)
   d41f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d41fa:	f002 fdc9 	bl	d6d90 <__aeabi_dmul>
   d41fe:	4602      	mov	r2, r0
   d4200:	460b      	mov	r3, r1
   d4202:	4630      	mov	r0, r6
   d4204:	4639      	mov	r1, r7
   d4206:	f002 fc0f 	bl	d6a28 <__aeabi_dsub>
   d420a:	eddf 7a2e 	vldr	s15, [pc, #184]	; d42c4 <_Z21getDustSensorReadingsv+0x14c>
   d420e:	ee68 7a27 	vmul.f32	s15, s16, s15
   d4212:	4606      	mov	r6, r0
   d4214:	ee17 0a90 	vmov	r0, s15
   d4218:	460f      	mov	r7, r1
   d421a:	f002 fd65 	bl	d6ce8 <__aeabi_f2d>
   d421e:	4602      	mov	r2, r0
   d4220:	460b      	mov	r3, r1
   d4222:	4630      	mov	r0, r6
   d4224:	4639      	mov	r1, r7
   d4226:	f002 fc01 	bl	d6a2c <__adddf3>
   d422a:	a321      	add	r3, pc, #132	; (adr r3, d42b0 <_Z21getDustSensorReadingsv+0x138>)
   d422c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4230:	f002 fbfc 	bl	d6a2c <__adddf3>
   d4234:	f003 f85c 	bl	d72f0 <__aeabi_d2f>
   d4238:	f8ca 0000 	str.w	r0, [sl]

  Serial.printlnf("LPO: %d", lowpulseoccupancy);
   d423c:	f000 fff4 	bl	d5228 <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d4240:	6823      	ldr	r3, [r4, #0]
   d4242:	4a21      	ldr	r2, [pc, #132]	; (d42c8 <_Z21getDustSensorReadingsv+0x150>)
   d4244:	2101      	movs	r1, #1
   d4246:	f000 fdea 	bl	d4e1e <_ZN5Print11printf_implEbPKcz>
  Serial.printlnf("Ratio: %f%%", ratio);
   d424a:	f000 ffed 	bl	d5228 <_Z16_fetch_usbserialv>
   d424e:	4604      	mov	r4, r0
   d4250:	6828      	ldr	r0, [r5, #0]
   d4252:	f002 fd49 	bl	d6ce8 <__aeabi_f2d>
   d4256:	4a1d      	ldr	r2, [pc, #116]	; (d42cc <_Z21getDustSensorReadingsv+0x154>)
   d4258:	e9cd 0100 	strd	r0, r1, [sp]
   d425c:	2101      	movs	r1, #1
   d425e:	4620      	mov	r0, r4
   d4260:	f000 fddd 	bl	d4e1e <_ZN5Print11printf_implEbPKcz>
  Serial.printlnf("Concentration: %f pcs/L", concentration);
   d4264:	f000 ffe0 	bl	d5228 <_Z16_fetch_usbserialv>
   d4268:	4604      	mov	r4, r0
   d426a:	f8da 0000 	ldr.w	r0, [sl]
   d426e:	f002 fd3b 	bl	d6ce8 <__aeabi_f2d>
   d4272:	4a17      	ldr	r2, [pc, #92]	; (d42d0 <_Z21getDustSensorReadingsv+0x158>)
   d4274:	e9cd 0100 	strd	r0, r1, [sp]
   d4278:	2101      	movs	r1, #1
   d427a:	4620      	mov	r0, r4
   d427c:	f000 fdcf 	bl	d4e1e <_ZN5Print11printf_implEbPKcz>
   d4280:	b004      	add	sp, #16
   d4282:	ecbd 8b02 	vpop	{d8}
   d4286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d428a:	bf00      	nop
   d428c:	f3af 8000 	nop.w
   d4290:	00000000 	.word	0x00000000
   d4294:	41124f80 	.word	0x41124f80
   d4298:	00000000 	.word	0x00000000
   d429c:	40080000 	.word	0x40080000
   d42a0:	9999999a 	.word	0x9999999a
   d42a4:	3ff19999 	.word	0x3ff19999
   d42a8:	66666666 	.word	0x66666666
   d42ac:	400e6666 	.word	0x400e6666
   d42b0:	3d70a3d7 	.word	0x3d70a3d7
   d42b4:	3fe3d70a 	.word	0x3fe3d70a
   d42b8:	2003e474 	.word	0x2003e474
   d42bc:	2003e47c 	.word	0x2003e47c
   d42c0:	2003e480 	.word	0x2003e480
   d42c4:	44020000 	.word	0x44020000
   d42c8:	000d74af 	.word	0x000d74af
   d42cc:	000d74b7 	.word	0x000d74b7
   d42d0:	000d74c3 	.word	0x000d74c3
   d42d4:	2003e470 	.word	0x2003e470

000d42d8 <loop>:
 }

}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d42d8:	b530      	push	{r4, r5, lr}
  duration = pulseIn( DUST_SENSOR_PIN, LOW);
   d42da:	2100      	movs	r1, #0
 }

}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d42dc:	b085      	sub	sp, #20
  duration = pulseIn( DUST_SENSOR_PIN, LOW);
   d42de:	2004      	movs	r0, #4
   d42e0:	f001 f89a 	bl	d5418 <pulseIn>
  lowpulseoccupancy = lowpulseoccupancy + duration;
   d42e4:	4c12      	ldr	r4, [pc, #72]	; (d4330 <loop+0x58>)

}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
  duration = pulseIn( DUST_SENSOR_PIN, LOW);
   d42e6:	4b13      	ldr	r3, [pc, #76]	; (d4334 <loop+0x5c>)
  lowpulseoccupancy = lowpulseoccupancy + duration;

  if ((millis() - lastInterval) > SENSOR_READING_INTERVAL)
   d42e8:	4d13      	ldr	r5, [pc, #76]	; (d4338 <loop+0x60>)

}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
  duration = pulseIn( DUST_SENSOR_PIN, LOW);
   d42ea:	6018      	str	r0, [r3, #0]
  lowpulseoccupancy = lowpulseoccupancy + duration;
   d42ec:	6823      	ldr	r3, [r4, #0]
   d42ee:	4418      	add	r0, r3
   d42f0:	6020      	str	r0, [r4, #0]
   d42f2:	f000 f8c3 	bl	d447c <HAL_Timer_Get_Milli_Seconds>

  if ((millis() - lastInterval) > SENSOR_READING_INTERVAL)
   d42f6:	682b      	ldr	r3, [r5, #0]
   d42f8:	1ac0      	subs	r0, r0, r3
   d42fa:	f247 5330 	movw	r3, #30000	; 0x7530
   d42fe:	4298      	cmp	r0, r3
   d4300:	d913      	bls.n	d432a <loop+0x52>
  {
    String quality = getAirQuality();
   d4302:	4668      	mov	r0, sp
   d4304:	f7ff fefe 	bl	d4104 <_Z13getAirQualityv>
    Serial.printlnf("Air Quality: %s", quality.c_str());
   d4308:	f000 ff8e 	bl	d5228 <_Z16_fetch_usbserialv>
   d430c:	9b00      	ldr	r3, [sp, #0]
   d430e:	4a0b      	ldr	r2, [pc, #44]	; (d433c <loop+0x64>)
   d4310:	2101      	movs	r1, #1
   d4312:	f000 fd84 	bl	d4e1e <_ZN5Print11printf_implEbPKcz>

    getDustSensorReadings();
   d4316:	f7ff ff2f 	bl	d4178 <_Z21getDustSensorReadingsv>

    lowpulseoccupancy =0;
   d431a:	2300      	movs	r3, #0
   d431c:	6023      	str	r3, [r4, #0]
   d431e:	f000 f8ad 	bl	d447c <HAL_Timer_Get_Milli_Seconds>
    lastInterval = millis();
   d4322:	6028      	str	r0, [r5, #0]
  duration = pulseIn( DUST_SENSOR_PIN, LOW);
  lowpulseoccupancy = lowpulseoccupancy + duration;

  if ((millis() - lastInterval) > SENSOR_READING_INTERVAL)
  {
    String quality = getAirQuality();
   d4324:	4668      	mov	r0, sp
   d4326:	f000 fde2 	bl	d4eee <_ZN6StringD1Ev>

    lowpulseoccupancy =0;
    lastInterval = millis();

  }
}
   d432a:	b005      	add	sp, #20
   d432c:	bd30      	pop	{r4, r5, pc}
   d432e:	bf00      	nop
   d4330:	2003e474 	.word	0x2003e474
   d4334:	2003e478 	.word	0x2003e478
   d4338:	2003e4a0 	.word	0x2003e4a0
   d433c:	000d74db 	.word	0x000d74db

000d4340 <_GLOBAL__sub_I_aqSensor>:
  concentration = 1.1 * pow(ratio, 3) - 3.8 * pow(ratio, 2) + 520 * ratio + 0.62; // using spec sheet curve

  Serial.printlnf("LPO: %d", lowpulseoccupancy);
  Serial.printlnf("Ratio: %f%%", ratio);
  Serial.printlnf("Concentration: %f pcs/L", concentration);
   d4340:	b508      	push	{r3, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4342:	f000 f8a3 	bl	d448c <HAL_Pin_Map>
#define SENSOR_READING_INTERVAL 30000
#define AQS_PIN A2
#include <math.h>
#include "Air_Quality_Sensor.h"

AirQualitySensor aqSensor(AQS_PIN);
   d4346:	2111      	movs	r1, #17
   d4348:	4802      	ldr	r0, [pc, #8]	; (d4354 <_GLOBAL__sub_I_aqSensor+0x14>)
  concentration = 1.1 * pow(ratio, 3) - 3.8 * pow(ratio, 2) + 520 * ratio + 0.62; // using spec sheet curve

  Serial.printlnf("LPO: %d", lowpulseoccupancy);
  Serial.printlnf("Ratio: %f%%", ratio);
  Serial.printlnf("Concentration: %f pcs/L", concentration);
   d434a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#define SENSOR_READING_INTERVAL 30000
#define AQS_PIN A2
#include <math.h>
#include "Air_Quality_Sensor.h"

AirQualitySensor aqSensor(AQS_PIN);
   d434e:	f000 b803 	b.w	d4358 <_ZN16AirQualitySensorC1Ei>
   d4352:	bf00      	nop
   d4354:	2003e484 	.word	0x2003e484

000d4358 <_ZN16AirQualitySensorC1Ei>:
const int AirQualitySensor::HIGH_POLLUTION = 1;
const int AirQualitySensor::LOW_POLLUTION  = 2;
const int AirQualitySensor::FRESH_AIR      = 3;

AirQualitySensor::AirQualitySensor(int pin) 
: _pin(pin), _voltageSum(0), _volSumCount(0) {
   d4358:	2200      	movs	r2, #0
   d435a:	6001      	str	r1, [r0, #0]
   d435c:	6102      	str	r2, [r0, #16]
   d435e:	6142      	str	r2, [r0, #20]
    // do nothing
}
   d4360:	4770      	bx	lr

000d4362 <_ZN16AirQualitySensor4initEv>:

bool AirQualitySensor::init(void) {
   d4362:	b510      	push	{r4, lr}
   d4364:	4604      	mov	r4, r0
    int initVoltage = analogRead(_pin);
   d4366:	8800      	ldrh	r0, [r0, #0]
   d4368:	f001 f83f 	bl	d53ea <analogRead>

    if (10 < initVoltage && initVoltage < 798) {
   d436c:	f240 3312 	movw	r3, #786	; 0x312
   d4370:	f1a0 020b 	sub.w	r2, r0, #11
   d4374:	429a      	cmp	r2, r3
   d4376:	d807      	bhi.n	d4388 <_ZN16AirQualitySensor4initEv+0x26>
        _currentVoltage = initVoltage;
   d4378:	60a0      	str	r0, [r4, #8]
        _lastVoltage = _currentVoltage;
   d437a:	6060      	str	r0, [r4, #4]

        _standardVoltage = initVoltage;
   d437c:	60e0      	str	r0, [r4, #12]
   d437e:	f000 f87d 	bl	d447c <HAL_Timer_Get_Milli_Seconds>
        _lastStdVolUpdated = millis();
   d4382:	61a0      	str	r0, [r4, #24]

        return true;
   d4384:	2001      	movs	r0, #1
   d4386:	bd10      	pop	{r4, pc}
    }
    else {
        return false;
   d4388:	2000      	movs	r0, #0
    }
}
   d438a:	bd10      	pop	{r4, pc}

000d438c <_ZN16AirQualitySensor21updateStandardVoltageEv>:

int AirQualitySensor::getValue(void) {
    return _currentVoltage;
}

void AirQualitySensor::updateStandardVoltage(void) {
   d438c:	b510      	push	{r4, lr}
   d438e:	4604      	mov	r4, r0
   d4390:	f000 f874 	bl	d447c <HAL_Timer_Get_Milli_Seconds>
    if (millis() - _lastStdVolUpdated > 500000) {
   d4394:	69a3      	ldr	r3, [r4, #24]
   d4396:	1ac0      	subs	r0, r0, r3
   d4398:	4b07      	ldr	r3, [pc, #28]	; (d43b8 <_ZN16AirQualitySensor21updateStandardVoltageEv+0x2c>)
   d439a:	4298      	cmp	r0, r3
   d439c:	d90a      	bls.n	d43b4 <_ZN16AirQualitySensor21updateStandardVoltageEv+0x28>
        _standardVoltage = _voltageSum / _volSumCount;
   d439e:	6923      	ldr	r3, [r4, #16]
   d43a0:	6962      	ldr	r2, [r4, #20]
   d43a2:	fb93 f3f2 	sdiv	r3, r3, r2
   d43a6:	60e3      	str	r3, [r4, #12]
   d43a8:	f000 f868 	bl	d447c <HAL_Timer_Get_Milli_Seconds>
        _lastStdVolUpdated = millis();

        _voltageSum = 0;
   d43ac:	2300      	movs	r3, #0
}

void AirQualitySensor::updateStandardVoltage(void) {
    if (millis() - _lastStdVolUpdated > 500000) {
        _standardVoltage = _voltageSum / _volSumCount;
        _lastStdVolUpdated = millis();
   d43ae:	61a0      	str	r0, [r4, #24]

        _voltageSum = 0;
   d43b0:	6123      	str	r3, [r4, #16]
        _volSumCount = 0;
   d43b2:	6163      	str	r3, [r4, #20]
   d43b4:	bd10      	pop	{r4, pc}
   d43b6:	bf00      	nop
   d43b8:	0007a120 	.word	0x0007a120

000d43bc <_ZN16AirQualitySensor5slopeEv>:
    else {
        return false;
    }
}

int AirQualitySensor::slope(void) {
   d43bc:	b510      	push	{r4, lr}
    _lastVoltage = _currentVoltage;
   d43be:	6883      	ldr	r3, [r0, #8]
   d43c0:	6043      	str	r3, [r0, #4]
    else {
        return false;
    }
}

int AirQualitySensor::slope(void) {
   d43c2:	4604      	mov	r4, r0
    _lastVoltage = _currentVoltage;
    _currentVoltage = analogRead(_pin);
   d43c4:	8800      	ldrh	r0, [r0, #0]
   d43c6:	f001 f810 	bl	d53ea <analogRead>

    _voltageSum += _currentVoltage;
   d43ca:	6923      	ldr	r3, [r4, #16]
    }
}

int AirQualitySensor::slope(void) {
    _lastVoltage = _currentVoltage;
    _currentVoltage = analogRead(_pin);
   d43cc:	60a0      	str	r0, [r4, #8]

    _voltageSum += _currentVoltage;
   d43ce:	4418      	add	r0, r3
    _volSumCount += 1;
   d43d0:	6963      	ldr	r3, [r4, #20]

int AirQualitySensor::slope(void) {
    _lastVoltage = _currentVoltage;
    _currentVoltage = analogRead(_pin);

    _voltageSum += _currentVoltage;
   d43d2:	6120      	str	r0, [r4, #16]
    _volSumCount += 1;
   d43d4:	3301      	adds	r3, #1
   d43d6:	6163      	str	r3, [r4, #20]

    updateStandardVoltage();
   d43d8:	4620      	mov	r0, r4
   d43da:	f7ff ffd7 	bl	d438c <_ZN16AirQualitySensor21updateStandardVoltageEv>
    if (_currentVoltage - _lastVoltage > 400 || _currentVoltage > 700) {
   d43de:	68a2      	ldr	r2, [r4, #8]
   d43e0:	6861      	ldr	r1, [r4, #4]
   d43e2:	1a51      	subs	r1, r2, r1
   d43e4:	f5b1 7fc8 	cmp.w	r1, #400	; 0x190
   d43e8:	dc10      	bgt.n	d440c <_ZN16AirQualitySensor5slopeEv+0x50>
   d43ea:	f5b2 7f2f 	cmp.w	r2, #700	; 0x2bc
   d43ee:	dc0d      	bgt.n	d440c <_ZN16AirQualitySensor5slopeEv+0x50>
        return AirQualitySensor::FORCE_SIGNAL;
    }
    else if ((_currentVoltage - _lastVoltage > 400 && _currentVoltage < 700)
             || _currentVoltage - _standardVoltage > 150) {
   d43f0:	68e3      	ldr	r3, [r4, #12]
   d43f2:	1ad3      	subs	r3, r2, r3
   d43f4:	2b96      	cmp	r3, #150	; 0x96
   d43f6:	dc0b      	bgt.n	d4410 <_ZN16AirQualitySensor5slopeEv+0x54>
        return AirQualitySensor::HIGH_POLLUTION;
    }
    else if ((_currentVoltage - _lastVoltage > 200 && _currentVoltage < 700)
   d43f8:	29c8      	cmp	r1, #200	; 0xc8
   d43fa:	dd02      	ble.n	d4402 <_ZN16AirQualitySensor5slopeEv+0x46>
   d43fc:	f5b2 7f2f 	cmp.w	r2, #700	; 0x2bc
   d4400:	d108      	bne.n	d4414 <_ZN16AirQualitySensor5slopeEv+0x58>
             || _currentVoltage - _standardVoltage > 50) {
        return AirQualitySensor::LOW_POLLUTION;
    }
    else {
        return AirQualitySensor::FRESH_AIR;
   d4402:	2b32      	cmp	r3, #50	; 0x32
   d4404:	bfcc      	ite	gt
   d4406:	2002      	movgt	r0, #2
   d4408:	2003      	movle	r0, #3
   d440a:	bd10      	pop	{r4, pc}
    _voltageSum += _currentVoltage;
    _volSumCount += 1;

    updateStandardVoltage();
    if (_currentVoltage - _lastVoltage > 400 || _currentVoltage > 700) {
        return AirQualitySensor::FORCE_SIGNAL;
   d440c:	2000      	movs	r0, #0
   d440e:	bd10      	pop	{r4, pc}
    }
    else if ((_currentVoltage - _lastVoltage > 400 && _currentVoltage < 700)
             || _currentVoltage - _standardVoltage > 150) {
        return AirQualitySensor::HIGH_POLLUTION;
   d4410:	2001      	movs	r0, #1
   d4412:	bd10      	pop	{r4, pc}
    }
    else if ((_currentVoltage - _lastVoltage > 200 && _currentVoltage < 700)
             || _currentVoltage - _standardVoltage > 50) {
        return AirQualitySensor::LOW_POLLUTION;
   d4414:	2002      	movs	r0, #2
    else {
        return AirQualitySensor::FRESH_AIR;
    }

    return -1;
}
   d4416:	bd10      	pop	{r4, pc}

000d4418 <_GLOBAL__sub_I__ZN16AirQualitySensor12FORCE_SIGNALE>:
   d4418:	f000 b838 	b.w	d448c <HAL_Pin_Map>

000d441c <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d441c:	b508      	push	{r3, lr}
   d441e:	4b02      	ldr	r3, [pc, #8]	; (d4428 <os_thread_is_current+0xc>)
   d4420:	681b      	ldr	r3, [r3, #0]
   d4422:	689b      	ldr	r3, [r3, #8]
   d4424:	9301      	str	r3, [sp, #4]
   d4426:	bd08      	pop	{r3, pc}
   d4428:	00030248 	.word	0x00030248

000d442c <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d442c:	b508      	push	{r3, lr}
   d442e:	4b02      	ldr	r3, [pc, #8]	; (d4438 <os_thread_join+0xc>)
   d4430:	681b      	ldr	r3, [r3, #0]
   d4432:	691b      	ldr	r3, [r3, #16]
   d4434:	9301      	str	r3, [sp, #4]
   d4436:	bd08      	pop	{r3, pc}
   d4438:	00030248 	.word	0x00030248

000d443c <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d443c:	b508      	push	{r3, lr}
   d443e:	4b02      	ldr	r3, [pc, #8]	; (d4448 <os_thread_cleanup+0xc>)
   d4440:	681b      	ldr	r3, [r3, #0]
   d4442:	695b      	ldr	r3, [r3, #20]
   d4444:	9301      	str	r3, [sp, #4]
   d4446:	bd08      	pop	{r3, pc}
   d4448:	00030248 	.word	0x00030248

000d444c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d444c:	b508      	push	{r3, lr}
   d444e:	4b02      	ldr	r3, [pc, #8]	; (d4458 <os_mutex_recursive_create+0xc>)
   d4450:	681b      	ldr	r3, [r3, #0]
   d4452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4454:	9301      	str	r3, [sp, #4]
   d4456:	bd08      	pop	{r3, pc}
   d4458:	00030248 	.word	0x00030248

000d445c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d445c:	b508      	push	{r3, lr}
   d445e:	4b02      	ldr	r3, [pc, #8]	; (d4468 <os_mutex_recursive_destroy+0xc>)
   d4460:	681b      	ldr	r3, [r3, #0]
   d4462:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4464:	9301      	str	r3, [sp, #4]
   d4466:	bd08      	pop	{r3, pc}
   d4468:	00030248 	.word	0x00030248

000d446c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d446c:	b508      	push	{r3, lr}
   d446e:	4b02      	ldr	r3, [pc, #8]	; (d4478 <HAL_RNG_GetRandomNumber+0xc>)
   d4470:	681b      	ldr	r3, [r3, #0]
   d4472:	685b      	ldr	r3, [r3, #4]
   d4474:	9301      	str	r3, [sp, #4]
   d4476:	bd08      	pop	{r3, pc}
   d4478:	00030218 	.word	0x00030218

000d447c <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d447c:	b508      	push	{r3, lr}
   d447e:	4b02      	ldr	r3, [pc, #8]	; (d4488 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4480:	681b      	ldr	r3, [r3, #0]
   d4482:	695b      	ldr	r3, [r3, #20]
   d4484:	9301      	str	r3, [sp, #4]
   d4486:	bd08      	pop	{r3, pc}
   d4488:	00030218 	.word	0x00030218

000d448c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d448c:	b508      	push	{r3, lr}
   d448e:	4b02      	ldr	r3, [pc, #8]	; (d4498 <HAL_Pin_Map+0xc>)
   d4490:	681b      	ldr	r3, [r3, #0]
   d4492:	681b      	ldr	r3, [r3, #0]
   d4494:	9301      	str	r3, [sp, #4]
   d4496:	bd08      	pop	{r3, pc}
   d4498:	0003022c 	.word	0x0003022c

000d449c <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d449c:	b508      	push	{r3, lr}
   d449e:	4b02      	ldr	r3, [pc, #8]	; (d44a8 <HAL_Validate_Pin_Function+0xc>)
   d44a0:	681b      	ldr	r3, [r3, #0]
   d44a2:	685b      	ldr	r3, [r3, #4]
   d44a4:	9301      	str	r3, [sp, #4]
   d44a6:	bd08      	pop	{r3, pc}
   d44a8:	0003022c 	.word	0x0003022c

000d44ac <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d44ac:	b508      	push	{r3, lr}
   d44ae:	4b02      	ldr	r3, [pc, #8]	; (d44b8 <HAL_Pin_Mode+0xc>)
   d44b0:	681b      	ldr	r3, [r3, #0]
   d44b2:	689b      	ldr	r3, [r3, #8]
   d44b4:	9301      	str	r3, [sp, #4]
   d44b6:	bd08      	pop	{r3, pc}
   d44b8:	0003022c 	.word	0x0003022c

000d44bc <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d44bc:	b508      	push	{r3, lr}
   d44be:	4b02      	ldr	r3, [pc, #8]	; (d44c8 <HAL_ADC_Read+0xc>)
   d44c0:	681b      	ldr	r3, [r3, #0]
   d44c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d44c4:	9301      	str	r3, [sp, #4]
   d44c6:	bd08      	pop	{r3, pc}
   d44c8:	0003022c 	.word	0x0003022c

000d44cc <HAL_Pulse_In>:

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
DYNALIB_FN(17, hal_gpio, HAL_Get_System_Interrupt_Handler, uint8_t(hal_irq_t, HAL_InterruptCallback*, void*))
DYNALIB_FN(18, hal_gpio, HAL_System_Interrupt_Trigger, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, HAL_Pulse_In, uint32_t(pin_t, uint16_t))
   d44cc:	b508      	push	{r3, lr}
   d44ce:	4b02      	ldr	r3, [pc, #8]	; (d44d8 <HAL_Pulse_In+0xc>)
   d44d0:	681b      	ldr	r3, [r3, #0]
   d44d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d44d4:	9301      	str	r3, [sp, #4]
   d44d6:	bd08      	pop	{r3, pc}
   d44d8:	0003022c 	.word	0x0003022c

000d44dc <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d44dc:	b508      	push	{r3, lr}
   d44de:	4b02      	ldr	r3, [pc, #8]	; (d44e8 <HAL_I2C_Write_Data+0xc>)
   d44e0:	681b      	ldr	r3, [r3, #0]
   d44e2:	6a1b      	ldr	r3, [r3, #32]
   d44e4:	9301      	str	r3, [sp, #4]
   d44e6:	bd08      	pop	{r3, pc}
   d44e8:	00030228 	.word	0x00030228

000d44ec <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d44ec:	b508      	push	{r3, lr}
   d44ee:	4b02      	ldr	r3, [pc, #8]	; (d44f8 <HAL_I2C_Available_Data+0xc>)
   d44f0:	681b      	ldr	r3, [r3, #0]
   d44f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d44f4:	9301      	str	r3, [sp, #4]
   d44f6:	bd08      	pop	{r3, pc}
   d44f8:	00030228 	.word	0x00030228

000d44fc <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d44fc:	b508      	push	{r3, lr}
   d44fe:	4b02      	ldr	r3, [pc, #8]	; (d4508 <HAL_I2C_Read_Data+0xc>)
   d4500:	681b      	ldr	r3, [r3, #0]
   d4502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4504:	9301      	str	r3, [sp, #4]
   d4506:	bd08      	pop	{r3, pc}
   d4508:	00030228 	.word	0x00030228

000d450c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d450c:	b508      	push	{r3, lr}
   d450e:	4b02      	ldr	r3, [pc, #8]	; (d4518 <HAL_I2C_Peek_Data+0xc>)
   d4510:	681b      	ldr	r3, [r3, #0]
   d4512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4514:	9301      	str	r3, [sp, #4]
   d4516:	bd08      	pop	{r3, pc}
   d4518:	00030228 	.word	0x00030228

000d451c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d451c:	b508      	push	{r3, lr}
   d451e:	4b02      	ldr	r3, [pc, #8]	; (d4528 <HAL_I2C_Flush_Data+0xc>)
   d4520:	681b      	ldr	r3, [r3, #0]
   d4522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4524:	9301      	str	r3, [sp, #4]
   d4526:	bd08      	pop	{r3, pc}
   d4528:	00030228 	.word	0x00030228

000d452c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d452c:	b508      	push	{r3, lr}
   d452e:	4b02      	ldr	r3, [pc, #8]	; (d4538 <HAL_I2C_Is_Enabled+0xc>)
   d4530:	681b      	ldr	r3, [r3, #0]
   d4532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4534:	9301      	str	r3, [sp, #4]
   d4536:	bd08      	pop	{r3, pc}
   d4538:	00030228 	.word	0x00030228

000d453c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d453c:	b508      	push	{r3, lr}
   d453e:	4b02      	ldr	r3, [pc, #8]	; (d4548 <HAL_I2C_Init+0xc>)
   d4540:	681b      	ldr	r3, [r3, #0]
   d4542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4544:	9301      	str	r3, [sp, #4]
   d4546:	bd08      	pop	{r3, pc}
   d4548:	00030228 	.word	0x00030228

000d454c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d454c:	b508      	push	{r3, lr}
   d454e:	4b02      	ldr	r3, [pc, #8]	; (d4558 <inet_inet_ntop+0xc>)
   d4550:	681b      	ldr	r3, [r3, #0]
   d4552:	695b      	ldr	r3, [r3, #20]
   d4554:	9301      	str	r3, [sp, #4]
   d4556:	bd08      	pop	{r3, pc}
   d4558:	00030264 	.word	0x00030264

000d455c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d455c:	b508      	push	{r3, lr}
   d455e:	4b02      	ldr	r3, [pc, #8]	; (d4568 <netdb_freeaddrinfo+0xc>)
   d4560:	681b      	ldr	r3, [r3, #0]
   d4562:	689b      	ldr	r3, [r3, #8]
   d4564:	9301      	str	r3, [sp, #4]
   d4566:	bd08      	pop	{r3, pc}
   d4568:	00030268 	.word	0x00030268

000d456c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d456c:	b508      	push	{r3, lr}
   d456e:	4b02      	ldr	r3, [pc, #8]	; (d4578 <netdb_getaddrinfo+0xc>)
   d4570:	681b      	ldr	r3, [r3, #0]
   d4572:	68db      	ldr	r3, [r3, #12]
   d4574:	9301      	str	r3, [sp, #4]
   d4576:	bd08      	pop	{r3, pc}
   d4578:	00030268 	.word	0x00030268

000d457c <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d457c:	b508      	push	{r3, lr}
   d457e:	4b02      	ldr	r3, [pc, #8]	; (d4588 <HAL_SPI_Init+0xc>)
   d4580:	681b      	ldr	r3, [r3, #0]
   d4582:	69db      	ldr	r3, [r3, #28]
   d4584:	9301      	str	r3, [sp, #4]
   d4586:	bd08      	pop	{r3, pc}
   d4588:	00030230 	.word	0x00030230

000d458c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d458c:	b508      	push	{r3, lr}
   d458e:	4b02      	ldr	r3, [pc, #8]	; (d4598 <HAL_SPI_Is_Enabled+0xc>)
   d4590:	681b      	ldr	r3, [r3, #0]
   d4592:	6a1b      	ldr	r3, [r3, #32]
   d4594:	9301      	str	r3, [sp, #4]
   d4596:	bd08      	pop	{r3, pc}
   d4598:	00030230 	.word	0x00030230

000d459c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d459c:	b508      	push	{r3, lr}
   d459e:	4b02      	ldr	r3, [pc, #8]	; (d45a8 <HAL_USART_Init+0xc>)
   d45a0:	681b      	ldr	r3, [r3, #0]
   d45a2:	681b      	ldr	r3, [r3, #0]
   d45a4:	9301      	str	r3, [sp, #4]
   d45a6:	bd08      	pop	{r3, pc}
   d45a8:	0003023c 	.word	0x0003023c

000d45ac <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d45ac:	b508      	push	{r3, lr}
   d45ae:	4b02      	ldr	r3, [pc, #8]	; (d45b8 <HAL_USART_Write_Data+0xc>)
   d45b0:	681b      	ldr	r3, [r3, #0]
   d45b2:	68db      	ldr	r3, [r3, #12]
   d45b4:	9301      	str	r3, [sp, #4]
   d45b6:	bd08      	pop	{r3, pc}
   d45b8:	0003023c 	.word	0x0003023c

000d45bc <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d45bc:	b508      	push	{r3, lr}
   d45be:	4b02      	ldr	r3, [pc, #8]	; (d45c8 <HAL_USART_Available_Data+0xc>)
   d45c0:	681b      	ldr	r3, [r3, #0]
   d45c2:	691b      	ldr	r3, [r3, #16]
   d45c4:	9301      	str	r3, [sp, #4]
   d45c6:	bd08      	pop	{r3, pc}
   d45c8:	0003023c 	.word	0x0003023c

000d45cc <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d45cc:	b508      	push	{r3, lr}
   d45ce:	4b02      	ldr	r3, [pc, #8]	; (d45d8 <HAL_USART_Read_Data+0xc>)
   d45d0:	681b      	ldr	r3, [r3, #0]
   d45d2:	695b      	ldr	r3, [r3, #20]
   d45d4:	9301      	str	r3, [sp, #4]
   d45d6:	bd08      	pop	{r3, pc}
   d45d8:	0003023c 	.word	0x0003023c

000d45dc <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d45dc:	b508      	push	{r3, lr}
   d45de:	4b02      	ldr	r3, [pc, #8]	; (d45e8 <HAL_USART_Peek_Data+0xc>)
   d45e0:	681b      	ldr	r3, [r3, #0]
   d45e2:	699b      	ldr	r3, [r3, #24]
   d45e4:	9301      	str	r3, [sp, #4]
   d45e6:	bd08      	pop	{r3, pc}
   d45e8:	0003023c 	.word	0x0003023c

000d45ec <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d45ec:	b508      	push	{r3, lr}
   d45ee:	4b02      	ldr	r3, [pc, #8]	; (d45f8 <HAL_USART_Flush_Data+0xc>)
   d45f0:	681b      	ldr	r3, [r3, #0]
   d45f2:	69db      	ldr	r3, [r3, #28]
   d45f4:	9301      	str	r3, [sp, #4]
   d45f6:	bd08      	pop	{r3, pc}
   d45f8:	0003023c 	.word	0x0003023c

000d45fc <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d45fc:	b508      	push	{r3, lr}
   d45fe:	4b02      	ldr	r3, [pc, #8]	; (d4608 <HAL_USART_Is_Enabled+0xc>)
   d4600:	681b      	ldr	r3, [r3, #0]
   d4602:	6a1b      	ldr	r3, [r3, #32]
   d4604:	9301      	str	r3, [sp, #4]
   d4606:	bd08      	pop	{r3, pc}
   d4608:	0003023c 	.word	0x0003023c

000d460c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d460c:	b508      	push	{r3, lr}
   d460e:	4b02      	ldr	r3, [pc, #8]	; (d4618 <HAL_USART_Available_Data_For_Write+0xc>)
   d4610:	681b      	ldr	r3, [r3, #0]
   d4612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4614:	9301      	str	r3, [sp, #4]
   d4616:	bd08      	pop	{r3, pc}
   d4618:	0003023c 	.word	0x0003023c

000d461c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d461c:	b508      	push	{r3, lr}
   d461e:	4b02      	ldr	r3, [pc, #8]	; (d4628 <HAL_USB_USART_Init+0xc>)
   d4620:	681b      	ldr	r3, [r3, #0]
   d4622:	681b      	ldr	r3, [r3, #0]
   d4624:	9301      	str	r3, [sp, #4]
   d4626:	bd08      	pop	{r3, pc}
   d4628:	0003024c 	.word	0x0003024c

000d462c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d462c:	b508      	push	{r3, lr}
   d462e:	4b02      	ldr	r3, [pc, #8]	; (d4638 <HAL_USB_USART_Begin+0xc>)
   d4630:	681b      	ldr	r3, [r3, #0]
   d4632:	685b      	ldr	r3, [r3, #4]
   d4634:	9301      	str	r3, [sp, #4]
   d4636:	bd08      	pop	{r3, pc}
   d4638:	0003024c 	.word	0x0003024c

000d463c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d463c:	b508      	push	{r3, lr}
   d463e:	4b02      	ldr	r3, [pc, #8]	; (d4648 <HAL_USB_USART_Available_Data+0xc>)
   d4640:	681b      	ldr	r3, [r3, #0]
   d4642:	691b      	ldr	r3, [r3, #16]
   d4644:	9301      	str	r3, [sp, #4]
   d4646:	bd08      	pop	{r3, pc}
   d4648:	0003024c 	.word	0x0003024c

000d464c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d464c:	b508      	push	{r3, lr}
   d464e:	4b02      	ldr	r3, [pc, #8]	; (d4658 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4650:	681b      	ldr	r3, [r3, #0]
   d4652:	695b      	ldr	r3, [r3, #20]
   d4654:	9301      	str	r3, [sp, #4]
   d4656:	bd08      	pop	{r3, pc}
   d4658:	0003024c 	.word	0x0003024c

000d465c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d465c:	b508      	push	{r3, lr}
   d465e:	4b02      	ldr	r3, [pc, #8]	; (d4668 <HAL_USB_USART_Receive_Data+0xc>)
   d4660:	681b      	ldr	r3, [r3, #0]
   d4662:	699b      	ldr	r3, [r3, #24]
   d4664:	9301      	str	r3, [sp, #4]
   d4666:	bd08      	pop	{r3, pc}
   d4668:	0003024c 	.word	0x0003024c

000d466c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d466c:	b508      	push	{r3, lr}
   d466e:	4b02      	ldr	r3, [pc, #8]	; (d4678 <HAL_USB_USART_Send_Data+0xc>)
   d4670:	681b      	ldr	r3, [r3, #0]
   d4672:	69db      	ldr	r3, [r3, #28]
   d4674:	9301      	str	r3, [sp, #4]
   d4676:	bd08      	pop	{r3, pc}
   d4678:	0003024c 	.word	0x0003024c

000d467c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d467c:	b508      	push	{r3, lr}
   d467e:	4b02      	ldr	r3, [pc, #8]	; (d4688 <HAL_USB_USART_Flush_Data+0xc>)
   d4680:	681b      	ldr	r3, [r3, #0]
   d4682:	6a1b      	ldr	r3, [r3, #32]
   d4684:	9301      	str	r3, [sp, #4]
   d4686:	bd08      	pop	{r3, pc}
   d4688:	0003024c 	.word	0x0003024c

000d468c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d468c:	b508      	push	{r3, lr}
   d468e:	4b02      	ldr	r3, [pc, #8]	; (d4698 <set_system_mode+0xc>)
   d4690:	681b      	ldr	r3, [r3, #0]
   d4692:	685b      	ldr	r3, [r3, #4]
   d4694:	9301      	str	r3, [sp, #4]
   d4696:	bd08      	pop	{r3, pc}
   d4698:	00030220 	.word	0x00030220

000d469c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d469c:	b508      	push	{r3, lr}
   d469e:	4b03      	ldr	r3, [pc, #12]	; (d46ac <system_ctrl_set_app_request_handler+0x10>)
   d46a0:	681b      	ldr	r3, [r3, #0]
   d46a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d46a6:	9301      	str	r3, [sp, #4]
   d46a8:	bd08      	pop	{r3, pc}
   d46aa:	0000      	.short	0x0000
   d46ac:	00030220 	.word	0x00030220

000d46b0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d46b0:	b508      	push	{r3, lr}
   d46b2:	4b03      	ldr	r3, [pc, #12]	; (d46c0 <system_ctrl_set_result+0x10>)
   d46b4:	681b      	ldr	r3, [r3, #0]
   d46b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d46ba:	9301      	str	r3, [sp, #4]
   d46bc:	bd08      	pop	{r3, pc}
   d46be:	0000      	.short	0x0000
   d46c0:	00030220 	.word	0x00030220

000d46c4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d46c4:	b508      	push	{r3, lr}
   d46c6:	4b02      	ldr	r3, [pc, #8]	; (d46d0 <spark_set_random_seed_from_cloud_handler+0xc>)
   d46c8:	681b      	ldr	r3, [r3, #0]
   d46ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d46cc:	9301      	str	r3, [sp, #4]
   d46ce:	bd08      	pop	{r3, pc}
   d46d0:	00030244 	.word	0x00030244

000d46d4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d46d4:	b508      	push	{r3, lr}
   d46d6:	4b02      	ldr	r3, [pc, #8]	; (d46e0 <network_connect+0xc>)
   d46d8:	681b      	ldr	r3, [r3, #0]
   d46da:	685b      	ldr	r3, [r3, #4]
   d46dc:	9301      	str	r3, [sp, #4]
   d46de:	bd08      	pop	{r3, pc}
   d46e0:	00030240 	.word	0x00030240

000d46e4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d46e4:	b508      	push	{r3, lr}
   d46e6:	4b02      	ldr	r3, [pc, #8]	; (d46f0 <network_connecting+0xc>)
   d46e8:	681b      	ldr	r3, [r3, #0]
   d46ea:	689b      	ldr	r3, [r3, #8]
   d46ec:	9301      	str	r3, [sp, #4]
   d46ee:	bd08      	pop	{r3, pc}
   d46f0:	00030240 	.word	0x00030240

000d46f4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d46f4:	b508      	push	{r3, lr}
   d46f6:	4b02      	ldr	r3, [pc, #8]	; (d4700 <network_disconnect+0xc>)
   d46f8:	681b      	ldr	r3, [r3, #0]
   d46fa:	68db      	ldr	r3, [r3, #12]
   d46fc:	9301      	str	r3, [sp, #4]
   d46fe:	bd08      	pop	{r3, pc}
   d4700:	00030240 	.word	0x00030240

000d4704 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4704:	b508      	push	{r3, lr}
   d4706:	4b02      	ldr	r3, [pc, #8]	; (d4710 <network_ready+0xc>)
   d4708:	681b      	ldr	r3, [r3, #0]
   d470a:	691b      	ldr	r3, [r3, #16]
   d470c:	9301      	str	r3, [sp, #4]
   d470e:	bd08      	pop	{r3, pc}
   d4710:	00030240 	.word	0x00030240

000d4714 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4714:	b508      	push	{r3, lr}
   d4716:	4b02      	ldr	r3, [pc, #8]	; (d4720 <network_on+0xc>)
   d4718:	681b      	ldr	r3, [r3, #0]
   d471a:	695b      	ldr	r3, [r3, #20]
   d471c:	9301      	str	r3, [sp, #4]
   d471e:	bd08      	pop	{r3, pc}
   d4720:	00030240 	.word	0x00030240

000d4724 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4724:	b508      	push	{r3, lr}
   d4726:	4b02      	ldr	r3, [pc, #8]	; (d4730 <network_off+0xc>)
   d4728:	681b      	ldr	r3, [r3, #0]
   d472a:	699b      	ldr	r3, [r3, #24]
   d472c:	9301      	str	r3, [sp, #4]
   d472e:	bd08      	pop	{r3, pc}
   d4730:	00030240 	.word	0x00030240

000d4734 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4734:	b508      	push	{r3, lr}
   d4736:	4b02      	ldr	r3, [pc, #8]	; (d4740 <network_listen+0xc>)
   d4738:	681b      	ldr	r3, [r3, #0]
   d473a:	69db      	ldr	r3, [r3, #28]
   d473c:	9301      	str	r3, [sp, #4]
   d473e:	bd08      	pop	{r3, pc}
   d4740:	00030240 	.word	0x00030240

000d4744 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4744:	b508      	push	{r3, lr}
   d4746:	4b02      	ldr	r3, [pc, #8]	; (d4750 <network_listening+0xc>)
   d4748:	681b      	ldr	r3, [r3, #0]
   d474a:	6a1b      	ldr	r3, [r3, #32]
   d474c:	9301      	str	r3, [sp, #4]
   d474e:	bd08      	pop	{r3, pc}
   d4750:	00030240 	.word	0x00030240

000d4754 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4754:	b508      	push	{r3, lr}
   d4756:	4b02      	ldr	r3, [pc, #8]	; (d4760 <network_set_listen_timeout+0xc>)
   d4758:	681b      	ldr	r3, [r3, #0]
   d475a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d475c:	9301      	str	r3, [sp, #4]
   d475e:	bd08      	pop	{r3, pc}
   d4760:	00030240 	.word	0x00030240

000d4764 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4764:	b508      	push	{r3, lr}
   d4766:	4b02      	ldr	r3, [pc, #8]	; (d4770 <network_get_listen_timeout+0xc>)
   d4768:	681b      	ldr	r3, [r3, #0]
   d476a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d476c:	9301      	str	r3, [sp, #4]
   d476e:	bd08      	pop	{r3, pc}
   d4770:	00030240 	.word	0x00030240

000d4774 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4774:	b508      	push	{r3, lr}
   d4776:	4b02      	ldr	r3, [pc, #8]	; (d4780 <malloc+0xc>)
   d4778:	681b      	ldr	r3, [r3, #0]
   d477a:	681b      	ldr	r3, [r3, #0]
   d477c:	9301      	str	r3, [sp, #4]
   d477e:	bd08      	pop	{r3, pc}
   d4780:	0003021c 	.word	0x0003021c

000d4784 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4784:	b508      	push	{r3, lr}
   d4786:	4b02      	ldr	r3, [pc, #8]	; (d4790 <free+0xc>)
   d4788:	681b      	ldr	r3, [r3, #0]
   d478a:	685b      	ldr	r3, [r3, #4]
   d478c:	9301      	str	r3, [sp, #4]
   d478e:	bd08      	pop	{r3, pc}
   d4790:	0003021c 	.word	0x0003021c

000d4794 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4794:	b508      	push	{r3, lr}
   d4796:	4b02      	ldr	r3, [pc, #8]	; (d47a0 <realloc+0xc>)
   d4798:	681b      	ldr	r3, [r3, #0]
   d479a:	689b      	ldr	r3, [r3, #8]
   d479c:	9301      	str	r3, [sp, #4]
   d479e:	bd08      	pop	{r3, pc}
   d47a0:	0003021c 	.word	0x0003021c

000d47a4 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d47a4:	b508      	push	{r3, lr}
   d47a6:	4b02      	ldr	r3, [pc, #8]	; (d47b0 <vsnprintf+0xc>)
   d47a8:	681b      	ldr	r3, [r3, #0]
   d47aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d47ac:	9301      	str	r3, [sp, #4]
   d47ae:	bd08      	pop	{r3, pc}
   d47b0:	0003021c 	.word	0x0003021c

000d47b4 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d47b4:	b508      	push	{r3, lr}
   d47b6:	4b02      	ldr	r3, [pc, #8]	; (d47c0 <__errno+0xc>)
   d47b8:	681b      	ldr	r3, [r3, #0]
   d47ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d47bc:	9301      	str	r3, [sp, #4]
   d47be:	bd08      	pop	{r3, pc}
   d47c0:	0003021c 	.word	0x0003021c

000d47c4 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d47c4:	b510      	push	{r4, lr}
   d47c6:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d47c8:	6800      	ldr	r0, [r0, #0]
   d47ca:	b108      	cbz	r0, d47d0 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d47cc:	f7ff fe46 	bl	d445c <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d47d0:	4620      	mov	r0, r4
   d47d2:	bd10      	pop	{r4, pc}

000d47d4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d47d4:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d47d6:	4c06      	ldr	r4, [pc, #24]	; (d47f0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d47d8:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d47da:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d47dc:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d47de:	f7ff fe35 	bl	d444c <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d47e2:	4620      	mov	r0, r4
   d47e4:	4a03      	ldr	r2, [pc, #12]	; (d47f4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d47e6:	4904      	ldr	r1, [pc, #16]	; (d47f8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d47e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d47ec:	f000 be76 	b.w	d54dc <__aeabi_atexit>
   d47f0:	2003e4a4 	.word	0x2003e4a4
   d47f4:	2003e46c 	.word	0x2003e46c
   d47f8:	000d47c5 	.word	0x000d47c5

000d47fc <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d47fc:	2200      	movs	r2, #0
   d47fe:	4611      	mov	r1, r2
   d4800:	6840      	ldr	r0, [r0, #4]
   d4802:	f7ff bf7f 	b.w	d4704 <network_ready>

000d4806 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4806:	2200      	movs	r2, #0
   d4808:	4611      	mov	r1, r2
   d480a:	6840      	ldr	r0, [r0, #4]
   d480c:	f7ff bf9a 	b.w	d4744 <network_listening>

000d4810 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4810:	2200      	movs	r2, #0
   d4812:	4611      	mov	r1, r2
   d4814:	6840      	ldr	r0, [r0, #4]
   d4816:	f7ff bfa5 	b.w	d4764 <network_get_listen_timeout>

000d481a <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d481a:	2200      	movs	r2, #0
   d481c:	6840      	ldr	r0, [r0, #4]
   d481e:	f7ff bf99 	b.w	d4754 <network_set_listen_timeout>

000d4822 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4822:	2200      	movs	r2, #0
   d4824:	f081 0101 	eor.w	r1, r1, #1
   d4828:	6840      	ldr	r0, [r0, #4]
   d482a:	f7ff bf83 	b.w	d4734 <network_listen>

000d482e <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d482e:	2300      	movs	r3, #0
   d4830:	461a      	mov	r2, r3
   d4832:	4619      	mov	r1, r3
   d4834:	6840      	ldr	r0, [r0, #4]
   d4836:	f7ff bf75 	b.w	d4724 <network_off>

000d483a <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d483a:	2300      	movs	r3, #0
   d483c:	461a      	mov	r2, r3
   d483e:	4619      	mov	r1, r3
   d4840:	6840      	ldr	r0, [r0, #4]
   d4842:	f7ff bf67 	b.w	d4714 <network_on>

000d4846 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4846:	2200      	movs	r2, #0
   d4848:	4611      	mov	r1, r2
   d484a:	6840      	ldr	r0, [r0, #4]
   d484c:	f7ff bf4a 	b.w	d46e4 <network_connecting>

000d4850 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4850:	2200      	movs	r2, #0
   d4852:	2102      	movs	r1, #2
   d4854:	6840      	ldr	r0, [r0, #4]
   d4856:	f7ff bf4d 	b.w	d46f4 <network_disconnect>

000d485a <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d485a:	2300      	movs	r3, #0
   d485c:	461a      	mov	r2, r3
   d485e:	6840      	ldr	r0, [r0, #4]
   d4860:	f7ff bf38 	b.w	d46d4 <network_connect>

000d4864 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d4864:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d4866:	4c08      	ldr	r4, [pc, #32]	; (d4888 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d4868:	2528      	movs	r5, #40	; 0x28
   d486a:	462a      	mov	r2, r5
   d486c:	2100      	movs	r1, #0
   d486e:	4620      	mov	r0, r4
   d4870:	f002 fda7 	bl	d73c2 <memset>
        cid = -1;
   d4874:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d4878:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d487a:	4b04      	ldr	r3, [pc, #16]	; (d488c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d487c:	8025      	strh	r5, [r4, #0]
   d487e:	2204      	movs	r2, #4
   d4880:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d4882:	4a03      	ldr	r2, [pc, #12]	; (d4890 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d4884:	601a      	str	r2, [r3, #0]
   d4886:	bd38      	pop	{r3, r4, r5, pc}
   d4888:	2003e4b0 	.word	0x2003e4b0
   d488c:	2003e4a8 	.word	0x2003e4a8
   d4890:	000d7504 	.word	0x000d7504

000d4894 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4894:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4896:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4898:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d489a:	b113      	cbz	r3, d48a2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d489c:	2203      	movs	r2, #3
   d489e:	4601      	mov	r1, r0
   d48a0:	4798      	blx	r3
    }
   d48a2:	4620      	mov	r0, r4
   d48a4:	bd10      	pop	{r4, pc}

000d48a6 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d48a6:	2200      	movs	r2, #0
   d48a8:	4611      	mov	r1, r2
   d48aa:	6840      	ldr	r0, [r0, #4]
   d48ac:	f7ff bf4a 	b.w	d4744 <network_listening>

000d48b0 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d48b0:	2200      	movs	r2, #0
   d48b2:	4611      	mov	r1, r2
   d48b4:	6840      	ldr	r0, [r0, #4]
   d48b6:	f7ff bf55 	b.w	d4764 <network_get_listen_timeout>

000d48ba <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d48ba:	2200      	movs	r2, #0
   d48bc:	6840      	ldr	r0, [r0, #4]
   d48be:	f7ff bf49 	b.w	d4754 <network_set_listen_timeout>

000d48c2 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d48c2:	2200      	movs	r2, #0
   d48c4:	f081 0101 	eor.w	r1, r1, #1
   d48c8:	6840      	ldr	r0, [r0, #4]
   d48ca:	f7ff bf33 	b.w	d4734 <network_listen>

000d48ce <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d48ce:	2300      	movs	r3, #0
   d48d0:	461a      	mov	r2, r3
   d48d2:	4619      	mov	r1, r3
   d48d4:	6840      	ldr	r0, [r0, #4]
   d48d6:	f7ff bf25 	b.w	d4724 <network_off>

000d48da <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d48da:	2300      	movs	r3, #0
   d48dc:	461a      	mov	r2, r3
   d48de:	4619      	mov	r1, r3
   d48e0:	6840      	ldr	r0, [r0, #4]
   d48e2:	f7ff bf17 	b.w	d4714 <network_on>

000d48e6 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d48e6:	2200      	movs	r2, #0
   d48e8:	4611      	mov	r1, r2
   d48ea:	6840      	ldr	r0, [r0, #4]
   d48ec:	f7ff bf0a 	b.w	d4704 <network_ready>

000d48f0 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d48f0:	2200      	movs	r2, #0
   d48f2:	4611      	mov	r1, r2
   d48f4:	6840      	ldr	r0, [r0, #4]
   d48f6:	f7ff bef5 	b.w	d46e4 <network_connecting>

000d48fa <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d48fa:	2200      	movs	r2, #0
   d48fc:	2102      	movs	r1, #2
   d48fe:	6840      	ldr	r0, [r0, #4]
   d4900:	f7ff bef8 	b.w	d46f4 <network_disconnect>

000d4904 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4904:	2300      	movs	r3, #0
   d4906:	461a      	mov	r2, r3
   d4908:	6840      	ldr	r0, [r0, #4]
   d490a:	f7ff bee3 	b.w	d46d4 <network_connect>
	...

000d4910 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d4910:	4b02      	ldr	r3, [pc, #8]	; (d491c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4912:	2203      	movs	r2, #3
   d4914:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4916:	4a02      	ldr	r2, [pc, #8]	; (d4920 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4918:	601a      	str	r2, [r3, #0]
   d491a:	4770      	bx	lr
   d491c:	2003e4d8 	.word	0x2003e4d8
   d4920:	000d7538 	.word	0x000d7538

000d4924 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d4924:	4770      	bx	lr

000d4926 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4926:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4928:	4606      	mov	r6, r0
   d492a:	4615      	mov	r5, r2
   d492c:	460c      	mov	r4, r1
   d492e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4930:	42bc      	cmp	r4, r7
   d4932:	d006      	beq.n	d4942 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4934:	6833      	ldr	r3, [r6, #0]
   d4936:	f814 1b01 	ldrb.w	r1, [r4], #1
   d493a:	689b      	ldr	r3, [r3, #8]
   d493c:	4630      	mov	r0, r6
   d493e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4940:	e7f6      	b.n	d4930 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d4942:	4628      	mov	r0, r5
   d4944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4946 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d4946:	2200      	movs	r2, #0
   d4948:	7c00      	ldrb	r0, [r0, #16]
   d494a:	f7ff bdc7 	b.w	d44dc <HAL_I2C_Write_Data>

000d494e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d494e:	2100      	movs	r1, #0
   d4950:	7c00      	ldrb	r0, [r0, #16]
   d4952:	f7ff bdcb 	b.w	d44ec <HAL_I2C_Available_Data>

000d4956 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d4956:	2100      	movs	r1, #0
   d4958:	7c00      	ldrb	r0, [r0, #16]
   d495a:	f7ff bdcf 	b.w	d44fc <HAL_I2C_Read_Data>

000d495e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d495e:	2100      	movs	r1, #0
   d4960:	7c00      	ldrb	r0, [r0, #16]
   d4962:	f7ff bdd3 	b.w	d450c <HAL_I2C_Peek_Data>

000d4966 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d4966:	2100      	movs	r1, #0
   d4968:	7c00      	ldrb	r0, [r0, #16]
   d496a:	f7ff bdd7 	b.w	d451c <HAL_I2C_Flush_Data>

000d496e <_ZN7TwoWireD0Ev>:
   d496e:	b510      	push	{r4, lr}
   d4970:	2114      	movs	r1, #20
   d4972:	4604      	mov	r4, r0
   d4974:	f000 fdb7 	bl	d54e6 <_ZdlPvj>
   d4978:	4620      	mov	r0, r4
   d497a:	bd10      	pop	{r4, pc}

000d497c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d497c:	b510      	push	{r4, lr}
   d497e:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4980:	2300      	movs	r3, #0
   d4982:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4984:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4988:	60a3      	str	r3, [r4, #8]
   d498a:	4b04      	ldr	r3, [pc, #16]	; (d499c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d498c:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d498e:	4608      	mov	r0, r1
   d4990:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d4992:	4611      	mov	r1, r2
   d4994:	f7ff fdd2 	bl	d453c <HAL_I2C_Init>
}
   d4998:	4620      	mov	r0, r4
   d499a:	bd10      	pop	{r4, pc}
   d499c:	000d756c 	.word	0x000d756c

000d49a0 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d49a0:	2100      	movs	r1, #0
   d49a2:	7c00      	ldrb	r0, [r0, #16]
   d49a4:	f7ff bdc2 	b.w	d452c <HAL_I2C_Is_Enabled>

000d49a8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d49a8:	4770      	bx	lr

000d49aa <_ZN9IPAddressD0Ev>:
   d49aa:	b510      	push	{r4, lr}
   d49ac:	2118      	movs	r1, #24
   d49ae:	4604      	mov	r4, r0
   d49b0:	f000 fd99 	bl	d54e6 <_ZdlPvj>
   d49b4:	4620      	mov	r0, r4
   d49b6:	bd10      	pop	{r4, pc}

000d49b8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d49b8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d49ba:	7d03      	ldrb	r3, [r0, #20]
   d49bc:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d49be:	b08d      	sub	sp, #52	; 0x34
   d49c0:	460e      	mov	r6, r1
   d49c2:	f100 0704 	add.w	r7, r0, #4
   d49c6:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d49ca:	d002      	beq.n	d49d2 <_ZNK9IPAddress7printToER5Print+0x1a>
   d49cc:	f100 0508 	add.w	r5, r0, #8
   d49d0:	e018      	b.n	d4a04 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d49d2:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d49d4:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d49d6:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d49da:	232f      	movs	r3, #47	; 0x2f
   d49dc:	462a      	mov	r2, r5
   d49de:	200a      	movs	r0, #10
   d49e0:	f7ff fdb4 	bl	d454c <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d49e4:	4628      	mov	r0, r5
   d49e6:	f002 fd1d 	bl	d7424 <strlen>
   d49ea:	6833      	ldr	r3, [r6, #0]
   d49ec:	4602      	mov	r2, r0
   d49ee:	68db      	ldr	r3, [r3, #12]
   d49f0:	4629      	mov	r1, r5
   d49f2:	4630      	mov	r0, r6
   d49f4:	4798      	blx	r3
   d49f6:	e00f      	b.n	d4a18 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d49f8:	b124      	cbz	r4, d4a04 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d49fa:	212e      	movs	r1, #46	; 0x2e
   d49fc:	4630      	mov	r0, r6
   d49fe:	f000 f9d5 	bl	d4dac <_ZN5Print5printEc>
   d4a02:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4a04:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4a08:	220a      	movs	r2, #10
   d4a0a:	4630      	mov	r0, r6
   d4a0c:	f000 f9e7 	bl	d4dde <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4a10:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4a12:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4a14:	d1f0      	bne.n	d49f8 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4a16:	4620      	mov	r0, r4
    }
    return n;
}
   d4a18:	b00d      	add	sp, #52	; 0x34
   d4a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4a1c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d4a1c:	b510      	push	{r4, lr}
   d4a1e:	4b05      	ldr	r3, [pc, #20]	; (d4a34 <_ZN9IPAddressC1Ev+0x18>)
   d4a20:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4a22:	2211      	movs	r2, #17
   d4a24:	f840 3b04 	str.w	r3, [r0], #4
   d4a28:	2100      	movs	r1, #0
   d4a2a:	f002 fcca 	bl	d73c2 <memset>
{
    clear();
}
   d4a2e:	4620      	mov	r0, r4
   d4a30:	bd10      	pop	{r4, pc}
   d4a32:	bf00      	nop
   d4a34:	000d7594 	.word	0x000d7594

000d4a38 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d4a38:	4603      	mov	r3, r0
   d4a3a:	4a07      	ldr	r2, [pc, #28]	; (d4a58 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4a3c:	b510      	push	{r4, lr}
   d4a3e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d4a42:	f101 0210 	add.w	r2, r1, #16
   d4a46:	f851 4b04 	ldr.w	r4, [r1], #4
   d4a4a:	f843 4b04 	str.w	r4, [r3], #4
   d4a4e:	4291      	cmp	r1, r2
   d4a50:	d1f9      	bne.n	d4a46 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4a52:	780a      	ldrb	r2, [r1, #0]
   d4a54:	701a      	strb	r2, [r3, #0]
}
   d4a56:	bd10      	pop	{r4, pc}
   d4a58:	000d7594 	.word	0x000d7594

000d4a5c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d4a5c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4a5e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4a62:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4a66:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4a6a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d4a6e:	2304      	movs	r3, #4
   d4a70:	6041      	str	r1, [r0, #4]
   d4a72:	7503      	strb	r3, [r0, #20]
   d4a74:	bd10      	pop	{r4, pc}

000d4a76 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d4a76:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4a78:	780d      	ldrb	r5, [r1, #0]
   d4a7a:	788b      	ldrb	r3, [r1, #2]
   d4a7c:	784a      	ldrb	r2, [r1, #1]
   d4a7e:	78c9      	ldrb	r1, [r1, #3]
   d4a80:	9100      	str	r1, [sp, #0]
   d4a82:	4629      	mov	r1, r5
   d4a84:	f7ff ffea 	bl	d4a5c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d4a88:	b003      	add	sp, #12
   d4a8a:	bd30      	pop	{r4, r5, pc}

000d4a8c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4a8c:	4b01      	ldr	r3, [pc, #4]	; (d4a94 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4a8e:	4a02      	ldr	r2, [pc, #8]	; (d4a98 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4a90:	601a      	str	r2, [r3, #0]
   d4a92:	4770      	bx	lr
   d4a94:	2003e4e0 	.word	0x2003e4e0
   d4a98:	000d7613 	.word	0x000d7613

000d4a9c <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4a9c:	2200      	movs	r2, #0
   d4a9e:	4611      	mov	r1, r2
   d4aa0:	6840      	ldr	r0, [r0, #4]
   d4aa2:	f7ff be4f 	b.w	d4744 <network_listening>

000d4aa6 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4aa6:	2200      	movs	r2, #0
   d4aa8:	4611      	mov	r1, r2
   d4aaa:	6840      	ldr	r0, [r0, #4]
   d4aac:	f7ff be5a 	b.w	d4764 <network_get_listen_timeout>

000d4ab0 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4ab0:	2200      	movs	r2, #0
   d4ab2:	6840      	ldr	r0, [r0, #4]
   d4ab4:	f7ff be4e 	b.w	d4754 <network_set_listen_timeout>

000d4ab8 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4ab8:	2200      	movs	r2, #0
   d4aba:	f081 0101 	eor.w	r1, r1, #1
   d4abe:	6840      	ldr	r0, [r0, #4]
   d4ac0:	f7ff be38 	b.w	d4734 <network_listen>

000d4ac4 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d4ac4:	2300      	movs	r3, #0
   d4ac6:	461a      	mov	r2, r3
   d4ac8:	2101      	movs	r1, #1
   d4aca:	6840      	ldr	r0, [r0, #4]
   d4acc:	f7ff be2a 	b.w	d4724 <network_off>

000d4ad0 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4ad0:	2300      	movs	r3, #0
   d4ad2:	461a      	mov	r2, r3
   d4ad4:	4619      	mov	r1, r3
   d4ad6:	6840      	ldr	r0, [r0, #4]
   d4ad8:	f7ff be1c 	b.w	d4714 <network_on>

000d4adc <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4adc:	2200      	movs	r2, #0
   d4ade:	4611      	mov	r1, r2
   d4ae0:	6840      	ldr	r0, [r0, #4]
   d4ae2:	f7ff be0f 	b.w	d4704 <network_ready>

000d4ae6 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4ae6:	2200      	movs	r2, #0
   d4ae8:	4611      	mov	r1, r2
   d4aea:	6840      	ldr	r0, [r0, #4]
   d4aec:	f7ff bdfa 	b.w	d46e4 <network_connecting>

000d4af0 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4af0:	2200      	movs	r2, #0
   d4af2:	2102      	movs	r1, #2
   d4af4:	6840      	ldr	r0, [r0, #4]
   d4af6:	f7ff bdfd 	b.w	d46f4 <network_disconnect>

000d4afa <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4afa:	2300      	movs	r3, #0
   d4afc:	461a      	mov	r2, r3
   d4afe:	6840      	ldr	r0, [r0, #4]
   d4b00:	f7ff bde8 	b.w	d46d4 <network_connect>

000d4b04 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d4b04:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4b06:	4605      	mov	r5, r0
   d4b08:	b188      	cbz	r0, d4b2e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4b0a:	6804      	ldr	r4, [r0, #0]
   d4b0c:	b14c      	cbz	r4, d4b22 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d4b0e:	68a3      	ldr	r3, [r4, #8]
   d4b10:	b11b      	cbz	r3, d4b1a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4b12:	2203      	movs	r2, #3
   d4b14:	4621      	mov	r1, r4
   d4b16:	4620      	mov	r0, r4
   d4b18:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4b1a:	2110      	movs	r1, #16
   d4b1c:	4620      	mov	r0, r4
   d4b1e:	f000 fce2 	bl	d54e6 <_ZdlPvj>
   d4b22:	4628      	mov	r0, r5
   d4b24:	2114      	movs	r1, #20
      }
   d4b26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4b2a:	f000 bcdc 	b.w	d54e6 <_ZdlPvj>
   d4b2e:	bd38      	pop	{r3, r4, r5, pc}

000d4b30 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d4b30:	b110      	cbz	r0, d4b38 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d4b32:	6803      	ldr	r3, [r0, #0]
   d4b34:	685b      	ldr	r3, [r3, #4]
   d4b36:	4718      	bx	r3
   d4b38:	4770      	bx	lr

000d4b3a <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d4b3a:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4b3c:	6803      	ldr	r3, [r0, #0]
   d4b3e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d4b40:	b1bb      	cbz	r3, d4b72 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d4b42:	6858      	ldr	r0, [r3, #4]
   d4b44:	f7ff fc6a 	bl	d441c <os_thread_is_current>
   d4b48:	b978      	cbnz	r0, d4b6a <_ZN6ThreadD1Ev+0x30>
   d4b4a:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d4b4c:	7c5a      	ldrb	r2, [r3, #17]
   d4b4e:	b912      	cbnz	r2, d4b56 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d4b50:	6858      	ldr	r0, [r3, #4]
   d4b52:	f7ff fc6b 	bl	d442c <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d4b56:	6823      	ldr	r3, [r4, #0]
   d4b58:	6858      	ldr	r0, [r3, #4]
   d4b5a:	f7ff fc6f 	bl	d443c <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4b5e:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4b60:	2300      	movs	r3, #0
   d4b62:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4b64:	b128      	cbz	r0, d4b72 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d4b66:	f7ff ffcd 	bl	d4b04 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4b6a:	6820      	ldr	r0, [r4, #0]
   d4b6c:	b108      	cbz	r0, d4b72 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d4b6e:	f7ff ffc9 	bl	d4b04 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d4b72:	4620      	mov	r0, r4
   d4b74:	bd10      	pop	{r4, pc}

000d4b76 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d4b76:	b538      	push	{r3, r4, r5, lr}
   d4b78:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4b7a:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d4b7e:	b108      	cbz	r0, d4b84 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d4b80:	f7ff fa8f 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4b84:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d4b88:	b108      	cbz	r0, d4b8e <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d4b8a:	f7ff fc67 	bl	d445c <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4b8e:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d4b92:	b135      	cbz	r5, d4ba2 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4b94:	4628      	mov	r0, r5
   d4b96:	f7ff ffd0 	bl	d4b3a <_ZN6ThreadD1Ev>
   d4b9a:	2104      	movs	r1, #4
   d4b9c:	4628      	mov	r0, r5
   d4b9e:	f000 fca2 	bl	d54e6 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4ba2:	6820      	ldr	r0, [r4, #0]
   d4ba4:	b108      	cbz	r0, d4baa <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d4ba6:	f7ff ffc3 	bl	d4b30 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d4baa:	4620      	mov	r0, r4
   d4bac:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4bb0 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d4bb0:	b510      	push	{r4, lr}
   d4bb2:	4b04      	ldr	r3, [pc, #16]	; (d4bc4 <_ZN5spark9MeshClassD1Ev+0x14>)
   d4bb4:	4604      	mov	r4, r0
   d4bb6:	f840 3b08 	str.w	r3, [r0], #8
   d4bba:	f7ff ffdc 	bl	d4b76 <_ZN5spark11MeshPublishD1Ev>
   d4bbe:	4620      	mov	r0, r4
   d4bc0:	bd10      	pop	{r4, pc}
   d4bc2:	bf00      	nop
   d4bc4:	000d7688 	.word	0x000d7688

000d4bc8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d4bc8:	b538      	push	{r3, r4, r5, lr}
   d4bca:	4c0e      	ldr	r4, [pc, #56]	; (d4c04 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d4bcc:	4b0e      	ldr	r3, [pc, #56]	; (d4c08 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d4bce:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d4bd0:	2500      	movs	r5, #0
   d4bd2:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d4bd4:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d4bd8:	6063      	str	r3, [r4, #4]
   d4bda:	60a5      	str	r5, [r4, #8]
   d4bdc:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4be0:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d4be4:	f7ff fc32 	bl	d444c <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d4be8:	4b08      	ldr	r3, [pc, #32]	; (d4c0c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d4bea:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4bee:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d4bf2:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d4bf4:	4620      	mov	r0, r4
   d4bf6:	4a06      	ldr	r2, [pc, #24]	; (d4c10 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d4bf8:	4906      	ldr	r1, [pc, #24]	; (d4c14 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d4bfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d4bfe:	f000 bc6d 	b.w	d54dc <__aeabi_atexit>
   d4c02:	bf00      	nop
   d4c04:	2003e4e4 	.word	0x2003e4e4
   d4c08:	000d76bc 	.word	0x000d76bc
   d4c0c:	000d7688 	.word	0x000d7688
   d4c10:	2003e46c 	.word	0x2003e46c
   d4c14:	000d4bb1 	.word	0x000d4bb1

000d4c18 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d4c18:	2300      	movs	r3, #0
   d4c1a:	461a      	mov	r2, r3
   d4c1c:	6840      	ldr	r0, [r0, #4]
   d4c1e:	f7ff bd59 	b.w	d46d4 <network_connect>

000d4c22 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d4c22:	2200      	movs	r2, #0
   d4c24:	2102      	movs	r1, #2
   d4c26:	6840      	ldr	r0, [r0, #4]
   d4c28:	f7ff bd64 	b.w	d46f4 <network_disconnect>

000d4c2c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d4c2c:	2200      	movs	r2, #0
   d4c2e:	4611      	mov	r1, r2
   d4c30:	6840      	ldr	r0, [r0, #4]
   d4c32:	f7ff bd57 	b.w	d46e4 <network_connecting>

000d4c36 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d4c36:	2200      	movs	r2, #0
   d4c38:	4611      	mov	r1, r2
   d4c3a:	6840      	ldr	r0, [r0, #4]
   d4c3c:	f7ff bd62 	b.w	d4704 <network_ready>

000d4c40 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d4c40:	2300      	movs	r3, #0
   d4c42:	461a      	mov	r2, r3
   d4c44:	4619      	mov	r1, r3
   d4c46:	6840      	ldr	r0, [r0, #4]
   d4c48:	f7ff bd64 	b.w	d4714 <network_on>

000d4c4c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d4c4c:	2300      	movs	r3, #0
   d4c4e:	461a      	mov	r2, r3
   d4c50:	4619      	mov	r1, r3
   d4c52:	6840      	ldr	r0, [r0, #4]
   d4c54:	f7ff bd66 	b.w	d4724 <network_off>

000d4c58 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d4c58:	2200      	movs	r2, #0
   d4c5a:	f081 0101 	eor.w	r1, r1, #1
   d4c5e:	6840      	ldr	r0, [r0, #4]
   d4c60:	f7ff bd68 	b.w	d4734 <network_listen>

000d4c64 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d4c64:	2200      	movs	r2, #0
   d4c66:	6840      	ldr	r0, [r0, #4]
   d4c68:	f7ff bd74 	b.w	d4754 <network_set_listen_timeout>

000d4c6c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d4c6c:	2200      	movs	r2, #0
   d4c6e:	4611      	mov	r1, r2
   d4c70:	6840      	ldr	r0, [r0, #4]
   d4c72:	f7ff bd77 	b.w	d4764 <network_get_listen_timeout>

000d4c76 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d4c76:	2200      	movs	r2, #0
   d4c78:	4611      	mov	r1, r2
   d4c7a:	6840      	ldr	r0, [r0, #4]
   d4c7c:	f7ff bd62 	b.w	d4744 <network_listening>

000d4c80 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d4c80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4c84:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d4c86:	b095      	sub	sp, #84	; 0x54
   d4c88:	4616      	mov	r6, r2
   d4c8a:	460d      	mov	r5, r1
   d4c8c:	4607      	mov	r7, r0
    IPAddress addr;
   d4c8e:	f7ff fec5 	bl	d4a1c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d4c92:	4621      	mov	r1, r4
   d4c94:	2220      	movs	r2, #32
   d4c96:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4c98:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d4c9a:	f002 fb92 	bl	d73c2 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d4c9e:	2340      	movs	r3, #64	; 0x40
   d4ca0:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d4ca2:	4621      	mov	r1, r4
   d4ca4:	466b      	mov	r3, sp
   d4ca6:	aa0c      	add	r2, sp, #48	; 0x30
   d4ca8:	4630      	mov	r0, r6
   d4caa:	f7ff fc5f 	bl	d456c <netdb_getaddrinfo>
    if (!r) {
   d4cae:	4604      	mov	r4, r0
   d4cb0:	2800      	cmp	r0, #0
   d4cb2:	d144      	bne.n	d4d3e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4cb4:	4602      	mov	r2, r0
   d4cb6:	2101      	movs	r1, #1
   d4cb8:	6868      	ldr	r0, [r5, #4]
   d4cba:	f7ff fd23 	bl	d4704 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4cbe:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4cc0:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4cc2:	4622      	mov	r2, r4
   d4cc4:	6868      	ldr	r0, [r5, #4]
   d4cc6:	f7ff fd1d 	bl	d4704 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4cca:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4ccc:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d4cce:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4cd0:	2e00      	cmp	r6, #0
   d4cd2:	d034      	beq.n	d4d3e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d4cd4:	2900      	cmp	r1, #0
   d4cd6:	d132      	bne.n	d4d3e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d4cd8:	6873      	ldr	r3, [r6, #4]
   d4cda:	2b02      	cmp	r3, #2
   d4cdc:	d002      	beq.n	d4ce4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d4cde:	2b0a      	cmp	r3, #10
   d4ce0:	d009      	beq.n	d4cf6 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d4ce2:	e02a      	b.n	d4d3a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d4ce4:	f1b8 0f00 	cmp.w	r8, #0
   d4ce8:	d027      	beq.n	d4d3a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d4cea:	6971      	ldr	r1, [r6, #20]
   d4cec:	4638      	mov	r0, r7
   d4cee:	3104      	adds	r1, #4
   d4cf0:	f7ff fec1 	bl	d4a76 <_ZN9IPAddressaSEPKh>
   d4cf4:	e020      	b.n	d4d38 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d4cf6:	f1b9 0f00 	cmp.w	r9, #0
   d4cfa:	d01e      	beq.n	d4d3a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d4cfc:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d4cfe:	2211      	movs	r2, #17
   d4d00:	a801      	add	r0, sp, #4
   d4d02:	f002 fb5e 	bl	d73c2 <memset>
                    a.v = 6;
   d4d06:	2306      	movs	r3, #6
   d4d08:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d4d0c:	ad01      	add	r5, sp, #4
   d4d0e:	f104 0308 	add.w	r3, r4, #8
   d4d12:	3418      	adds	r4, #24
   d4d14:	6818      	ldr	r0, [r3, #0]
   d4d16:	6859      	ldr	r1, [r3, #4]
   d4d18:	462a      	mov	r2, r5
   d4d1a:	c203      	stmia	r2!, {r0, r1}
   d4d1c:	3308      	adds	r3, #8
   d4d1e:	42a3      	cmp	r3, r4
   d4d20:	4615      	mov	r5, r2
   d4d22:	d1f7      	bne.n	d4d14 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d4d24:	a901      	add	r1, sp, #4
   d4d26:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d4d28:	ad07      	add	r5, sp, #28
   d4d2a:	f7ff fe85 	bl	d4a38 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d4d2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4d30:	1d3c      	adds	r4, r7, #4
   d4d32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4d34:	682b      	ldr	r3, [r5, #0]
   d4d36:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d4d38:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4d3a:	69f6      	ldr	r6, [r6, #28]
   d4d3c:	e7c8      	b.n	d4cd0 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d4d3e:	9800      	ldr	r0, [sp, #0]
   d4d40:	f7ff fc0c 	bl	d455c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d4d44:	4638      	mov	r0, r7
   d4d46:	b015      	add	sp, #84	; 0x54
   d4d48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d4d4c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d4d4c:	4b02      	ldr	r3, [pc, #8]	; (d4d58 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d4d4e:	4a03      	ldr	r2, [pc, #12]	; (d4d5c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d4d50:	601a      	str	r2, [r3, #0]
   d4d52:	2200      	movs	r2, #0
   d4d54:	605a      	str	r2, [r3, #4]
   d4d56:	4770      	bx	lr
   d4d58:	2003e6b8 	.word	0x2003e6b8
   d4d5c:	000d76bc 	.word	0x000d76bc

000d4d60 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4d62:	4606      	mov	r6, r0
   d4d64:	460d      	mov	r5, r1
   d4d66:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d4d68:	2400      	movs	r4, #0
  while (size--) {
   d4d6a:	42bd      	cmp	r5, r7
   d4d6c:	d00c      	beq.n	d4d88 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4d6e:	6833      	ldr	r3, [r6, #0]
   d4d70:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4d74:	689b      	ldr	r3, [r3, #8]
   d4d76:	4630      	mov	r0, r6
   d4d78:	4798      	blx	r3
     if (chunk>=0)
   d4d7a:	2800      	cmp	r0, #0
   d4d7c:	db01      	blt.n	d4d82 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4d7e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d4d80:	e7f3      	b.n	d4d6a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4d82:	2c00      	cmp	r4, #0
   d4d84:	bf08      	it	eq
   d4d86:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d4d88:	4620      	mov	r0, r4
   d4d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4d8c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4d8c:	b570      	push	{r4, r5, r6, lr}
   d4d8e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4d90:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d4d92:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d4d94:	b149      	cbz	r1, d4daa <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d4d96:	f002 fb45 	bl	d7424 <strlen>
   d4d9a:	682b      	ldr	r3, [r5, #0]
   d4d9c:	4602      	mov	r2, r0
   d4d9e:	4621      	mov	r1, r4
   d4da0:	4628      	mov	r0, r5
   d4da2:	68db      	ldr	r3, [r3, #12]
    }
   d4da4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4da8:	4718      	bx	r3
    }
   d4daa:	bd70      	pop	{r4, r5, r6, pc}

000d4dac <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4dac:	6803      	ldr	r3, [r0, #0]
   d4dae:	689b      	ldr	r3, [r3, #8]
   d4db0:	4718      	bx	r3

000d4db2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4db2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4db4:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4db6:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4db8:	f7ff fff8 	bl	d4dac <_ZN5Print5printEc>
  n += print('\n');
   d4dbc:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d4dbe:	4604      	mov	r4, r0
  n += print('\n');
   d4dc0:	4628      	mov	r0, r5
   d4dc2:	f7ff fff3 	bl	d4dac <_ZN5Print5printEc>
  return n;
}
   d4dc6:	4420      	add	r0, r4
   d4dc8:	bd38      	pop	{r3, r4, r5, pc}

000d4dca <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d4dca:	b538      	push	{r3, r4, r5, lr}
   d4dcc:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4dce:	f7ff ffdd 	bl	d4d8c <_ZN5Print5writeEPKc>
   d4dd2:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d4dd4:	4628      	mov	r0, r5
   d4dd6:	f7ff ffec 	bl	d4db2 <_ZN5Print7printlnEv>
  return n;
}
   d4dda:	4420      	add	r0, r4
   d4ddc:	bd38      	pop	{r3, r4, r5, pc}

000d4dde <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4dde:	b530      	push	{r4, r5, lr}
   d4de0:	b08b      	sub	sp, #44	; 0x2c
   d4de2:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4de4:	2100      	movs	r1, #0
   d4de6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4dea:	2a01      	cmp	r2, #1
   d4dec:	bf98      	it	ls
   d4dee:	220a      	movls	r2, #10
   d4df0:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d4df4:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d4df8:	fb05 3312 	mls	r3, r5, r2, r3
   d4dfc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4e00:	2b09      	cmp	r3, #9
   d4e02:	bf94      	ite	ls
   d4e04:	3330      	addls	r3, #48	; 0x30
   d4e06:	3337      	addhi	r3, #55	; 0x37
   d4e08:	b2db      	uxtb	r3, r3
   d4e0a:	4621      	mov	r1, r4
   d4e0c:	f804 3901 	strb.w	r3, [r4], #-1
   d4e10:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d4e12:	2d00      	cmp	r5, #0
   d4e14:	d1ee      	bne.n	d4df4 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d4e16:	f7ff ffb9 	bl	d4d8c <_ZN5Print5writeEPKc>
}
   d4e1a:	b00b      	add	sp, #44	; 0x2c
   d4e1c:	bd30      	pop	{r4, r5, pc}

000d4e1e <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d4e1e:	b40c      	push	{r2, r3}
   d4e20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4e24:	b087      	sub	sp, #28
   d4e26:	af00      	add	r7, sp, #0
   d4e28:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d4e2c:	4605      	mov	r5, r0
   d4e2e:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d4e32:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d4e34:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d4e36:	4623      	mov	r3, r4
   d4e38:	464a      	mov	r2, r9
   d4e3a:	2114      	movs	r1, #20
   d4e3c:	1d38      	adds	r0, r7, #4
   d4e3e:	f7ff fcb1 	bl	d47a4 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d4e42:	2813      	cmp	r0, #19
   d4e44:	d805      	bhi.n	d4e52 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4e46:	1d39      	adds	r1, r7, #4
   d4e48:	4628      	mov	r0, r5
   d4e4a:	f7ff ff9f 	bl	d4d8c <_ZN5Print5writeEPKc>
   d4e4e:	4604      	mov	r4, r0
   d4e50:	e013      	b.n	d4e7a <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d4e52:	f100 0308 	add.w	r3, r0, #8
   d4e56:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d4e5a:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d4e5c:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d4e60:	1c41      	adds	r1, r0, #1
   d4e62:	4623      	mov	r3, r4
   d4e64:	464a      	mov	r2, r9
   d4e66:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d4e68:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d4e6a:	f7ff fc9b 	bl	d47a4 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4e6e:	4669      	mov	r1, sp
   d4e70:	4628      	mov	r0, r5
   d4e72:	f7ff ff8b 	bl	d4d8c <_ZN5Print5writeEPKc>
   d4e76:	4604      	mov	r4, r0
   d4e78:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d4e7a:	b11e      	cbz	r6, d4e84 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d4e7c:	4628      	mov	r0, r5
   d4e7e:	f7ff ff98 	bl	d4db2 <_ZN5Print7printlnEv>
   d4e82:	4404      	add	r4, r0
    return n;
}
   d4e84:	4620      	mov	r0, r4
   d4e86:	371c      	adds	r7, #28
   d4e88:	46bd      	mov	sp, r7
   d4e8a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4e8e:	b002      	add	sp, #8
   d4e90:	4770      	bx	lr

000d4e92 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4e92:	b510      	push	{r4, lr}
   d4e94:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4e96:	f7ff fcfd 	bl	d4894 <_ZNSt14_Function_baseD1Ev>
   d4e9a:	4620      	mov	r0, r4
   d4e9c:	bd10      	pop	{r4, pc}
	...

000d4ea0 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4ea0:	4803      	ldr	r0, [pc, #12]	; (d4eb0 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4ea2:	4a04      	ldr	r2, [pc, #16]	; (d4eb4 <_GLOBAL__sub_I_RGB+0x14>)
   d4ea4:	4904      	ldr	r1, [pc, #16]	; (d4eb8 <_GLOBAL__sub_I_RGB+0x18>)
   d4ea6:	2300      	movs	r3, #0
   d4ea8:	6083      	str	r3, [r0, #8]
   d4eaa:	f000 bb17 	b.w	d54dc <__aeabi_atexit>
   d4eae:	bf00      	nop
   d4eb0:	2003e6c0 	.word	0x2003e6c0
   d4eb4:	2003e46c 	.word	0x2003e46c
   d4eb8:	000d4e93 	.word	0x000d4e93

000d4ebc <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d4ebc:	4770      	bx	lr

000d4ebe <_ZN8SPIClassD0Ev>:
   d4ebe:	b510      	push	{r4, lr}
   d4ec0:	210c      	movs	r1, #12
   d4ec2:	4604      	mov	r4, r0
   d4ec4:	f000 fb0f 	bl	d54e6 <_ZdlPvj>
   d4ec8:	4620      	mov	r0, r4
   d4eca:	bd10      	pop	{r4, pc}

000d4ecc <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d4ecc:	b510      	push	{r4, lr}
   d4ece:	4b05      	ldr	r3, [pc, #20]	; (d4ee4 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x18>)
   d4ed0:	6003      	str	r3, [r0, #0]
   d4ed2:	4604      	mov	r4, r0
{
    _spi = spi;
   d4ed4:	7101      	strb	r1, [r0, #4]
    HAL_SPI_Init(_spi);
   d4ed6:	4608      	mov	r0, r1
   d4ed8:	f7ff fb50 	bl	d457c <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d4edc:	2300      	movs	r3, #0
   d4ede:	60a3      	str	r3, [r4, #8]
}
   d4ee0:	4620      	mov	r0, r4
   d4ee2:	bd10      	pop	{r4, pc}
   d4ee4:	000d76f0 	.word	0x000d76f0

000d4ee8 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d4ee8:	7900      	ldrb	r0, [r0, #4]
   d4eea:	f7ff bb4f 	b.w	d458c <HAL_SPI_Is_Enabled>

000d4eee <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d4eee:	b510      	push	{r4, lr}
   d4ef0:	4604      	mov	r4, r0
{
	free(buffer);
   d4ef2:	6800      	ldr	r0, [r0, #0]
   d4ef4:	f7ff fc46 	bl	d4784 <free>
}
   d4ef8:	4620      	mov	r0, r4
   d4efa:	bd10      	pop	{r4, pc}

000d4efc <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d4efc:	b510      	push	{r4, lr}
   d4efe:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d4f00:	6800      	ldr	r0, [r0, #0]
   d4f02:	b108      	cbz	r0, d4f08 <_ZN6String10invalidateEv+0xc>
   d4f04:	f7ff fc3e 	bl	d4784 <free>
	buffer = NULL;
   d4f08:	2300      	movs	r3, #0
   d4f0a:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d4f0c:	60a3      	str	r3, [r4, #8]
   d4f0e:	6063      	str	r3, [r4, #4]
   d4f10:	bd10      	pop	{r4, pc}

000d4f12 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d4f12:	b538      	push	{r3, r4, r5, lr}
   d4f14:	4604      	mov	r4, r0
   d4f16:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d4f18:	6800      	ldr	r0, [r0, #0]
   d4f1a:	3101      	adds	r1, #1
   d4f1c:	f7ff fc3a 	bl	d4794 <realloc>
	if (newbuffer) {
   d4f20:	b110      	cbz	r0, d4f28 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4f22:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d4f26:	2001      	movs	r0, #1
	}
	return 0;
}
   d4f28:	bd38      	pop	{r3, r4, r5, pc}

000d4f2a <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4f2a:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d4f2c:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4f2e:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d4f30:	b113      	cbz	r3, d4f38 <_ZN6String7reserveEj+0xe>
   d4f32:	6843      	ldr	r3, [r0, #4]
   d4f34:	428b      	cmp	r3, r1
   d4f36:	d207      	bcs.n	d4f48 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d4f38:	4620      	mov	r0, r4
   d4f3a:	f7ff ffea 	bl	d4f12 <_ZN6String12changeBufferEj>
   d4f3e:	b120      	cbz	r0, d4f4a <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d4f40:	68a3      	ldr	r3, [r4, #8]
   d4f42:	b90b      	cbnz	r3, d4f48 <_ZN6String7reserveEj+0x1e>
   d4f44:	6822      	ldr	r2, [r4, #0]
   d4f46:	7013      	strb	r3, [r2, #0]
   d4f48:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d4f4a:	bd10      	pop	{r4, pc}

000d4f4c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4f4c:	b570      	push	{r4, r5, r6, lr}
   d4f4e:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d4f50:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4f52:	4604      	mov	r4, r0
   d4f54:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d4f56:	f7ff ffe8 	bl	d4f2a <_ZN6String7reserveEj>
   d4f5a:	b918      	cbnz	r0, d4f64 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d4f5c:	4620      	mov	r0, r4
   d4f5e:	f7ff ffcd 	bl	d4efc <_ZN6String10invalidateEv>
		return *this;
   d4f62:	e009      	b.n	d4f78 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d4f64:	462a      	mov	r2, r5
   d4f66:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d4f68:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d4f6a:	6820      	ldr	r0, [r4, #0]
   d4f6c:	f002 fa1e 	bl	d73ac <memcpy>
	buffer[len] = 0;
   d4f70:	6822      	ldr	r2, [r4, #0]
   d4f72:	68a3      	ldr	r3, [r4, #8]
   d4f74:	2100      	movs	r1, #0
   d4f76:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d4f78:	4620      	mov	r0, r4
   d4f7a:	bd70      	pop	{r4, r5, r6, pc}

000d4f7c <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4f7c:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4f7e:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4f80:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4f82:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d4f84:	6043      	str	r3, [r0, #4]
	len = 0;
   d4f86:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4f88:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d4f8a:	460d      	mov	r5, r1
   d4f8c:	b139      	cbz	r1, d4f9e <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d4f8e:	4608      	mov	r0, r1
   d4f90:	f002 fa48 	bl	d7424 <strlen>
   d4f94:	4629      	mov	r1, r5
   d4f96:	4602      	mov	r2, r0
   d4f98:	4620      	mov	r0, r4
   d4f9a:	f7ff ffd7 	bl	d4f4c <_ZN6String4copyEPKcj>
}
   d4f9e:	4620      	mov	r0, r4
   d4fa0:	bd38      	pop	{r3, r4, r5, pc}

000d4fa2 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d4fa2:	b538      	push	{r3, r4, r5, lr}
   d4fa4:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d4fa6:	460c      	mov	r4, r1
   d4fa8:	b141      	cbz	r1, d4fbc <_ZN6StringaSEPKc+0x1a>
   d4faa:	4608      	mov	r0, r1
   d4fac:	f002 fa3a 	bl	d7424 <strlen>
   d4fb0:	4621      	mov	r1, r4
   d4fb2:	4602      	mov	r2, r0
   d4fb4:	4628      	mov	r0, r5
   d4fb6:	f7ff ffc9 	bl	d4f4c <_ZN6String4copyEPKcj>
   d4fba:	e001      	b.n	d4fc0 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d4fbc:	f7ff ff9e 	bl	d4efc <_ZN6String10invalidateEv>

	return *this;
}
   d4fc0:	4628      	mov	r0, r5
   d4fc2:	bd38      	pop	{r3, r4, r5, pc}

000d4fc4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d4fc4:	b510      	push	{r4, lr}
   d4fc6:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4fc8:	6800      	ldr	r0, [r0, #0]
   d4fca:	b118      	cbz	r0, d4fd4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d4fcc:	f7ff fbda 	bl	d4784 <free>
            wakeupSource_ = nullptr;
   d4fd0:	2300      	movs	r3, #0
   d4fd2:	6023      	str	r3, [r4, #0]
   d4fd4:	bd10      	pop	{r4, pc}

000d4fd6 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4fd6:	b510      	push	{r4, lr}
   d4fd8:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d4fda:	f7ff fff3 	bl	d4fc4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4fde:	4620      	mov	r0, r4
   d4fe0:	bd10      	pop	{r4, pc}
	...

000d4fe4 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4fe4:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4fe6:	4c09      	ldr	r4, [pc, #36]	; (d500c <_GLOBAL__sub_I_System+0x28>)
   d4fe8:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4fea:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4fee:	6020      	str	r0, [r4, #0]
   d4ff0:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4ff2:	71a0      	strb	r0, [r4, #6]
   d4ff4:	8120      	strh	r0, [r4, #8]
   d4ff6:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4ff8:	f7ff fb48 	bl	d468c <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4ffc:	4620      	mov	r0, r4
   d4ffe:	4a04      	ldr	r2, [pc, #16]	; (d5010 <_GLOBAL__sub_I_System+0x2c>)
   d5000:	4904      	ldr	r1, [pc, #16]	; (d5014 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5002:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5006:	f000 ba69 	b.w	d54dc <__aeabi_atexit>
   d500a:	bf00      	nop
   d500c:	2003e6d0 	.word	0x2003e6d0
   d5010:	2003e46c 	.word	0x2003e46c
   d5014:	000d4fd7 	.word	0x000d4fd7

000d5018 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5018:	4b02      	ldr	r3, [pc, #8]	; (d5024 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d501a:	681a      	ldr	r2, [r3, #0]
   d501c:	4b02      	ldr	r3, [pc, #8]	; (d5028 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d501e:	601a      	str	r2, [r3, #0]
   d5020:	4770      	bx	lr
   d5022:	bf00      	nop
   d5024:	2003e400 	.word	0x2003e400
   d5028:	2003e6dc 	.word	0x2003e6dc

000d502c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d502c:	4770      	bx	lr

000d502e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d502e:	7441      	strb	r1, [r0, #17]
   d5030:	4770      	bx	lr

000d5032 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d5032:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d5034:	7c00      	ldrb	r0, [r0, #16]
   d5036:	f7ff fae9 	bl	d460c <HAL_USART_Available_Data_For_Write>
}
   d503a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d503e:	bd08      	pop	{r3, pc}

000d5040 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5040:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d5042:	7c00      	ldrb	r0, [r0, #16]
   d5044:	f7ff faba 	bl	d45bc <HAL_USART_Available_Data>
}
   d5048:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d504c:	bd08      	pop	{r3, pc}

000d504e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d504e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5050:	7c00      	ldrb	r0, [r0, #16]
   d5052:	f7ff fac3 	bl	d45dc <HAL_USART_Peek_Data>
}
   d5056:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d505a:	bf28      	it	cs
   d505c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5060:	bd08      	pop	{r3, pc}

000d5062 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5062:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d5064:	7c00      	ldrb	r0, [r0, #16]
   d5066:	f7ff fab1 	bl	d45cc <HAL_USART_Read_Data>
}
   d506a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d506e:	bf28      	it	cs
   d5070:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5074:	bd08      	pop	{r3, pc}

000d5076 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5076:	7c00      	ldrb	r0, [r0, #16]
   d5078:	f7ff bab8 	b.w	d45ec <HAL_USART_Flush_Data>

000d507c <_ZN11USARTSerialD0Ev>:
   d507c:	b510      	push	{r4, lr}
   d507e:	2114      	movs	r1, #20
   d5080:	4604      	mov	r4, r0
   d5082:	f000 fa30 	bl	d54e6 <_ZdlPvj>
   d5086:	4620      	mov	r0, r4
   d5088:	bd10      	pop	{r4, pc}

000d508a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d508a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d508c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d508e:	4604      	mov	r4, r0
   d5090:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5092:	b925      	cbnz	r5, d509e <_ZN11USARTSerial5writeEh+0x14>
   d5094:	7c00      	ldrb	r0, [r0, #16]
   d5096:	f7ff fab9 	bl	d460c <HAL_USART_Available_Data_For_Write>
   d509a:	2800      	cmp	r0, #0
   d509c:	dd05      	ble.n	d50aa <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d509e:	4631      	mov	r1, r6
   d50a0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d50a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d50a6:	f7ff ba81 	b.w	d45ac <HAL_USART_Write_Data>
  }
  return 0;
}
   d50aa:	4628      	mov	r0, r5
   d50ac:	bd70      	pop	{r4, r5, r6, pc}
	...

000d50b0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d50b0:	b510      	push	{r4, lr}
   d50b2:	4604      	mov	r4, r0
   d50b4:	4608      	mov	r0, r1
   d50b6:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d50b8:	2200      	movs	r2, #0
   d50ba:	6062      	str	r2, [r4, #4]
   d50bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d50c0:	60a2      	str	r2, [r4, #8]
   d50c2:	4a05      	ldr	r2, [pc, #20]	; (d50d8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d50c4:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d50c6:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d50c8:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d50ca:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d50cc:	461a      	mov	r2, r3
   d50ce:	f7ff fa65 	bl	d459c <HAL_USART_Init>
}
   d50d2:	4620      	mov	r0, r4
   d50d4:	bd10      	pop	{r4, pc}
   d50d6:	bf00      	nop
   d50d8:	000d772c 	.word	0x000d772c

000d50dc <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d50dc:	7c00      	ldrb	r0, [r0, #16]
   d50de:	f7ff ba8d 	b.w	d45fc <HAL_USART_Is_Enabled>
	...

000d50e4 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d50e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   d50e6:	4c19      	ldr	r4, [pc, #100]	; (d514c <_Z22__fetch_global_Serial1v+0x68>)
   d50e8:	6825      	ldr	r5, [r4, #0]
   d50ea:	b94d      	cbnz	r5, d5100 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
   d50ec:	2084      	movs	r0, #132	; 0x84
   d50ee:	f7fe ffd4 	bl	d409a <_Znwj>
   d50f2:	4606      	mov	r6, r0
   d50f4:	b118      	cbz	r0, d50fe <_Z22__fetch_global_Serial1v+0x1a>
   d50f6:	2284      	movs	r2, #132	; 0x84
   d50f8:	4629      	mov	r1, r5
   d50fa:	f002 f962 	bl	d73c2 <memset>
   d50fe:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
   d5100:	4d13      	ldr	r5, [pc, #76]	; (d5150 <_Z22__fetch_global_Serial1v+0x6c>)
   d5102:	682e      	ldr	r6, [r5, #0]
   d5104:	b94e      	cbnz	r6, d511a <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
   d5106:	2084      	movs	r0, #132	; 0x84
   d5108:	f7fe ffc7 	bl	d409a <_Znwj>
   d510c:	4607      	mov	r7, r0
   d510e:	b118      	cbz	r0, d5118 <_Z22__fetch_global_Serial1v+0x34>
   d5110:	2284      	movs	r2, #132	; 0x84
   d5112:	4631      	mov	r1, r6
   d5114:	f002 f955 	bl	d73c2 <memset>
   d5118:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d511a:	4f0e      	ldr	r7, [pc, #56]	; (d5154 <_Z22__fetch_global_Serial1v+0x70>)
   d511c:	6839      	ldr	r1, [r7, #0]
   d511e:	f011 0601 	ands.w	r6, r1, #1
   d5122:	d111      	bne.n	d5148 <_Z22__fetch_global_Serial1v+0x64>
   d5124:	4638      	mov	r0, r7
   d5126:	f7fe ffbe 	bl	d40a6 <__cxa_guard_acquire>
   d512a:	b168      	cbz	r0, d5148 <_Z22__fetch_global_Serial1v+0x64>
   d512c:	6822      	ldr	r2, [r4, #0]
   d512e:	682b      	ldr	r3, [r5, #0]
   d5130:	4809      	ldr	r0, [pc, #36]	; (d5158 <_Z22__fetch_global_Serial1v+0x74>)
   d5132:	4631      	mov	r1, r6
   d5134:	f7ff ffbc 	bl	d50b0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5138:	4638      	mov	r0, r7
   d513a:	f7fe ffb9 	bl	d40b0 <__cxa_guard_release>
   d513e:	4a07      	ldr	r2, [pc, #28]	; (d515c <_Z22__fetch_global_Serial1v+0x78>)
   d5140:	4907      	ldr	r1, [pc, #28]	; (d5160 <_Z22__fetch_global_Serial1v+0x7c>)
   d5142:	4805      	ldr	r0, [pc, #20]	; (d5158 <_Z22__fetch_global_Serial1v+0x74>)
   d5144:	f000 f9ca 	bl	d54dc <__aeabi_atexit>
#endif
	return serial1;
}
   d5148:	4803      	ldr	r0, [pc, #12]	; (d5158 <_Z22__fetch_global_Serial1v+0x74>)
   d514a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d514c:	2003e6fc 	.word	0x2003e6fc
   d5150:	2003e6f4 	.word	0x2003e6f4
   d5154:	2003e6f8 	.word	0x2003e6f8
   d5158:	2003e6e0 	.word	0x2003e6e0
   d515c:	2003e46c 	.word	0x2003e46c
   d5160:	000d502d 	.word	0x000d502d

000d5164 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5164:	7441      	strb	r1, [r0, #17]
   d5166:	4770      	bx	lr

000d5168 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5168:	4770      	bx	lr

000d516a <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d516a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d516c:	2100      	movs	r1, #0
   d516e:	7c00      	ldrb	r0, [r0, #16]
   d5170:	f7ff fa74 	bl	d465c <HAL_USB_USART_Receive_Data>
}
   d5174:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5178:	bf28      	it	cs
   d517a:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d517e:	bd08      	pop	{r3, pc}

000d5180 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d5180:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5182:	2101      	movs	r1, #1
   d5184:	7c00      	ldrb	r0, [r0, #16]
   d5186:	f7ff fa69 	bl	d465c <HAL_USB_USART_Receive_Data>
}
   d518a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d518e:	bf28      	it	cs
   d5190:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5194:	bd08      	pop	{r3, pc}

000d5196 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d5196:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5198:	7c00      	ldrb	r0, [r0, #16]
   d519a:	f7ff fa57 	bl	d464c <HAL_USB_USART_Available_Data_For_Write>
}
   d519e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d51a2:	bd08      	pop	{r3, pc}

000d51a4 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d51a4:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d51a6:	7c00      	ldrb	r0, [r0, #16]
   d51a8:	f7ff fa48 	bl	d463c <HAL_USB_USART_Available_Data>
}
   d51ac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d51b0:	bd08      	pop	{r3, pc}

000d51b2 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d51b2:	7c00      	ldrb	r0, [r0, #16]
   d51b4:	f7ff ba62 	b.w	d467c <HAL_USB_USART_Flush_Data>

000d51b8 <_ZN9USBSerialD0Ev>:
   d51b8:	b510      	push	{r4, lr}
   d51ba:	2114      	movs	r1, #20
   d51bc:	4604      	mov	r4, r0
   d51be:	f000 f992 	bl	d54e6 <_ZdlPvj>
   d51c2:	4620      	mov	r0, r4
   d51c4:	bd10      	pop	{r4, pc}

000d51c6 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d51c6:	b538      	push	{r3, r4, r5, lr}
   d51c8:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d51ca:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d51cc:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d51ce:	f7ff fa3d 	bl	d464c <HAL_USB_USART_Available_Data_For_Write>
   d51d2:	2800      	cmp	r0, #0
   d51d4:	dc01      	bgt.n	d51da <_ZN9USBSerial5writeEh+0x14>
   d51d6:	7c60      	ldrb	r0, [r4, #17]
   d51d8:	b128      	cbz	r0, d51e6 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d51da:	4629      	mov	r1, r5
   d51dc:	7c20      	ldrb	r0, [r4, #16]
   d51de:	f7ff fa45 	bl	d466c <HAL_USB_USART_Send_Data>
   d51e2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d51e6:	bd38      	pop	{r3, r4, r5, pc}

000d51e8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d51e8:	b510      	push	{r4, lr}
   d51ea:	4604      	mov	r4, r0
   d51ec:	2300      	movs	r3, #0
   d51ee:	6063      	str	r3, [r4, #4]
   d51f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d51f4:	60a3      	str	r3, [r4, #8]
   d51f6:	4b05      	ldr	r3, [pc, #20]	; (d520c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d51f8:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d51fa:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d51fc:	4608      	mov	r0, r1
{
  _serial = serial;
   d51fe:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5200:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d5202:	4611      	mov	r1, r2
   d5204:	f7ff fa0a 	bl	d461c <HAL_USB_USART_Init>
}
   d5208:	4620      	mov	r0, r4
   d520a:	bd10      	pop	{r4, pc}
   d520c:	000d775c 	.word	0x000d775c

000d5210 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5210:	2200      	movs	r2, #0
   d5212:	7c00      	ldrb	r0, [r0, #16]
   d5214:	f7ff ba0a 	b.w	d462c <HAL_USB_USART_Begin>

000d5218 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5218:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d521a:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d521c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d521e:	2100      	movs	r1, #0
   d5220:	f002 f8cf 	bl	d73c2 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5224:	4620      	mov	r0, r4
   d5226:	bd10      	pop	{r4, pc}

000d5228 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5228:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d522a:	4d0e      	ldr	r5, [pc, #56]	; (d5264 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d522c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d522e:	a801      	add	r0, sp, #4
   d5230:	f7ff fff2 	bl	d5218 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5234:	6829      	ldr	r1, [r5, #0]
   d5236:	f011 0401 	ands.w	r4, r1, #1
   d523a:	d110      	bne.n	d525e <_Z16_fetch_usbserialv+0x36>
   d523c:	4628      	mov	r0, r5
   d523e:	f7fe ff32 	bl	d40a6 <__cxa_guard_acquire>
   d5242:	b160      	cbz	r0, d525e <_Z16_fetch_usbserialv+0x36>
   d5244:	aa01      	add	r2, sp, #4
   d5246:	4621      	mov	r1, r4
   d5248:	4807      	ldr	r0, [pc, #28]	; (d5268 <_Z16_fetch_usbserialv+0x40>)
   d524a:	f7ff ffcd 	bl	d51e8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d524e:	4628      	mov	r0, r5
   d5250:	f7fe ff2e 	bl	d40b0 <__cxa_guard_release>
   d5254:	4a05      	ldr	r2, [pc, #20]	; (d526c <_Z16_fetch_usbserialv+0x44>)
   d5256:	4906      	ldr	r1, [pc, #24]	; (d5270 <_Z16_fetch_usbserialv+0x48>)
   d5258:	4803      	ldr	r0, [pc, #12]	; (d5268 <_Z16_fetch_usbserialv+0x40>)
   d525a:	f000 f93f 	bl	d54dc <__aeabi_atexit>
	return _usbserial;
}
   d525e:	4802      	ldr	r0, [pc, #8]	; (d5268 <_Z16_fetch_usbserialv+0x40>)
   d5260:	b007      	add	sp, #28
   d5262:	bd30      	pop	{r4, r5, pc}
   d5264:	2003e700 	.word	0x2003e700
   d5268:	2003e704 	.word	0x2003e704
   d526c:	2003e46c 	.word	0x2003e46c
   d5270:	000d5169 	.word	0x000d5169

000d5274 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5274:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5276:	4b0c      	ldr	r3, [pc, #48]	; (d52a8 <serialEventRun+0x34>)
   d5278:	b133      	cbz	r3, d5288 <serialEventRun+0x14>
   d527a:	f7ff ffd5 	bl	d5228 <_Z16_fetch_usbserialv>
   d527e:	6803      	ldr	r3, [r0, #0]
   d5280:	691b      	ldr	r3, [r3, #16]
   d5282:	4798      	blx	r3
   d5284:	2800      	cmp	r0, #0
   d5286:	dc09      	bgt.n	d529c <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d5288:	4b08      	ldr	r3, [pc, #32]	; (d52ac <serialEventRun+0x38>)
   d528a:	b163      	cbz	r3, d52a6 <serialEventRun+0x32>
   d528c:	f7ff ff2a 	bl	d50e4 <_Z22__fetch_global_Serial1v>
   d5290:	6803      	ldr	r3, [r0, #0]
   d5292:	691b      	ldr	r3, [r3, #16]
   d5294:	4798      	blx	r3
   d5296:	2800      	cmp	r0, #0
   d5298:	dc03      	bgt.n	d52a2 <serialEventRun+0x2e>
   d529a:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d529c:	f3af 8000 	nop.w
   d52a0:	e7f2      	b.n	d5288 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d52a2:	f3af 8000 	nop.w
   d52a6:	bd08      	pop	{r3, pc}
	...

000d52b0 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d52b0:	b508      	push	{r3, lr}
	serialEventRun();
   d52b2:	f7ff ffdf 	bl	d5274 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d52b6:	f7ff f8e1 	bl	d447c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d52ba:	4b01      	ldr	r3, [pc, #4]	; (d52c0 <_post_loop+0x10>)
   d52bc:	6018      	str	r0, [r3, #0]
   d52be:	bd08      	pop	{r3, pc}
   d52c0:	2003e720 	.word	0x2003e720

000d52c4 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d52c4:	4802      	ldr	r0, [pc, #8]	; (d52d0 <_Z33system_initialize_user_backup_ramv+0xc>)
   d52c6:	4a03      	ldr	r2, [pc, #12]	; (d52d4 <_Z33system_initialize_user_backup_ramv+0x10>)
   d52c8:	4903      	ldr	r1, [pc, #12]	; (d52d8 <_Z33system_initialize_user_backup_ramv+0x14>)
   d52ca:	1a12      	subs	r2, r2, r0
   d52cc:	f002 b86e 	b.w	d73ac <memcpy>
   d52d0:	2003f400 	.word	0x2003f400
   d52d4:	2003f404 	.word	0x2003f404
   d52d8:	000d7840 	.word	0x000d7840

000d52dc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d52dc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d52de:	2300      	movs	r3, #0
   d52e0:	9300      	str	r3, [sp, #0]
   d52e2:	461a      	mov	r2, r3
   d52e4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d52e8:	f7ff f9e2 	bl	d46b0 <system_ctrl_set_result>
}
   d52ec:	b003      	add	sp, #12
   d52ee:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d52f4 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d52f4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d52f6:	8843      	ldrh	r3, [r0, #2]
   d52f8:	2b0a      	cmp	r3, #10
   d52fa:	d008      	beq.n	d530e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d52fc:	2b50      	cmp	r3, #80	; 0x50
   d52fe:	d109      	bne.n	d5314 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5300:	4b09      	ldr	r3, [pc, #36]	; (d5328 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5302:	681b      	ldr	r3, [r3, #0]
   d5304:	b13b      	cbz	r3, d5316 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d5306:	b003      	add	sp, #12
   d5308:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d530c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d530e:	f7ff ffe5 	bl	d52dc <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d5312:	e006      	b.n	d5322 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5314:	2300      	movs	r3, #0
   d5316:	9300      	str	r3, [sp, #0]
   d5318:	461a      	mov	r2, r3
   d531a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d531e:	f7ff f9c7 	bl	d46b0 <system_ctrl_set_result>
        break;
    }
}
   d5322:	b003      	add	sp, #12
   d5324:	f85d fb04 	ldr.w	pc, [sp], #4
   d5328:	2003e718 	.word	0x2003e718

000d532c <module_user_init_hook>:

void module_user_init_hook()
{
   d532c:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d532e:	4c10      	ldr	r4, [pc, #64]	; (d5370 <module_user_init_hook+0x44>)
   d5330:	4d10      	ldr	r5, [pc, #64]	; (d5374 <module_user_init_hook+0x48>)
   d5332:	6823      	ldr	r3, [r4, #0]
   d5334:	42ab      	cmp	r3, r5
   d5336:	4b10      	ldr	r3, [pc, #64]	; (d5378 <module_user_init_hook+0x4c>)
   d5338:	bf0c      	ite	eq
   d533a:	2201      	moveq	r2, #1
   d533c:	2200      	movne	r2, #0
   d533e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5340:	d002      	beq.n	d5348 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d5342:	f7ff ffbf 	bl	d52c4 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d5346:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5348:	f7ff f890 	bl	d446c <HAL_RNG_GetRandomNumber>
   d534c:	4604      	mov	r4, r0
    srand(seed);
   d534e:	f002 f841 	bl	d73d4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5352:	4b0a      	ldr	r3, [pc, #40]	; (d537c <module_user_init_hook+0x50>)
   d5354:	b113      	cbz	r3, d535c <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d5356:	4620      	mov	r0, r4
   d5358:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d535c:	2100      	movs	r1, #0
   d535e:	4807      	ldr	r0, [pc, #28]	; (d537c <module_user_init_hook+0x50>)
   d5360:	f7ff f9b0 	bl	d46c4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5364:	2100      	movs	r1, #0
   d5366:	4806      	ldr	r0, [pc, #24]	; (d5380 <module_user_init_hook+0x54>)
}
   d5368:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d536c:	f7ff b996 	b.w	d469c <system_ctrl_set_app_request_handler>
   d5370:	2003f400 	.word	0x2003f400
   d5374:	9a271c1e 	.word	0x9a271c1e
   d5378:	2003e71c 	.word	0x2003e71c
   d537c:	00000000 	.word	0x00000000
   d5380:	000d52f5 	.word	0x000d52f5

000d5384 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d5384:	b510      	push	{r4, lr}
   d5386:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d5388:	f000 f888 	bl	d549c <_ZN8particle7globals11instanceSpiEv>
   d538c:	f7ff fdac 	bl	d4ee8 <_ZN8SPIClass9isEnabledEv>
   d5390:	b128      	cbz	r0, d539e <pinAvailable+0x1a>
   d5392:	f1a4 030b 	sub.w	r3, r4, #11
   d5396:	2b02      	cmp	r3, #2
   d5398:	d801      	bhi.n	d539e <pinAvailable+0x1a>
  {
    return 0; // 'pin' is used
   d539a:	2000      	movs	r0, #0
   d539c:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d539e:	f000 f857 	bl	d5450 <_Z19__fetch_global_Wirev>
   d53a2:	f7ff fafd 	bl	d49a0 <_ZN7TwoWire9isEnabledEv>
   d53a6:	b108      	cbz	r0, d53ac <pinAvailable+0x28>
   d53a8:	2c01      	cmp	r4, #1
   d53aa:	d9f6      	bls.n	d539a <pinAvailable+0x16>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d53ac:	f7ff fe9a 	bl	d50e4 <_Z22__fetch_global_Serial1v>
   d53b0:	f7ff fe94 	bl	d50dc <_ZN11USARTSerial9isEnabledEv>
   d53b4:	b118      	cbz	r0, d53be <pinAvailable+0x3a>
   d53b6:	f1a4 0309 	sub.w	r3, r4, #9
   d53ba:	2b01      	cmp	r3, #1
   d53bc:	d9ed      	bls.n	d539a <pinAvailable+0x16>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d53be:	2c23      	cmp	r4, #35	; 0x23
   d53c0:	bf8c      	ite	hi
   d53c2:	2000      	movhi	r0, #0
   d53c4:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d53c6:	bd10      	pop	{r4, pc}

000d53c8 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d53c8:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d53ca:	b538      	push	{r3, r4, r5, lr}
   d53cc:	4604      	mov	r4, r0
   d53ce:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d53d0:	d80a      	bhi.n	d53e8 <pinMode+0x20>
   d53d2:	29ff      	cmp	r1, #255	; 0xff
   d53d4:	d008      	beq.n	d53e8 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d53d6:	f7ff ffd5 	bl	d5384 <pinAvailable>
   d53da:	b128      	cbz	r0, d53e8 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d53dc:	4629      	mov	r1, r5
   d53de:	4620      	mov	r0, r4
}
   d53e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d53e4:	f7ff b862 	b.w	d44ac <HAL_Pin_Mode>
   d53e8:	bd38      	pop	{r3, r4, r5, pc}

000d53ea <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d53ea:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d53ec:	b510      	push	{r4, lr}
   d53ee:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d53f0:	bf9c      	itt	ls
   d53f2:	340e      	addls	r4, #14
   d53f4:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d53f6:	4620      	mov	r0, r4
   d53f8:	f7ff ffc4 	bl	d5384 <pinAvailable>
   d53fc:	b150      	cbz	r0, d5414 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d53fe:	2103      	movs	r1, #3
   d5400:	4620      	mov	r0, r4
   d5402:	f7ff f84b 	bl	d449c <HAL_Validate_Pin_Function>
   d5406:	2803      	cmp	r0, #3
   d5408:	d104      	bne.n	d5414 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d540a:	4620      	mov	r0, r4
}
   d540c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d5410:	f7ff b854 	b.w	d44bc <HAL_ADC_Read>
}
   d5414:	2000      	movs	r0, #0
   d5416:	bd10      	pop	{r4, pc}

000d5418 <pulseIn>:
 */
uint32_t pulseIn(pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return HAL_Pulse_In(pin, value);
   d5418:	f7ff b858 	b.w	d44cc <HAL_Pulse_In>

000d541c <_Z17acquireWireBufferv>:
   d541c:	b570      	push	{r4, r5, r6, lr}
   d541e:	4604      	mov	r4, r0
   d5420:	2514      	movs	r5, #20
   d5422:	462a      	mov	r2, r5
   d5424:	4e09      	ldr	r6, [pc, #36]	; (d544c <_Z17acquireWireBufferv+0x30>)
   d5426:	2100      	movs	r1, #0
   d5428:	f001 ffcb 	bl	d73c2 <memset>
   d542c:	8025      	strh	r5, [r4, #0]
   d542e:	2520      	movs	r5, #32
   d5430:	4631      	mov	r1, r6
   d5432:	60a5      	str	r5, [r4, #8]
   d5434:	6125      	str	r5, [r4, #16]
   d5436:	4628      	mov	r0, r5
   d5438:	f000 f86f 	bl	d551a <_ZnajRKSt9nothrow_t>
   d543c:	4631      	mov	r1, r6
   d543e:	6060      	str	r0, [r4, #4]
   d5440:	4628      	mov	r0, r5
   d5442:	f000 f86a 	bl	d551a <_ZnajRKSt9nothrow_t>
   d5446:	60e0      	str	r0, [r4, #12]
   d5448:	4620      	mov	r0, r4
   d544a:	bd70      	pop	{r4, r5, r6, pc}
   d544c:	000d7784 	.word	0x000d7784

000d5450 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5450:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5452:	4d0e      	ldr	r5, [pc, #56]	; (d548c <_Z19__fetch_global_Wirev+0x3c>)
   d5454:	6829      	ldr	r1, [r5, #0]
   d5456:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d545a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d545c:	d113      	bne.n	d5486 <_Z19__fetch_global_Wirev+0x36>
   d545e:	4628      	mov	r0, r5
   d5460:	f7fe fe21 	bl	d40a6 <__cxa_guard_acquire>
   d5464:	b178      	cbz	r0, d5486 <_Z19__fetch_global_Wirev+0x36>
   d5466:	a801      	add	r0, sp, #4
   d5468:	f7ff ffd8 	bl	d541c <_Z17acquireWireBufferv>
   d546c:	aa01      	add	r2, sp, #4
   d546e:	4621      	mov	r1, r4
   d5470:	4807      	ldr	r0, [pc, #28]	; (d5490 <_Z19__fetch_global_Wirev+0x40>)
   d5472:	f7ff fa83 	bl	d497c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d5476:	4628      	mov	r0, r5
   d5478:	f7fe fe1a 	bl	d40b0 <__cxa_guard_release>
   d547c:	4a05      	ldr	r2, [pc, #20]	; (d5494 <_Z19__fetch_global_Wirev+0x44>)
   d547e:	4906      	ldr	r1, [pc, #24]	; (d5498 <_Z19__fetch_global_Wirev+0x48>)
   d5480:	4803      	ldr	r0, [pc, #12]	; (d5490 <_Z19__fetch_global_Wirev+0x40>)
   d5482:	f000 f82b 	bl	d54dc <__aeabi_atexit>
	return wire;
}
   d5486:	4802      	ldr	r0, [pc, #8]	; (d5490 <_Z19__fetch_global_Wirev+0x40>)
   d5488:	b007      	add	sp, #28
   d548a:	bd30      	pop	{r4, r5, pc}
   d548c:	2003e724 	.word	0x2003e724
   d5490:	2003e728 	.word	0x2003e728
   d5494:	2003e46c 	.word	0x2003e46c
   d5498:	000d4925 	.word	0x000d4925

000d549c <_ZN8particle7globals11instanceSpiEv>:
#ifndef SPARK_WIRING_NO_SPI

namespace particle {
namespace globals {

SPIClass& instanceSpi() {
   d549c:	b538      	push	{r3, r4, r5, lr}
    static SPIClass instance(HAL_SPI_INTERFACE1);
   d549e:	4d0b      	ldr	r5, [pc, #44]	; (d54cc <_ZN8particle7globals11instanceSpiEv+0x30>)
   d54a0:	6829      	ldr	r1, [r5, #0]
   d54a2:	f011 0401 	ands.w	r4, r1, #1
   d54a6:	d10f      	bne.n	d54c8 <_ZN8particle7globals11instanceSpiEv+0x2c>
   d54a8:	4628      	mov	r0, r5
   d54aa:	f7fe fdfc 	bl	d40a6 <__cxa_guard_acquire>
   d54ae:	b158      	cbz	r0, d54c8 <_ZN8particle7globals11instanceSpiEv+0x2c>
   d54b0:	4621      	mov	r1, r4
   d54b2:	4807      	ldr	r0, [pc, #28]	; (d54d0 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d54b4:	f7ff fd0a 	bl	d4ecc <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d54b8:	4628      	mov	r0, r5
   d54ba:	f7fe fdf9 	bl	d40b0 <__cxa_guard_release>
   d54be:	4a05      	ldr	r2, [pc, #20]	; (d54d4 <_ZN8particle7globals11instanceSpiEv+0x38>)
   d54c0:	4905      	ldr	r1, [pc, #20]	; (d54d8 <_ZN8particle7globals11instanceSpiEv+0x3c>)
   d54c2:	4803      	ldr	r0, [pc, #12]	; (d54d0 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d54c4:	f000 f80a 	bl	d54dc <__aeabi_atexit>
    return instance;
}
   d54c8:	4801      	ldr	r0, [pc, #4]	; (d54d0 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d54ca:	bd38      	pop	{r3, r4, r5, pc}
   d54cc:	2003e748 	.word	0x2003e748
   d54d0:	2003e73c 	.word	0x2003e73c
   d54d4:	2003e46c 	.word	0x2003e46c
   d54d8:	000d4ebd 	.word	0x000d4ebd

000d54dc <__aeabi_atexit>:
   d54dc:	460b      	mov	r3, r1
   d54de:	4601      	mov	r1, r0
   d54e0:	4618      	mov	r0, r3
   d54e2:	f001 bf55 	b.w	d7390 <__cxa_atexit>

000d54e6 <_ZdlPvj>:
   d54e6:	f7fe bdda 	b.w	d409e <_ZdlPv>
	...

000d54ec <_ZSt15get_new_handlerv>:
   d54ec:	4b02      	ldr	r3, [pc, #8]	; (d54f8 <_ZSt15get_new_handlerv+0xc>)
   d54ee:	6818      	ldr	r0, [r3, #0]
   d54f0:	f3bf 8f5f 	dmb	sy
   d54f4:	4770      	bx	lr
   d54f6:	bf00      	nop
   d54f8:	2003e74c 	.word	0x2003e74c

000d54fc <_ZnwjRKSt9nothrow_t>:
   d54fc:	b510      	push	{r4, lr}
   d54fe:	2800      	cmp	r0, #0
   d5500:	bf14      	ite	ne
   d5502:	4604      	movne	r4, r0
   d5504:	2401      	moveq	r4, #1
   d5506:	4620      	mov	r0, r4
   d5508:	f7ff f934 	bl	d4774 <malloc>
   d550c:	b920      	cbnz	r0, d5518 <_ZnwjRKSt9nothrow_t+0x1c>
   d550e:	f7ff ffed 	bl	d54ec <_ZSt15get_new_handlerv>
   d5512:	b108      	cbz	r0, d5518 <_ZnwjRKSt9nothrow_t+0x1c>
   d5514:	4780      	blx	r0
   d5516:	e7f6      	b.n	d5506 <_ZnwjRKSt9nothrow_t+0xa>
   d5518:	bd10      	pop	{r4, pc}

000d551a <_ZnajRKSt9nothrow_t>:
   d551a:	f7ff bfef 	b.w	d54fc <_ZnwjRKSt9nothrow_t>
	...

000d5520 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5520:	4b24      	ldr	r3, [pc, #144]	; (d55b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d5522:	681a      	ldr	r2, [r3, #0]
   d5524:	07d0      	lsls	r0, r2, #31
   d5526:	bf5c      	itt	pl
   d5528:	2201      	movpl	r2, #1
   d552a:	601a      	strpl	r2, [r3, #0]
   d552c:	4b22      	ldr	r3, [pc, #136]	; (d55b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d552e:	681a      	ldr	r2, [r3, #0]
   d5530:	07d1      	lsls	r1, r2, #31
   d5532:	bf5c      	itt	pl
   d5534:	2201      	movpl	r2, #1
   d5536:	601a      	strpl	r2, [r3, #0]
   d5538:	4b20      	ldr	r3, [pc, #128]	; (d55bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d553a:	681a      	ldr	r2, [r3, #0]
   d553c:	07d2      	lsls	r2, r2, #31
   d553e:	bf5c      	itt	pl
   d5540:	2201      	movpl	r2, #1
   d5542:	601a      	strpl	r2, [r3, #0]
   d5544:	4b1e      	ldr	r3, [pc, #120]	; (d55c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d5546:	681a      	ldr	r2, [r3, #0]
   d5548:	07d0      	lsls	r0, r2, #31
   d554a:	bf5c      	itt	pl
   d554c:	2201      	movpl	r2, #1
   d554e:	601a      	strpl	r2, [r3, #0]
   d5550:	4b1c      	ldr	r3, [pc, #112]	; (d55c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d5552:	681a      	ldr	r2, [r3, #0]
   d5554:	07d1      	lsls	r1, r2, #31
   d5556:	bf5c      	itt	pl
   d5558:	2201      	movpl	r2, #1
   d555a:	601a      	strpl	r2, [r3, #0]
   d555c:	4b1a      	ldr	r3, [pc, #104]	; (d55c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d555e:	681a      	ldr	r2, [r3, #0]
   d5560:	07d2      	lsls	r2, r2, #31
   d5562:	bf5c      	itt	pl
   d5564:	2201      	movpl	r2, #1
   d5566:	601a      	strpl	r2, [r3, #0]
   d5568:	4b18      	ldr	r3, [pc, #96]	; (d55cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d556a:	681a      	ldr	r2, [r3, #0]
   d556c:	07d0      	lsls	r0, r2, #31
   d556e:	bf5c      	itt	pl
   d5570:	2201      	movpl	r2, #1
   d5572:	601a      	strpl	r2, [r3, #0]
   d5574:	4b16      	ldr	r3, [pc, #88]	; (d55d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d5576:	681a      	ldr	r2, [r3, #0]
   d5578:	07d1      	lsls	r1, r2, #31
   d557a:	bf5c      	itt	pl
   d557c:	2201      	movpl	r2, #1
   d557e:	601a      	strpl	r2, [r3, #0]
   d5580:	4b14      	ldr	r3, [pc, #80]	; (d55d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d5582:	681a      	ldr	r2, [r3, #0]
   d5584:	07d2      	lsls	r2, r2, #31
   d5586:	bf5c      	itt	pl
   d5588:	2201      	movpl	r2, #1
   d558a:	601a      	strpl	r2, [r3, #0]
   d558c:	4b12      	ldr	r3, [pc, #72]	; (d55d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d558e:	681a      	ldr	r2, [r3, #0]
   d5590:	07d0      	lsls	r0, r2, #31
   d5592:	bf5c      	itt	pl
   d5594:	2201      	movpl	r2, #1
   d5596:	601a      	strpl	r2, [r3, #0]
   d5598:	4b10      	ldr	r3, [pc, #64]	; (d55dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d559a:	681a      	ldr	r2, [r3, #0]
   d559c:	07d1      	lsls	r1, r2, #31
   d559e:	bf5c      	itt	pl
   d55a0:	2201      	movpl	r2, #1
   d55a2:	601a      	strpl	r2, [r3, #0]
   d55a4:	4b0e      	ldr	r3, [pc, #56]	; (d55e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d55a6:	681a      	ldr	r2, [r3, #0]
   d55a8:	07d2      	lsls	r2, r2, #31
   d55aa:	bf5c      	itt	pl
   d55ac:	2201      	movpl	r2, #1
   d55ae:	601a      	strpl	r2, [r3, #0]
   d55b0:	4770      	bx	lr
   d55b2:	bf00      	nop
   d55b4:	2003e77c 	.word	0x2003e77c
   d55b8:	2003e778 	.word	0x2003e778
   d55bc:	2003e774 	.word	0x2003e774
   d55c0:	2003e770 	.word	0x2003e770
   d55c4:	2003e76c 	.word	0x2003e76c
   d55c8:	2003e768 	.word	0x2003e768
   d55cc:	2003e764 	.word	0x2003e764
   d55d0:	2003e760 	.word	0x2003e760
   d55d4:	2003e75c 	.word	0x2003e75c
   d55d8:	2003e758 	.word	0x2003e758
   d55dc:	2003e754 	.word	0x2003e754
   d55e0:	2003e750 	.word	0x2003e750

000d55e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d55e4:	4b18      	ldr	r3, [pc, #96]	; (d5648 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d55e6:	681a      	ldr	r2, [r3, #0]
   d55e8:	07d1      	lsls	r1, r2, #31
   d55ea:	bf5c      	itt	pl
   d55ec:	2201      	movpl	r2, #1
   d55ee:	601a      	strpl	r2, [r3, #0]
   d55f0:	4b16      	ldr	r3, [pc, #88]	; (d564c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d55f2:	681a      	ldr	r2, [r3, #0]
   d55f4:	07d2      	lsls	r2, r2, #31
   d55f6:	bf5c      	itt	pl
   d55f8:	2201      	movpl	r2, #1
   d55fa:	601a      	strpl	r2, [r3, #0]
   d55fc:	4b14      	ldr	r3, [pc, #80]	; (d5650 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d55fe:	681a      	ldr	r2, [r3, #0]
   d5600:	07d0      	lsls	r0, r2, #31
   d5602:	bf5c      	itt	pl
   d5604:	2201      	movpl	r2, #1
   d5606:	601a      	strpl	r2, [r3, #0]
   d5608:	4b12      	ldr	r3, [pc, #72]	; (d5654 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d560a:	681a      	ldr	r2, [r3, #0]
   d560c:	07d1      	lsls	r1, r2, #31
   d560e:	bf5c      	itt	pl
   d5610:	2201      	movpl	r2, #1
   d5612:	601a      	strpl	r2, [r3, #0]
   d5614:	4b10      	ldr	r3, [pc, #64]	; (d5658 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5616:	681a      	ldr	r2, [r3, #0]
   d5618:	07d2      	lsls	r2, r2, #31
   d561a:	bf5c      	itt	pl
   d561c:	2201      	movpl	r2, #1
   d561e:	601a      	strpl	r2, [r3, #0]
   d5620:	4b0e      	ldr	r3, [pc, #56]	; (d565c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5622:	681a      	ldr	r2, [r3, #0]
   d5624:	07d0      	lsls	r0, r2, #31
   d5626:	bf5c      	itt	pl
   d5628:	2201      	movpl	r2, #1
   d562a:	601a      	strpl	r2, [r3, #0]
   d562c:	4b0c      	ldr	r3, [pc, #48]	; (d5660 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d562e:	681a      	ldr	r2, [r3, #0]
   d5630:	07d1      	lsls	r1, r2, #31
   d5632:	bf5c      	itt	pl
   d5634:	2201      	movpl	r2, #1
   d5636:	601a      	strpl	r2, [r3, #0]
   d5638:	4b0a      	ldr	r3, [pc, #40]	; (d5664 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d563a:	681a      	ldr	r2, [r3, #0]
   d563c:	07d2      	lsls	r2, r2, #31
   d563e:	bf5c      	itt	pl
   d5640:	2201      	movpl	r2, #1
   d5642:	601a      	strpl	r2, [r3, #0]
   d5644:	4770      	bx	lr
   d5646:	bf00      	nop
   d5648:	2003e79c 	.word	0x2003e79c
   d564c:	2003e798 	.word	0x2003e798
   d5650:	2003e794 	.word	0x2003e794
   d5654:	2003e790 	.word	0x2003e790
   d5658:	2003e78c 	.word	0x2003e78c
   d565c:	2003e788 	.word	0x2003e788
   d5660:	2003e784 	.word	0x2003e784
   d5664:	2003e780 	.word	0x2003e780

000d5668 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5668:	4b18      	ldr	r3, [pc, #96]	; (d56cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d566a:	681a      	ldr	r2, [r3, #0]
   d566c:	07d1      	lsls	r1, r2, #31
   d566e:	bf5c      	itt	pl
   d5670:	2201      	movpl	r2, #1
   d5672:	601a      	strpl	r2, [r3, #0]
   d5674:	4b16      	ldr	r3, [pc, #88]	; (d56d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5676:	681a      	ldr	r2, [r3, #0]
   d5678:	07d2      	lsls	r2, r2, #31
   d567a:	bf5c      	itt	pl
   d567c:	2201      	movpl	r2, #1
   d567e:	601a      	strpl	r2, [r3, #0]
   d5680:	4b14      	ldr	r3, [pc, #80]	; (d56d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5682:	681a      	ldr	r2, [r3, #0]
   d5684:	07d0      	lsls	r0, r2, #31
   d5686:	bf5c      	itt	pl
   d5688:	2201      	movpl	r2, #1
   d568a:	601a      	strpl	r2, [r3, #0]
   d568c:	4b12      	ldr	r3, [pc, #72]	; (d56d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d568e:	681a      	ldr	r2, [r3, #0]
   d5690:	07d1      	lsls	r1, r2, #31
   d5692:	bf5c      	itt	pl
   d5694:	2201      	movpl	r2, #1
   d5696:	601a      	strpl	r2, [r3, #0]
   d5698:	4b10      	ldr	r3, [pc, #64]	; (d56dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d569a:	681a      	ldr	r2, [r3, #0]
   d569c:	07d2      	lsls	r2, r2, #31
   d569e:	bf5c      	itt	pl
   d56a0:	2201      	movpl	r2, #1
   d56a2:	601a      	strpl	r2, [r3, #0]
   d56a4:	4b0e      	ldr	r3, [pc, #56]	; (d56e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d56a6:	681a      	ldr	r2, [r3, #0]
   d56a8:	07d0      	lsls	r0, r2, #31
   d56aa:	bf5c      	itt	pl
   d56ac:	2201      	movpl	r2, #1
   d56ae:	601a      	strpl	r2, [r3, #0]
   d56b0:	4b0c      	ldr	r3, [pc, #48]	; (d56e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d56b2:	681a      	ldr	r2, [r3, #0]
   d56b4:	07d1      	lsls	r1, r2, #31
   d56b6:	bf5c      	itt	pl
   d56b8:	2201      	movpl	r2, #1
   d56ba:	601a      	strpl	r2, [r3, #0]
   d56bc:	4b0a      	ldr	r3, [pc, #40]	; (d56e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d56be:	681a      	ldr	r2, [r3, #0]
   d56c0:	07d2      	lsls	r2, r2, #31
   d56c2:	bf5c      	itt	pl
   d56c4:	2201      	movpl	r2, #1
   d56c6:	601a      	strpl	r2, [r3, #0]
   d56c8:	4770      	bx	lr
   d56ca:	bf00      	nop
   d56cc:	2003e7bc 	.word	0x2003e7bc
   d56d0:	2003e7b8 	.word	0x2003e7b8
   d56d4:	2003e7b4 	.word	0x2003e7b4
   d56d8:	2003e7b0 	.word	0x2003e7b0
   d56dc:	2003e7ac 	.word	0x2003e7ac
   d56e0:	2003e7a8 	.word	0x2003e7a8
   d56e4:	2003e7a4 	.word	0x2003e7a4
   d56e8:	2003e7a0 	.word	0x2003e7a0

000d56ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d56ec:	4b24      	ldr	r3, [pc, #144]	; (d5780 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d56ee:	681a      	ldr	r2, [r3, #0]
   d56f0:	07d0      	lsls	r0, r2, #31
   d56f2:	bf5c      	itt	pl
   d56f4:	2201      	movpl	r2, #1
   d56f6:	601a      	strpl	r2, [r3, #0]
   d56f8:	4b22      	ldr	r3, [pc, #136]	; (d5784 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d56fa:	681a      	ldr	r2, [r3, #0]
   d56fc:	07d1      	lsls	r1, r2, #31
   d56fe:	bf5c      	itt	pl
   d5700:	2201      	movpl	r2, #1
   d5702:	601a      	strpl	r2, [r3, #0]
   d5704:	4b20      	ldr	r3, [pc, #128]	; (d5788 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d5706:	681a      	ldr	r2, [r3, #0]
   d5708:	07d2      	lsls	r2, r2, #31
   d570a:	bf5c      	itt	pl
   d570c:	2201      	movpl	r2, #1
   d570e:	601a      	strpl	r2, [r3, #0]
   d5710:	4b1e      	ldr	r3, [pc, #120]	; (d578c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d5712:	681a      	ldr	r2, [r3, #0]
   d5714:	07d0      	lsls	r0, r2, #31
   d5716:	bf5c      	itt	pl
   d5718:	2201      	movpl	r2, #1
   d571a:	601a      	strpl	r2, [r3, #0]
   d571c:	4b1c      	ldr	r3, [pc, #112]	; (d5790 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d571e:	681a      	ldr	r2, [r3, #0]
   d5720:	07d1      	lsls	r1, r2, #31
   d5722:	bf5c      	itt	pl
   d5724:	2201      	movpl	r2, #1
   d5726:	601a      	strpl	r2, [r3, #0]
   d5728:	4b1a      	ldr	r3, [pc, #104]	; (d5794 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d572a:	681a      	ldr	r2, [r3, #0]
   d572c:	07d2      	lsls	r2, r2, #31
   d572e:	bf5c      	itt	pl
   d5730:	2201      	movpl	r2, #1
   d5732:	601a      	strpl	r2, [r3, #0]
   d5734:	4b18      	ldr	r3, [pc, #96]	; (d5798 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d5736:	681a      	ldr	r2, [r3, #0]
   d5738:	07d0      	lsls	r0, r2, #31
   d573a:	bf5c      	itt	pl
   d573c:	2201      	movpl	r2, #1
   d573e:	601a      	strpl	r2, [r3, #0]
   d5740:	4b16      	ldr	r3, [pc, #88]	; (d579c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5742:	681a      	ldr	r2, [r3, #0]
   d5744:	07d1      	lsls	r1, r2, #31
   d5746:	bf5c      	itt	pl
   d5748:	2201      	movpl	r2, #1
   d574a:	601a      	strpl	r2, [r3, #0]
   d574c:	4b14      	ldr	r3, [pc, #80]	; (d57a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d574e:	681a      	ldr	r2, [r3, #0]
   d5750:	07d2      	lsls	r2, r2, #31
   d5752:	bf5c      	itt	pl
   d5754:	2201      	movpl	r2, #1
   d5756:	601a      	strpl	r2, [r3, #0]
   d5758:	4b12      	ldr	r3, [pc, #72]	; (d57a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d575a:	681a      	ldr	r2, [r3, #0]
   d575c:	07d0      	lsls	r0, r2, #31
   d575e:	bf5c      	itt	pl
   d5760:	2201      	movpl	r2, #1
   d5762:	601a      	strpl	r2, [r3, #0]
   d5764:	4b10      	ldr	r3, [pc, #64]	; (d57a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5766:	681a      	ldr	r2, [r3, #0]
   d5768:	07d1      	lsls	r1, r2, #31
   d576a:	bf5c      	itt	pl
   d576c:	2201      	movpl	r2, #1
   d576e:	601a      	strpl	r2, [r3, #0]
   d5770:	4b0e      	ldr	r3, [pc, #56]	; (d57ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d5772:	681a      	ldr	r2, [r3, #0]
   d5774:	07d2      	lsls	r2, r2, #31
   d5776:	bf5c      	itt	pl
   d5778:	2201      	movpl	r2, #1
   d577a:	601a      	strpl	r2, [r3, #0]
   d577c:	4770      	bx	lr
   d577e:	bf00      	nop
   d5780:	2003e7ec 	.word	0x2003e7ec
   d5784:	2003e7e8 	.word	0x2003e7e8
   d5788:	2003e7e4 	.word	0x2003e7e4
   d578c:	2003e7e0 	.word	0x2003e7e0
   d5790:	2003e7dc 	.word	0x2003e7dc
   d5794:	2003e7d8 	.word	0x2003e7d8
   d5798:	2003e7d4 	.word	0x2003e7d4
   d579c:	2003e7d0 	.word	0x2003e7d0
   d57a0:	2003e7cc 	.word	0x2003e7cc
   d57a4:	2003e7c8 	.word	0x2003e7c8
   d57a8:	2003e7c4 	.word	0x2003e7c4
   d57ac:	2003e7c0 	.word	0x2003e7c0

000d57b0 <pow>:
   d57b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d57b4:	ed2d 8b02 	vpush	{d8}
   d57b8:	f8df a324 	ldr.w	sl, [pc, #804]	; d5ae0 <pow+0x330>
   d57bc:	b08b      	sub	sp, #44	; 0x2c
   d57be:	ec57 6b10 	vmov	r6, r7, d0
   d57c2:	ec55 4b11 	vmov	r4, r5, d1
   d57c6:	f000 f98f 	bl	d5ae8 <__ieee754_pow>
   d57ca:	f99a 8000 	ldrsb.w	r8, [sl]
   d57ce:	eeb0 8a40 	vmov.f32	s16, s0
   d57d2:	eef0 8a60 	vmov.f32	s17, s1
   d57d6:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   d57da:	d048      	beq.n	d586e <pow+0xbe>
   d57dc:	4622      	mov	r2, r4
   d57de:	462b      	mov	r3, r5
   d57e0:	4620      	mov	r0, r4
   d57e2:	4629      	mov	r1, r5
   d57e4:	f001 fd6e 	bl	d72c4 <__aeabi_dcmpun>
   d57e8:	4683      	mov	fp, r0
   d57ea:	2800      	cmp	r0, #0
   d57ec:	d13f      	bne.n	d586e <pow+0xbe>
   d57ee:	4632      	mov	r2, r6
   d57f0:	463b      	mov	r3, r7
   d57f2:	4630      	mov	r0, r6
   d57f4:	4639      	mov	r1, r7
   d57f6:	f001 fd65 	bl	d72c4 <__aeabi_dcmpun>
   d57fa:	4681      	mov	r9, r0
   d57fc:	2800      	cmp	r0, #0
   d57fe:	f040 8090 	bne.w	d5922 <pow+0x172>
   d5802:	4630      	mov	r0, r6
   d5804:	4639      	mov	r1, r7
   d5806:	2200      	movs	r2, #0
   d5808:	2300      	movs	r3, #0
   d580a:	f001 fd29 	bl	d7260 <__aeabi_dcmpeq>
   d580e:	2800      	cmp	r0, #0
   d5810:	d036      	beq.n	d5880 <pow+0xd0>
   d5812:	2200      	movs	r2, #0
   d5814:	2300      	movs	r3, #0
   d5816:	4620      	mov	r0, r4
   d5818:	4629      	mov	r1, r5
   d581a:	f001 fd21 	bl	d7260 <__aeabi_dcmpeq>
   d581e:	4683      	mov	fp, r0
   d5820:	b1b8      	cbz	r0, d5852 <pow+0xa2>
   d5822:	ed9f 7ba5 	vldr	d7, [pc, #660]	; d5ab8 <pow+0x308>
   d5826:	2201      	movs	r2, #1
   d5828:	4ba9      	ldr	r3, [pc, #676]	; (d5ad0 <pow+0x320>)
   d582a:	f8cd 9020 	str.w	r9, [sp, #32]
   d582e:	9200      	str	r2, [sp, #0]
   d5830:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d5834:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d5838:	ed8d 7b06 	vstr	d7, [sp, #24]
   d583c:	9301      	str	r3, [sp, #4]
   d583e:	f1b8 0f00 	cmp.w	r8, #0
   d5842:	d05b      	beq.n	d58fc <pow+0x14c>
   d5844:	ed9f 0b9e 	vldr	d0, [pc, #632]	; d5ac0 <pow+0x310>
   d5848:	b00b      	add	sp, #44	; 0x2c
   d584a:	ecbd 8b02 	vpop	{d8}
   d584e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5852:	ec45 4b10 	vmov	d0, r4, r5
   d5856:	f000 ffa7 	bl	d67a8 <finite>
   d585a:	b140      	cbz	r0, d586e <pow+0xbe>
   d585c:	2200      	movs	r2, #0
   d585e:	2300      	movs	r3, #0
   d5860:	4620      	mov	r0, r4
   d5862:	4629      	mov	r1, r5
   d5864:	f001 fd06 	bl	d7274 <__aeabi_dcmplt>
   d5868:	2800      	cmp	r0, #0
   d586a:	f040 80c5 	bne.w	d59f8 <pow+0x248>
   d586e:	eeb0 0a48 	vmov.f32	s0, s16
   d5872:	eef0 0a68 	vmov.f32	s1, s17
   d5876:	b00b      	add	sp, #44	; 0x2c
   d5878:	ecbd 8b02 	vpop	{d8}
   d587c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5880:	eeb0 0a48 	vmov.f32	s0, s16
   d5884:	eef0 0a68 	vmov.f32	s1, s17
   d5888:	f000 ff8e 	bl	d67a8 <finite>
   d588c:	4680      	mov	r8, r0
   d588e:	2800      	cmp	r0, #0
   d5890:	d061      	beq.n	d5956 <pow+0x1a6>
   d5892:	f04f 0800 	mov.w	r8, #0
   d5896:	f04f 0900 	mov.w	r9, #0
   d589a:	ec51 0b18 	vmov	r0, r1, d8
   d589e:	4642      	mov	r2, r8
   d58a0:	464b      	mov	r3, r9
   d58a2:	f001 fcdd 	bl	d7260 <__aeabi_dcmpeq>
   d58a6:	2800      	cmp	r0, #0
   d58a8:	d0e1      	beq.n	d586e <pow+0xbe>
   d58aa:	ec47 6b10 	vmov	d0, r6, r7
   d58ae:	f000 ff7b 	bl	d67a8 <finite>
   d58b2:	2800      	cmp	r0, #0
   d58b4:	d0db      	beq.n	d586e <pow+0xbe>
   d58b6:	ec45 4b10 	vmov	d0, r4, r5
   d58ba:	f000 ff75 	bl	d67a8 <finite>
   d58be:	2800      	cmp	r0, #0
   d58c0:	d0d5      	beq.n	d586e <pow+0xbe>
   d58c2:	f99a 3000 	ldrsb.w	r3, [sl]
   d58c6:	4a82      	ldr	r2, [pc, #520]	; (d5ad0 <pow+0x320>)
   d58c8:	9201      	str	r2, [sp, #4]
   d58ca:	2104      	movs	r1, #4
   d58cc:	2200      	movs	r2, #0
   d58ce:	2b02      	cmp	r3, #2
   d58d0:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d58d4:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d58d8:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d58dc:	9100      	str	r1, [sp, #0]
   d58de:	9208      	str	r2, [sp, #32]
   d58e0:	d003      	beq.n	d58ea <pow+0x13a>
   d58e2:	4668      	mov	r0, sp
   d58e4:	f000 ff68 	bl	d67b8 <matherr>
   d58e8:	b970      	cbnz	r0, d5908 <pow+0x158>
   d58ea:	f7fe ff63 	bl	d47b4 <__errno>
   d58ee:	2322      	movs	r3, #34	; 0x22
   d58f0:	6003      	str	r3, [r0, #0]
   d58f2:	e009      	b.n	d5908 <pow+0x158>
   d58f4:	ed9f 7b70 	vldr	d7, [pc, #448]	; d5ab8 <pow+0x308>
   d58f8:	ed8d 7b06 	vstr	d7, [sp, #24]
   d58fc:	4668      	mov	r0, sp
   d58fe:	f000 ff5b 	bl	d67b8 <matherr>
   d5902:	2800      	cmp	r0, #0
   d5904:	f000 808e 	beq.w	d5a24 <pow+0x274>
   d5908:	9b08      	ldr	r3, [sp, #32]
   d590a:	b11b      	cbz	r3, d5914 <pow+0x164>
   d590c:	f7fe ff52 	bl	d47b4 <__errno>
   d5910:	9b08      	ldr	r3, [sp, #32]
   d5912:	6003      	str	r3, [r0, #0]
   d5914:	ed9d 0b06 	vldr	d0, [sp, #24]
   d5918:	b00b      	add	sp, #44	; 0x2c
   d591a:	ecbd 8b02 	vpop	{d8}
   d591e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5922:	2200      	movs	r2, #0
   d5924:	2300      	movs	r3, #0
   d5926:	4620      	mov	r0, r4
   d5928:	4629      	mov	r1, r5
   d592a:	f001 fc99 	bl	d7260 <__aeabi_dcmpeq>
   d592e:	2800      	cmp	r0, #0
   d5930:	d09d      	beq.n	d586e <pow+0xbe>
   d5932:	ed9f 0b63 	vldr	d0, [pc, #396]	; d5ac0 <pow+0x310>
   d5936:	4b66      	ldr	r3, [pc, #408]	; (d5ad0 <pow+0x320>)
   d5938:	f8cd b020 	str.w	fp, [sp, #32]
   d593c:	2201      	movs	r2, #1
   d593e:	f1b8 0f02 	cmp.w	r8, #2
   d5942:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d5946:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d594a:	ed8d 0b06 	vstr	d0, [sp, #24]
   d594e:	e88d 000c 	stmia.w	sp, {r2, r3}
   d5952:	d1d3      	bne.n	d58fc <pow+0x14c>
   d5954:	e78f      	b.n	d5876 <pow+0xc6>
   d5956:	ec47 6b10 	vmov	d0, r6, r7
   d595a:	f000 ff25 	bl	d67a8 <finite>
   d595e:	2800      	cmp	r0, #0
   d5960:	d097      	beq.n	d5892 <pow+0xe2>
   d5962:	ec45 4b10 	vmov	d0, r4, r5
   d5966:	f000 ff1f 	bl	d67a8 <finite>
   d596a:	2800      	cmp	r0, #0
   d596c:	d091      	beq.n	d5892 <pow+0xe2>
   d596e:	ec53 2b18 	vmov	r2, r3, d8
   d5972:	ee18 0a10 	vmov	r0, s16
   d5976:	4619      	mov	r1, r3
   d5978:	f001 fca4 	bl	d72c4 <__aeabi_dcmpun>
   d597c:	2800      	cmp	r0, #0
   d597e:	d17c      	bne.n	d5a7a <pow+0x2ca>
   d5980:	2303      	movs	r3, #3
   d5982:	f99a 8000 	ldrsb.w	r8, [sl]
   d5986:	9300      	str	r3, [sp, #0]
   d5988:	4b51      	ldr	r3, [pc, #324]	; (d5ad0 <pow+0x320>)
   d598a:	9008      	str	r0, [sp, #32]
   d598c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d5990:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d5994:	9301      	str	r3, [sp, #4]
   d5996:	f1b8 0f00 	cmp.w	r8, #0
   d599a:	d148      	bne.n	d5a2e <pow+0x27e>
   d599c:	f8df 9144 	ldr.w	r9, [pc, #324]	; d5ae4 <pow+0x334>
   d59a0:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
   d59a4:	2200      	movs	r2, #0
   d59a6:	2300      	movs	r3, #0
   d59a8:	4630      	mov	r0, r6
   d59aa:	4639      	mov	r1, r7
   d59ac:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d59b0:	f001 fc60 	bl	d7274 <__aeabi_dcmplt>
   d59b4:	2800      	cmp	r0, #0
   d59b6:	d094      	beq.n	d58e2 <pow+0x132>
   d59b8:	2200      	movs	r2, #0
   d59ba:	4b46      	ldr	r3, [pc, #280]	; (d5ad4 <pow+0x324>)
   d59bc:	4620      	mov	r0, r4
   d59be:	4629      	mov	r1, r5
   d59c0:	f001 f9e6 	bl	d6d90 <__aeabi_dmul>
   d59c4:	4604      	mov	r4, r0
   d59c6:	460d      	mov	r5, r1
   d59c8:	ec45 4b10 	vmov	d0, r4, r5
   d59cc:	f000 ff00 	bl	d67d0 <rint>
   d59d0:	4620      	mov	r0, r4
   d59d2:	ec53 2b10 	vmov	r2, r3, d0
   d59d6:	4629      	mov	r1, r5
   d59d8:	f001 fc42 	bl	d7260 <__aeabi_dcmpeq>
   d59dc:	2800      	cmp	r0, #0
   d59de:	d149      	bne.n	d5a74 <pow+0x2c4>
   d59e0:	4b3d      	ldr	r3, [pc, #244]	; (d5ad8 <pow+0x328>)
   d59e2:	f99a 8000 	ldrsb.w	r8, [sl]
   d59e6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d59ea:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d59ee:	f1b8 0f02 	cmp.w	r8, #2
   d59f2:	f47f af76 	bne.w	d58e2 <pow+0x132>
   d59f6:	e778      	b.n	d58ea <pow+0x13a>
   d59f8:	4a35      	ldr	r2, [pc, #212]	; (d5ad0 <pow+0x320>)
   d59fa:	f99a 3000 	ldrsb.w	r3, [sl]
   d59fe:	f8cd b020 	str.w	fp, [sp, #32]
   d5a02:	2101      	movs	r1, #1
   d5a04:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d5a08:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d5a0c:	e88d 0006 	stmia.w	sp, {r1, r2}
   d5a10:	2b00      	cmp	r3, #0
   d5a12:	f43f af6f 	beq.w	d58f4 <pow+0x144>
   d5a16:	4931      	ldr	r1, [pc, #196]	; (d5adc <pow+0x32c>)
   d5a18:	2000      	movs	r0, #0
   d5a1a:	2b02      	cmp	r3, #2
   d5a1c:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d5a20:	f47f af6c 	bne.w	d58fc <pow+0x14c>
   d5a24:	f7fe fec6 	bl	d47b4 <__errno>
   d5a28:	2321      	movs	r3, #33	; 0x21
   d5a2a:	6003      	str	r3, [r0, #0]
   d5a2c:	e76c      	b.n	d5908 <pow+0x158>
   d5a2e:	ed9f 7b26 	vldr	d7, [pc, #152]	; d5ac8 <pow+0x318>
   d5a32:	2200      	movs	r2, #0
   d5a34:	2300      	movs	r3, #0
   d5a36:	4630      	mov	r0, r6
   d5a38:	4639      	mov	r1, r7
   d5a3a:	ed8d 7b06 	vstr	d7, [sp, #24]
   d5a3e:	f001 fc19 	bl	d7274 <__aeabi_dcmplt>
   d5a42:	2800      	cmp	r0, #0
   d5a44:	d0d3      	beq.n	d59ee <pow+0x23e>
   d5a46:	2200      	movs	r2, #0
   d5a48:	4b22      	ldr	r3, [pc, #136]	; (d5ad4 <pow+0x324>)
   d5a4a:	4620      	mov	r0, r4
   d5a4c:	4629      	mov	r1, r5
   d5a4e:	f001 f99f 	bl	d6d90 <__aeabi_dmul>
   d5a52:	4604      	mov	r4, r0
   d5a54:	460d      	mov	r5, r1
   d5a56:	ec45 4b10 	vmov	d0, r4, r5
   d5a5a:	f000 feb9 	bl	d67d0 <rint>
   d5a5e:	4620      	mov	r0, r4
   d5a60:	ec53 2b10 	vmov	r2, r3, d0
   d5a64:	4629      	mov	r1, r5
   d5a66:	f001 fbfb 	bl	d7260 <__aeabi_dcmpeq>
   d5a6a:	b918      	cbnz	r0, d5a74 <pow+0x2c4>
   d5a6c:	4b1b      	ldr	r3, [pc, #108]	; (d5adc <pow+0x32c>)
   d5a6e:	2200      	movs	r2, #0
   d5a70:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d5a74:	f99a 8000 	ldrsb.w	r8, [sl]
   d5a78:	e7b9      	b.n	d59ee <pow+0x23e>
   d5a7a:	4b15      	ldr	r3, [pc, #84]	; (d5ad0 <pow+0x320>)
   d5a7c:	f99a 9000 	ldrsb.w	r9, [sl]
   d5a80:	f8cd 8020 	str.w	r8, [sp, #32]
   d5a84:	2201      	movs	r2, #1
   d5a86:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d5a8a:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d5a8e:	e88d 000c 	stmia.w	sp, {r2, r3}
   d5a92:	f1b9 0f00 	cmp.w	r9, #0
   d5a96:	f43f af2d 	beq.w	d58f4 <pow+0x144>
   d5a9a:	2200      	movs	r2, #0
   d5a9c:	2300      	movs	r3, #0
   d5a9e:	4610      	mov	r0, r2
   d5aa0:	4619      	mov	r1, r3
   d5aa2:	f001 fa9f 	bl	d6fe4 <__aeabi_ddiv>
   d5aa6:	f1b9 0f02 	cmp.w	r9, #2
   d5aaa:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d5aae:	d0b9      	beq.n	d5a24 <pow+0x274>
   d5ab0:	e724      	b.n	d58fc <pow+0x14c>
   d5ab2:	bf00      	nop
   d5ab4:	f3af 8000 	nop.w
	...
   d5ac4:	3ff00000 	.word	0x3ff00000
   d5ac8:	00000000 	.word	0x00000000
   d5acc:	7ff00000 	.word	0x7ff00000
   d5ad0:	000d7788 	.word	0x000d7788
   d5ad4:	3fe00000 	.word	0x3fe00000
   d5ad8:	c7efffff 	.word	0xc7efffff
   d5adc:	fff00000 	.word	0xfff00000
   d5ae0:	2003e404 	.word	0x2003e404
   d5ae4:	47efffff 	.word	0x47efffff

000d5ae8 <__ieee754_pow>:
   d5ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5aec:	ec51 0b11 	vmov	r0, r1, d1
   d5af0:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   d5af4:	ea58 0400 	orrs.w	r4, r8, r0
   d5af8:	b093      	sub	sp, #76	; 0x4c
   d5afa:	d03c      	beq.n	d5b76 <__ieee754_pow+0x8e>
   d5afc:	ec53 2b10 	vmov	r2, r3, d0
   d5b00:	4e6d      	ldr	r6, [pc, #436]	; (d5cb8 <__ieee754_pow+0x1d0>)
   d5b02:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   d5b06:	42b4      	cmp	r4, r6
   d5b08:	ee10 aa10 	vmov	sl, s0
   d5b0c:	461d      	mov	r5, r3
   d5b0e:	dc2b      	bgt.n	d5b68 <__ieee754_pow+0x80>
   d5b10:	4689      	mov	r9, r1
   d5b12:	ee11 ea10 	vmov	lr, s2
   d5b16:	d026      	beq.n	d5b66 <__ieee754_pow+0x7e>
   d5b18:	45b0      	cmp	r8, r6
   d5b1a:	dc25      	bgt.n	d5b68 <__ieee754_pow+0x80>
   d5b1c:	4e66      	ldr	r6, [pc, #408]	; (d5cb8 <__ieee754_pow+0x1d0>)
   d5b1e:	45b0      	cmp	r8, r6
   d5b20:	d077      	beq.n	d5c12 <__ieee754_pow+0x12a>
   d5b22:	2d00      	cmp	r5, #0
   d5b24:	4616      	mov	r6, r2
   d5b26:	461f      	mov	r7, r3
   d5b28:	e9cd 0100 	strd	r0, r1, [sp]
   d5b2c:	db75      	blt.n	d5c1a <__ieee754_pow+0x132>
   d5b2e:	f04f 0b00 	mov.w	fp, #0
   d5b32:	f1be 0f00 	cmp.w	lr, #0
   d5b36:	d12d      	bne.n	d5b94 <__ieee754_pow+0xac>
   d5b38:	4b5f      	ldr	r3, [pc, #380]	; (d5cb8 <__ieee754_pow+0x1d0>)
   d5b3a:	4598      	cmp	r8, r3
   d5b3c:	f000 8089 	beq.w	d5c52 <__ieee754_pow+0x16a>
   d5b40:	4b5e      	ldr	r3, [pc, #376]	; (d5cbc <__ieee754_pow+0x1d4>)
   d5b42:	4598      	cmp	r8, r3
   d5b44:	d05e      	beq.n	d5c04 <__ieee754_pow+0x11c>
   d5b46:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
   d5b4a:	f000 83de 	beq.w	d630a <__ieee754_pow+0x822>
   d5b4e:	4b5c      	ldr	r3, [pc, #368]	; (d5cc0 <__ieee754_pow+0x1d8>)
   d5b50:	4599      	cmp	r9, r3
   d5b52:	d11f      	bne.n	d5b94 <__ieee754_pow+0xac>
   d5b54:	2d00      	cmp	r5, #0
   d5b56:	db1d      	blt.n	d5b94 <__ieee754_pow+0xac>
   d5b58:	ec47 6b10 	vmov	d0, r6, r7
   d5b5c:	b013      	add	sp, #76	; 0x4c
   d5b5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5b62:	f000 bd49 	b.w	d65f8 <__ieee754_sqrt>
   d5b66:	b15a      	cbz	r2, d5b80 <__ieee754_pow+0x98>
   d5b68:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
   d5b6c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
   d5b70:	ea54 030a 	orrs.w	r3, r4, sl
   d5b74:	d106      	bne.n	d5b84 <__ieee754_pow+0x9c>
   d5b76:	ed9f 0b4a 	vldr	d0, [pc, #296]	; d5ca0 <__ieee754_pow+0x1b8>
   d5b7a:	b013      	add	sp, #76	; 0x4c
   d5b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5b80:	45a0      	cmp	r8, r4
   d5b82:	ddcb      	ble.n	d5b1c <__ieee754_pow+0x34>
   d5b84:	484f      	ldr	r0, [pc, #316]	; (d5cc4 <__ieee754_pow+0x1dc>)
   d5b86:	b013      	add	sp, #76	; 0x4c
   d5b88:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5b8c:	f000 be18 	b.w	d67c0 <nan>
   d5b90:	f04f 0b00 	mov.w	fp, #0
   d5b94:	ec47 6b10 	vmov	d0, r6, r7
   d5b98:	f000 fdfe 	bl	d6798 <fabs>
   d5b9c:	ec51 0b10 	vmov	r0, r1, d0
   d5ba0:	f1ba 0f00 	cmp.w	sl, #0
   d5ba4:	d01e      	beq.n	d5be4 <__ieee754_pow+0xfc>
   d5ba6:	0fed      	lsrs	r5, r5, #31
   d5ba8:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
   d5bac:	ea5b 030a 	orrs.w	r3, fp, sl
   d5bb0:	d063      	beq.n	d5c7a <__ieee754_pow+0x192>
   d5bb2:	4b45      	ldr	r3, [pc, #276]	; (d5cc8 <__ieee754_pow+0x1e0>)
   d5bb4:	4598      	cmp	r8, r3
   d5bb6:	f340 808d 	ble.w	d5cd4 <__ieee754_pow+0x1ec>
   d5bba:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   d5bbe:	4598      	cmp	r8, r3
   d5bc0:	f340 8438 	ble.w	d6434 <__ieee754_pow+0x94c>
   d5bc4:	4b41      	ldr	r3, [pc, #260]	; (d5ccc <__ieee754_pow+0x1e4>)
   d5bc6:	429c      	cmp	r4, r3
   d5bc8:	dd62      	ble.n	d5c90 <__ieee754_pow+0x1a8>
   d5bca:	f1b9 0f00 	cmp.w	r9, #0
   d5bce:	dd62      	ble.n	d5c96 <__ieee754_pow+0x1ae>
   d5bd0:	a335      	add	r3, pc, #212	; (adr r3, d5ca8 <__ieee754_pow+0x1c0>)
   d5bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5bd6:	4610      	mov	r0, r2
   d5bd8:	4619      	mov	r1, r3
   d5bda:	f001 f8d9 	bl	d6d90 <__aeabi_dmul>
   d5bde:	ec41 0b10 	vmov	d0, r0, r1
   d5be2:	e7ca      	b.n	d5b7a <__ieee754_pow+0x92>
   d5be4:	b124      	cbz	r4, d5bf0 <__ieee754_pow+0x108>
   d5be6:	4b35      	ldr	r3, [pc, #212]	; (d5cbc <__ieee754_pow+0x1d4>)
   d5be8:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
   d5bec:	429a      	cmp	r2, r3
   d5bee:	d1da      	bne.n	d5ba6 <__ieee754_pow+0xbe>
   d5bf0:	f1b9 0f00 	cmp.w	r9, #0
   d5bf4:	f2c0 83cb 	blt.w	d638e <__ieee754_pow+0x8a6>
   d5bf8:	2d00      	cmp	r5, #0
   d5bfa:	f2c0 8374 	blt.w	d62e6 <__ieee754_pow+0x7fe>
   d5bfe:	ec41 0b10 	vmov	d0, r0, r1
   d5c02:	e7ba      	b.n	d5b7a <__ieee754_pow+0x92>
   d5c04:	f1b9 0f00 	cmp.w	r9, #0
   d5c08:	f2c0 847a 	blt.w	d6500 <__ieee754_pow+0xa18>
   d5c0c:	ec47 6b10 	vmov	d0, r6, r7
   d5c10:	e7b3      	b.n	d5b7a <__ieee754_pow+0x92>
   d5c12:	f1be 0f00 	cmp.w	lr, #0
   d5c16:	d084      	beq.n	d5b22 <__ieee754_pow+0x3a>
   d5c18:	e7a6      	b.n	d5b68 <__ieee754_pow+0x80>
   d5c1a:	4b2d      	ldr	r3, [pc, #180]	; (d5cd0 <__ieee754_pow+0x1e8>)
   d5c1c:	4598      	cmp	r8, r3
   d5c1e:	dc29      	bgt.n	d5c74 <__ieee754_pow+0x18c>
   d5c20:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
   d5c24:	4598      	cmp	r8, r3
   d5c26:	dd82      	ble.n	d5b2e <__ieee754_pow+0x46>
   d5c28:	ea4f 5328 	mov.w	r3, r8, asr #20
   d5c2c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   d5c30:	2b14      	cmp	r3, #20
   d5c32:	f340 847f 	ble.w	d6534 <__ieee754_pow+0xa4c>
   d5c36:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
   d5c3a:	fa2e f203 	lsr.w	r2, lr, r3
   d5c3e:	fa02 f303 	lsl.w	r3, r2, r3
   d5c42:	459e      	cmp	lr, r3
   d5c44:	f47f af73 	bne.w	d5b2e <__ieee754_pow+0x46>
   d5c48:	f002 0201 	and.w	r2, r2, #1
   d5c4c:	f1c2 0b02 	rsb	fp, r2, #2
   d5c50:	e76f      	b.n	d5b32 <__ieee754_pow+0x4a>
   d5c52:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
   d5c56:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   d5c5a:	ea53 030a 	orrs.w	r3, r3, sl
   d5c5e:	d08a      	beq.n	d5b76 <__ieee754_pow+0x8e>
   d5c60:	4b1a      	ldr	r3, [pc, #104]	; (d5ccc <__ieee754_pow+0x1e4>)
   d5c62:	429c      	cmp	r4, r3
   d5c64:	f340 8385 	ble.w	d6372 <__ieee754_pow+0x88a>
   d5c68:	f1b9 0f00 	cmp.w	r9, #0
   d5c6c:	db13      	blt.n	d5c96 <__ieee754_pow+0x1ae>
   d5c6e:	ed9d 0b00 	vldr	d0, [sp]
   d5c72:	e782      	b.n	d5b7a <__ieee754_pow+0x92>
   d5c74:	f04f 0b02 	mov.w	fp, #2
   d5c78:	e75b      	b.n	d5b32 <__ieee754_pow+0x4a>
   d5c7a:	4632      	mov	r2, r6
   d5c7c:	463b      	mov	r3, r7
   d5c7e:	4610      	mov	r0, r2
   d5c80:	4619      	mov	r1, r3
   d5c82:	f000 fed1 	bl	d6a28 <__aeabi_dsub>
   d5c86:	4602      	mov	r2, r0
   d5c88:	460b      	mov	r3, r1
   d5c8a:	f001 f9ab 	bl	d6fe4 <__aeabi_ddiv>
   d5c8e:	e7b6      	b.n	d5bfe <__ieee754_pow+0x116>
   d5c90:	f1b9 0f00 	cmp.w	r9, #0
   d5c94:	db9c      	blt.n	d5bd0 <__ieee754_pow+0xe8>
   d5c96:	ed9f 0b06 	vldr	d0, [pc, #24]	; d5cb0 <__ieee754_pow+0x1c8>
   d5c9a:	e76e      	b.n	d5b7a <__ieee754_pow+0x92>
   d5c9c:	f3af 8000 	nop.w
   d5ca0:	00000000 	.word	0x00000000
   d5ca4:	3ff00000 	.word	0x3ff00000
   d5ca8:	8800759c 	.word	0x8800759c
   d5cac:	7e37e43c 	.word	0x7e37e43c
	...
   d5cb8:	7ff00000 	.word	0x7ff00000
   d5cbc:	3ff00000 	.word	0x3ff00000
   d5cc0:	3fe00000 	.word	0x3fe00000
   d5cc4:	000d778c 	.word	0x000d778c
   d5cc8:	41e00000 	.word	0x41e00000
   d5ccc:	3fefffff 	.word	0x3fefffff
   d5cd0:	433fffff 	.word	0x433fffff
   d5cd4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
   d5cd8:	f04f 0200 	mov.w	r2, #0
   d5cdc:	da05      	bge.n	d5cea <__ieee754_pow+0x202>
   d5cde:	4bd6      	ldr	r3, [pc, #856]	; (d6038 <__ieee754_pow+0x550>)
   d5ce0:	f001 f856 	bl	d6d90 <__aeabi_dmul>
   d5ce4:	f06f 0234 	mvn.w	r2, #52	; 0x34
   d5ce8:	460c      	mov	r4, r1
   d5cea:	1523      	asrs	r3, r4, #20
   d5cec:	4ed3      	ldr	r6, [pc, #844]	; (d603c <__ieee754_pow+0x554>)
   d5cee:	f3c4 0413 	ubfx	r4, r4, #0, #20
   d5cf2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   d5cf6:	4413      	add	r3, r2
   d5cf8:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
   d5cfc:	42b4      	cmp	r4, r6
   d5cfe:	461a      	mov	r2, r3
   d5d00:	930d      	str	r3, [sp, #52]	; 0x34
   d5d02:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
   d5d06:	f340 8349 	ble.w	d639c <__ieee754_pow+0x8b4>
   d5d0a:	4bcd      	ldr	r3, [pc, #820]	; (d6040 <__ieee754_pow+0x558>)
   d5d0c:	429c      	cmp	r4, r3
   d5d0e:	f340 842d 	ble.w	d656c <__ieee754_pow+0xa84>
   d5d12:	ed9f 7bb3 	vldr	d7, [pc, #716]	; d5fe0 <__ieee754_pow+0x4f8>
   d5d16:	ed8d 7b08 	vstr	d7, [sp, #32]
   d5d1a:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d5d1e:	ed9f 7bb2 	vldr	d7, [pc, #712]	; d5fe8 <__ieee754_pow+0x500>
   d5d22:	4613      	mov	r3, r2
   d5d24:	ed8d 7b06 	vstr	d7, [sp, #24]
   d5d28:	3301      	adds	r3, #1
   d5d2a:	930d      	str	r3, [sp, #52]	; 0x34
   d5d2c:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
   d5d30:	f04f 0800 	mov.w	r8, #0
   d5d34:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d5d38:	4629      	mov	r1, r5
   d5d3a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d5d3e:	f000 fe73 	bl	d6a28 <__aeabi_dsub>
   d5d42:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d5d46:	4606      	mov	r6, r0
   d5d48:	460f      	mov	r7, r1
   d5d4a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d5d4e:	f000 fe6d 	bl	d6a2c <__adddf3>
   d5d52:	4602      	mov	r2, r0
   d5d54:	460b      	mov	r3, r1
   d5d56:	2000      	movs	r0, #0
   d5d58:	49ba      	ldr	r1, [pc, #744]	; (d6044 <__ieee754_pow+0x55c>)
   d5d5a:	f001 f943 	bl	d6fe4 <__aeabi_ddiv>
   d5d5e:	4603      	mov	r3, r0
   d5d60:	460c      	mov	r4, r1
   d5d62:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
   d5d66:	4602      	mov	r2, r0
   d5d68:	460b      	mov	r3, r1
   d5d6a:	4630      	mov	r0, r6
   d5d6c:	4639      	mov	r1, r7
   d5d6e:	f001 f80f 	bl	d6d90 <__aeabi_dmul>
   d5d72:	106b      	asrs	r3, r5, #1
   d5d74:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   d5d78:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
   d5d7c:	eb03 0508 	add.w	r5, r3, r8
   d5d80:	460a      	mov	r2, r1
   d5d82:	2300      	movs	r3, #0
   d5d84:	4601      	mov	r1, r0
   d5d86:	e9cd 1202 	strd	r1, r2, [sp, #8]
   d5d8a:	9302      	str	r3, [sp, #8]
   d5d8c:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
   d5d90:	2400      	movs	r4, #0
   d5d92:	e9cd 1204 	strd	r1, r2, [sp, #16]
   d5d96:	462b      	mov	r3, r5
   d5d98:	4622      	mov	r2, r4
   d5d9a:	4640      	mov	r0, r8
   d5d9c:	4649      	mov	r1, r9
   d5d9e:	f000 fff7 	bl	d6d90 <__aeabi_dmul>
   d5da2:	4602      	mov	r2, r0
   d5da4:	460b      	mov	r3, r1
   d5da6:	4630      	mov	r0, r6
   d5da8:	4639      	mov	r1, r7
   d5daa:	f000 fe3d 	bl	d6a28 <__aeabi_dsub>
   d5dae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d5db2:	4606      	mov	r6, r0
   d5db4:	460f      	mov	r7, r1
   d5db6:	4620      	mov	r0, r4
   d5db8:	4629      	mov	r1, r5
   d5dba:	f000 fe35 	bl	d6a28 <__aeabi_dsub>
   d5dbe:	4602      	mov	r2, r0
   d5dc0:	460b      	mov	r3, r1
   d5dc2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d5dc6:	f000 fe2f 	bl	d6a28 <__aeabi_dsub>
   d5dca:	4642      	mov	r2, r8
   d5dcc:	464b      	mov	r3, r9
   d5dce:	f000 ffdf 	bl	d6d90 <__aeabi_dmul>
   d5dd2:	4602      	mov	r2, r0
   d5dd4:	460b      	mov	r3, r1
   d5dd6:	4630      	mov	r0, r6
   d5dd8:	4639      	mov	r1, r7
   d5dda:	f000 fe25 	bl	d6a28 <__aeabi_dsub>
   d5dde:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   d5de2:	f000 ffd5 	bl	d6d90 <__aeabi_dmul>
   d5de6:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
   d5dea:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d5dee:	4622      	mov	r2, r4
   d5df0:	462b      	mov	r3, r5
   d5df2:	4620      	mov	r0, r4
   d5df4:	4629      	mov	r1, r5
   d5df6:	f000 ffcb 	bl	d6d90 <__aeabi_dmul>
   d5dfa:	a37d      	add	r3, pc, #500	; (adr r3, d5ff0 <__ieee754_pow+0x508>)
   d5dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5e00:	4604      	mov	r4, r0
   d5e02:	460d      	mov	r5, r1
   d5e04:	f000 ffc4 	bl	d6d90 <__aeabi_dmul>
   d5e08:	a37b      	add	r3, pc, #492	; (adr r3, d5ff8 <__ieee754_pow+0x510>)
   d5e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5e0e:	f000 fe0d 	bl	d6a2c <__adddf3>
   d5e12:	4622      	mov	r2, r4
   d5e14:	462b      	mov	r3, r5
   d5e16:	f000 ffbb 	bl	d6d90 <__aeabi_dmul>
   d5e1a:	a379      	add	r3, pc, #484	; (adr r3, d6000 <__ieee754_pow+0x518>)
   d5e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5e20:	f000 fe04 	bl	d6a2c <__adddf3>
   d5e24:	4622      	mov	r2, r4
   d5e26:	462b      	mov	r3, r5
   d5e28:	f000 ffb2 	bl	d6d90 <__aeabi_dmul>
   d5e2c:	a376      	add	r3, pc, #472	; (adr r3, d6008 <__ieee754_pow+0x520>)
   d5e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5e32:	f000 fdfb 	bl	d6a2c <__adddf3>
   d5e36:	4622      	mov	r2, r4
   d5e38:	462b      	mov	r3, r5
   d5e3a:	f000 ffa9 	bl	d6d90 <__aeabi_dmul>
   d5e3e:	a374      	add	r3, pc, #464	; (adr r3, d6010 <__ieee754_pow+0x528>)
   d5e40:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5e44:	f000 fdf2 	bl	d6a2c <__adddf3>
   d5e48:	4622      	mov	r2, r4
   d5e4a:	462b      	mov	r3, r5
   d5e4c:	f000 ffa0 	bl	d6d90 <__aeabi_dmul>
   d5e50:	a371      	add	r3, pc, #452	; (adr r3, d6018 <__ieee754_pow+0x530>)
   d5e52:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5e56:	f000 fde9 	bl	d6a2c <__adddf3>
   d5e5a:	4622      	mov	r2, r4
   d5e5c:	4606      	mov	r6, r0
   d5e5e:	460f      	mov	r7, r1
   d5e60:	462b      	mov	r3, r5
   d5e62:	4620      	mov	r0, r4
   d5e64:	4629      	mov	r1, r5
   d5e66:	f000 ff93 	bl	d6d90 <__aeabi_dmul>
   d5e6a:	4602      	mov	r2, r0
   d5e6c:	460b      	mov	r3, r1
   d5e6e:	4630      	mov	r0, r6
   d5e70:	4639      	mov	r1, r7
   d5e72:	f000 ff8d 	bl	d6d90 <__aeabi_dmul>
   d5e76:	4642      	mov	r2, r8
   d5e78:	4604      	mov	r4, r0
   d5e7a:	460d      	mov	r5, r1
   d5e7c:	464b      	mov	r3, r9
   d5e7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d5e82:	f000 fdd3 	bl	d6a2c <__adddf3>
   d5e86:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d5e8a:	f000 ff81 	bl	d6d90 <__aeabi_dmul>
   d5e8e:	4622      	mov	r2, r4
   d5e90:	462b      	mov	r3, r5
   d5e92:	f000 fdcb 	bl	d6a2c <__adddf3>
   d5e96:	4642      	mov	r2, r8
   d5e98:	4606      	mov	r6, r0
   d5e9a:	460f      	mov	r7, r1
   d5e9c:	464b      	mov	r3, r9
   d5e9e:	4640      	mov	r0, r8
   d5ea0:	4649      	mov	r1, r9
   d5ea2:	f000 ff75 	bl	d6d90 <__aeabi_dmul>
   d5ea6:	2200      	movs	r2, #0
   d5ea8:	4b67      	ldr	r3, [pc, #412]	; (d6048 <__ieee754_pow+0x560>)
   d5eaa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d5eae:	f000 fdbd 	bl	d6a2c <__adddf3>
   d5eb2:	4632      	mov	r2, r6
   d5eb4:	463b      	mov	r3, r7
   d5eb6:	f000 fdb9 	bl	d6a2c <__adddf3>
   d5eba:	9802      	ldr	r0, [sp, #8]
   d5ebc:	460d      	mov	r5, r1
   d5ebe:	4604      	mov	r4, r0
   d5ec0:	4622      	mov	r2, r4
   d5ec2:	462b      	mov	r3, r5
   d5ec4:	4640      	mov	r0, r8
   d5ec6:	4649      	mov	r1, r9
   d5ec8:	f000 ff62 	bl	d6d90 <__aeabi_dmul>
   d5ecc:	2200      	movs	r2, #0
   d5ece:	4680      	mov	r8, r0
   d5ed0:	4689      	mov	r9, r1
   d5ed2:	4b5d      	ldr	r3, [pc, #372]	; (d6048 <__ieee754_pow+0x560>)
   d5ed4:	4620      	mov	r0, r4
   d5ed6:	4629      	mov	r1, r5
   d5ed8:	f000 fda6 	bl	d6a28 <__aeabi_dsub>
   d5edc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d5ee0:	f000 fda2 	bl	d6a28 <__aeabi_dsub>
   d5ee4:	4602      	mov	r2, r0
   d5ee6:	460b      	mov	r3, r1
   d5ee8:	4630      	mov	r0, r6
   d5eea:	4639      	mov	r1, r7
   d5eec:	f000 fd9c 	bl	d6a28 <__aeabi_dsub>
   d5ef0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d5ef4:	f000 ff4c 	bl	d6d90 <__aeabi_dmul>
   d5ef8:	4622      	mov	r2, r4
   d5efa:	4606      	mov	r6, r0
   d5efc:	460f      	mov	r7, r1
   d5efe:	462b      	mov	r3, r5
   d5f00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d5f04:	f000 ff44 	bl	d6d90 <__aeabi_dmul>
   d5f08:	4602      	mov	r2, r0
   d5f0a:	460b      	mov	r3, r1
   d5f0c:	4630      	mov	r0, r6
   d5f0e:	4639      	mov	r1, r7
   d5f10:	f000 fd8c 	bl	d6a2c <__adddf3>
   d5f14:	4606      	mov	r6, r0
   d5f16:	460f      	mov	r7, r1
   d5f18:	4602      	mov	r2, r0
   d5f1a:	460b      	mov	r3, r1
   d5f1c:	4640      	mov	r0, r8
   d5f1e:	4649      	mov	r1, r9
   d5f20:	e9cd 8904 	strd	r8, r9, [sp, #16]
   d5f24:	f000 fd82 	bl	d6a2c <__adddf3>
   d5f28:	9802      	ldr	r0, [sp, #8]
   d5f2a:	a33d      	add	r3, pc, #244	; (adr r3, d6020 <__ieee754_pow+0x538>)
   d5f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5f30:	4604      	mov	r4, r0
   d5f32:	460d      	mov	r5, r1
   d5f34:	f000 ff2c 	bl	d6d90 <__aeabi_dmul>
   d5f38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d5f3c:	4680      	mov	r8, r0
   d5f3e:	4689      	mov	r9, r1
   d5f40:	4620      	mov	r0, r4
   d5f42:	4629      	mov	r1, r5
   d5f44:	f000 fd70 	bl	d6a28 <__aeabi_dsub>
   d5f48:	4602      	mov	r2, r0
   d5f4a:	460b      	mov	r3, r1
   d5f4c:	4630      	mov	r0, r6
   d5f4e:	4639      	mov	r1, r7
   d5f50:	f000 fd6a 	bl	d6a28 <__aeabi_dsub>
   d5f54:	a334      	add	r3, pc, #208	; (adr r3, d6028 <__ieee754_pow+0x540>)
   d5f56:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5f5a:	f000 ff19 	bl	d6d90 <__aeabi_dmul>
   d5f5e:	a334      	add	r3, pc, #208	; (adr r3, d6030 <__ieee754_pow+0x548>)
   d5f60:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5f64:	4606      	mov	r6, r0
   d5f66:	460f      	mov	r7, r1
   d5f68:	4620      	mov	r0, r4
   d5f6a:	4629      	mov	r1, r5
   d5f6c:	f000 ff10 	bl	d6d90 <__aeabi_dmul>
   d5f70:	4602      	mov	r2, r0
   d5f72:	460b      	mov	r3, r1
   d5f74:	4630      	mov	r0, r6
   d5f76:	4639      	mov	r1, r7
   d5f78:	f000 fd58 	bl	d6a2c <__adddf3>
   d5f7c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   d5f80:	f000 fd54 	bl	d6a2c <__adddf3>
   d5f84:	4606      	mov	r6, r0
   d5f86:	980d      	ldr	r0, [sp, #52]	; 0x34
   d5f88:	460f      	mov	r7, r1
   d5f8a:	f000 fe9b 	bl	d6cc4 <__aeabi_i2d>
   d5f8e:	4632      	mov	r2, r6
   d5f90:	4604      	mov	r4, r0
   d5f92:	460d      	mov	r5, r1
   d5f94:	463b      	mov	r3, r7
   d5f96:	4640      	mov	r0, r8
   d5f98:	4649      	mov	r1, r9
   d5f9a:	f000 fd47 	bl	d6a2c <__adddf3>
   d5f9e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d5fa2:	f000 fd43 	bl	d6a2c <__adddf3>
   d5fa6:	4622      	mov	r2, r4
   d5fa8:	462b      	mov	r3, r5
   d5faa:	f000 fd3f 	bl	d6a2c <__adddf3>
   d5fae:	9802      	ldr	r0, [sp, #8]
   d5fb0:	4622      	mov	r2, r4
   d5fb2:	462b      	mov	r3, r5
   d5fb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d5fb8:	f000 fd36 	bl	d6a28 <__aeabi_dsub>
   d5fbc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d5fc0:	f000 fd32 	bl	d6a28 <__aeabi_dsub>
   d5fc4:	4642      	mov	r2, r8
   d5fc6:	464b      	mov	r3, r9
   d5fc8:	f000 fd2e 	bl	d6a28 <__aeabi_dsub>
   d5fcc:	4602      	mov	r2, r0
   d5fce:	460b      	mov	r3, r1
   d5fd0:	4630      	mov	r0, r6
   d5fd2:	4639      	mov	r1, r7
   d5fd4:	f000 fd28 	bl	d6a28 <__aeabi_dsub>
   d5fd8:	4680      	mov	r8, r0
   d5fda:	4689      	mov	r9, r1
   d5fdc:	e036      	b.n	d604c <__ieee754_pow+0x564>
   d5fde:	bf00      	nop
	...
   d5fec:	3ff00000 	.word	0x3ff00000
   d5ff0:	4a454eef 	.word	0x4a454eef
   d5ff4:	3fca7e28 	.word	0x3fca7e28
   d5ff8:	93c9db65 	.word	0x93c9db65
   d5ffc:	3fcd864a 	.word	0x3fcd864a
   d6000:	a91d4101 	.word	0xa91d4101
   d6004:	3fd17460 	.word	0x3fd17460
   d6008:	518f264d 	.word	0x518f264d
   d600c:	3fd55555 	.word	0x3fd55555
   d6010:	db6fabff 	.word	0xdb6fabff
   d6014:	3fdb6db6 	.word	0x3fdb6db6
   d6018:	33333303 	.word	0x33333303
   d601c:	3fe33333 	.word	0x3fe33333
   d6020:	e0000000 	.word	0xe0000000
   d6024:	3feec709 	.word	0x3feec709
   d6028:	dc3a03fd 	.word	0xdc3a03fd
   d602c:	3feec709 	.word	0x3feec709
   d6030:	145b01f5 	.word	0x145b01f5
   d6034:	be3e2fe0 	.word	0xbe3e2fe0
   d6038:	43400000 	.word	0x43400000
   d603c:	0003988e 	.word	0x0003988e
   d6040:	000bb679 	.word	0x000bb679
   d6044:	3ff00000 	.word	0x3ff00000
   d6048:	40080000 	.word	0x40080000
   d604c:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
   d6050:	ea53 030a 	orrs.w	r3, r3, sl
   d6054:	f000 8188 	beq.w	d6368 <__ieee754_pow+0x880>
   d6058:	ed9f 7bd7 	vldr	d7, [pc, #860]	; d63b8 <__ieee754_pow+0x8d0>
   d605c:	ed8d 7b06 	vstr	d7, [sp, #24]
   d6060:	e9dd ab00 	ldrd	sl, fp, [sp]
   d6064:	4653      	mov	r3, sl
   d6066:	465c      	mov	r4, fp
   d6068:	e9cd 3400 	strd	r3, r4, [sp]
   d606c:	2300      	movs	r3, #0
   d606e:	9300      	str	r3, [sp, #0]
   d6070:	e9dd 4500 	ldrd	r4, r5, [sp]
   d6074:	4650      	mov	r0, sl
   d6076:	4622      	mov	r2, r4
   d6078:	462b      	mov	r3, r5
   d607a:	4659      	mov	r1, fp
   d607c:	f000 fcd4 	bl	d6a28 <__aeabi_dsub>
   d6080:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d6084:	f000 fe84 	bl	d6d90 <__aeabi_dmul>
   d6088:	4652      	mov	r2, sl
   d608a:	4606      	mov	r6, r0
   d608c:	460f      	mov	r7, r1
   d608e:	465b      	mov	r3, fp
   d6090:	4640      	mov	r0, r8
   d6092:	4649      	mov	r1, r9
   d6094:	f000 fe7c 	bl	d6d90 <__aeabi_dmul>
   d6098:	4602      	mov	r2, r0
   d609a:	460b      	mov	r3, r1
   d609c:	4630      	mov	r0, r6
   d609e:	4639      	mov	r1, r7
   d60a0:	f000 fcc4 	bl	d6a2c <__adddf3>
   d60a4:	4622      	mov	r2, r4
   d60a6:	4680      	mov	r8, r0
   d60a8:	4689      	mov	r9, r1
   d60aa:	462b      	mov	r3, r5
   d60ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d60b0:	e9cd 8904 	strd	r8, r9, [sp, #16]
   d60b4:	f000 fe6c 	bl	d6d90 <__aeabi_dmul>
   d60b8:	460b      	mov	r3, r1
   d60ba:	4602      	mov	r2, r0
   d60bc:	4606      	mov	r6, r0
   d60be:	460f      	mov	r7, r1
   d60c0:	4640      	mov	r0, r8
   d60c2:	4649      	mov	r1, r9
   d60c4:	f000 fcb2 	bl	d6a2c <__adddf3>
   d60c8:	4bd5      	ldr	r3, [pc, #852]	; (d6420 <__ieee754_pow+0x938>)
   d60ca:	4299      	cmp	r1, r3
   d60cc:	4604      	mov	r4, r0
   d60ce:	460d      	mov	r5, r1
   d60d0:	468a      	mov	sl, r1
   d60d2:	f340 8123 	ble.w	d631c <__ieee754_pow+0x834>
   d60d6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   d60da:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   d60de:	4303      	orrs	r3, r0
   d60e0:	f040 8218 	bne.w	d6514 <__ieee754_pow+0xa2c>
   d60e4:	a3b6      	add	r3, pc, #728	; (adr r3, d63c0 <__ieee754_pow+0x8d8>)
   d60e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d60ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d60ee:	f000 fc9d 	bl	d6a2c <__adddf3>
   d60f2:	4632      	mov	r2, r6
   d60f4:	4680      	mov	r8, r0
   d60f6:	4689      	mov	r9, r1
   d60f8:	463b      	mov	r3, r7
   d60fa:	4620      	mov	r0, r4
   d60fc:	4629      	mov	r1, r5
   d60fe:	f000 fc93 	bl	d6a28 <__aeabi_dsub>
   d6102:	4602      	mov	r2, r0
   d6104:	460b      	mov	r3, r1
   d6106:	4640      	mov	r0, r8
   d6108:	4649      	mov	r1, r9
   d610a:	f001 f8d1 	bl	d72b0 <__aeabi_dcmpgt>
   d610e:	2800      	cmp	r0, #0
   d6110:	f040 8200 	bne.w	d6514 <__ieee754_pow+0xa2c>
   d6114:	46a8      	mov	r8, r5
   d6116:	ea4f 5328 	mov.w	r3, r8, asr #20
   d611a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   d611e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   d6122:	fa42 f303 	asr.w	r3, r2, r3
   d6126:	4453      	add	r3, sl
   d6128:	f3c3 520a 	ubfx	r2, r3, #20, #11
   d612c:	4dbd      	ldr	r5, [pc, #756]	; (d6424 <__ieee754_pow+0x93c>)
   d612e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   d6132:	4115      	asrs	r5, r2
   d6134:	f3c3 0b13 	ubfx	fp, r3, #0, #20
   d6138:	2000      	movs	r0, #0
   d613a:	f1c2 0414 	rsb	r4, r2, #20
   d613e:	ea23 0105 	bic.w	r1, r3, r5
   d6142:	f44b 1b80 	orr.w	fp, fp, #1048576	; 0x100000
   d6146:	f1ba 0f00 	cmp.w	sl, #0
   d614a:	4602      	mov	r2, r0
   d614c:	460b      	mov	r3, r1
   d614e:	fa4b fb04 	asr.w	fp, fp, r4
   d6152:	4630      	mov	r0, r6
   d6154:	4639      	mov	r1, r7
   d6156:	bfb8      	it	lt
   d6158:	f1cb 0b00 	rsblt	fp, fp, #0
   d615c:	f000 fc64 	bl	d6a28 <__aeabi_dsub>
   d6160:	4602      	mov	r2, r0
   d6162:	460b      	mov	r3, r1
   d6164:	4606      	mov	r6, r0
   d6166:	460f      	mov	r7, r1
   d6168:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d616c:	f000 fc5e 	bl	d6a2c <__adddf3>
   d6170:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
   d6174:	2400      	movs	r4, #0
   d6176:	a394      	add	r3, pc, #592	; (adr r3, d63c8 <__ieee754_pow+0x8e0>)
   d6178:	e9d3 2300 	ldrd	r2, r3, [r3]
   d617c:	4620      	mov	r0, r4
   d617e:	460d      	mov	r5, r1
   d6180:	f000 fe06 	bl	d6d90 <__aeabi_dmul>
   d6184:	4632      	mov	r2, r6
   d6186:	4680      	mov	r8, r0
   d6188:	4689      	mov	r9, r1
   d618a:	463b      	mov	r3, r7
   d618c:	4620      	mov	r0, r4
   d618e:	4629      	mov	r1, r5
   d6190:	f000 fc4a 	bl	d6a28 <__aeabi_dsub>
   d6194:	4602      	mov	r2, r0
   d6196:	460b      	mov	r3, r1
   d6198:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d619c:	f000 fc44 	bl	d6a28 <__aeabi_dsub>
   d61a0:	a38b      	add	r3, pc, #556	; (adr r3, d63d0 <__ieee754_pow+0x8e8>)
   d61a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d61a6:	f000 fdf3 	bl	d6d90 <__aeabi_dmul>
   d61aa:	a38b      	add	r3, pc, #556	; (adr r3, d63d8 <__ieee754_pow+0x8f0>)
   d61ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   d61b0:	4606      	mov	r6, r0
   d61b2:	460f      	mov	r7, r1
   d61b4:	4620      	mov	r0, r4
   d61b6:	4629      	mov	r1, r5
   d61b8:	f000 fdea 	bl	d6d90 <__aeabi_dmul>
   d61bc:	4602      	mov	r2, r0
   d61be:	460b      	mov	r3, r1
   d61c0:	4630      	mov	r0, r6
   d61c2:	4639      	mov	r1, r7
   d61c4:	f000 fc32 	bl	d6a2c <__adddf3>
   d61c8:	4606      	mov	r6, r0
   d61ca:	460f      	mov	r7, r1
   d61cc:	4602      	mov	r2, r0
   d61ce:	460b      	mov	r3, r1
   d61d0:	4640      	mov	r0, r8
   d61d2:	4649      	mov	r1, r9
   d61d4:	f000 fc2a 	bl	d6a2c <__adddf3>
   d61d8:	4642      	mov	r2, r8
   d61da:	464b      	mov	r3, r9
   d61dc:	4604      	mov	r4, r0
   d61de:	460d      	mov	r5, r1
   d61e0:	f000 fc22 	bl	d6a28 <__aeabi_dsub>
   d61e4:	4602      	mov	r2, r0
   d61e6:	460b      	mov	r3, r1
   d61e8:	4630      	mov	r0, r6
   d61ea:	4639      	mov	r1, r7
   d61ec:	f000 fc1c 	bl	d6a28 <__aeabi_dsub>
   d61f0:	4622      	mov	r2, r4
   d61f2:	4680      	mov	r8, r0
   d61f4:	4689      	mov	r9, r1
   d61f6:	462b      	mov	r3, r5
   d61f8:	4620      	mov	r0, r4
   d61fa:	4629      	mov	r1, r5
   d61fc:	f000 fdc8 	bl	d6d90 <__aeabi_dmul>
   d6200:	a377      	add	r3, pc, #476	; (adr r3, d63e0 <__ieee754_pow+0x8f8>)
   d6202:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6206:	4606      	mov	r6, r0
   d6208:	460f      	mov	r7, r1
   d620a:	f000 fdc1 	bl	d6d90 <__aeabi_dmul>
   d620e:	a376      	add	r3, pc, #472	; (adr r3, d63e8 <__ieee754_pow+0x900>)
   d6210:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6214:	f000 fc08 	bl	d6a28 <__aeabi_dsub>
   d6218:	4632      	mov	r2, r6
   d621a:	463b      	mov	r3, r7
   d621c:	f000 fdb8 	bl	d6d90 <__aeabi_dmul>
   d6220:	a373      	add	r3, pc, #460	; (adr r3, d63f0 <__ieee754_pow+0x908>)
   d6222:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6226:	f000 fc01 	bl	d6a2c <__adddf3>
   d622a:	4632      	mov	r2, r6
   d622c:	463b      	mov	r3, r7
   d622e:	f000 fdaf 	bl	d6d90 <__aeabi_dmul>
   d6232:	a371      	add	r3, pc, #452	; (adr r3, d63f8 <__ieee754_pow+0x910>)
   d6234:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6238:	f000 fbf6 	bl	d6a28 <__aeabi_dsub>
   d623c:	4632      	mov	r2, r6
   d623e:	463b      	mov	r3, r7
   d6240:	f000 fda6 	bl	d6d90 <__aeabi_dmul>
   d6244:	a36e      	add	r3, pc, #440	; (adr r3, d6400 <__ieee754_pow+0x918>)
   d6246:	e9d3 2300 	ldrd	r2, r3, [r3]
   d624a:	f000 fbef 	bl	d6a2c <__adddf3>
   d624e:	4632      	mov	r2, r6
   d6250:	463b      	mov	r3, r7
   d6252:	f000 fd9d 	bl	d6d90 <__aeabi_dmul>
   d6256:	4602      	mov	r2, r0
   d6258:	460b      	mov	r3, r1
   d625a:	4620      	mov	r0, r4
   d625c:	4629      	mov	r1, r5
   d625e:	f000 fbe3 	bl	d6a28 <__aeabi_dsub>
   d6262:	4606      	mov	r6, r0
   d6264:	460f      	mov	r7, r1
   d6266:	4602      	mov	r2, r0
   d6268:	460b      	mov	r3, r1
   d626a:	4620      	mov	r0, r4
   d626c:	4629      	mov	r1, r5
   d626e:	f000 fd8f 	bl	d6d90 <__aeabi_dmul>
   d6272:	2200      	movs	r2, #0
   d6274:	e9cd 0100 	strd	r0, r1, [sp]
   d6278:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d627c:	4630      	mov	r0, r6
   d627e:	4639      	mov	r1, r7
   d6280:	f000 fbd2 	bl	d6a28 <__aeabi_dsub>
   d6284:	4602      	mov	r2, r0
   d6286:	460b      	mov	r3, r1
   d6288:	e9dd 0100 	ldrd	r0, r1, [sp]
   d628c:	f000 feaa 	bl	d6fe4 <__aeabi_ddiv>
   d6290:	4642      	mov	r2, r8
   d6292:	4606      	mov	r6, r0
   d6294:	460f      	mov	r7, r1
   d6296:	464b      	mov	r3, r9
   d6298:	4620      	mov	r0, r4
   d629a:	4629      	mov	r1, r5
   d629c:	f000 fd78 	bl	d6d90 <__aeabi_dmul>
   d62a0:	4642      	mov	r2, r8
   d62a2:	464b      	mov	r3, r9
   d62a4:	f000 fbc2 	bl	d6a2c <__adddf3>
   d62a8:	4602      	mov	r2, r0
   d62aa:	460b      	mov	r3, r1
   d62ac:	4630      	mov	r0, r6
   d62ae:	4639      	mov	r1, r7
   d62b0:	f000 fbba 	bl	d6a28 <__aeabi_dsub>
   d62b4:	4622      	mov	r2, r4
   d62b6:	462b      	mov	r3, r5
   d62b8:	f000 fbb6 	bl	d6a28 <__aeabi_dsub>
   d62bc:	4602      	mov	r2, r0
   d62be:	460b      	mov	r3, r1
   d62c0:	2000      	movs	r0, #0
   d62c2:	4959      	ldr	r1, [pc, #356]	; (d6428 <__ieee754_pow+0x940>)
   d62c4:	f000 fbb0 	bl	d6a28 <__aeabi_dsub>
   d62c8:	448a      	add	sl, r1
   d62ca:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
   d62ce:	4602      	mov	r2, r0
   d62d0:	460b      	mov	r3, r1
   d62d2:	f2c0 815b 	blt.w	d658c <__ieee754_pow+0xaa4>
   d62d6:	4651      	mov	r1, sl
   d62d8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d62dc:	f000 fd58 	bl	d6d90 <__aeabi_dmul>
   d62e0:	ec41 0b10 	vmov	d0, r0, r1
   d62e4:	e449      	b.n	d5b7a <__ieee754_pow+0x92>
   d62e6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
   d62ea:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
   d62ee:	ea54 030b 	orrs.w	r3, r4, fp
   d62f2:	f000 8137 	beq.w	d6564 <__ieee754_pow+0xa7c>
   d62f6:	f1bb 0f01 	cmp.w	fp, #1
   d62fa:	f47f ac80 	bne.w	d5bfe <__ieee754_pow+0x116>
   d62fe:	4602      	mov	r2, r0
   d6300:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d6304:	ec43 2b10 	vmov	d0, r2, r3
   d6308:	e437      	b.n	d5b7a <__ieee754_pow+0x92>
   d630a:	4632      	mov	r2, r6
   d630c:	463b      	mov	r3, r7
   d630e:	4630      	mov	r0, r6
   d6310:	4639      	mov	r1, r7
   d6312:	f000 fd3d 	bl	d6d90 <__aeabi_dmul>
   d6316:	ec41 0b10 	vmov	d0, r0, r1
   d631a:	e42e      	b.n	d5b7a <__ieee754_pow+0x92>
   d631c:	4b43      	ldr	r3, [pc, #268]	; (d642c <__ieee754_pow+0x944>)
   d631e:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   d6322:	4598      	cmp	r8, r3
   d6324:	f340 8115 	ble.w	d6552 <__ieee754_pow+0xa6a>
   d6328:	4b41      	ldr	r3, [pc, #260]	; (d6430 <__ieee754_pow+0x948>)
   d632a:	440b      	add	r3, r1
   d632c:	4303      	orrs	r3, r0
   d632e:	d10c      	bne.n	d634a <__ieee754_pow+0x862>
   d6330:	4632      	mov	r2, r6
   d6332:	463b      	mov	r3, r7
   d6334:	f000 fb78 	bl	d6a28 <__aeabi_dsub>
   d6338:	4602      	mov	r2, r0
   d633a:	460b      	mov	r3, r1
   d633c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d6340:	f000 ffa2 	bl	d7288 <__aeabi_dcmple>
   d6344:	2800      	cmp	r0, #0
   d6346:	f43f aee6 	beq.w	d6116 <__ieee754_pow+0x62e>
   d634a:	a32f      	add	r3, pc, #188	; (adr r3, d6408 <__ieee754_pow+0x920>)
   d634c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6350:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d6354:	f000 fd1c 	bl	d6d90 <__aeabi_dmul>
   d6358:	a32b      	add	r3, pc, #172	; (adr r3, d6408 <__ieee754_pow+0x920>)
   d635a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d635e:	f000 fd17 	bl	d6d90 <__aeabi_dmul>
   d6362:	ec41 0b10 	vmov	d0, r0, r1
   d6366:	e408      	b.n	d5b7a <__ieee754_pow+0x92>
   d6368:	ed9f 7b29 	vldr	d7, [pc, #164]	; d6410 <__ieee754_pow+0x928>
   d636c:	ed8d 7b06 	vstr	d7, [sp, #24]
   d6370:	e676      	b.n	d6060 <__ieee754_pow+0x578>
   d6372:	f1b9 0f00 	cmp.w	r9, #0
   d6376:	f6bf ac8e 	bge.w	d5c96 <__ieee754_pow+0x1ae>
   d637a:	e9dd 3400 	ldrd	r3, r4, [sp]
   d637e:	ee00 3a10 	vmov	s0, r3
   d6382:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
   d6386:	ee00 3a90 	vmov	s1, r3
   d638a:	f7ff bbf6 	b.w	d5b7a <__ieee754_pow+0x92>
   d638e:	4602      	mov	r2, r0
   d6390:	460b      	mov	r3, r1
   d6392:	2000      	movs	r0, #0
   d6394:	4924      	ldr	r1, [pc, #144]	; (d6428 <__ieee754_pow+0x940>)
   d6396:	f000 fe25 	bl	d6fe4 <__aeabi_ddiv>
   d639a:	e42d      	b.n	d5bf8 <__ieee754_pow+0x110>
   d639c:	ed9f 7b1e 	vldr	d7, [pc, #120]	; d6418 <__ieee754_pow+0x930>
   d63a0:	ed8d 7b08 	vstr	d7, [sp, #32]
   d63a4:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d63a8:	ed9f 7b03 	vldr	d7, [pc, #12]	; d63b8 <__ieee754_pow+0x8d0>
   d63ac:	f04f 0800 	mov.w	r8, #0
   d63b0:	ed8d 7b06 	vstr	d7, [sp, #24]
   d63b4:	e4be      	b.n	d5d34 <__ieee754_pow+0x24c>
   d63b6:	bf00      	nop
   d63b8:	00000000 	.word	0x00000000
   d63bc:	3ff00000 	.word	0x3ff00000
   d63c0:	652b82fe 	.word	0x652b82fe
   d63c4:	3c971547 	.word	0x3c971547
   d63c8:	00000000 	.word	0x00000000
   d63cc:	3fe62e43 	.word	0x3fe62e43
   d63d0:	fefa39ef 	.word	0xfefa39ef
   d63d4:	3fe62e42 	.word	0x3fe62e42
   d63d8:	0ca86c39 	.word	0x0ca86c39
   d63dc:	be205c61 	.word	0xbe205c61
   d63e0:	72bea4d0 	.word	0x72bea4d0
   d63e4:	3e663769 	.word	0x3e663769
   d63e8:	c5d26bf1 	.word	0xc5d26bf1
   d63ec:	3ebbbd41 	.word	0x3ebbbd41
   d63f0:	af25de2c 	.word	0xaf25de2c
   d63f4:	3f11566a 	.word	0x3f11566a
   d63f8:	16bebd93 	.word	0x16bebd93
   d63fc:	3f66c16c 	.word	0x3f66c16c
   d6400:	5555553e 	.word	0x5555553e
   d6404:	3fc55555 	.word	0x3fc55555
   d6408:	c2f8f359 	.word	0xc2f8f359
   d640c:	01a56e1f 	.word	0x01a56e1f
   d6410:	00000000 	.word	0x00000000
   d6414:	bff00000 	.word	0xbff00000
	...
   d6420:	408fffff 	.word	0x408fffff
   d6424:	000fffff 	.word	0x000fffff
   d6428:	3ff00000 	.word	0x3ff00000
   d642c:	4090cbff 	.word	0x4090cbff
   d6430:	3f6f3400 	.word	0x3f6f3400
   d6434:	4b6c      	ldr	r3, [pc, #432]	; (d65e8 <__ieee754_pow+0xb00>)
   d6436:	429c      	cmp	r4, r3
   d6438:	f77f ac2a 	ble.w	d5c90 <__ieee754_pow+0x1a8>
   d643c:	4b6b      	ldr	r3, [pc, #428]	; (d65ec <__ieee754_pow+0xb04>)
   d643e:	429c      	cmp	r4, r3
   d6440:	f73f abc3 	bgt.w	d5bca <__ieee754_pow+0xe2>
   d6444:	2200      	movs	r2, #0
   d6446:	4b69      	ldr	r3, [pc, #420]	; (d65ec <__ieee754_pow+0xb04>)
   d6448:	f000 faee 	bl	d6a28 <__aeabi_dsub>
   d644c:	a356      	add	r3, pc, #344	; (adr r3, d65a8 <__ieee754_pow+0xac0>)
   d644e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6452:	4604      	mov	r4, r0
   d6454:	460d      	mov	r5, r1
   d6456:	f000 fc9b 	bl	d6d90 <__aeabi_dmul>
   d645a:	a355      	add	r3, pc, #340	; (adr r3, d65b0 <__ieee754_pow+0xac8>)
   d645c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6460:	4680      	mov	r8, r0
   d6462:	4689      	mov	r9, r1
   d6464:	4620      	mov	r0, r4
   d6466:	4629      	mov	r1, r5
   d6468:	f000 fc92 	bl	d6d90 <__aeabi_dmul>
   d646c:	2200      	movs	r2, #0
   d646e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d6472:	4b5f      	ldr	r3, [pc, #380]	; (d65f0 <__ieee754_pow+0xb08>)
   d6474:	4620      	mov	r0, r4
   d6476:	4629      	mov	r1, r5
   d6478:	f000 fc8a 	bl	d6d90 <__aeabi_dmul>
   d647c:	4602      	mov	r2, r0
   d647e:	460b      	mov	r3, r1
   d6480:	a14d      	add	r1, pc, #308	; (adr r1, d65b8 <__ieee754_pow+0xad0>)
   d6482:	e9d1 0100 	ldrd	r0, r1, [r1]
   d6486:	f000 facf 	bl	d6a28 <__aeabi_dsub>
   d648a:	4622      	mov	r2, r4
   d648c:	462b      	mov	r3, r5
   d648e:	f000 fc7f 	bl	d6d90 <__aeabi_dmul>
   d6492:	4602      	mov	r2, r0
   d6494:	460b      	mov	r3, r1
   d6496:	2000      	movs	r0, #0
   d6498:	4956      	ldr	r1, [pc, #344]	; (d65f4 <__ieee754_pow+0xb0c>)
   d649a:	f000 fac5 	bl	d6a28 <__aeabi_dsub>
   d649e:	4622      	mov	r2, r4
   d64a0:	462b      	mov	r3, r5
   d64a2:	4606      	mov	r6, r0
   d64a4:	460f      	mov	r7, r1
   d64a6:	4620      	mov	r0, r4
   d64a8:	4629      	mov	r1, r5
   d64aa:	f000 fc71 	bl	d6d90 <__aeabi_dmul>
   d64ae:	4602      	mov	r2, r0
   d64b0:	460b      	mov	r3, r1
   d64b2:	4630      	mov	r0, r6
   d64b4:	4639      	mov	r1, r7
   d64b6:	f000 fc6b 	bl	d6d90 <__aeabi_dmul>
   d64ba:	a341      	add	r3, pc, #260	; (adr r3, d65c0 <__ieee754_pow+0xad8>)
   d64bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d64c0:	f000 fc66 	bl	d6d90 <__aeabi_dmul>
   d64c4:	4602      	mov	r2, r0
   d64c6:	460b      	mov	r3, r1
   d64c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d64cc:	f000 faac 	bl	d6a28 <__aeabi_dsub>
   d64d0:	4602      	mov	r2, r0
   d64d2:	460b      	mov	r3, r1
   d64d4:	4604      	mov	r4, r0
   d64d6:	460d      	mov	r5, r1
   d64d8:	4640      	mov	r0, r8
   d64da:	4649      	mov	r1, r9
   d64dc:	f000 faa6 	bl	d6a2c <__adddf3>
   d64e0:	4642      	mov	r2, r8
   d64e2:	464b      	mov	r3, r9
   d64e4:	2000      	movs	r0, #0
   d64e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d64ea:	f000 fa9d 	bl	d6a28 <__aeabi_dsub>
   d64ee:	4602      	mov	r2, r0
   d64f0:	460b      	mov	r3, r1
   d64f2:	4620      	mov	r0, r4
   d64f4:	4629      	mov	r1, r5
   d64f6:	f000 fa97 	bl	d6a28 <__aeabi_dsub>
   d64fa:	4680      	mov	r8, r0
   d64fc:	4689      	mov	r9, r1
   d64fe:	e5a5      	b.n	d604c <__ieee754_pow+0x564>
   d6500:	4632      	mov	r2, r6
   d6502:	463b      	mov	r3, r7
   d6504:	2000      	movs	r0, #0
   d6506:	4939      	ldr	r1, [pc, #228]	; (d65ec <__ieee754_pow+0xb04>)
   d6508:	f000 fd6c 	bl	d6fe4 <__aeabi_ddiv>
   d650c:	ec41 0b10 	vmov	d0, r0, r1
   d6510:	f7ff bb33 	b.w	d5b7a <__ieee754_pow+0x92>
   d6514:	a32c      	add	r3, pc, #176	; (adr r3, d65c8 <__ieee754_pow+0xae0>)
   d6516:	e9d3 2300 	ldrd	r2, r3, [r3]
   d651a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d651e:	f000 fc37 	bl	d6d90 <__aeabi_dmul>
   d6522:	a329      	add	r3, pc, #164	; (adr r3, d65c8 <__ieee754_pow+0xae0>)
   d6524:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6528:	f000 fc32 	bl	d6d90 <__aeabi_dmul>
   d652c:	ec41 0b10 	vmov	d0, r0, r1
   d6530:	f7ff bb23 	b.w	d5b7a <__ieee754_pow+0x92>
   d6534:	f1be 0f00 	cmp.w	lr, #0
   d6538:	f47f ab2a 	bne.w	d5b90 <__ieee754_pow+0xa8>
   d653c:	f1c3 0314 	rsb	r3, r3, #20
   d6540:	fa48 f203 	asr.w	r2, r8, r3
   d6544:	fa02 f303 	lsl.w	r3, r2, r3
   d6548:	4598      	cmp	r8, r3
   d654a:	d027      	beq.n	d659c <__ieee754_pow+0xab4>
   d654c:	46f3      	mov	fp, lr
   d654e:	f7ff baf7 	b.w	d5b40 <__ieee754_pow+0x58>
   d6552:	4b28      	ldr	r3, [pc, #160]	; (d65f4 <__ieee754_pow+0xb0c>)
   d6554:	4598      	cmp	r8, r3
   d6556:	f73f adde 	bgt.w	d6116 <__ieee754_pow+0x62e>
   d655a:	e9dd 3400 	ldrd	r3, r4, [sp]
   d655e:	469a      	mov	sl, r3
   d6560:	469b      	mov	fp, r3
   d6562:	e607      	b.n	d6174 <__ieee754_pow+0x68c>
   d6564:	4602      	mov	r2, r0
   d6566:	460b      	mov	r3, r1
   d6568:	f7ff bb89 	b.w	d5c7e <__ieee754_pow+0x196>
   d656c:	ed9f 7b18 	vldr	d7, [pc, #96]	; d65d0 <__ieee754_pow+0xae8>
   d6570:	ed8d 7b08 	vstr	d7, [sp, #32]
   d6574:	ed9f 7b18 	vldr	d7, [pc, #96]	; d65d8 <__ieee754_pow+0xaf0>
   d6578:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d657c:	ed9f 7b18 	vldr	d7, [pc, #96]	; d65e0 <__ieee754_pow+0xaf8>
   d6580:	f44f 2880 	mov.w	r8, #262144	; 0x40000
   d6584:	ed8d 7b06 	vstr	d7, [sp, #24]
   d6588:	f7ff bbd4 	b.w	d5d34 <__ieee754_pow+0x24c>
   d658c:	4658      	mov	r0, fp
   d658e:	ec43 2b10 	vmov	d0, r2, r3
   d6592:	f000 f9b1 	bl	d68f8 <scalbn>
   d6596:	ec51 0b10 	vmov	r0, r1, d0
   d659a:	e69d      	b.n	d62d8 <__ieee754_pow+0x7f0>
   d659c:	f002 0201 	and.w	r2, r2, #1
   d65a0:	f1c2 0b02 	rsb	fp, r2, #2
   d65a4:	f7ff bacc 	b.w	d5b40 <__ieee754_pow+0x58>
   d65a8:	60000000 	.word	0x60000000
   d65ac:	3ff71547 	.word	0x3ff71547
   d65b0:	f85ddf44 	.word	0xf85ddf44
   d65b4:	3e54ae0b 	.word	0x3e54ae0b
   d65b8:	55555555 	.word	0x55555555
   d65bc:	3fd55555 	.word	0x3fd55555
   d65c0:	652b82fe 	.word	0x652b82fe
   d65c4:	3ff71547 	.word	0x3ff71547
   d65c8:	8800759c 	.word	0x8800759c
   d65cc:	7e37e43c 	.word	0x7e37e43c
   d65d0:	40000000 	.word	0x40000000
   d65d4:	3fe2b803 	.word	0x3fe2b803
   d65d8:	43cfd006 	.word	0x43cfd006
   d65dc:	3e4cfdeb 	.word	0x3e4cfdeb
   d65e0:	00000000 	.word	0x00000000
   d65e4:	3ff80000 	.word	0x3ff80000
   d65e8:	3feffffe 	.word	0x3feffffe
   d65ec:	3ff00000 	.word	0x3ff00000
   d65f0:	3fd00000 	.word	0x3fd00000
   d65f4:	3fe00000 	.word	0x3fe00000

000d65f8 <__ieee754_sqrt>:
   d65f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d65fc:	4965      	ldr	r1, [pc, #404]	; (d6794 <__ieee754_sqrt+0x19c>)
   d65fe:	ec55 4b10 	vmov	r4, r5, d0
   d6602:	460e      	mov	r6, r1
   d6604:	4029      	ands	r1, r5
   d6606:	42b1      	cmp	r1, r6
   d6608:	f000 8097 	beq.w	d673a <__ieee754_sqrt+0x142>
   d660c:	2d00      	cmp	r5, #0
   d660e:	462b      	mov	r3, r5
   d6610:	ee10 2a10 	vmov	r2, s0
   d6614:	dd74      	ble.n	d6700 <__ieee754_sqrt+0x108>
   d6616:	152f      	asrs	r7, r5, #20
   d6618:	d07f      	beq.n	d671a <__ieee754_sqrt+0x122>
   d661a:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   d661e:	f3c3 0313 	ubfx	r3, r3, #0, #20
   d6622:	07f9      	lsls	r1, r7, #31
   d6624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6628:	d465      	bmi.n	d66f6 <__ieee754_sqrt+0xfe>
   d662a:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
   d662e:	2600      	movs	r6, #0
   d6630:	440b      	add	r3, r1
   d6632:	107f      	asrs	r7, r7, #1
   d6634:	0052      	lsls	r2, r2, #1
   d6636:	46b6      	mov	lr, r6
   d6638:	2016      	movs	r0, #22
   d663a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   d663e:	eb0e 0401 	add.w	r4, lr, r1
   d6642:	429c      	cmp	r4, r3
   d6644:	ea4f 75d2 	mov.w	r5, r2, lsr #31
   d6648:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d664c:	dc03      	bgt.n	d6656 <__ieee754_sqrt+0x5e>
   d664e:	1b1b      	subs	r3, r3, r4
   d6650:	eb04 0e01 	add.w	lr, r4, r1
   d6654:	440e      	add	r6, r1
   d6656:	3801      	subs	r0, #1
   d6658:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   d665c:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d6660:	d1ed      	bne.n	d663e <__ieee754_sqrt+0x46>
   d6662:	4684      	mov	ip, r0
   d6664:	2420      	movs	r4, #32
   d6666:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   d666a:	e009      	b.n	d6680 <__ieee754_sqrt+0x88>
   d666c:	d020      	beq.n	d66b0 <__ieee754_sqrt+0xb8>
   d666e:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   d6672:	3c01      	subs	r4, #1
   d6674:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d6678:	442b      	add	r3, r5
   d667a:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d667e:	d020      	beq.n	d66c2 <__ieee754_sqrt+0xca>
   d6680:	459e      	cmp	lr, r3
   d6682:	eb01 050c 	add.w	r5, r1, ip
   d6686:	daf1      	bge.n	d666c <__ieee754_sqrt+0x74>
   d6688:	2d00      	cmp	r5, #0
   d668a:	eb05 0c01 	add.w	ip, r5, r1
   d668e:	db09      	blt.n	d66a4 <__ieee754_sqrt+0xac>
   d6690:	46f0      	mov	r8, lr
   d6692:	4295      	cmp	r5, r2
   d6694:	ebce 0303 	rsb	r3, lr, r3
   d6698:	d900      	bls.n	d669c <__ieee754_sqrt+0xa4>
   d669a:	3b01      	subs	r3, #1
   d669c:	1b52      	subs	r2, r2, r5
   d669e:	4408      	add	r0, r1
   d66a0:	46c6      	mov	lr, r8
   d66a2:	e7e4      	b.n	d666e <__ieee754_sqrt+0x76>
   d66a4:	f1bc 0f00 	cmp.w	ip, #0
   d66a8:	dbf2      	blt.n	d6690 <__ieee754_sqrt+0x98>
   d66aa:	f10e 0801 	add.w	r8, lr, #1
   d66ae:	e7f0      	b.n	d6692 <__ieee754_sqrt+0x9a>
   d66b0:	4295      	cmp	r5, r2
   d66b2:	d81e      	bhi.n	d66f2 <__ieee754_sqrt+0xfa>
   d66b4:	2d00      	cmp	r5, #0
   d66b6:	eb05 0c01 	add.w	ip, r5, r1
   d66ba:	db50      	blt.n	d675e <__ieee754_sqrt+0x166>
   d66bc:	4698      	mov	r8, r3
   d66be:	2300      	movs	r3, #0
   d66c0:	e7ec      	b.n	d669c <__ieee754_sqrt+0xa4>
   d66c2:	4313      	orrs	r3, r2
   d66c4:	d004      	beq.n	d66d0 <__ieee754_sqrt+0xd8>
   d66c6:	1c42      	adds	r2, r0, #1
   d66c8:	d04d      	beq.n	d6766 <__ieee754_sqrt+0x16e>
   d66ca:	f000 0301 	and.w	r3, r0, #1
   d66ce:	4418      	add	r0, r3
   d66d0:	0840      	lsrs	r0, r0, #1
   d66d2:	1071      	asrs	r1, r6, #1
   d66d4:	07f3      	lsls	r3, r6, #31
   d66d6:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   d66da:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   d66de:	bf48      	it	mi
   d66e0:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   d66e4:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   d66e8:	4602      	mov	r2, r0
   d66ea:	ec43 2b10 	vmov	d0, r2, r3
   d66ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d66f2:	4673      	mov	r3, lr
   d66f4:	e7bb      	b.n	d666e <__ieee754_sqrt+0x76>
   d66f6:	005b      	lsls	r3, r3, #1
   d66f8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   d66fc:	0052      	lsls	r2, r2, #1
   d66fe:	e794      	b.n	d662a <__ieee754_sqrt+0x32>
   d6700:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
   d6704:	4321      	orrs	r1, r4
   d6706:	d028      	beq.n	d675a <__ieee754_sqrt+0x162>
   d6708:	bbad      	cbnz	r5, d6776 <__ieee754_sqrt+0x17e>
   d670a:	462f      	mov	r7, r5
   d670c:	0ad3      	lsrs	r3, r2, #11
   d670e:	3f15      	subs	r7, #21
   d6710:	0552      	lsls	r2, r2, #21
   d6712:	2b00      	cmp	r3, #0
   d6714:	d0fa      	beq.n	d670c <__ieee754_sqrt+0x114>
   d6716:	02dd      	lsls	r5, r3, #11
   d6718:	d428      	bmi.n	d676c <__ieee754_sqrt+0x174>
   d671a:	2100      	movs	r1, #0
   d671c:	e000      	b.n	d6720 <__ieee754_sqrt+0x128>
   d671e:	4601      	mov	r1, r0
   d6720:	005b      	lsls	r3, r3, #1
   d6722:	02dc      	lsls	r4, r3, #11
   d6724:	f101 0001 	add.w	r0, r1, #1
   d6728:	d5f9      	bpl.n	d671e <__ieee754_sqrt+0x126>
   d672a:	f1c0 0420 	rsb	r4, r0, #32
   d672e:	fa22 f404 	lsr.w	r4, r2, r4
   d6732:	4323      	orrs	r3, r4
   d6734:	1a7f      	subs	r7, r7, r1
   d6736:	4082      	lsls	r2, r0
   d6738:	e76f      	b.n	d661a <__ieee754_sqrt+0x22>
   d673a:	ee10 2a10 	vmov	r2, s0
   d673e:	462b      	mov	r3, r5
   d6740:	ee10 0a10 	vmov	r0, s0
   d6744:	4629      	mov	r1, r5
   d6746:	f000 fb23 	bl	d6d90 <__aeabi_dmul>
   d674a:	4622      	mov	r2, r4
   d674c:	462b      	mov	r3, r5
   d674e:	f000 f96d 	bl	d6a2c <__adddf3>
   d6752:	ec41 0b10 	vmov	d0, r0, r1
   d6756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d675a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d675e:	f1bc 0f00 	cmp.w	ip, #0
   d6762:	daa2      	bge.n	d66aa <__ieee754_sqrt+0xb2>
   d6764:	e7aa      	b.n	d66bc <__ieee754_sqrt+0xc4>
   d6766:	3601      	adds	r6, #1
   d6768:	4620      	mov	r0, r4
   d676a:	e7b2      	b.n	d66d2 <__ieee754_sqrt+0xda>
   d676c:	2420      	movs	r4, #32
   d676e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d6772:	2000      	movs	r0, #0
   d6774:	e7db      	b.n	d672e <__ieee754_sqrt+0x136>
   d6776:	ee10 2a10 	vmov	r2, s0
   d677a:	462b      	mov	r3, r5
   d677c:	4620      	mov	r0, r4
   d677e:	4629      	mov	r1, r5
   d6780:	f000 f952 	bl	d6a28 <__aeabi_dsub>
   d6784:	4602      	mov	r2, r0
   d6786:	460b      	mov	r3, r1
   d6788:	f000 fc2c 	bl	d6fe4 <__aeabi_ddiv>
   d678c:	ec41 0b10 	vmov	d0, r0, r1
   d6790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6794:	7ff00000 	.word	0x7ff00000

000d6798 <fabs>:
   d6798:	ec53 2b10 	vmov	r2, r3, d0
   d679c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   d67a0:	ec43 2b10 	vmov	d0, r2, r3
   d67a4:	4770      	bx	lr
   d67a6:	bf00      	nop

000d67a8 <finite>:
   d67a8:	ee10 3a90 	vmov	r3, s1
   d67ac:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
   d67b0:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   d67b4:	0fc0      	lsrs	r0, r0, #31
   d67b6:	4770      	bx	lr

000d67b8 <matherr>:
   d67b8:	2000      	movs	r0, #0
   d67ba:	4770      	bx	lr
   d67bc:	0000      	movs	r0, r0
	...

000d67c0 <nan>:
   d67c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; d67c8 <nan+0x8>
   d67c4:	4770      	bx	lr
   d67c6:	bf00      	nop
   d67c8:	00000000 	.word	0x00000000
   d67cc:	7ff80000 	.word	0x7ff80000

000d67d0 <rint>:
   d67d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d67d2:	ec53 2b10 	vmov	r2, r3, d0
   d67d6:	f3c3 560a 	ubfx	r6, r3, #20, #11
   d67da:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   d67de:	2813      	cmp	r0, #19
   d67e0:	b083      	sub	sp, #12
   d67e2:	4619      	mov	r1, r3
   d67e4:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   d67e8:	ee10 5a10 	vmov	r5, s0
   d67ec:	dc2f      	bgt.n	d684e <rint+0x7e>
   d67ee:	2800      	cmp	r0, #0
   d67f0:	db49      	blt.n	d6886 <rint+0xb6>
   d67f2:	4e3f      	ldr	r6, [pc, #252]	; (d68f0 <rint+0x120>)
   d67f4:	4106      	asrs	r6, r0
   d67f6:	ea03 0706 	and.w	r7, r3, r6
   d67fa:	4317      	orrs	r7, r2
   d67fc:	d02c      	beq.n	d6858 <rint+0x88>
   d67fe:	0876      	lsrs	r6, r6, #1
   d6800:	4033      	ands	r3, r6
   d6802:	431d      	orrs	r5, r3
   d6804:	d00c      	beq.n	d6820 <rint+0x50>
   d6806:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   d680a:	2813      	cmp	r0, #19
   d680c:	ea21 0606 	bic.w	r6, r1, r6
   d6810:	fa43 f100 	asr.w	r1, r3, r0
   d6814:	ea41 0106 	orr.w	r1, r1, r6
   d6818:	bf0c      	ite	eq
   d681a:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   d681e:	2500      	movne	r5, #0
   d6820:	4834      	ldr	r0, [pc, #208]	; (d68f4 <rint+0x124>)
   d6822:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   d6826:	462a      	mov	r2, r5
   d6828:	e9d4 4500 	ldrd	r4, r5, [r4]
   d682c:	4610      	mov	r0, r2
   d682e:	462b      	mov	r3, r5
   d6830:	4622      	mov	r2, r4
   d6832:	f000 f8fb 	bl	d6a2c <__adddf3>
   d6836:	e9cd 0100 	strd	r0, r1, [sp]
   d683a:	4622      	mov	r2, r4
   d683c:	462b      	mov	r3, r5
   d683e:	e9dd 0100 	ldrd	r0, r1, [sp]
   d6842:	f000 f8f1 	bl	d6a28 <__aeabi_dsub>
   d6846:	ec41 0b10 	vmov	d0, r0, r1
   d684a:	b003      	add	sp, #12
   d684c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d684e:	2833      	cmp	r0, #51	; 0x33
   d6850:	dd06      	ble.n	d6860 <rint+0x90>
   d6852:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   d6856:	d042      	beq.n	d68de <rint+0x10e>
   d6858:	ec43 2b10 	vmov	d0, r2, r3
   d685c:	b003      	add	sp, #12
   d685e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6860:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   d6864:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d6868:	40f0      	lsrs	r0, r6
   d686a:	4202      	tst	r2, r0
   d686c:	d0f4      	beq.n	d6858 <rint+0x88>
   d686e:	0840      	lsrs	r0, r0, #1
   d6870:	4202      	tst	r2, r0
   d6872:	d0d5      	beq.n	d6820 <rint+0x50>
   d6874:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d6878:	ea25 0000 	bic.w	r0, r5, r0
   d687c:	fa43 f606 	asr.w	r6, r3, r6
   d6880:	ea46 0500 	orr.w	r5, r6, r0
   d6884:	e7cc      	b.n	d6820 <rint+0x50>
   d6886:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   d688a:	4310      	orrs	r0, r2
   d688c:	ee10 7a10 	vmov	r7, s0
   d6890:	d0e2      	beq.n	d6858 <rint+0x88>
   d6892:	f3c3 0013 	ubfx	r0, r3, #0, #20
   d6896:	4307      	orrs	r7, r0
   d6898:	4278      	negs	r0, r7
   d689a:	4307      	orrs	r7, r0
   d689c:	4815      	ldr	r0, [pc, #84]	; (d68f4 <rint+0x124>)
   d689e:	0c59      	lsrs	r1, r3, #17
   d68a0:	0b3f      	lsrs	r7, r7, #12
   d68a2:	0449      	lsls	r1, r1, #17
   d68a4:	f407 2700 	and.w	r7, r7, #524288	; 0x80000
   d68a8:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   d68ac:	ea47 0301 	orr.w	r3, r7, r1
   d68b0:	e9d0 6700 	ldrd	r6, r7, [r0]
   d68b4:	4619      	mov	r1, r3
   d68b6:	4610      	mov	r0, r2
   d68b8:	463b      	mov	r3, r7
   d68ba:	4632      	mov	r2, r6
   d68bc:	f000 f8b6 	bl	d6a2c <__adddf3>
   d68c0:	e9cd 0100 	strd	r0, r1, [sp]
   d68c4:	463b      	mov	r3, r7
   d68c6:	4632      	mov	r2, r6
   d68c8:	e9dd 0100 	ldrd	r0, r1, [sp]
   d68cc:	f000 f8ac 	bl	d6a28 <__aeabi_dsub>
   d68d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d68d4:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   d68d8:	ec41 0b10 	vmov	d0, r0, r1
   d68dc:	e7be      	b.n	d685c <rint+0x8c>
   d68de:	ee10 0a10 	vmov	r0, s0
   d68e2:	4619      	mov	r1, r3
   d68e4:	f000 f8a2 	bl	d6a2c <__adddf3>
   d68e8:	ec41 0b10 	vmov	d0, r0, r1
   d68ec:	e7b6      	b.n	d685c <rint+0x8c>
   d68ee:	bf00      	nop
   d68f0:	000fffff 	.word	0x000fffff
   d68f4:	000d7790 	.word	0x000d7790

000d68f8 <scalbn>:
   d68f8:	ec53 2b10 	vmov	r2, r3, d0
   d68fc:	b570      	push	{r4, r5, r6, lr}
   d68fe:	f3c3 540a 	ubfx	r4, r3, #20, #11
   d6902:	4619      	mov	r1, r3
   d6904:	4605      	mov	r5, r0
   d6906:	bb14      	cbnz	r4, d694e <scalbn+0x56>
   d6908:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   d690c:	4311      	orrs	r1, r2
   d690e:	d02a      	beq.n	d6966 <scalbn+0x6e>
   d6910:	4619      	mov	r1, r3
   d6912:	2200      	movs	r2, #0
   d6914:	4b38      	ldr	r3, [pc, #224]	; (d69f8 <scalbn+0x100>)
   d6916:	4e39      	ldr	r6, [pc, #228]	; (d69fc <scalbn+0x104>)
   d6918:	ee10 0a10 	vmov	r0, s0
   d691c:	f000 fa38 	bl	d6d90 <__aeabi_dmul>
   d6920:	42b5      	cmp	r5, r6
   d6922:	4602      	mov	r2, r0
   d6924:	460b      	mov	r3, r1
   d6926:	db1f      	blt.n	d6968 <scalbn+0x70>
   d6928:	f3c1 540a 	ubfx	r4, r1, #20, #11
   d692c:	3c36      	subs	r4, #54	; 0x36
   d692e:	442c      	add	r4, r5
   d6930:	f240 70fe 	movw	r0, #2046	; 0x7fe
   d6934:	4284      	cmp	r4, r0
   d6936:	dc1f      	bgt.n	d6978 <scalbn+0x80>
   d6938:	2c00      	cmp	r4, #0
   d693a:	dd2d      	ble.n	d6998 <scalbn+0xa0>
   d693c:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   d6940:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   d6944:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   d6948:	ec43 2b10 	vmov	d0, r2, r3
   d694c:	bd70      	pop	{r4, r5, r6, pc}
   d694e:	f240 70ff 	movw	r0, #2047	; 0x7ff
   d6952:	4284      	cmp	r4, r0
   d6954:	d1eb      	bne.n	d692e <scalbn+0x36>
   d6956:	ee10 0a10 	vmov	r0, s0
   d695a:	4619      	mov	r1, r3
   d695c:	f000 f866 	bl	d6a2c <__adddf3>
   d6960:	ec41 0b10 	vmov	d0, r0, r1
   d6964:	bd70      	pop	{r4, r5, r6, pc}
   d6966:	bd70      	pop	{r4, r5, r6, pc}
   d6968:	a31f      	add	r3, pc, #124	; (adr r3, d69e8 <scalbn+0xf0>)
   d696a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d696e:	f000 fa0f 	bl	d6d90 <__aeabi_dmul>
   d6972:	ec41 0b10 	vmov	d0, r0, r1
   d6976:	bd70      	pop	{r4, r5, r6, pc}
   d6978:	ec43 2b11 	vmov	d1, r2, r3
   d697c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; d69f0 <scalbn+0xf8>
   d6980:	f000 f840 	bl	d6a04 <copysign>
   d6984:	a31a      	add	r3, pc, #104	; (adr r3, d69f0 <scalbn+0xf8>)
   d6986:	e9d3 2300 	ldrd	r2, r3, [r3]
   d698a:	ec51 0b10 	vmov	r0, r1, d0
   d698e:	f000 f9ff 	bl	d6d90 <__aeabi_dmul>
   d6992:	ec41 0b10 	vmov	d0, r0, r1
   d6996:	bd70      	pop	{r4, r5, r6, pc}
   d6998:	f114 0f35 	cmn.w	r4, #53	; 0x35
   d699c:	da13      	bge.n	d69c6 <scalbn+0xce>
   d699e:	f24c 3150 	movw	r1, #50000	; 0xc350
   d69a2:	428d      	cmp	r5, r1
   d69a4:	ec43 2b11 	vmov	d1, r2, r3
   d69a8:	dce8      	bgt.n	d697c <scalbn+0x84>
   d69aa:	ed9f 0b0f 	vldr	d0, [pc, #60]	; d69e8 <scalbn+0xf0>
   d69ae:	f000 f829 	bl	d6a04 <copysign>
   d69b2:	a30d      	add	r3, pc, #52	; (adr r3, d69e8 <scalbn+0xf0>)
   d69b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d69b8:	ec51 0b10 	vmov	r0, r1, d0
   d69bc:	f000 f9e8 	bl	d6d90 <__aeabi_dmul>
   d69c0:	ec41 0b10 	vmov	d0, r0, r1
   d69c4:	bd70      	pop	{r4, r5, r6, pc}
   d69c6:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   d69ca:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   d69ce:	3436      	adds	r4, #54	; 0x36
   d69d0:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   d69d4:	4610      	mov	r0, r2
   d69d6:	4619      	mov	r1, r3
   d69d8:	2200      	movs	r2, #0
   d69da:	4b09      	ldr	r3, [pc, #36]	; (d6a00 <scalbn+0x108>)
   d69dc:	f000 f9d8 	bl	d6d90 <__aeabi_dmul>
   d69e0:	ec41 0b10 	vmov	d0, r0, r1
   d69e4:	bd70      	pop	{r4, r5, r6, pc}
   d69e6:	bf00      	nop
   d69e8:	c2f8f359 	.word	0xc2f8f359
   d69ec:	01a56e1f 	.word	0x01a56e1f
   d69f0:	8800759c 	.word	0x8800759c
   d69f4:	7e37e43c 	.word	0x7e37e43c
   d69f8:	43500000 	.word	0x43500000
   d69fc:	ffff3cb0 	.word	0xffff3cb0
   d6a00:	3c900000 	.word	0x3c900000

000d6a04 <copysign>:
   d6a04:	ec53 2b10 	vmov	r2, r3, d0
   d6a08:	ee11 0a90 	vmov	r0, s3
   d6a0c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   d6a10:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   d6a14:	ea41 0300 	orr.w	r3, r1, r0
   d6a18:	ec43 2b10 	vmov	d0, r2, r3
   d6a1c:	4770      	bx	lr
   d6a1e:	bf00      	nop

000d6a20 <__aeabi_drsub>:
   d6a20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d6a24:	e002      	b.n	d6a2c <__adddf3>
   d6a26:	bf00      	nop

000d6a28 <__aeabi_dsub>:
   d6a28:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d6a2c <__adddf3>:
   d6a2c:	b530      	push	{r4, r5, lr}
   d6a2e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d6a32:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d6a36:	ea94 0f05 	teq	r4, r5
   d6a3a:	bf08      	it	eq
   d6a3c:	ea90 0f02 	teqeq	r0, r2
   d6a40:	bf1f      	itttt	ne
   d6a42:	ea54 0c00 	orrsne.w	ip, r4, r0
   d6a46:	ea55 0c02 	orrsne.w	ip, r5, r2
   d6a4a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d6a4e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6a52:	f000 80e2 	beq.w	d6c1a <__adddf3+0x1ee>
   d6a56:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d6a5a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d6a5e:	bfb8      	it	lt
   d6a60:	426d      	neglt	r5, r5
   d6a62:	dd0c      	ble.n	d6a7e <__adddf3+0x52>
   d6a64:	442c      	add	r4, r5
   d6a66:	ea80 0202 	eor.w	r2, r0, r2
   d6a6a:	ea81 0303 	eor.w	r3, r1, r3
   d6a6e:	ea82 0000 	eor.w	r0, r2, r0
   d6a72:	ea83 0101 	eor.w	r1, r3, r1
   d6a76:	ea80 0202 	eor.w	r2, r0, r2
   d6a7a:	ea81 0303 	eor.w	r3, r1, r3
   d6a7e:	2d36      	cmp	r5, #54	; 0x36
   d6a80:	bf88      	it	hi
   d6a82:	bd30      	pophi	{r4, r5, pc}
   d6a84:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6a88:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6a8c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d6a90:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d6a94:	d002      	beq.n	d6a9c <__adddf3+0x70>
   d6a96:	4240      	negs	r0, r0
   d6a98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6a9c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d6aa0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6aa4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d6aa8:	d002      	beq.n	d6ab0 <__adddf3+0x84>
   d6aaa:	4252      	negs	r2, r2
   d6aac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d6ab0:	ea94 0f05 	teq	r4, r5
   d6ab4:	f000 80a7 	beq.w	d6c06 <__adddf3+0x1da>
   d6ab8:	f1a4 0401 	sub.w	r4, r4, #1
   d6abc:	f1d5 0e20 	rsbs	lr, r5, #32
   d6ac0:	db0d      	blt.n	d6ade <__adddf3+0xb2>
   d6ac2:	fa02 fc0e 	lsl.w	ip, r2, lr
   d6ac6:	fa22 f205 	lsr.w	r2, r2, r5
   d6aca:	1880      	adds	r0, r0, r2
   d6acc:	f141 0100 	adc.w	r1, r1, #0
   d6ad0:	fa03 f20e 	lsl.w	r2, r3, lr
   d6ad4:	1880      	adds	r0, r0, r2
   d6ad6:	fa43 f305 	asr.w	r3, r3, r5
   d6ada:	4159      	adcs	r1, r3
   d6adc:	e00e      	b.n	d6afc <__adddf3+0xd0>
   d6ade:	f1a5 0520 	sub.w	r5, r5, #32
   d6ae2:	f10e 0e20 	add.w	lr, lr, #32
   d6ae6:	2a01      	cmp	r2, #1
   d6ae8:	fa03 fc0e 	lsl.w	ip, r3, lr
   d6aec:	bf28      	it	cs
   d6aee:	f04c 0c02 	orrcs.w	ip, ip, #2
   d6af2:	fa43 f305 	asr.w	r3, r3, r5
   d6af6:	18c0      	adds	r0, r0, r3
   d6af8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d6afc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6b00:	d507      	bpl.n	d6b12 <__adddf3+0xe6>
   d6b02:	f04f 0e00 	mov.w	lr, #0
   d6b06:	f1dc 0c00 	rsbs	ip, ip, #0
   d6b0a:	eb7e 0000 	sbcs.w	r0, lr, r0
   d6b0e:	eb6e 0101 	sbc.w	r1, lr, r1
   d6b12:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d6b16:	d31b      	bcc.n	d6b50 <__adddf3+0x124>
   d6b18:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d6b1c:	d30c      	bcc.n	d6b38 <__adddf3+0x10c>
   d6b1e:	0849      	lsrs	r1, r1, #1
   d6b20:	ea5f 0030 	movs.w	r0, r0, rrx
   d6b24:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d6b28:	f104 0401 	add.w	r4, r4, #1
   d6b2c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d6b30:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d6b34:	f080 809a 	bcs.w	d6c6c <__adddf3+0x240>
   d6b38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d6b3c:	bf08      	it	eq
   d6b3e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6b42:	f150 0000 	adcs.w	r0, r0, #0
   d6b46:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6b4a:	ea41 0105 	orr.w	r1, r1, r5
   d6b4e:	bd30      	pop	{r4, r5, pc}
   d6b50:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d6b54:	4140      	adcs	r0, r0
   d6b56:	eb41 0101 	adc.w	r1, r1, r1
   d6b5a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6b5e:	f1a4 0401 	sub.w	r4, r4, #1
   d6b62:	d1e9      	bne.n	d6b38 <__adddf3+0x10c>
   d6b64:	f091 0f00 	teq	r1, #0
   d6b68:	bf04      	itt	eq
   d6b6a:	4601      	moveq	r1, r0
   d6b6c:	2000      	moveq	r0, #0
   d6b6e:	fab1 f381 	clz	r3, r1
   d6b72:	bf08      	it	eq
   d6b74:	3320      	addeq	r3, #32
   d6b76:	f1a3 030b 	sub.w	r3, r3, #11
   d6b7a:	f1b3 0220 	subs.w	r2, r3, #32
   d6b7e:	da0c      	bge.n	d6b9a <__adddf3+0x16e>
   d6b80:	320c      	adds	r2, #12
   d6b82:	dd08      	ble.n	d6b96 <__adddf3+0x16a>
   d6b84:	f102 0c14 	add.w	ip, r2, #20
   d6b88:	f1c2 020c 	rsb	r2, r2, #12
   d6b8c:	fa01 f00c 	lsl.w	r0, r1, ip
   d6b90:	fa21 f102 	lsr.w	r1, r1, r2
   d6b94:	e00c      	b.n	d6bb0 <__adddf3+0x184>
   d6b96:	f102 0214 	add.w	r2, r2, #20
   d6b9a:	bfd8      	it	le
   d6b9c:	f1c2 0c20 	rsble	ip, r2, #32
   d6ba0:	fa01 f102 	lsl.w	r1, r1, r2
   d6ba4:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6ba8:	bfdc      	itt	le
   d6baa:	ea41 010c 	orrle.w	r1, r1, ip
   d6bae:	4090      	lslle	r0, r2
   d6bb0:	1ae4      	subs	r4, r4, r3
   d6bb2:	bfa2      	ittt	ge
   d6bb4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d6bb8:	4329      	orrge	r1, r5
   d6bba:	bd30      	popge	{r4, r5, pc}
   d6bbc:	ea6f 0404 	mvn.w	r4, r4
   d6bc0:	3c1f      	subs	r4, #31
   d6bc2:	da1c      	bge.n	d6bfe <__adddf3+0x1d2>
   d6bc4:	340c      	adds	r4, #12
   d6bc6:	dc0e      	bgt.n	d6be6 <__adddf3+0x1ba>
   d6bc8:	f104 0414 	add.w	r4, r4, #20
   d6bcc:	f1c4 0220 	rsb	r2, r4, #32
   d6bd0:	fa20 f004 	lsr.w	r0, r0, r4
   d6bd4:	fa01 f302 	lsl.w	r3, r1, r2
   d6bd8:	ea40 0003 	orr.w	r0, r0, r3
   d6bdc:	fa21 f304 	lsr.w	r3, r1, r4
   d6be0:	ea45 0103 	orr.w	r1, r5, r3
   d6be4:	bd30      	pop	{r4, r5, pc}
   d6be6:	f1c4 040c 	rsb	r4, r4, #12
   d6bea:	f1c4 0220 	rsb	r2, r4, #32
   d6bee:	fa20 f002 	lsr.w	r0, r0, r2
   d6bf2:	fa01 f304 	lsl.w	r3, r1, r4
   d6bf6:	ea40 0003 	orr.w	r0, r0, r3
   d6bfa:	4629      	mov	r1, r5
   d6bfc:	bd30      	pop	{r4, r5, pc}
   d6bfe:	fa21 f004 	lsr.w	r0, r1, r4
   d6c02:	4629      	mov	r1, r5
   d6c04:	bd30      	pop	{r4, r5, pc}
   d6c06:	f094 0f00 	teq	r4, #0
   d6c0a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d6c0e:	bf06      	itte	eq
   d6c10:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d6c14:	3401      	addeq	r4, #1
   d6c16:	3d01      	subne	r5, #1
   d6c18:	e74e      	b.n	d6ab8 <__adddf3+0x8c>
   d6c1a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6c1e:	bf18      	it	ne
   d6c20:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6c24:	d029      	beq.n	d6c7a <__adddf3+0x24e>
   d6c26:	ea94 0f05 	teq	r4, r5
   d6c2a:	bf08      	it	eq
   d6c2c:	ea90 0f02 	teqeq	r0, r2
   d6c30:	d005      	beq.n	d6c3e <__adddf3+0x212>
   d6c32:	ea54 0c00 	orrs.w	ip, r4, r0
   d6c36:	bf04      	itt	eq
   d6c38:	4619      	moveq	r1, r3
   d6c3a:	4610      	moveq	r0, r2
   d6c3c:	bd30      	pop	{r4, r5, pc}
   d6c3e:	ea91 0f03 	teq	r1, r3
   d6c42:	bf1e      	ittt	ne
   d6c44:	2100      	movne	r1, #0
   d6c46:	2000      	movne	r0, #0
   d6c48:	bd30      	popne	{r4, r5, pc}
   d6c4a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d6c4e:	d105      	bne.n	d6c5c <__adddf3+0x230>
   d6c50:	0040      	lsls	r0, r0, #1
   d6c52:	4149      	adcs	r1, r1
   d6c54:	bf28      	it	cs
   d6c56:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d6c5a:	bd30      	pop	{r4, r5, pc}
   d6c5c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d6c60:	bf3c      	itt	cc
   d6c62:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d6c66:	bd30      	popcc	{r4, r5, pc}
   d6c68:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6c6c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d6c70:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6c74:	f04f 0000 	mov.w	r0, #0
   d6c78:	bd30      	pop	{r4, r5, pc}
   d6c7a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6c7e:	bf1a      	itte	ne
   d6c80:	4619      	movne	r1, r3
   d6c82:	4610      	movne	r0, r2
   d6c84:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d6c88:	bf1c      	itt	ne
   d6c8a:	460b      	movne	r3, r1
   d6c8c:	4602      	movne	r2, r0
   d6c8e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6c92:	bf06      	itte	eq
   d6c94:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6c98:	ea91 0f03 	teqeq	r1, r3
   d6c9c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d6ca0:	bd30      	pop	{r4, r5, pc}
   d6ca2:	bf00      	nop

000d6ca4 <__aeabi_ui2d>:
   d6ca4:	f090 0f00 	teq	r0, #0
   d6ca8:	bf04      	itt	eq
   d6caa:	2100      	moveq	r1, #0
   d6cac:	4770      	bxeq	lr
   d6cae:	b530      	push	{r4, r5, lr}
   d6cb0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6cb4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6cb8:	f04f 0500 	mov.w	r5, #0
   d6cbc:	f04f 0100 	mov.w	r1, #0
   d6cc0:	e750      	b.n	d6b64 <__adddf3+0x138>
   d6cc2:	bf00      	nop

000d6cc4 <__aeabi_i2d>:
   d6cc4:	f090 0f00 	teq	r0, #0
   d6cc8:	bf04      	itt	eq
   d6cca:	2100      	moveq	r1, #0
   d6ccc:	4770      	bxeq	lr
   d6cce:	b530      	push	{r4, r5, lr}
   d6cd0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6cd4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6cd8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d6cdc:	bf48      	it	mi
   d6cde:	4240      	negmi	r0, r0
   d6ce0:	f04f 0100 	mov.w	r1, #0
   d6ce4:	e73e      	b.n	d6b64 <__adddf3+0x138>
   d6ce6:	bf00      	nop

000d6ce8 <__aeabi_f2d>:
   d6ce8:	0042      	lsls	r2, r0, #1
   d6cea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d6cee:	ea4f 0131 	mov.w	r1, r1, rrx
   d6cf2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d6cf6:	bf1f      	itttt	ne
   d6cf8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d6cfc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6d00:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d6d04:	4770      	bxne	lr
   d6d06:	f092 0f00 	teq	r2, #0
   d6d0a:	bf14      	ite	ne
   d6d0c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6d10:	4770      	bxeq	lr
   d6d12:	b530      	push	{r4, r5, lr}
   d6d14:	f44f 7460 	mov.w	r4, #896	; 0x380
   d6d18:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6d1c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6d20:	e720      	b.n	d6b64 <__adddf3+0x138>
   d6d22:	bf00      	nop

000d6d24 <__aeabi_ul2d>:
   d6d24:	ea50 0201 	orrs.w	r2, r0, r1
   d6d28:	bf08      	it	eq
   d6d2a:	4770      	bxeq	lr
   d6d2c:	b530      	push	{r4, r5, lr}
   d6d2e:	f04f 0500 	mov.w	r5, #0
   d6d32:	e00a      	b.n	d6d4a <__aeabi_l2d+0x16>

000d6d34 <__aeabi_l2d>:
   d6d34:	ea50 0201 	orrs.w	r2, r0, r1
   d6d38:	bf08      	it	eq
   d6d3a:	4770      	bxeq	lr
   d6d3c:	b530      	push	{r4, r5, lr}
   d6d3e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d6d42:	d502      	bpl.n	d6d4a <__aeabi_l2d+0x16>
   d6d44:	4240      	negs	r0, r0
   d6d46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6d4a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6d4e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6d52:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d6d56:	f43f aedc 	beq.w	d6b12 <__adddf3+0xe6>
   d6d5a:	f04f 0203 	mov.w	r2, #3
   d6d5e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6d62:	bf18      	it	ne
   d6d64:	3203      	addne	r2, #3
   d6d66:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6d6a:	bf18      	it	ne
   d6d6c:	3203      	addne	r2, #3
   d6d6e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d6d72:	f1c2 0320 	rsb	r3, r2, #32
   d6d76:	fa00 fc03 	lsl.w	ip, r0, r3
   d6d7a:	fa20 f002 	lsr.w	r0, r0, r2
   d6d7e:	fa01 fe03 	lsl.w	lr, r1, r3
   d6d82:	ea40 000e 	orr.w	r0, r0, lr
   d6d86:	fa21 f102 	lsr.w	r1, r1, r2
   d6d8a:	4414      	add	r4, r2
   d6d8c:	e6c1      	b.n	d6b12 <__adddf3+0xe6>
   d6d8e:	bf00      	nop

000d6d90 <__aeabi_dmul>:
   d6d90:	b570      	push	{r4, r5, r6, lr}
   d6d92:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6d96:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6d9a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6d9e:	bf1d      	ittte	ne
   d6da0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6da4:	ea94 0f0c 	teqne	r4, ip
   d6da8:	ea95 0f0c 	teqne	r5, ip
   d6dac:	f000 f8de 	bleq	d6f6c <__aeabi_dmul+0x1dc>
   d6db0:	442c      	add	r4, r5
   d6db2:	ea81 0603 	eor.w	r6, r1, r3
   d6db6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d6dba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d6dbe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d6dc2:	bf18      	it	ne
   d6dc4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d6dc8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6dcc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6dd0:	d038      	beq.n	d6e44 <__aeabi_dmul+0xb4>
   d6dd2:	fba0 ce02 	umull	ip, lr, r0, r2
   d6dd6:	f04f 0500 	mov.w	r5, #0
   d6dda:	fbe1 e502 	umlal	lr, r5, r1, r2
   d6dde:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d6de2:	fbe0 e503 	umlal	lr, r5, r0, r3
   d6de6:	f04f 0600 	mov.w	r6, #0
   d6dea:	fbe1 5603 	umlal	r5, r6, r1, r3
   d6dee:	f09c 0f00 	teq	ip, #0
   d6df2:	bf18      	it	ne
   d6df4:	f04e 0e01 	orrne.w	lr, lr, #1
   d6df8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d6dfc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6e00:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d6e04:	d204      	bcs.n	d6e10 <__aeabi_dmul+0x80>
   d6e06:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d6e0a:	416d      	adcs	r5, r5
   d6e0c:	eb46 0606 	adc.w	r6, r6, r6
   d6e10:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d6e14:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d6e18:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d6e1c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d6e20:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d6e24:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6e28:	bf88      	it	hi
   d6e2a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6e2e:	d81e      	bhi.n	d6e6e <__aeabi_dmul+0xde>
   d6e30:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d6e34:	bf08      	it	eq
   d6e36:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d6e3a:	f150 0000 	adcs.w	r0, r0, #0
   d6e3e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6e42:	bd70      	pop	{r4, r5, r6, pc}
   d6e44:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d6e48:	ea46 0101 	orr.w	r1, r6, r1
   d6e4c:	ea40 0002 	orr.w	r0, r0, r2
   d6e50:	ea81 0103 	eor.w	r1, r1, r3
   d6e54:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d6e58:	bfc2      	ittt	gt
   d6e5a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6e5e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6e62:	bd70      	popgt	{r4, r5, r6, pc}
   d6e64:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6e68:	f04f 0e00 	mov.w	lr, #0
   d6e6c:	3c01      	subs	r4, #1
   d6e6e:	f300 80ab 	bgt.w	d6fc8 <__aeabi_dmul+0x238>
   d6e72:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d6e76:	bfde      	ittt	le
   d6e78:	2000      	movle	r0, #0
   d6e7a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d6e7e:	bd70      	pople	{r4, r5, r6, pc}
   d6e80:	f1c4 0400 	rsb	r4, r4, #0
   d6e84:	3c20      	subs	r4, #32
   d6e86:	da35      	bge.n	d6ef4 <__aeabi_dmul+0x164>
   d6e88:	340c      	adds	r4, #12
   d6e8a:	dc1b      	bgt.n	d6ec4 <__aeabi_dmul+0x134>
   d6e8c:	f104 0414 	add.w	r4, r4, #20
   d6e90:	f1c4 0520 	rsb	r5, r4, #32
   d6e94:	fa00 f305 	lsl.w	r3, r0, r5
   d6e98:	fa20 f004 	lsr.w	r0, r0, r4
   d6e9c:	fa01 f205 	lsl.w	r2, r1, r5
   d6ea0:	ea40 0002 	orr.w	r0, r0, r2
   d6ea4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d6ea8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6eac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6eb0:	fa21 f604 	lsr.w	r6, r1, r4
   d6eb4:	eb42 0106 	adc.w	r1, r2, r6
   d6eb8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6ebc:	bf08      	it	eq
   d6ebe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6ec2:	bd70      	pop	{r4, r5, r6, pc}
   d6ec4:	f1c4 040c 	rsb	r4, r4, #12
   d6ec8:	f1c4 0520 	rsb	r5, r4, #32
   d6ecc:	fa00 f304 	lsl.w	r3, r0, r4
   d6ed0:	fa20 f005 	lsr.w	r0, r0, r5
   d6ed4:	fa01 f204 	lsl.w	r2, r1, r4
   d6ed8:	ea40 0002 	orr.w	r0, r0, r2
   d6edc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6ee0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6ee4:	f141 0100 	adc.w	r1, r1, #0
   d6ee8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6eec:	bf08      	it	eq
   d6eee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6ef2:	bd70      	pop	{r4, r5, r6, pc}
   d6ef4:	f1c4 0520 	rsb	r5, r4, #32
   d6ef8:	fa00 f205 	lsl.w	r2, r0, r5
   d6efc:	ea4e 0e02 	orr.w	lr, lr, r2
   d6f00:	fa20 f304 	lsr.w	r3, r0, r4
   d6f04:	fa01 f205 	lsl.w	r2, r1, r5
   d6f08:	ea43 0302 	orr.w	r3, r3, r2
   d6f0c:	fa21 f004 	lsr.w	r0, r1, r4
   d6f10:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6f14:	fa21 f204 	lsr.w	r2, r1, r4
   d6f18:	ea20 0002 	bic.w	r0, r0, r2
   d6f1c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d6f20:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6f24:	bf08      	it	eq
   d6f26:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6f2a:	bd70      	pop	{r4, r5, r6, pc}
   d6f2c:	f094 0f00 	teq	r4, #0
   d6f30:	d10f      	bne.n	d6f52 <__aeabi_dmul+0x1c2>
   d6f32:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d6f36:	0040      	lsls	r0, r0, #1
   d6f38:	eb41 0101 	adc.w	r1, r1, r1
   d6f3c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6f40:	bf08      	it	eq
   d6f42:	3c01      	subeq	r4, #1
   d6f44:	d0f7      	beq.n	d6f36 <__aeabi_dmul+0x1a6>
   d6f46:	ea41 0106 	orr.w	r1, r1, r6
   d6f4a:	f095 0f00 	teq	r5, #0
   d6f4e:	bf18      	it	ne
   d6f50:	4770      	bxne	lr
   d6f52:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d6f56:	0052      	lsls	r2, r2, #1
   d6f58:	eb43 0303 	adc.w	r3, r3, r3
   d6f5c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d6f60:	bf08      	it	eq
   d6f62:	3d01      	subeq	r5, #1
   d6f64:	d0f7      	beq.n	d6f56 <__aeabi_dmul+0x1c6>
   d6f66:	ea43 0306 	orr.w	r3, r3, r6
   d6f6a:	4770      	bx	lr
   d6f6c:	ea94 0f0c 	teq	r4, ip
   d6f70:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6f74:	bf18      	it	ne
   d6f76:	ea95 0f0c 	teqne	r5, ip
   d6f7a:	d00c      	beq.n	d6f96 <__aeabi_dmul+0x206>
   d6f7c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6f80:	bf18      	it	ne
   d6f82:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6f86:	d1d1      	bne.n	d6f2c <__aeabi_dmul+0x19c>
   d6f88:	ea81 0103 	eor.w	r1, r1, r3
   d6f8c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6f90:	f04f 0000 	mov.w	r0, #0
   d6f94:	bd70      	pop	{r4, r5, r6, pc}
   d6f96:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6f9a:	bf06      	itte	eq
   d6f9c:	4610      	moveq	r0, r2
   d6f9e:	4619      	moveq	r1, r3
   d6fa0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6fa4:	d019      	beq.n	d6fda <__aeabi_dmul+0x24a>
   d6fa6:	ea94 0f0c 	teq	r4, ip
   d6faa:	d102      	bne.n	d6fb2 <__aeabi_dmul+0x222>
   d6fac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6fb0:	d113      	bne.n	d6fda <__aeabi_dmul+0x24a>
   d6fb2:	ea95 0f0c 	teq	r5, ip
   d6fb6:	d105      	bne.n	d6fc4 <__aeabi_dmul+0x234>
   d6fb8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d6fbc:	bf1c      	itt	ne
   d6fbe:	4610      	movne	r0, r2
   d6fc0:	4619      	movne	r1, r3
   d6fc2:	d10a      	bne.n	d6fda <__aeabi_dmul+0x24a>
   d6fc4:	ea81 0103 	eor.w	r1, r1, r3
   d6fc8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6fcc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6fd0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6fd4:	f04f 0000 	mov.w	r0, #0
   d6fd8:	bd70      	pop	{r4, r5, r6, pc}
   d6fda:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6fde:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d6fe2:	bd70      	pop	{r4, r5, r6, pc}

000d6fe4 <__aeabi_ddiv>:
   d6fe4:	b570      	push	{r4, r5, r6, lr}
   d6fe6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6fea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6fee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6ff2:	bf1d      	ittte	ne
   d6ff4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6ff8:	ea94 0f0c 	teqne	r4, ip
   d6ffc:	ea95 0f0c 	teqne	r5, ip
   d7000:	f000 f8a7 	bleq	d7152 <__aeabi_ddiv+0x16e>
   d7004:	eba4 0405 	sub.w	r4, r4, r5
   d7008:	ea81 0e03 	eor.w	lr, r1, r3
   d700c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7010:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7014:	f000 8088 	beq.w	d7128 <__aeabi_ddiv+0x144>
   d7018:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d701c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d7020:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d7024:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d7028:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d702c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d7030:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d7034:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d7038:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d703c:	429d      	cmp	r5, r3
   d703e:	bf08      	it	eq
   d7040:	4296      	cmpeq	r6, r2
   d7042:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d7046:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d704a:	d202      	bcs.n	d7052 <__aeabi_ddiv+0x6e>
   d704c:	085b      	lsrs	r3, r3, #1
   d704e:	ea4f 0232 	mov.w	r2, r2, rrx
   d7052:	1ab6      	subs	r6, r6, r2
   d7054:	eb65 0503 	sbc.w	r5, r5, r3
   d7058:	085b      	lsrs	r3, r3, #1
   d705a:	ea4f 0232 	mov.w	r2, r2, rrx
   d705e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d7062:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d7066:	ebb6 0e02 	subs.w	lr, r6, r2
   d706a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d706e:	bf22      	ittt	cs
   d7070:	1ab6      	subcs	r6, r6, r2
   d7072:	4675      	movcs	r5, lr
   d7074:	ea40 000c 	orrcs.w	r0, r0, ip
   d7078:	085b      	lsrs	r3, r3, #1
   d707a:	ea4f 0232 	mov.w	r2, r2, rrx
   d707e:	ebb6 0e02 	subs.w	lr, r6, r2
   d7082:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7086:	bf22      	ittt	cs
   d7088:	1ab6      	subcs	r6, r6, r2
   d708a:	4675      	movcs	r5, lr
   d708c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d7090:	085b      	lsrs	r3, r3, #1
   d7092:	ea4f 0232 	mov.w	r2, r2, rrx
   d7096:	ebb6 0e02 	subs.w	lr, r6, r2
   d709a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d709e:	bf22      	ittt	cs
   d70a0:	1ab6      	subcs	r6, r6, r2
   d70a2:	4675      	movcs	r5, lr
   d70a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d70a8:	085b      	lsrs	r3, r3, #1
   d70aa:	ea4f 0232 	mov.w	r2, r2, rrx
   d70ae:	ebb6 0e02 	subs.w	lr, r6, r2
   d70b2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d70b6:	bf22      	ittt	cs
   d70b8:	1ab6      	subcs	r6, r6, r2
   d70ba:	4675      	movcs	r5, lr
   d70bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d70c0:	ea55 0e06 	orrs.w	lr, r5, r6
   d70c4:	d018      	beq.n	d70f8 <__aeabi_ddiv+0x114>
   d70c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d70ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d70ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d70d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d70d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d70da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d70de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d70e2:	d1c0      	bne.n	d7066 <__aeabi_ddiv+0x82>
   d70e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d70e8:	d10b      	bne.n	d7102 <__aeabi_ddiv+0x11e>
   d70ea:	ea41 0100 	orr.w	r1, r1, r0
   d70ee:	f04f 0000 	mov.w	r0, #0
   d70f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d70f6:	e7b6      	b.n	d7066 <__aeabi_ddiv+0x82>
   d70f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d70fc:	bf04      	itt	eq
   d70fe:	4301      	orreq	r1, r0
   d7100:	2000      	moveq	r0, #0
   d7102:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7106:	bf88      	it	hi
   d7108:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d710c:	f63f aeaf 	bhi.w	d6e6e <__aeabi_dmul+0xde>
   d7110:	ebb5 0c03 	subs.w	ip, r5, r3
   d7114:	bf04      	itt	eq
   d7116:	ebb6 0c02 	subseq.w	ip, r6, r2
   d711a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d711e:	f150 0000 	adcs.w	r0, r0, #0
   d7122:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7126:	bd70      	pop	{r4, r5, r6, pc}
   d7128:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d712c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d7130:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d7134:	bfc2      	ittt	gt
   d7136:	ebd4 050c 	rsbsgt	r5, r4, ip
   d713a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d713e:	bd70      	popgt	{r4, r5, r6, pc}
   d7140:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7144:	f04f 0e00 	mov.w	lr, #0
   d7148:	3c01      	subs	r4, #1
   d714a:	e690      	b.n	d6e6e <__aeabi_dmul+0xde>
   d714c:	ea45 0e06 	orr.w	lr, r5, r6
   d7150:	e68d      	b.n	d6e6e <__aeabi_dmul+0xde>
   d7152:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7156:	ea94 0f0c 	teq	r4, ip
   d715a:	bf08      	it	eq
   d715c:	ea95 0f0c 	teqeq	r5, ip
   d7160:	f43f af3b 	beq.w	d6fda <__aeabi_dmul+0x24a>
   d7164:	ea94 0f0c 	teq	r4, ip
   d7168:	d10a      	bne.n	d7180 <__aeabi_ddiv+0x19c>
   d716a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d716e:	f47f af34 	bne.w	d6fda <__aeabi_dmul+0x24a>
   d7172:	ea95 0f0c 	teq	r5, ip
   d7176:	f47f af25 	bne.w	d6fc4 <__aeabi_dmul+0x234>
   d717a:	4610      	mov	r0, r2
   d717c:	4619      	mov	r1, r3
   d717e:	e72c      	b.n	d6fda <__aeabi_dmul+0x24a>
   d7180:	ea95 0f0c 	teq	r5, ip
   d7184:	d106      	bne.n	d7194 <__aeabi_ddiv+0x1b0>
   d7186:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d718a:	f43f aefd 	beq.w	d6f88 <__aeabi_dmul+0x1f8>
   d718e:	4610      	mov	r0, r2
   d7190:	4619      	mov	r1, r3
   d7192:	e722      	b.n	d6fda <__aeabi_dmul+0x24a>
   d7194:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7198:	bf18      	it	ne
   d719a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d719e:	f47f aec5 	bne.w	d6f2c <__aeabi_dmul+0x19c>
   d71a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d71a6:	f47f af0d 	bne.w	d6fc4 <__aeabi_dmul+0x234>
   d71aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d71ae:	f47f aeeb 	bne.w	d6f88 <__aeabi_dmul+0x1f8>
   d71b2:	e712      	b.n	d6fda <__aeabi_dmul+0x24a>

000d71b4 <__gedf2>:
   d71b4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d71b8:	e006      	b.n	d71c8 <__cmpdf2+0x4>
   d71ba:	bf00      	nop

000d71bc <__ledf2>:
   d71bc:	f04f 0c01 	mov.w	ip, #1
   d71c0:	e002      	b.n	d71c8 <__cmpdf2+0x4>
   d71c2:	bf00      	nop

000d71c4 <__cmpdf2>:
   d71c4:	f04f 0c01 	mov.w	ip, #1
   d71c8:	f84d cd04 	str.w	ip, [sp, #-4]!
   d71cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d71d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d71d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d71d8:	bf18      	it	ne
   d71da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d71de:	d01b      	beq.n	d7218 <__cmpdf2+0x54>
   d71e0:	b001      	add	sp, #4
   d71e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d71e6:	bf0c      	ite	eq
   d71e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d71ec:	ea91 0f03 	teqne	r1, r3
   d71f0:	bf02      	ittt	eq
   d71f2:	ea90 0f02 	teqeq	r0, r2
   d71f6:	2000      	moveq	r0, #0
   d71f8:	4770      	bxeq	lr
   d71fa:	f110 0f00 	cmn.w	r0, #0
   d71fe:	ea91 0f03 	teq	r1, r3
   d7202:	bf58      	it	pl
   d7204:	4299      	cmppl	r1, r3
   d7206:	bf08      	it	eq
   d7208:	4290      	cmpeq	r0, r2
   d720a:	bf2c      	ite	cs
   d720c:	17d8      	asrcs	r0, r3, #31
   d720e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d7212:	f040 0001 	orr.w	r0, r0, #1
   d7216:	4770      	bx	lr
   d7218:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d721c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7220:	d102      	bne.n	d7228 <__cmpdf2+0x64>
   d7222:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d7226:	d107      	bne.n	d7238 <__cmpdf2+0x74>
   d7228:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d722c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7230:	d1d6      	bne.n	d71e0 <__cmpdf2+0x1c>
   d7232:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d7236:	d0d3      	beq.n	d71e0 <__cmpdf2+0x1c>
   d7238:	f85d 0b04 	ldr.w	r0, [sp], #4
   d723c:	4770      	bx	lr
   d723e:	bf00      	nop

000d7240 <__aeabi_cdrcmple>:
   d7240:	4684      	mov	ip, r0
   d7242:	4610      	mov	r0, r2
   d7244:	4662      	mov	r2, ip
   d7246:	468c      	mov	ip, r1
   d7248:	4619      	mov	r1, r3
   d724a:	4663      	mov	r3, ip
   d724c:	e000      	b.n	d7250 <__aeabi_cdcmpeq>
   d724e:	bf00      	nop

000d7250 <__aeabi_cdcmpeq>:
   d7250:	b501      	push	{r0, lr}
   d7252:	f7ff ffb7 	bl	d71c4 <__cmpdf2>
   d7256:	2800      	cmp	r0, #0
   d7258:	bf48      	it	mi
   d725a:	f110 0f00 	cmnmi.w	r0, #0
   d725e:	bd01      	pop	{r0, pc}

000d7260 <__aeabi_dcmpeq>:
   d7260:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7264:	f7ff fff4 	bl	d7250 <__aeabi_cdcmpeq>
   d7268:	bf0c      	ite	eq
   d726a:	2001      	moveq	r0, #1
   d726c:	2000      	movne	r0, #0
   d726e:	f85d fb08 	ldr.w	pc, [sp], #8
   d7272:	bf00      	nop

000d7274 <__aeabi_dcmplt>:
   d7274:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7278:	f7ff ffea 	bl	d7250 <__aeabi_cdcmpeq>
   d727c:	bf34      	ite	cc
   d727e:	2001      	movcc	r0, #1
   d7280:	2000      	movcs	r0, #0
   d7282:	f85d fb08 	ldr.w	pc, [sp], #8
   d7286:	bf00      	nop

000d7288 <__aeabi_dcmple>:
   d7288:	f84d ed08 	str.w	lr, [sp, #-8]!
   d728c:	f7ff ffe0 	bl	d7250 <__aeabi_cdcmpeq>
   d7290:	bf94      	ite	ls
   d7292:	2001      	movls	r0, #1
   d7294:	2000      	movhi	r0, #0
   d7296:	f85d fb08 	ldr.w	pc, [sp], #8
   d729a:	bf00      	nop

000d729c <__aeabi_dcmpge>:
   d729c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d72a0:	f7ff ffce 	bl	d7240 <__aeabi_cdrcmple>
   d72a4:	bf94      	ite	ls
   d72a6:	2001      	movls	r0, #1
   d72a8:	2000      	movhi	r0, #0
   d72aa:	f85d fb08 	ldr.w	pc, [sp], #8
   d72ae:	bf00      	nop

000d72b0 <__aeabi_dcmpgt>:
   d72b0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d72b4:	f7ff ffc4 	bl	d7240 <__aeabi_cdrcmple>
   d72b8:	bf34      	ite	cc
   d72ba:	2001      	movcc	r0, #1
   d72bc:	2000      	movcs	r0, #0
   d72be:	f85d fb08 	ldr.w	pc, [sp], #8
   d72c2:	bf00      	nop

000d72c4 <__aeabi_dcmpun>:
   d72c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d72c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d72cc:	d102      	bne.n	d72d4 <__aeabi_dcmpun+0x10>
   d72ce:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d72d2:	d10a      	bne.n	d72ea <__aeabi_dcmpun+0x26>
   d72d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d72d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d72dc:	d102      	bne.n	d72e4 <__aeabi_dcmpun+0x20>
   d72de:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d72e2:	d102      	bne.n	d72ea <__aeabi_dcmpun+0x26>
   d72e4:	f04f 0000 	mov.w	r0, #0
   d72e8:	4770      	bx	lr
   d72ea:	f04f 0001 	mov.w	r0, #1
   d72ee:	4770      	bx	lr

000d72f0 <__aeabi_d2f>:
   d72f0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d72f4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d72f8:	bf24      	itt	cs
   d72fa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d72fe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d7302:	d90d      	bls.n	d7320 <__aeabi_d2f+0x30>
   d7304:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d7308:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d730c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d7310:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d7314:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d7318:	bf08      	it	eq
   d731a:	f020 0001 	biceq.w	r0, r0, #1
   d731e:	4770      	bx	lr
   d7320:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d7324:	d121      	bne.n	d736a <__aeabi_d2f+0x7a>
   d7326:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d732a:	bfbc      	itt	lt
   d732c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d7330:	4770      	bxlt	lr
   d7332:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7336:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d733a:	f1c2 0218 	rsb	r2, r2, #24
   d733e:	f1c2 0c20 	rsb	ip, r2, #32
   d7342:	fa10 f30c 	lsls.w	r3, r0, ip
   d7346:	fa20 f002 	lsr.w	r0, r0, r2
   d734a:	bf18      	it	ne
   d734c:	f040 0001 	orrne.w	r0, r0, #1
   d7350:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7354:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d7358:	fa03 fc0c 	lsl.w	ip, r3, ip
   d735c:	ea40 000c 	orr.w	r0, r0, ip
   d7360:	fa23 f302 	lsr.w	r3, r3, r2
   d7364:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d7368:	e7cc      	b.n	d7304 <__aeabi_d2f+0x14>
   d736a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d736e:	d107      	bne.n	d7380 <__aeabi_d2f+0x90>
   d7370:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d7374:	bf1e      	ittt	ne
   d7376:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d737a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d737e:	4770      	bxne	lr
   d7380:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d7384:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d7388:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d738c:	4770      	bx	lr
   d738e:	bf00      	nop

000d7390 <__cxa_atexit>:
   d7390:	b510      	push	{r4, lr}
   d7392:	4c05      	ldr	r4, [pc, #20]	; (d73a8 <__cxa_atexit+0x18>)
   d7394:	4613      	mov	r3, r2
   d7396:	b12c      	cbz	r4, d73a4 <__cxa_atexit+0x14>
   d7398:	460a      	mov	r2, r1
   d739a:	4601      	mov	r1, r0
   d739c:	2002      	movs	r0, #2
   d739e:	f3af 8000 	nop.w
   d73a2:	bd10      	pop	{r4, pc}
   d73a4:	4620      	mov	r0, r4
   d73a6:	bd10      	pop	{r4, pc}
   d73a8:	00000000 	.word	0x00000000

000d73ac <memcpy>:
   d73ac:	b510      	push	{r4, lr}
   d73ae:	1e43      	subs	r3, r0, #1
   d73b0:	440a      	add	r2, r1
   d73b2:	4291      	cmp	r1, r2
   d73b4:	d004      	beq.n	d73c0 <memcpy+0x14>
   d73b6:	f811 4b01 	ldrb.w	r4, [r1], #1
   d73ba:	f803 4f01 	strb.w	r4, [r3, #1]!
   d73be:	e7f8      	b.n	d73b2 <memcpy+0x6>
   d73c0:	bd10      	pop	{r4, pc}

000d73c2 <memset>:
   d73c2:	4402      	add	r2, r0
   d73c4:	4603      	mov	r3, r0
   d73c6:	4293      	cmp	r3, r2
   d73c8:	d002      	beq.n	d73d0 <memset+0xe>
   d73ca:	f803 1b01 	strb.w	r1, [r3], #1
   d73ce:	e7fa      	b.n	d73c6 <memset+0x4>
   d73d0:	4770      	bx	lr
	...

000d73d4 <srand>:
   d73d4:	b538      	push	{r3, r4, r5, lr}
   d73d6:	4b12      	ldr	r3, [pc, #72]	; (d7420 <srand+0x4c>)
   d73d8:	681c      	ldr	r4, [r3, #0]
   d73da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d73dc:	4605      	mov	r5, r0
   d73de:	b9d3      	cbnz	r3, d7416 <srand+0x42>
   d73e0:	2018      	movs	r0, #24
   d73e2:	f7fd f9c7 	bl	d4774 <malloc>
   d73e6:	f243 330e 	movw	r3, #13070	; 0x330e
   d73ea:	63a0      	str	r0, [r4, #56]	; 0x38
   d73ec:	8003      	strh	r3, [r0, #0]
   d73ee:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d73f2:	8043      	strh	r3, [r0, #2]
   d73f4:	f241 2334 	movw	r3, #4660	; 0x1234
   d73f8:	8083      	strh	r3, [r0, #4]
   d73fa:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d73fe:	80c3      	strh	r3, [r0, #6]
   d7400:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d7404:	8103      	strh	r3, [r0, #8]
   d7406:	2305      	movs	r3, #5
   d7408:	8143      	strh	r3, [r0, #10]
   d740a:	230b      	movs	r3, #11
   d740c:	8183      	strh	r3, [r0, #12]
   d740e:	2201      	movs	r2, #1
   d7410:	2300      	movs	r3, #0
   d7412:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7416:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7418:	2200      	movs	r2, #0
   d741a:	611d      	str	r5, [r3, #16]
   d741c:	615a      	str	r2, [r3, #20]
   d741e:	bd38      	pop	{r3, r4, r5, pc}
   d7420:	2003e468 	.word	0x2003e468

000d7424 <strlen>:
   d7424:	4603      	mov	r3, r0
   d7426:	f813 2b01 	ldrb.w	r2, [r3], #1
   d742a:	2a00      	cmp	r2, #0
   d742c:	d1fb      	bne.n	d7426 <strlen+0x2>
   d742e:	1a18      	subs	r0, r3, r0
   d7430:	3801      	subs	r0, #1
   d7432:	4770      	bx	lr

000d7434 <dynalib_user>:
   d7434:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d7444:	0000 0000 6941 2072 7551 6c61 7469 2079     ....Air Quality 
   d7454:	6553 736e 726f 7220 6165 7964 002e 6941     Sensor ready..Ai
   d7464:	2072 7551 6c61 7469 2079 6553 736e 726f     r Quality Sensor
   d7474:	4520 5252 524f 0021 6f4e 656e 4400 6e61      ERROR!.None.Dan
   d7484:	6567 0072 6948 6867 5020 6c6f 756c 6974     ger.High Polluti
   d7494:	6e6f 4c00 776f 5020 6c6f 756c 6974 6e6f     on.Low Pollution
   d74a4:	4600 6572 6873 4120 7269 4c00 4f50 203a     .Fresh Air.LPO: 
   d74b4:	6425 5200 7461 6f69 203a 6625 2525 4300     %d.Ratio: %f%%.C
   d74c4:	6e6f 6563 746e 6172 6974 6e6f 203a 6625     oncentration: %f
   d74d4:	7020 7363 4c2f 4100 7269 5120 6175 696c      pcs/L.Air Quali
   d74e4:	7974 203a 7325 0000                         ty: %s..

000d74ec <_ZN16AirQualitySensor13LOW_POLLUTIONE>:
   d74ec:	0002 0000                                   ....

000d74f0 <_ZN16AirQualitySensor9FRESH_AIRE>:
   d74f0:	0003 0000                                   ....

000d74f4 <_ZN16AirQualitySensor14HIGH_POLLUTIONE>:
   d74f4:	0001 0000                                   ....

000d74f8 <_ZN16AirQualitySensor12FORCE_SIGNALE>:
   d74f8:	0000 0000                                   ....

000d74fc <_ZTVN5spark13CellularClassE>:
	...
   d7504:	485b 000d 4851 000d 4847 000d 47fd 000d     [H..QH..GH...G..
   d7514:	483b 000d 482f 000d 4823 000d 481b 000d     ;H../H..#H...H..
   d7524:	4811 000d 4807 000d 4c81 000d               .H...H...L..

000d7530 <_ZTVN5spark13EthernetClassE>:
	...
   d7538:	4905 000d 48fb 000d 48f1 000d 48e7 000d     .I...H...H...H..
   d7548:	48db 000d 48cf 000d 48c3 000d 48bb 000d     .H...H...H...H..
   d7558:	48b1 000d 48a7 000d 4c81 000d               .H...H...L..

000d7564 <_ZTV7TwoWire>:
	...
   d756c:	4925 000d 496f 000d 4947 000d 4927 000d     %I..oI..GI..'I..
   d757c:	494f 000d 4957 000d 495f 000d 4967 000d     OI..WI.._I..gI..

000d758c <_ZTV9IPAddress>:
	...
   d7594:	49b9 000d 49a9 000d 49ab 000d 6162 6475     .I...I...I..baud
   d75a4:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d75b4:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d75c4:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d75d4:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d75e4:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d75f4:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d7604:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d7614:	7070 2500 3130 7530 0020 205d 2c00 0020     pp.%010u .] ., .
   d7624:	2928 203a 2000 005b 6f63 6564 3d20 0020     (): . [.code = .
   d7634:	6925 6400 7465 6961 736c 3d20 0020 0a0d     %i.details = ...
   d7644:	6600 6c00 006e 6e66 6300 646f 0065 6564     .f.ln.fn.code.de
   d7654:	6174 6c69 6e00 6e6f 0065 7274 6361 0065     tail.none.trace.
   d7664:	6e69 6f66 7700 7261 006e 7265 6f72 0072     info.warn.error.
   d7674:	6170 696e 0063 6c61 006c 0000               panic.all...

000d7680 <_ZTVN5spark9MeshClassE>:
	...
   d7688:	4afb 000d 4af1 000d 4ae7 000d 4add 000d     .J...J...J...J..
   d7698:	4ad1 000d 4ac5 000d 4ab9 000d 4ab1 000d     .J...J...J...J..
   d76a8:	4aa7 000d 4a9d 000d 4c81 000d               .J...J...L..

000d76b4 <_ZTVN5spark12NetworkClassE>:
	...
   d76bc:	4c19 000d 4c23 000d 4c2d 000d 4c37 000d     .L..#L..-L..7L..
   d76cc:	4c41 000d 4c4d 000d 4c59 000d 4c65 000d     AL..ML..YL..eL..
   d76dc:	4c6d 000d 4c77 000d 4c81 000d               mL..wL...L..

000d76e8 <_ZTV8SPIClass>:
	...
   d76f0:	4ebd 000d 4ebf 000d 005a 2b25 3330 3a64     .N...N..Z.%+03d:
   d7700:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
   d7710:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
   d7720:	0000 0000                                   ....

000d7724 <_ZTV11USARTSerial>:
	...
   d772c:	502d 000d 507d 000d 508b 000d 4d61 000d     -P..}P...P..aM..
   d773c:	5041 000d 5063 000d 504f 000d 5077 000d     AP..cP..OP..wP..
   d774c:	502f 000d 5033 000d                         /P..3P..

000d7754 <_ZTV9USBSerial>:
	...
   d775c:	5169 000d 51b9 000d 51c7 000d 4d61 000d     iQ...Q...Q..aM..
   d776c:	51a5 000d 516b 000d 5181 000d 51b3 000d     .Q..kQ...Q...Q..
   d777c:	5197 000d 5165 000d                         .Q..eQ..

000d7784 <_ZSt7nothrow>:
   d7784:	0000 0000 6f70 0077 0000 0000               ....pow.....

000d7790 <TWO52>:
   d7790:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

000d77a0 <__sf_fake_stdin>:
	...

000d77c0 <__sf_fake_stdout>:
	...

000d77e0 <__sf_fake_stderr>:
	...
   d7800:	0043                                        C.

000d7802 <link_const_variable_data_end>:
	...

000d7804 <link_constructors_location>:
   d7804:	000d4341 	.word	0x000d4341
   d7808:	000d4419 	.word	0x000d4419
   d780c:	000d47d5 	.word	0x000d47d5
   d7810:	000d4865 	.word	0x000d4865
   d7814:	000d4911 	.word	0x000d4911
   d7818:	000d4a8d 	.word	0x000d4a8d
   d781c:	000d4bc9 	.word	0x000d4bc9
   d7820:	000d4d4d 	.word	0x000d4d4d
   d7824:	000d4ea1 	.word	0x000d4ea1
   d7828:	000d4fe5 	.word	0x000d4fe5
   d782c:	000d5019 	.word	0x000d5019
   d7830:	000d5521 	.word	0x000d5521
   d7834:	000d55e5 	.word	0x000d55e5
   d7838:	000d5669 	.word	0x000d5669
   d783c:	000d56ed 	.word	0x000d56ed
