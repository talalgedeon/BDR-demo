
/Users/talalagedeon/Desktop/particle-coding/Air-quality/target/1.5.0/boron/Air-quality.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005ea0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000d9ec0  000d9ec0  00009ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000d9ec8  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  2003e3b4  000d9ecc  0001e3b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000003d0  2003e420  2003e420  0002e420  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000d9f38  000d9f38  00029f38  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000d9f60  000d9f60  00029f60  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000fe018  00000000  00000000  00029f64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00014a42  00000000  00000000  00127f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00024e12  00000000  00000000  0013c9be  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002a88  00000000  00000000  001617d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00005168  00000000  00000000  00164258  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003b803  00000000  00000000  001693c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000348f5  00000000  00000000  001a4bc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0010b887  00000000  00000000  001d94b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000e410  00000000  00000000  002e4d40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f005 fa7d 	bl	d9530 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f005 fa82 	bl	d9546 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e3b4 	.word	0x2003e3b4
   d404c:	000d9ecc 	.word	0x000d9ecc
   d4050:	2003e420 	.word	0x2003e420
   d4054:	2003e420 	.word	0x2003e420
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f002 ff25 	bl	d6eac <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d9ec0 	.word	0x000d9ec0
   d4084:	000d9e78 	.word	0x000d9e78

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b82c 	b.w	d40e4 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 faf5 	bl	d467c <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f002 becb 	b.w	d6e30 <_post_loop>

000d409a <_Znwj>:
   d409a:	f001 bcf9 	b.w	d5a90 <malloc>

000d409e <_ZdlPv>:
   d409e:	f001 bcff 	b.w	d5aa0 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f001 bcfd 	b.w	d5aa0 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <_ZN16JsonWriterStaticILj256EED1Ev>:
 * variable.
 *
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
   d40b8:	b510      	push	{r4, lr}
   d40ba:	4b03      	ldr	r3, [pc, #12]	; (d40c8 <_ZN16JsonWriterStaticILj256EED1Ev+0x10>)
   d40bc:	6003      	str	r3, [r0, #0]
   d40be:	4604      	mov	r4, r0
   d40c0:	f001 f952 	bl	d5368 <_ZN10JsonWriterD1Ev>
   d40c4:	4620      	mov	r0, r4
   d40c6:	bd10      	pop	{r4, pc}
   d40c8:	000d960c 	.word	0x000d960c

000d40cc <_ZN16JsonWriterStaticILj256EED0Ev>:
   d40cc:	b510      	push	{r4, lr}
   d40ce:	4604      	mov	r4, r0
   d40d0:	f7ff fff2 	bl	d40b8 <_ZN16JsonWriterStaticILj256EED1Ev>
   d40d4:	4620      	mov	r0, r4
   d40d6:	f44f 7198 	mov.w	r1, #304	; 0x130
   d40da:	f002 fff0 	bl	d70be <_ZdlPvj>
   d40de:	4620      	mov	r0, r4
   d40e0:	bd10      	pop	{r4, pc}
	...

000d40e4 <setup>:
String getAirQuality();
void createEventPayload(int temp, int humidity, int pressure, String airQuality);
void updateDisplay(int temp, int humidity, int pressure, String airQuality);

void setup()
{
   d40e4:	b508      	push	{r3, lr}
  Serial.begin(9600);
   d40e6:	f002 fe5f 	bl	d6da8 <_Z16_fetch_usbserialv>
   d40ea:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40ee:	f002 fe4f 	bl	d6d90 <_ZN9USBSerial5beginEl>
  delay(50);
   d40f2:	2032      	movs	r0, #50	; 0x32
   d40f4:	f001 fd04 	bl	d5b00 <delay>

  // Configure the dust sensor pin as an input
  pinMode(DUST_SENSOR_PIN, INPUT);
   d40f8:	2004      	movs	r0, #4
   d40fa:	2100      	movs	r1, #0
   d40fc:	f002 ff24 	bl	d6f48 <pinMode>

  if (aqSensor.init())
   d4100:	4824      	ldr	r0, [pc, #144]	; (d4194 <setup+0xb0>)
   d4102:	f000 fb52 	bl	d47aa <_ZN16AirQualitySensor4initEv>
   d4106:	b118      	cbz	r0, d4110 <setup+0x2c>
  {
    Serial.println("Air Quality Sensor ready.");
   d4108:	f002 fe4e 	bl	d6da8 <_Z16_fetch_usbserialv>
   d410c:	4922      	ldr	r1, [pc, #136]	; (d4198 <setup+0xb4>)
   d410e:	e002      	b.n	d4116 <setup+0x32>
  }
  else
  {
    Serial.println("Air Quality Sensor ERROR!");
   d4110:	f002 fe4a 	bl	d6da8 <_Z16_fetch_usbserialv>
   d4114:	4921      	ldr	r1, [pc, #132]	; (d419c <setup+0xb8>)
   d4116:	f002 fb4c 	bl	d67b2 <_ZN5Print7printlnEPKc>
  }

  Wire.begin();
   d411a:	f002 ff85 	bl	d7028 <_Z19__fetch_global_Wirev>
   d411e:	f002 f8e9 	bl	d62f4 <_ZN7TwoWire5beginEv>
  SeeedOled.init();
   d4122:	481f      	ldr	r0, [pc, #124]	; (d41a0 <setup+0xbc>)
   d4124:	f001 f830 	bl	d5188 <_ZN9SeeedOLED4initEv>

  SeeedOled.clearDisplay();
   d4128:	481d      	ldr	r0, [pc, #116]	; (d41a0 <setup+0xbc>)
   d412a:	f001 f899 	bl	d5260 <_ZN9SeeedOLED12clearDisplayEv>
  SeeedOled.setNormalDisplay();
   d412e:	481c      	ldr	r0, [pc, #112]	; (d41a0 <setup+0xbc>)
   d4130:	f001 f8fd 	bl	d532e <_ZN9SeeedOLED16setNormalDisplayEv>
  SeeedOled.setPageMode();
   d4134:	481a      	ldr	r0, [pc, #104]	; (d41a0 <setup+0xbc>)
   d4136:	f001 f83c 	bl	d51b2 <_ZN9SeeedOLED11setPageModeEv>

  SeeedOled.setTextXY(2, 0);
   d413a:	2200      	movs	r2, #0
   d413c:	2102      	movs	r1, #2
   d413e:	4818      	ldr	r0, [pc, #96]	; (d41a0 <setup+0xbc>)
   d4140:	f001 f844 	bl	d51cc <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Particle");
   d4144:	4917      	ldr	r1, [pc, #92]	; (d41a4 <setup+0xc0>)
   d4146:	4816      	ldr	r0, [pc, #88]	; (d41a0 <setup+0xbc>)
   d4148:	f001 f8ac 	bl	d52a4 <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.setTextXY(3, 0);
   d414c:	2200      	movs	r2, #0
   d414e:	2103      	movs	r1, #3
   d4150:	4813      	ldr	r0, [pc, #76]	; (d41a0 <setup+0xbc>)
   d4152:	f001 f83b 	bl	d51cc <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Air Quality");
   d4156:	4914      	ldr	r1, [pc, #80]	; (d41a8 <setup+0xc4>)
   d4158:	4811      	ldr	r0, [pc, #68]	; (d41a0 <setup+0xbc>)
   d415a:	f001 f8a3 	bl	d52a4 <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.setTextXY(4, 0);
   d415e:	2200      	movs	r2, #0
   d4160:	2104      	movs	r1, #4
   d4162:	480f      	ldr	r0, [pc, #60]	; (d41a0 <setup+0xbc>)
   d4164:	f001 f832 	bl	d51cc <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Monitor");
   d4168:	480d      	ldr	r0, [pc, #52]	; (d41a0 <setup+0xbc>)
   d416a:	4910      	ldr	r1, [pc, #64]	; (d41ac <setup+0xc8>)
   d416c:	f001 f89a 	bl	d52a4 <_ZN9SeeedOLED9putStringEPKc>

  if (bme.begin())
   d4170:	480f      	ldr	r0, [pc, #60]	; (d41b0 <setup+0xcc>)
   d4172:	f000 fe81 	bl	d4e78 <_ZN15Adafruit_BME2805beginEv>
   d4176:	b118      	cbz	r0, d4180 <setup+0x9c>
  {
    Serial.println("BME280 Sensor ready.");
   d4178:	f002 fe16 	bl	d6da8 <_Z16_fetch_usbserialv>
   d417c:	490d      	ldr	r1, [pc, #52]	; (d41b4 <setup+0xd0>)
   d417e:	e002      	b.n	d4186 <setup+0xa2>
  }
  else
  {
    Serial.println("BME280 Sensor ERROR!");
   d4180:	f002 fe12 	bl	d6da8 <_Z16_fetch_usbserialv>
   d4184:	490c      	ldr	r1, [pc, #48]	; (d41b8 <setup+0xd4>)
   d4186:	f002 fb14 	bl	d67b2 <_ZN5Print7printlnEPKc>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d418a:	f001 fa6d 	bl	d5668 <HAL_Timer_Get_Milli_Seconds>
  }

  lastInterval = millis();
   d418e:	4b0b      	ldr	r3, [pc, #44]	; (d41bc <setup+0xd8>)
   d4190:	6018      	str	r0, [r3, #0]
   d4192:	bd08      	pop	{r3, pc}
   d4194:	2003e480 	.word	0x2003e480
   d4198:	000d9614 	.word	0x000d9614
   d419c:	000d962e 	.word	0x000d962e
   d41a0:	2003e4a0 	.word	0x2003e4a0
   d41a4:	000d9648 	.word	0x000d9648
   d41a8:	000d9651 	.word	0x000d9651
   d41ac:	000d965d 	.word	0x000d965d
   d41b0:	2003e43c 	.word	0x2003e43c
   d41b4:	000d9665 	.word	0x000d9665
   d41b8:	000d967a 	.word	0x000d967a
   d41bc:	2003e49c 	.word	0x2003e49c

000d41c0 <_Z13getAirQualityv>:
    lastInterval = millis();
  }
}

String getAirQuality()
{
   d41c0:	b538      	push	{r3, r4, r5, lr}
   d41c2:	4604      	mov	r4, r0
  int quality = aqSensor.slope();
   d41c4:	4811      	ldr	r0, [pc, #68]	; (d420c <_Z13getAirQualityv+0x4c>)
   d41c6:	f000 fb1d 	bl	d4804 <_ZN16AirQualitySensor5slopeEv>
  String qual = "None";
   d41ca:	4911      	ldr	r1, [pc, #68]	; (d4210 <_Z13getAirQualityv+0x50>)
  }
}

String getAirQuality()
{
  int quality = aqSensor.slope();
   d41cc:	4605      	mov	r5, r0
  String qual = "None";
   d41ce:	4620      	mov	r0, r4
   d41d0:	f002 fc7b 	bl	d6aca <_ZN6StringC1EPK19__FlashStringHelper>

  if (quality == AirQualitySensor::FORCE_SIGNAL)
   d41d4:	4b0f      	ldr	r3, [pc, #60]	; (d4214 <_Z13getAirQualityv+0x54>)
   d41d6:	681b      	ldr	r3, [r3, #0]
   d41d8:	429d      	cmp	r5, r3
   d41da:	d101      	bne.n	d41e0 <_Z13getAirQualityv+0x20>
  {
    qual = "Danger";
   d41dc:	490e      	ldr	r1, [pc, #56]	; (d4218 <_Z13getAirQualityv+0x58>)
   d41de:	e010      	b.n	d4202 <_Z13getAirQualityv+0x42>
  }
  else if (quality == AirQualitySensor::HIGH_POLLUTION)
   d41e0:	4b0e      	ldr	r3, [pc, #56]	; (d421c <_Z13getAirQualityv+0x5c>)
   d41e2:	681b      	ldr	r3, [r3, #0]
   d41e4:	429d      	cmp	r5, r3
   d41e6:	d101      	bne.n	d41ec <_Z13getAirQualityv+0x2c>
  {
    qual = "High Pollution";
   d41e8:	490d      	ldr	r1, [pc, #52]	; (d4220 <_Z13getAirQualityv+0x60>)
   d41ea:	e00a      	b.n	d4202 <_Z13getAirQualityv+0x42>
  }
  else if (quality == AirQualitySensor::LOW_POLLUTION)
   d41ec:	4b0d      	ldr	r3, [pc, #52]	; (d4224 <_Z13getAirQualityv+0x64>)
   d41ee:	681b      	ldr	r3, [r3, #0]
   d41f0:	429d      	cmp	r5, r3
   d41f2:	d101      	bne.n	d41f8 <_Z13getAirQualityv+0x38>
  {
    qual = "Low Pollution";
   d41f4:	490c      	ldr	r1, [pc, #48]	; (d4228 <_Z13getAirQualityv+0x68>)
   d41f6:	e004      	b.n	d4202 <_Z13getAirQualityv+0x42>
  }
  else if (quality == AirQualitySensor::FRESH_AIR)
   d41f8:	4b0c      	ldr	r3, [pc, #48]	; (d422c <_Z13getAirQualityv+0x6c>)
   d41fa:	681b      	ldr	r3, [r3, #0]
   d41fc:	429d      	cmp	r5, r3
   d41fe:	d103      	bne.n	d4208 <_Z13getAirQualityv+0x48>
  {
    qual = "Fresh Air";
   d4200:	490b      	ldr	r1, [pc, #44]	; (d4230 <_Z13getAirQualityv+0x70>)
   d4202:	4620      	mov	r0, r4
   d4204:	f002 fc8e 	bl	d6b24 <_ZN6StringaSEPKc>
  }

  return qual;
}
   d4208:	4620      	mov	r0, r4
   d420a:	bd38      	pop	{r3, r4, r5, pc}
   d420c:	2003e480 	.word	0x2003e480
   d4210:	000d968f 	.word	0x000d968f
   d4214:	000d97ac 	.word	0x000d97ac
   d4218:	000d9694 	.word	0x000d9694
   d421c:	000d97a8 	.word	0x000d97a8
   d4220:	000d969b 	.word	0x000d969b
   d4224:	000d97a0 	.word	0x000d97a0
   d4228:	000d96aa 	.word	0x000d96aa
   d422c:	000d97a4 	.word	0x000d97a4
   d4230:	000d96b8 	.word	0x000d96b8

000d4234 <_Z12getBMEValuesRiS_S_>:

int getBMEValues(int &temp, int &pressure, int &humidity)
{
   d4234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  temp = (int)bme.readTemperature();
   d4236:	4c0f      	ldr	r4, [pc, #60]	; (d4274 <_Z12getBMEValuesRiS_S_+0x40>)

  return qual;
}

int getBMEValues(int &temp, int &pressure, int &humidity)
{
   d4238:	4607      	mov	r7, r0
  temp = (int)bme.readTemperature();
   d423a:	4620      	mov	r0, r4

  return qual;
}

int getBMEValues(int &temp, int &pressure, int &humidity)
{
   d423c:	460e      	mov	r6, r1
   d423e:	4615      	mov	r5, r2
  temp = (int)bme.readTemperature();
   d4240:	f000 fe2e 	bl	d4ea0 <_ZN15Adafruit_BME28015readTemperatureEv>
   d4244:	eebd 0ac0 	vcvt.s32.f32	s0, s0
  pressure = (int)(bme.readPressure() / 100.0F);
   d4248:	4620      	mov	r0, r4
  return qual;
}

int getBMEValues(int &temp, int &pressure, int &humidity)
{
  temp = (int)bme.readTemperature();
   d424a:	ed87 0a00 	vstr	s0, [r7]
  pressure = (int)(bme.readPressure() / 100.0F);
   d424e:	f000 fe55 	bl	d4efc <_ZN15Adafruit_BME28012readPressureEv>
   d4252:	eddf 7a09 	vldr	s15, [pc, #36]	; d4278 <_Z12getBMEValuesRiS_S_+0x44>
   d4256:	ee80 0a27 	vdiv.f32	s0, s0, s15
  humidity = (int)bme.readHumidity();
   d425a:	4620      	mov	r0, r4
}

int getBMEValues(int &temp, int &pressure, int &humidity)
{
  temp = (int)bme.readTemperature();
  pressure = (int)(bme.readPressure() / 100.0F);
   d425c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d4260:	ed86 0a00 	vstr	s0, [r6]
  humidity = (int)bme.readHumidity();
   d4264:	f000 ff28 	bl	d50b8 <_ZN15Adafruit_BME28012readHumidityEv>
   d4268:	eebd 0ac0 	vcvt.s32.f32	s0, s0

  return 1;
}
   d426c:	2001      	movs	r0, #1

int getBMEValues(int &temp, int &pressure, int &humidity)
{
  temp = (int)bme.readTemperature();
  pressure = (int)(bme.readPressure() / 100.0F);
  humidity = (int)bme.readHumidity();
   d426e:	ed85 0a00 	vstr	s0, [r5]

  return 1;
}
   d4272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4274:	2003e43c 	.word	0x2003e43c
   d4278:	42c80000 	.word	0x42c80000
   d427c:	00000000 	.word	0x00000000

000d4280 <_Z21getDustSensorReadingsv>:

void getDustSensorReadings()
{
   d4280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4284:	ed2d 8b02 	vpush	{d8}
  // This particular dust sensor returns 0s often, so let's filter them out by making sure we only
  // capture and use non-zero LPO values for our calculations once we get a good reading.
  if (lowpulseoccupancy == 0)
   d4288:	4c4d      	ldr	r4, [pc, #308]	; (d43c0 <_Z21getDustSensorReadingsv+0x140>)
   d428a:	4b4e      	ldr	r3, [pc, #312]	; (d43c4 <_Z21getDustSensorReadingsv+0x144>)
   d428c:	6822      	ldr	r2, [r4, #0]

  return 1;
}

void getDustSensorReadings()
{
   d428e:	b084      	sub	sp, #16
  // This particular dust sensor returns 0s often, so let's filter them out by making sure we only
  // capture and use non-zero LPO values for our calculations once we get a good reading.
  if (lowpulseoccupancy == 0)
   d4290:	b912      	cbnz	r2, d4298 <_Z21getDustSensorReadingsv+0x18>
  {
    lowpulseoccupancy = last_lpo;
   d4292:	681b      	ldr	r3, [r3, #0]
   d4294:	6023      	str	r3, [r4, #0]
   d4296:	e000      	b.n	d429a <_Z21getDustSensorReadingsv+0x1a>
  }
  else
  {
    last_lpo = lowpulseoccupancy;
   d4298:	601a      	str	r2, [r3, #0]
  }

  ratio = lowpulseoccupancy / (SENSOR_READING_INTERVAL * 10.0);                   // Integer percentage 0=>100
   d429a:	6820      	ldr	r0, [r4, #0]
   d429c:	4d4a      	ldr	r5, [pc, #296]	; (d43c8 <_Z21getDustSensorReadingsv+0x148>)
  concentration = 1.1 * pow(ratio, 3) - 3.8 * pow(ratio, 2) + 520 * ratio + 0.62; // using spec sheet curve
   d429e:	f8df a13c 	ldr.w	sl, [pc, #316]	; d43dc <_Z21getDustSensorReadingsv+0x15c>
  else
  {
    last_lpo = lowpulseoccupancy;
  }

  ratio = lowpulseoccupancy / (SENSOR_READING_INTERVAL * 10.0);                   // Integer percentage 0=>100
   d42a2:	f004 faef 	bl	d8884 <__aeabi_ui2d>
   d42a6:	a33c      	add	r3, pc, #240	; (adr r3, d4398 <_Z21getDustSensorReadingsv+0x118>)
   d42a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d42ac:	f004 fc8a 	bl	d8bc4 <__aeabi_ddiv>
   d42b0:	f004 fe0e 	bl	d8ed0 <__aeabi_d2f>
   d42b4:	6028      	str	r0, [r5, #0]
  concentration = 1.1 * pow(ratio, 3) - 3.8 * pow(ratio, 2) + 520 * ratio + 0.62; // using spec sheet curve
   d42b6:	f004 fb07 	bl	d88c8 <__aeabi_f2d>
   d42ba:	ed9f 1b39 	vldr	d1, [pc, #228]	; d43a0 <_Z21getDustSensorReadingsv+0x120>
   d42be:	ec41 0b10 	vmov	d0, r0, r1
   d42c2:	f003 f865 	bl	d7390 <pow>
   d42c6:	ed95 8a00 	vldr	s16, [r5]
   d42ca:	ee18 0a10 	vmov	r0, s16
   d42ce:	ed8d 0b02 	vstr	d0, [sp, #8]
   d42d2:	f004 faf9 	bl	d88c8 <__aeabi_f2d>
   d42d6:	ed9d 0b02 	vldr	d0, [sp, #8]
   d42da:	4680      	mov	r8, r0
   d42dc:	4689      	mov	r9, r1
   d42de:	a332      	add	r3, pc, #200	; (adr r3, d43a8 <_Z21getDustSensorReadingsv+0x128>)
   d42e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d42e4:	ec51 0b10 	vmov	r0, r1, d0
   d42e8:	f004 fb42 	bl	d8970 <__aeabi_dmul>
   d42ec:	4642      	mov	r2, r8
   d42ee:	4606      	mov	r6, r0
   d42f0:	460f      	mov	r7, r1
   d42f2:	464b      	mov	r3, r9
   d42f4:	4640      	mov	r0, r8
   d42f6:	4649      	mov	r1, r9
   d42f8:	f004 fb3a 	bl	d8970 <__aeabi_dmul>
   d42fc:	a32c      	add	r3, pc, #176	; (adr r3, d43b0 <_Z21getDustSensorReadingsv+0x130>)
   d42fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4302:	f004 fb35 	bl	d8970 <__aeabi_dmul>
   d4306:	4602      	mov	r2, r0
   d4308:	460b      	mov	r3, r1
   d430a:	4630      	mov	r0, r6
   d430c:	4639      	mov	r1, r7
   d430e:	f004 f97b 	bl	d8608 <__aeabi_dsub>
   d4312:	eddf 7a2e 	vldr	s15, [pc, #184]	; d43cc <_Z21getDustSensorReadingsv+0x14c>
   d4316:	ee68 7a27 	vmul.f32	s15, s16, s15
   d431a:	4606      	mov	r6, r0
   d431c:	ee17 0a90 	vmov	r0, s15
   d4320:	460f      	mov	r7, r1
   d4322:	f004 fad1 	bl	d88c8 <__aeabi_f2d>
   d4326:	4602      	mov	r2, r0
   d4328:	460b      	mov	r3, r1
   d432a:	4630      	mov	r0, r6
   d432c:	4639      	mov	r1, r7
   d432e:	f004 f96d 	bl	d860c <__adddf3>
   d4332:	a321      	add	r3, pc, #132	; (adr r3, d43b8 <_Z21getDustSensorReadingsv+0x138>)
   d4334:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4338:	f004 f968 	bl	d860c <__adddf3>
   d433c:	f004 fdc8 	bl	d8ed0 <__aeabi_d2f>
   d4340:	f8ca 0000 	str.w	r0, [sl]

  Serial.printlnf("LPO: %d", lowpulseoccupancy);
   d4344:	f002 fd30 	bl	d6da8 <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d4348:	6823      	ldr	r3, [r4, #0]
   d434a:	4a21      	ldr	r2, [pc, #132]	; (d43d0 <_Z21getDustSensorReadingsv+0x150>)
   d434c:	2101      	movs	r1, #1
   d434e:	f002 fa5a 	bl	d6806 <_ZN5Print11printf_implEbPKcz>
  Serial.printlnf("Ratio: %f%%", ratio);
   d4352:	f002 fd29 	bl	d6da8 <_Z16_fetch_usbserialv>
   d4356:	4604      	mov	r4, r0
   d4358:	6828      	ldr	r0, [r5, #0]
   d435a:	f004 fab5 	bl	d88c8 <__aeabi_f2d>
   d435e:	4a1d      	ldr	r2, [pc, #116]	; (d43d4 <_Z21getDustSensorReadingsv+0x154>)
   d4360:	e9cd 0100 	strd	r0, r1, [sp]
   d4364:	2101      	movs	r1, #1
   d4366:	4620      	mov	r0, r4
   d4368:	f002 fa4d 	bl	d6806 <_ZN5Print11printf_implEbPKcz>
  Serial.printlnf("Concentration: %f pcs/L", concentration);
   d436c:	f002 fd1c 	bl	d6da8 <_Z16_fetch_usbserialv>
   d4370:	4604      	mov	r4, r0
   d4372:	f8da 0000 	ldr.w	r0, [sl]
   d4376:	f004 faa7 	bl	d88c8 <__aeabi_f2d>
   d437a:	4a17      	ldr	r2, [pc, #92]	; (d43d8 <_Z21getDustSensorReadingsv+0x158>)
   d437c:	e9cd 0100 	strd	r0, r1, [sp]
   d4380:	2101      	movs	r1, #1
   d4382:	4620      	mov	r0, r4
   d4384:	f002 fa3f 	bl	d6806 <_ZN5Print11printf_implEbPKcz>
}
   d4388:	b004      	add	sp, #16
   d438a:	ecbd 8b02 	vpop	{d8}
   d438e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4392:	bf00      	nop
   d4394:	f3af 8000 	nop.w
   d4398:	00000000 	.word	0x00000000
   d439c:	41124f80 	.word	0x41124f80
   d43a0:	00000000 	.word	0x00000000
   d43a4:	40080000 	.word	0x40080000
   d43a8:	9999999a 	.word	0x9999999a
   d43ac:	3ff19999 	.word	0x3ff19999
   d43b0:	66666666 	.word	0x66666666
   d43b4:	400e6666 	.word	0x400e6666
   d43b8:	3d70a3d7 	.word	0x3d70a3d7
   d43bc:	3fe3d70a 	.word	0x3fe3d70a
   d43c0:	2003e428 	.word	0x2003e428
   d43c4:	2003e430 	.word	0x2003e430
   d43c8:	2003e438 	.word	0x2003e438
   d43cc:	44020000 	.word	0x44020000
   d43d0:	000d96c2 	.word	0x000d96c2
   d43d4:	000d96ca 	.word	0x000d96ca
   d43d8:	000d96d6 	.word	0x000d96d6
   d43dc:	2003e424 	.word	0x2003e424

000d43e0 <_Z13updateDisplayiii6String>:

  Particle.publish("env-vals", jw.getBuffer(), PRIVATE);
}

void updateDisplay(int temp, int humidity, int pressure, String airQuality)
{
   d43e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d43e2:	461f      	mov	r7, r3
   d43e4:	4606      	mov	r6, r0
  SeeedOled.clearDisplay();
   d43e6:	4832      	ldr	r0, [pc, #200]	; (d44b0 <_Z13updateDisplayiii6String+0xd0>)

  Particle.publish("env-vals", jw.getBuffer(), PRIVATE);
}

void updateDisplay(int temp, int humidity, int pressure, String airQuality)
{
   d43e8:	4614      	mov	r4, r2
   d43ea:	460d      	mov	r5, r1
  SeeedOled.clearDisplay();
   d43ec:	f000 ff38 	bl	d5260 <_ZN9SeeedOLED12clearDisplayEv>

  SeeedOled.setTextXY(0, 3);
   d43f0:	2203      	movs	r2, #3
   d43f2:	2100      	movs	r1, #0
   d43f4:	482e      	ldr	r0, [pc, #184]	; (d44b0 <_Z13updateDisplayiii6String+0xd0>)
   d43f6:	f000 fee9 	bl	d51cc <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString(airQuality);
   d43fa:	6839      	ldr	r1, [r7, #0]
   d43fc:	482c      	ldr	r0, [pc, #176]	; (d44b0 <_Z13updateDisplayiii6String+0xd0>)
   d43fe:	f000 ff51 	bl	d52a4 <_ZN9SeeedOLED9putStringEPKc>

  SeeedOled.setTextXY(2, 0);
   d4402:	2200      	movs	r2, #0
   d4404:	2102      	movs	r1, #2
   d4406:	482a      	ldr	r0, [pc, #168]	; (d44b0 <_Z13updateDisplayiii6String+0xd0>)
   d4408:	f000 fee0 	bl	d51cc <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Temp: ");
   d440c:	4929      	ldr	r1, [pc, #164]	; (d44b4 <_Z13updateDisplayiii6String+0xd4>)
   d440e:	4828      	ldr	r0, [pc, #160]	; (d44b0 <_Z13updateDisplayiii6String+0xd0>)
   d4410:	f000 ff48 	bl	d52a4 <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.putNumber(temp);
   d4414:	4631      	mov	r1, r6
   d4416:	4826      	ldr	r0, [pc, #152]	; (d44b0 <_Z13updateDisplayiii6String+0xd0>)
   d4418:	f000 ff51 	bl	d52be <_ZN9SeeedOLED9putNumberEl>
  SeeedOled.putString("C");
   d441c:	4926      	ldr	r1, [pc, #152]	; (d44b8 <_Z13updateDisplayiii6String+0xd8>)
   d441e:	4824      	ldr	r0, [pc, #144]	; (d44b0 <_Z13updateDisplayiii6String+0xd0>)
   d4420:	f000 ff40 	bl	d52a4 <_ZN9SeeedOLED9putStringEPKc>

  SeeedOled.setTextXY(3, 0);
   d4424:	2200      	movs	r2, #0
   d4426:	2103      	movs	r1, #3
   d4428:	4821      	ldr	r0, [pc, #132]	; (d44b0 <_Z13updateDisplayiii6String+0xd0>)
   d442a:	f000 fecf 	bl	d51cc <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Humidity: ");
   d442e:	4923      	ldr	r1, [pc, #140]	; (d44bc <_Z13updateDisplayiii6String+0xdc>)
   d4430:	481f      	ldr	r0, [pc, #124]	; (d44b0 <_Z13updateDisplayiii6String+0xd0>)
   d4432:	f000 ff37 	bl	d52a4 <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.putNumber(humidity);
   d4436:	4629      	mov	r1, r5
   d4438:	481d      	ldr	r0, [pc, #116]	; (d44b0 <_Z13updateDisplayiii6String+0xd0>)
   d443a:	f000 ff40 	bl	d52be <_ZN9SeeedOLED9putNumberEl>
  SeeedOled.putString("%");
   d443e:	4920      	ldr	r1, [pc, #128]	; (d44c0 <_Z13updateDisplayiii6String+0xe0>)
   d4440:	481b      	ldr	r0, [pc, #108]	; (d44b0 <_Z13updateDisplayiii6String+0xd0>)
   d4442:	f000 ff2f 	bl	d52a4 <_ZN9SeeedOLED9putStringEPKc>

  SeeedOled.setTextXY(4, 0);
   d4446:	2200      	movs	r2, #0
   d4448:	2104      	movs	r1, #4
   d444a:	4819      	ldr	r0, [pc, #100]	; (d44b0 <_Z13updateDisplayiii6String+0xd0>)
   d444c:	f000 febe 	bl	d51cc <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Press: ");
   d4450:	491c      	ldr	r1, [pc, #112]	; (d44c4 <_Z13updateDisplayiii6String+0xe4>)
   d4452:	4817      	ldr	r0, [pc, #92]	; (d44b0 <_Z13updateDisplayiii6String+0xd0>)
   d4454:	f000 ff26 	bl	d52a4 <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.putNumber(pressure);
   d4458:	4621      	mov	r1, r4
   d445a:	4815      	ldr	r0, [pc, #84]	; (d44b0 <_Z13updateDisplayiii6String+0xd0>)
  SeeedOled.putString(" hPa");

  if (concentration > 1)
   d445c:	4c1a      	ldr	r4, [pc, #104]	; (d44c8 <_Z13updateDisplayiii6String+0xe8>)
  SeeedOled.putNumber(humidity);
  SeeedOled.putString("%");

  SeeedOled.setTextXY(4, 0);
  SeeedOled.putString("Press: ");
  SeeedOled.putNumber(pressure);
   d445e:	f000 ff2e 	bl	d52be <_ZN9SeeedOLED9putNumberEl>
  SeeedOled.putString(" hPa");
   d4462:	491a      	ldr	r1, [pc, #104]	; (d44cc <_Z13updateDisplayiii6String+0xec>)
   d4464:	4812      	ldr	r0, [pc, #72]	; (d44b0 <_Z13updateDisplayiii6String+0xd0>)
   d4466:	f000 ff1d 	bl	d52a4 <_ZN9SeeedOLED9putStringEPKc>

  if (concentration > 1)
   d446a:	ed94 7a00 	vldr	s14, [r4]
   d446e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   d4472:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d4476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d447a:	dd17      	ble.n	d44ac <_Z13updateDisplayiii6String+0xcc>
  {
    SeeedOled.setTextXY(5, 0);
   d447c:	2200      	movs	r2, #0
   d447e:	2105      	movs	r1, #5
   d4480:	480b      	ldr	r0, [pc, #44]	; (d44b0 <_Z13updateDisplayiii6String+0xd0>)
   d4482:	f000 fea3 	bl	d51cc <_ZN9SeeedOLED9setTextXYEhh>
    SeeedOled.putString("Dust: ");
   d4486:	4912      	ldr	r1, [pc, #72]	; (d44d0 <_Z13updateDisplayiii6String+0xf0>)
   d4488:	4809      	ldr	r0, [pc, #36]	; (d44b0 <_Z13updateDisplayiii6String+0xd0>)
   d448a:	f000 ff0b 	bl	d52a4 <_ZN9SeeedOLED9putStringEPKc>
    SeeedOled.putNumber(concentration); // Will cast our float to an int to make it more compact
   d448e:	edd4 7a00 	vldr	s15, [r4]
   d4492:	4807      	ldr	r0, [pc, #28]	; (d44b0 <_Z13updateDisplayiii6String+0xd0>)
   d4494:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d4498:	ee17 1a90 	vmov	r1, s15
   d449c:	f000 ff0f 	bl	d52be <_ZN9SeeedOLED9putNumberEl>
    SeeedOled.putString(" pcs/L");
   d44a0:	490c      	ldr	r1, [pc, #48]	; (d44d4 <_Z13updateDisplayiii6String+0xf4>)
   d44a2:	4803      	ldr	r0, [pc, #12]	; (d44b0 <_Z13updateDisplayiii6String+0xd0>)
  }
   d44a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  if (concentration > 1)
  {
    SeeedOled.setTextXY(5, 0);
    SeeedOled.putString("Dust: ");
    SeeedOled.putNumber(concentration); // Will cast our float to an int to make it more compact
    SeeedOled.putString(" pcs/L");
   d44a8:	f000 befc 	b.w	d52a4 <_ZN9SeeedOLED9putStringEPKc>
   d44ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d44ae:	bf00      	nop
   d44b0:	2003e4a0 	.word	0x2003e4a0
   d44b4:	000d96ee 	.word	0x000d96ee
   d44b8:	000d96f5 	.word	0x000d96f5
   d44bc:	000d96f7 	.word	0x000d96f7
   d44c0:	000d96d4 	.word	0x000d96d4
   d44c4:	000d9702 	.word	0x000d9702
   d44c8:	2003e424 	.word	0x2003e424
   d44cc:	000d970a 	.word	0x000d970a
   d44d0:	000d970f 	.word	0x000d970f
   d44d4:	000d96e7 	.word	0x000d96e7

000d44d8 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>:
	 *
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
   d44d8:	b570      	push	{r4, r5, r6, lr}
   d44da:	4604      	mov	r4, r0
   d44dc:	460e      	mov	r6, r1
   d44de:	4615      	mov	r5, r2
		insertCheckSeparator();
   d44e0:	f001 f84a 	bl	d5578 <_ZN10JsonWriter20insertCheckSeparatorEv>
	 * @brief Inserts a quoted string value. This escapes special characters and encodes utf-8.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const char *value) { insertString(value, true); }
   d44e4:	2201      	movs	r2, #1
   d44e6:	4631      	mov	r1, r6
   d44e8:	4620      	mov	r0, r4
   d44ea:	f000 ffb9 	bl	d5460 <_ZN10JsonWriter12insertStringEPKcb>
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
   d44ee:	4620      	mov	r0, r4
   d44f0:	213a      	movs	r1, #58	; 0x3a
   d44f2:	f000 ff69 	bl	d53c8 <_ZN10JsonWriter10insertCharEc>
	 * @brief Inserts an integer value.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separators between items.
	 */
	void insertValue(int value) { insertsprintf("%d", value); }
   d44f6:	462a      	mov	r2, r5
   d44f8:	4620      	mov	r0, r4
   d44fa:	4902      	ldr	r1, [pc, #8]	; (d4504 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_+0x2c>)
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
		insertValue(value);
	}
   d44fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	 * @brief Inserts an integer value.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separators between items.
	 */
	void insertValue(int value) { insertsprintf("%d", value); }
   d4500:	f000 bfa1 	b.w	d5446 <_ZN10JsonWriter13insertsprintfEPKcz>
   d4504:	000d96c7 	.word	0x000d96c7

000d4508 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>:
	 *
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
   d4508:	b538      	push	{r3, r4, r5, lr}
   d450a:	4604      	mov	r4, r0
   d450c:	ed2d 8b02 	vpush	{d8}
   d4510:	460d      	mov	r5, r1
   d4512:	eeb0 8a40 	vmov.f32	s16, s0
		insertCheckSeparator();
   d4516:	f001 f82f 	bl	d5578 <_ZN10JsonWriter20insertCheckSeparatorEv>
	 * @brief Inserts a quoted string value. This escapes special characters and encodes utf-8.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const char *value) { insertString(value, true); }
   d451a:	4629      	mov	r1, r5
   d451c:	4620      	mov	r0, r4
   d451e:	2201      	movs	r2, #1
   d4520:	f000 ff9e 	bl	d5460 <_ZN10JsonWriter12insertStringEPKcb>
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
   d4524:	4620      	mov	r0, r4
   d4526:	213a      	movs	r1, #58	; 0x3a
   d4528:	f000 ff4e 	bl	d53c8 <_ZN10JsonWriter10insertCharEc>
		insertValue(value);
   d452c:	eeb0 0a48 	vmov.f32	s0, s16
	}
   d4530:	ecbd 8b02 	vpop	{d8}
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
		insertValue(value);
   d4534:	4620      	mov	r0, r4
	}
   d4536:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
		insertValue(value);
   d453a:	f001 b841 	b.w	d55c0 <_ZN10JsonWriter11insertValueEf>
	...

000d4540 <_Z18createEventPayloadiii6String>:
  Serial.printlnf("Ratio: %f%%", ratio);
  Serial.printlnf("Concentration: %f pcs/L", concentration);
}

void createEventPayload(int temp, int humidity, int pressure, String airQuality)
{
   d4540:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4542:	b0d5      	sub	sp, #340	; 0x154
   d4544:	4607      	mov	r7, r0
   d4546:	460e      	mov	r6, r1
   d4548:	4615      	mov	r5, r2
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
public:
	explicit JsonWriterStatic() : JsonWriter(staticBuffer, BUFFER_SIZE) {};
   d454a:	a914      	add	r1, sp, #80	; 0x50
   d454c:	f44f 7280 	mov.w	r2, #256	; 0x100
   d4550:	a808      	add	r0, sp, #32
   d4552:	461c      	mov	r4, r3
   d4554:	f000 ff26 	bl	d53a4 <_ZN10JsonWriterC1EPcj>
   d4558:	4b3a      	ldr	r3, [pc, #232]	; (d4644 <_Z18createEventPayloadiii6String+0x104>)
   d455a:	9308      	str	r3, [sp, #32]
	void init();

	/**
	 * @brief Start a new JSON object. Make sure you finish it with finishObjectOrArray()
	 */
	bool startObject() { return startObjectOrArray('{', '}'); };
   d455c:	227d      	movs	r2, #125	; 0x7d
   d455e:	217b      	movs	r1, #123	; 0x7b
   d4560:	a808      	add	r0, sp, #32
   d4562:	f001 f814 	bl	d558e <_ZN10JsonWriter18startObjectOrArrayEcc>
  JsonWriterStatic<256> jw;
  {
    JsonWriterAutoObject obj(&jw);

    jw.insertKeyValue("temp", temp);
   d4566:	463a      	mov	r2, r7
   d4568:	4937      	ldr	r1, [pc, #220]	; (d4648 <_Z18createEventPayloadiii6String+0x108>)
   d456a:	a808      	add	r0, sp, #32
   d456c:	f7ff ffb4 	bl	d44d8 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
    jw.insertKeyValue("humidity", humidity);
   d4570:	4632      	mov	r2, r6
   d4572:	4936      	ldr	r1, [pc, #216]	; (d464c <_Z18createEventPayloadiii6String+0x10c>)
   d4574:	a808      	add	r0, sp, #32
   d4576:	f7ff ffaf 	bl	d44d8 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
    jw.insertKeyValue("pressure", pressure);
   d457a:	462a      	mov	r2, r5
   d457c:	4934      	ldr	r1, [pc, #208]	; (d4650 <_Z18createEventPayloadiii6String+0x110>)
   d457e:	a808      	add	r0, sp, #32
   d4580:	f7ff ffaa 	bl	d44d8 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
    jw.insertKeyValue("air-quality", airQuality);
   d4584:	4621      	mov	r1, r4
   d4586:	a804      	add	r0, sp, #16
   d4588:	f002 fac1 	bl	d6b0e <_ZN6StringC1ERKS_>
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
   d458c:	a808      	add	r0, sp, #32
   d458e:	f000 fff3 	bl	d5578 <_ZN10JsonWriter20insertCheckSeparatorEv>
	 * @brief Inserts a quoted string value. This escapes special characters and encodes utf-8.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const char *value) { insertString(value, true); }
   d4592:	2201      	movs	r2, #1
   d4594:	492f      	ldr	r1, [pc, #188]	; (d4654 <_Z18createEventPayloadiii6String+0x114>)
   d4596:	a808      	add	r0, sp, #32
   d4598:	f000 ff62 	bl	d5460 <_ZN10JsonWriter12insertStringEPKcb>
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
   d459c:	213a      	movs	r1, #58	; 0x3a
   d459e:	a808      	add	r0, sp, #32
   d45a0:	f000 ff12 	bl	d53c8 <_ZN10JsonWriter10insertCharEc>
	 * See also the version that takes a plain const char *.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const String &value) { insertString(value.c_str(), true); }
   d45a4:	2201      	movs	r2, #1
   d45a6:	9904      	ldr	r1, [sp, #16]
   d45a8:	a808      	add	r0, sp, #32
   d45aa:	f000 ff59 	bl	d5460 <_ZN10JsonWriter12insertStringEPKcb>
   d45ae:	a804      	add	r0, sp, #16
   d45b0:	f002 fa44 	bl	d6a3c <_ZN6StringD1Ev>

    if (lowpulseoccupancy > 0)
   d45b4:	4b28      	ldr	r3, [pc, #160]	; (d4658 <_Z18createEventPayloadiii6String+0x118>)
   d45b6:	681c      	ldr	r4, [r3, #0]
   d45b8:	b1f4      	cbz	r4, d45f8 <_Z18createEventPayloadiii6String+0xb8>
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
   d45ba:	a808      	add	r0, sp, #32
   d45bc:	f000 ffdc 	bl	d5578 <_ZN10JsonWriter20insertCheckSeparatorEv>
	 * @brief Inserts a quoted string value. This escapes special characters and encodes utf-8.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const char *value) { insertString(value, true); }
   d45c0:	2201      	movs	r2, #1
   d45c2:	4926      	ldr	r1, [pc, #152]	; (d465c <_Z18createEventPayloadiii6String+0x11c>)
   d45c4:	a808      	add	r0, sp, #32
   d45c6:	f000 ff4b 	bl	d5460 <_ZN10JsonWriter12insertStringEPKcb>
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
   d45ca:	213a      	movs	r1, #58	; 0x3a
   d45cc:	a808      	add	r0, sp, #32
   d45ce:	f000 fefb 	bl	d53c8 <_ZN10JsonWriter10insertCharEc>
	 * @brief Inserts an unsigned long integer value.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separators between items.
	 */
	void insertValue(unsigned long value) { insertsprintf("%lu", value); }
   d45d2:	4622      	mov	r2, r4
   d45d4:	4922      	ldr	r1, [pc, #136]	; (d4660 <_Z18createEventPayloadiii6String+0x120>)
   d45d6:	a808      	add	r0, sp, #32
   d45d8:	f000 ff35 	bl	d5446 <_ZN10JsonWriter13insertsprintfEPKcz>
    {
      jw.insertKeyValue("dust-lpo", lowpulseoccupancy);
      jw.insertKeyValue("dust-ratio", ratio);
   d45dc:	4b21      	ldr	r3, [pc, #132]	; (d4664 <_Z18createEventPayloadiii6String+0x124>)
   d45de:	4922      	ldr	r1, [pc, #136]	; (d4668 <_Z18createEventPayloadiii6String+0x128>)
   d45e0:	ed93 0a00 	vldr	s0, [r3]
   d45e4:	a808      	add	r0, sp, #32
   d45e6:	f7ff ff8f 	bl	d4508 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
      jw.insertKeyValue("dust-concentration", concentration);
   d45ea:	4b20      	ldr	r3, [pc, #128]	; (d466c <_Z18createEventPayloadiii6String+0x12c>)
   d45ec:	4920      	ldr	r1, [pc, #128]	; (d4670 <_Z18createEventPayloadiii6String+0x130>)
   d45ee:	ed93 0a00 	vldr	s0, [r3]
   d45f2:	a808      	add	r0, sp, #32
   d45f4:	f7ff ff88 	bl	d4508 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>

	/**
	 * @brief End the object
	 */
	~JsonWriterAutoObject() {
		jw->finishObjectOrArray();
   d45f8:	a808      	add	r0, sp, #32
   d45fa:	f000 fef3 	bl	d53e4 <_ZN10JsonWriter19finishObjectOrArrayEv>
   d45fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d4600:	9303      	str	r3, [sp, #12]
   d4602:	4b1c      	ldr	r3, [pc, #112]	; (d4674 <_Z18createEventPayloadiii6String+0x134>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4604:	9a03      	ldr	r2, [sp, #12]
   d4606:	781b      	ldrb	r3, [r3, #0]
   d4608:	f88d 3000 	strb.w	r3, [sp]
   d460c:	491a      	ldr	r1, [pc, #104]	; (d4678 <_Z18createEventPayloadiii6String+0x138>)
   d460e:	233c      	movs	r3, #60	; 0x3c
   d4610:	a804      	add	r0, sp, #16
   d4612:	f001 fc71 	bl	d5ef8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4616:	9c05      	ldr	r4, [sp, #20]
   d4618:	b17c      	cbz	r4, d463a <_Z18createEventPayloadiii6String+0xfa>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d461a:	6863      	ldr	r3, [r4, #4]
   d461c:	3b01      	subs	r3, #1
   d461e:	6063      	str	r3, [r4, #4]
   d4620:	b95b      	cbnz	r3, d463a <_Z18createEventPayloadiii6String+0xfa>
        {
          _M_dispose();
   d4622:	6823      	ldr	r3, [r4, #0]
   d4624:	4620      	mov	r0, r4
   d4626:	689b      	ldr	r3, [r3, #8]
   d4628:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d462a:	68a3      	ldr	r3, [r4, #8]
   d462c:	3b01      	subs	r3, #1
   d462e:	60a3      	str	r3, [r4, #8]
   d4630:	b91b      	cbnz	r3, d463a <_Z18createEventPayloadiii6String+0xfa>
            _M_destroy();
   d4632:	6823      	ldr	r3, [r4, #0]
   d4634:	4620      	mov	r0, r4
   d4636:	68db      	ldr	r3, [r3, #12]
   d4638:	4798      	blx	r3
  Serial.printlnf("Concentration: %f pcs/L", concentration);
}

void createEventPayload(int temp, int humidity, int pressure, String airQuality)
{
  JsonWriterStatic<256> jw;
   d463a:	a808      	add	r0, sp, #32
   d463c:	f7ff fd3c 	bl	d40b8 <_ZN16JsonWriterStaticILj256EED1Ev>
      jw.insertKeyValue("dust-concentration", concentration);
    }
  }

  Particle.publish("env-vals", jw.getBuffer(), PRIVATE);
}
   d4640:	b055      	add	sp, #340	; 0x154
   d4642:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4644:	000d960c 	.word	0x000d960c
   d4648:	000d9716 	.word	0x000d9716
   d464c:	000d971b 	.word	0x000d971b
   d4650:	000d9724 	.word	0x000d9724
   d4654:	000d972d 	.word	0x000d972d
   d4658:	2003e428 	.word	0x2003e428
   d465c:	000d9739 	.word	0x000d9739
   d4660:	000d9742 	.word	0x000d9742
   d4664:	2003e438 	.word	0x2003e438
   d4668:	000d9746 	.word	0x000d9746
   d466c:	2003e424 	.word	0x2003e424
   d4670:	000d9751 	.word	0x000d9751
   d4674:	2003e434 	.word	0x2003e434
   d4678:	000d9764 	.word	0x000d9764

000d467c <loop>:

  lastInterval = millis();
}

void loop()
{
   d467c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int temp, pressure, humidity;

  duration = pulseIn(DUST_SENSOR_PIN, LOW);
   d4680:	2100      	movs	r1, #0

  lastInterval = millis();
}

void loop()
{
   d4682:	b08c      	sub	sp, #48	; 0x30
  int temp, pressure, humidity;

  duration = pulseIn(DUST_SENSOR_PIN, LOW);
   d4684:	2004      	movs	r0, #4
   d4686:	f002 fcb3 	bl	d6ff0 <pulseIn>
  lowpulseoccupancy = lowpulseoccupancy + duration;
   d468a:	4c31      	ldr	r4, [pc, #196]	; (d4750 <loop+0xd4>)

void loop()
{
  int temp, pressure, humidity;

  duration = pulseIn(DUST_SENSOR_PIN, LOW);
   d468c:	4b31      	ldr	r3, [pc, #196]	; (d4754 <loop+0xd8>)
  lowpulseoccupancy = lowpulseoccupancy + duration;

  if ((millis() - lastInterval) > SENSOR_READING_INTERVAL)
   d468e:	4d32      	ldr	r5, [pc, #200]	; (d4758 <loop+0xdc>)

void loop()
{
  int temp, pressure, humidity;

  duration = pulseIn(DUST_SENSOR_PIN, LOW);
   d4690:	6018      	str	r0, [r3, #0]
  lowpulseoccupancy = lowpulseoccupancy + duration;
   d4692:	6823      	ldr	r3, [r4, #0]
   d4694:	4418      	add	r0, r3
   d4696:	6020      	str	r0, [r4, #0]
   d4698:	f000 ffe6 	bl	d5668 <HAL_Timer_Get_Milli_Seconds>

  if ((millis() - lastInterval) > SENSOR_READING_INTERVAL)
   d469c:	682b      	ldr	r3, [r5, #0]
   d469e:	1ac0      	subs	r0, r0, r3
   d46a0:	f247 5330 	movw	r3, #30000	; 0x7530
   d46a4:	4298      	cmp	r0, r3
   d46a6:	d94f      	bls.n	d4748 <loop+0xcc>
  {
    String quality = getAirQuality();
   d46a8:	a804      	add	r0, sp, #16
   d46aa:	f7ff fd89 	bl	d41c0 <_Z13getAirQualityv>
    Serial.printlnf("Air Quality: %s", quality.c_str());
   d46ae:	f002 fb7b 	bl	d6da8 <_Z16_fetch_usbserialv>
   d46b2:	9b04      	ldr	r3, [sp, #16]
   d46b4:	4a29      	ldr	r2, [pc, #164]	; (d475c <loop+0xe0>)
   d46b6:	2101      	movs	r1, #1
   d46b8:	f002 f8a5 	bl	d6806 <_ZN5Print11printf_implEbPKcz>

    getBMEValues(temp, pressure, humidity);
   d46bc:	aa03      	add	r2, sp, #12
   d46be:	a902      	add	r1, sp, #8
   d46c0:	a801      	add	r0, sp, #4
   d46c2:	f7ff fdb7 	bl	d4234 <_Z12getBMEValuesRiS_S_>
    Serial.printlnf("Temp: %d", temp);
   d46c6:	f002 fb6f 	bl	d6da8 <_Z16_fetch_usbserialv>
   d46ca:	9b01      	ldr	r3, [sp, #4]
   d46cc:	4a24      	ldr	r2, [pc, #144]	; (d4760 <loop+0xe4>)
   d46ce:	2101      	movs	r1, #1
   d46d0:	f002 f899 	bl	d6806 <_ZN5Print11printf_implEbPKcz>
    Serial.printlnf("Pressure: %d", pressure);
   d46d4:	f002 fb68 	bl	d6da8 <_Z16_fetch_usbserialv>
   d46d8:	9b02      	ldr	r3, [sp, #8]
   d46da:	4a22      	ldr	r2, [pc, #136]	; (d4764 <loop+0xe8>)
   d46dc:	2101      	movs	r1, #1
   d46de:	f002 f892 	bl	d6806 <_ZN5Print11printf_implEbPKcz>
    Serial.printlnf("Humidity: %d", humidity);
   d46e2:	f002 fb61 	bl	d6da8 <_Z16_fetch_usbserialv>
   d46e6:	9b03      	ldr	r3, [sp, #12]
   d46e8:	4a1f      	ldr	r2, [pc, #124]	; (d4768 <loop+0xec>)
   d46ea:	2101      	movs	r1, #1
   d46ec:	f002 f88b 	bl	d6806 <_ZN5Print11printf_implEbPKcz>

    getDustSensorReadings();
   d46f0:	f7ff fdc6 	bl	d4280 <_Z21getDustSensorReadingsv>

    updateDisplay(temp, humidity, pressure, quality);
   d46f4:	9e01      	ldr	r6, [sp, #4]
   d46f6:	9f03      	ldr	r7, [sp, #12]
   d46f8:	f8dd 8008 	ldr.w	r8, [sp, #8]
   d46fc:	a904      	add	r1, sp, #16
   d46fe:	a808      	add	r0, sp, #32
   d4700:	f002 fa05 	bl	d6b0e <_ZN6StringC1ERKS_>
   d4704:	4642      	mov	r2, r8
   d4706:	ab08      	add	r3, sp, #32
   d4708:	4639      	mov	r1, r7
   d470a:	4630      	mov	r0, r6
   d470c:	f7ff fe68 	bl	d43e0 <_Z13updateDisplayiii6String>
   d4710:	a808      	add	r0, sp, #32
   d4712:	f002 f993 	bl	d6a3c <_ZN6StringD1Ev>

    createEventPayload(temp, humidity, pressure, quality);
   d4716:	9e01      	ldr	r6, [sp, #4]
   d4718:	9f03      	ldr	r7, [sp, #12]
   d471a:	f8dd 8008 	ldr.w	r8, [sp, #8]
   d471e:	a904      	add	r1, sp, #16
   d4720:	a808      	add	r0, sp, #32
   d4722:	f002 f9f4 	bl	d6b0e <_ZN6StringC1ERKS_>
   d4726:	ab08      	add	r3, sp, #32
   d4728:	4642      	mov	r2, r8
   d472a:	4639      	mov	r1, r7
   d472c:	4630      	mov	r0, r6
   d472e:	f7ff ff07 	bl	d4540 <_Z18createEventPayloadiii6String>
   d4732:	a808      	add	r0, sp, #32
   d4734:	f002 f982 	bl	d6a3c <_ZN6StringD1Ev>

    lowpulseoccupancy = 0;
   d4738:	2300      	movs	r3, #0
   d473a:	6023      	str	r3, [r4, #0]
   d473c:	f000 ff94 	bl	d5668 <HAL_Timer_Get_Milli_Seconds>
    lastInterval = millis();
   d4740:	6028      	str	r0, [r5, #0]
  duration = pulseIn(DUST_SENSOR_PIN, LOW);
  lowpulseoccupancy = lowpulseoccupancy + duration;

  if ((millis() - lastInterval) > SENSOR_READING_INTERVAL)
  {
    String quality = getAirQuality();
   d4742:	a804      	add	r0, sp, #16
   d4744:	f002 f97a 	bl	d6a3c <_ZN6StringD1Ev>
    createEventPayload(temp, humidity, pressure, quality);

    lowpulseoccupancy = 0;
    lastInterval = millis();
  }
}
   d4748:	b00c      	add	sp, #48	; 0x30
   d474a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d474e:	bf00      	nop
   d4750:	2003e428 	.word	0x2003e428
   d4754:	2003e42c 	.word	0x2003e42c
   d4758:	2003e49c 	.word	0x2003e49c
   d475c:	000d976d 	.word	0x000d976d
   d4760:	000d977d 	.word	0x000d977d
   d4764:	000d9786 	.word	0x000d9786
   d4768:	000d9793 	.word	0x000d9793

000d476c <_GLOBAL__sub_I_aqSensor>:
    SeeedOled.setTextXY(5, 0);
    SeeedOled.putString("Dust: ");
    SeeedOled.putNumber(concentration); // Will cast our float to an int to make it more compact
    SeeedOled.putString(" pcs/L");
  }
   d476c:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d476e:	4b09      	ldr	r3, [pc, #36]	; (d4794 <_GLOBAL__sub_I_aqSensor+0x28>)
   d4770:	2401      	movs	r4, #1
   d4772:	701c      	strb	r4, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4774:	f000 ff80 	bl	d5678 <HAL_Pin_Map>

// setup() runs once, when the device is first turned on.

#include "Particle.h"

SYSTEM_THREAD(ENABLED);
   d4778:	4620      	mov	r0, r4
   d477a:	2100      	movs	r1, #0
   d477c:	f001 f8f4 	bl	d5968 <system_thread_set_state>

#define AQS_PIN A2
#define DUST_SENSOR_PIN D4
#define SENSOR_READING_INTERVAL 30000

AirQualitySensor aqSensor(AQS_PIN);
   d4780:	2111      	movs	r1, #17
   d4782:	4805      	ldr	r0, [pc, #20]	; (d4798 <_GLOBAL__sub_I_aqSensor+0x2c>)
   d4784:	f000 f80c 	bl	d47a0 <_ZN16AirQualitySensorC1Ei>
Adafruit_BME280 bme;
   d4788:	4804      	ldr	r0, [pc, #16]	; (d479c <_GLOBAL__sub_I_aqSensor+0x30>)
    SeeedOled.setTextXY(5, 0);
    SeeedOled.putString("Dust: ");
    SeeedOled.putNumber(concentration); // Will cast our float to an int to make it more compact
    SeeedOled.putString(" pcs/L");
  }
   d478a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#define AQS_PIN A2
#define DUST_SENSOR_PIN D4
#define SENSOR_READING_INTERVAL 30000

AirQualitySensor aqSensor(AQS_PIN);
Adafruit_BME280 bme;
   d478e:	f000 b895 	b.w	d48bc <_ZN15Adafruit_BME280C1Ev>
   d4792:	bf00      	nop
   d4794:	2003e434 	.word	0x2003e434
   d4798:	2003e480 	.word	0x2003e480
   d479c:	2003e43c 	.word	0x2003e43c

000d47a0 <_ZN16AirQualitySensorC1Ei>:
const int AirQualitySensor::HIGH_POLLUTION = 1;
const int AirQualitySensor::LOW_POLLUTION  = 2;
const int AirQualitySensor::FRESH_AIR      = 3;

AirQualitySensor::AirQualitySensor(int pin) 
: _pin(pin), _voltageSum(0), _volSumCount(0) {
   d47a0:	2200      	movs	r2, #0
   d47a2:	6001      	str	r1, [r0, #0]
   d47a4:	6102      	str	r2, [r0, #16]
   d47a6:	6142      	str	r2, [r0, #20]
    // do nothing
}
   d47a8:	4770      	bx	lr

000d47aa <_ZN16AirQualitySensor4initEv>:

bool AirQualitySensor::init(void) {
   d47aa:	b510      	push	{r4, lr}
   d47ac:	4604      	mov	r4, r0
    int initVoltage = analogRead(_pin);
   d47ae:	8800      	ldrh	r0, [r0, #0]
   d47b0:	f002 fc07 	bl	d6fc2 <analogRead>

    if (10 < initVoltage && initVoltage < 798) {
   d47b4:	f240 3312 	movw	r3, #786	; 0x312
   d47b8:	f1a0 020b 	sub.w	r2, r0, #11
   d47bc:	429a      	cmp	r2, r3
   d47be:	d807      	bhi.n	d47d0 <_ZN16AirQualitySensor4initEv+0x26>
        _currentVoltage = initVoltage;
   d47c0:	60a0      	str	r0, [r4, #8]
        _lastVoltage = _currentVoltage;
   d47c2:	6060      	str	r0, [r4, #4]

        _standardVoltage = initVoltage;
   d47c4:	60e0      	str	r0, [r4, #12]
   d47c6:	f000 ff4f 	bl	d5668 <HAL_Timer_Get_Milli_Seconds>
        _lastStdVolUpdated = millis();
   d47ca:	61a0      	str	r0, [r4, #24]

        return true;
   d47cc:	2001      	movs	r0, #1
   d47ce:	bd10      	pop	{r4, pc}
    }
    else {
        return false;
   d47d0:	2000      	movs	r0, #0
    }
}
   d47d2:	bd10      	pop	{r4, pc}

000d47d4 <_ZN16AirQualitySensor21updateStandardVoltageEv>:

int AirQualitySensor::getValue(void) {
    return _currentVoltage;
}

void AirQualitySensor::updateStandardVoltage(void) {
   d47d4:	b510      	push	{r4, lr}
   d47d6:	4604      	mov	r4, r0
   d47d8:	f000 ff46 	bl	d5668 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - _lastStdVolUpdated > 500000) {
   d47dc:	69a3      	ldr	r3, [r4, #24]
   d47de:	1ac0      	subs	r0, r0, r3
   d47e0:	4b07      	ldr	r3, [pc, #28]	; (d4800 <_ZN16AirQualitySensor21updateStandardVoltageEv+0x2c>)
   d47e2:	4298      	cmp	r0, r3
   d47e4:	d90a      	bls.n	d47fc <_ZN16AirQualitySensor21updateStandardVoltageEv+0x28>
        _standardVoltage = _voltageSum / _volSumCount;
   d47e6:	6923      	ldr	r3, [r4, #16]
   d47e8:	6962      	ldr	r2, [r4, #20]
   d47ea:	fb93 f3f2 	sdiv	r3, r3, r2
   d47ee:	60e3      	str	r3, [r4, #12]
   d47f0:	f000 ff3a 	bl	d5668 <HAL_Timer_Get_Milli_Seconds>
        _lastStdVolUpdated = millis();

        _voltageSum = 0;
   d47f4:	2300      	movs	r3, #0
}

void AirQualitySensor::updateStandardVoltage(void) {
    if (millis() - _lastStdVolUpdated > 500000) {
        _standardVoltage = _voltageSum / _volSumCount;
        _lastStdVolUpdated = millis();
   d47f6:	61a0      	str	r0, [r4, #24]

        _voltageSum = 0;
   d47f8:	6123      	str	r3, [r4, #16]
        _volSumCount = 0;
   d47fa:	6163      	str	r3, [r4, #20]
   d47fc:	bd10      	pop	{r4, pc}
   d47fe:	bf00      	nop
   d4800:	0007a120 	.word	0x0007a120

000d4804 <_ZN16AirQualitySensor5slopeEv>:
    else {
        return false;
    }
}

int AirQualitySensor::slope(void) {
   d4804:	b510      	push	{r4, lr}
    _lastVoltage = _currentVoltage;
   d4806:	6883      	ldr	r3, [r0, #8]
   d4808:	6043      	str	r3, [r0, #4]
    else {
        return false;
    }
}

int AirQualitySensor::slope(void) {
   d480a:	4604      	mov	r4, r0
    _lastVoltage = _currentVoltage;
    _currentVoltage = analogRead(_pin);
   d480c:	8800      	ldrh	r0, [r0, #0]
   d480e:	f002 fbd8 	bl	d6fc2 <analogRead>

    _voltageSum += _currentVoltage;
   d4812:	6923      	ldr	r3, [r4, #16]
    }
}

int AirQualitySensor::slope(void) {
    _lastVoltage = _currentVoltage;
    _currentVoltage = analogRead(_pin);
   d4814:	60a0      	str	r0, [r4, #8]

    _voltageSum += _currentVoltage;
   d4816:	4418      	add	r0, r3
    _volSumCount += 1;
   d4818:	6963      	ldr	r3, [r4, #20]

int AirQualitySensor::slope(void) {
    _lastVoltage = _currentVoltage;
    _currentVoltage = analogRead(_pin);

    _voltageSum += _currentVoltage;
   d481a:	6120      	str	r0, [r4, #16]
    _volSumCount += 1;
   d481c:	3301      	adds	r3, #1
   d481e:	6163      	str	r3, [r4, #20]

    updateStandardVoltage();
   d4820:	4620      	mov	r0, r4
   d4822:	f7ff ffd7 	bl	d47d4 <_ZN16AirQualitySensor21updateStandardVoltageEv>
    if (_currentVoltage - _lastVoltage > 400 || _currentVoltage > 700) {
   d4826:	68a2      	ldr	r2, [r4, #8]
   d4828:	6861      	ldr	r1, [r4, #4]
   d482a:	1a51      	subs	r1, r2, r1
   d482c:	f5b1 7fc8 	cmp.w	r1, #400	; 0x190
   d4830:	dc10      	bgt.n	d4854 <_ZN16AirQualitySensor5slopeEv+0x50>
   d4832:	f5b2 7f2f 	cmp.w	r2, #700	; 0x2bc
   d4836:	dc0d      	bgt.n	d4854 <_ZN16AirQualitySensor5slopeEv+0x50>
        return AirQualitySensor::FORCE_SIGNAL;
    }
    else if ((_currentVoltage - _lastVoltage > 400 && _currentVoltage < 700)
             || _currentVoltage - _standardVoltage > 150) {
   d4838:	68e3      	ldr	r3, [r4, #12]
   d483a:	1ad3      	subs	r3, r2, r3
   d483c:	2b96      	cmp	r3, #150	; 0x96
   d483e:	dc0b      	bgt.n	d4858 <_ZN16AirQualitySensor5slopeEv+0x54>
        return AirQualitySensor::HIGH_POLLUTION;
    }
    else if ((_currentVoltage - _lastVoltage > 200 && _currentVoltage < 700)
   d4840:	29c8      	cmp	r1, #200	; 0xc8
   d4842:	dd02      	ble.n	d484a <_ZN16AirQualitySensor5slopeEv+0x46>
   d4844:	f5b2 7f2f 	cmp.w	r2, #700	; 0x2bc
   d4848:	d108      	bne.n	d485c <_ZN16AirQualitySensor5slopeEv+0x58>
             || _currentVoltage - _standardVoltage > 50) {
        return AirQualitySensor::LOW_POLLUTION;
    }
    else {
        return AirQualitySensor::FRESH_AIR;
   d484a:	2b32      	cmp	r3, #50	; 0x32
   d484c:	bfcc      	ite	gt
   d484e:	2002      	movgt	r0, #2
   d4850:	2003      	movle	r0, #3
   d4852:	bd10      	pop	{r4, pc}
    _voltageSum += _currentVoltage;
    _volSumCount += 1;

    updateStandardVoltage();
    if (_currentVoltage - _lastVoltage > 400 || _currentVoltage > 700) {
        return AirQualitySensor::FORCE_SIGNAL;
   d4854:	2000      	movs	r0, #0
   d4856:	bd10      	pop	{r4, pc}
    }
    else if ((_currentVoltage - _lastVoltage > 400 && _currentVoltage < 700)
             || _currentVoltage - _standardVoltage > 150) {
        return AirQualitySensor::HIGH_POLLUTION;
   d4858:	2001      	movs	r0, #1
   d485a:	bd10      	pop	{r4, pc}
    }
    else if ((_currentVoltage - _lastVoltage > 200 && _currentVoltage < 700)
             || _currentVoltage - _standardVoltage > 50) {
        return AirQualitySensor::LOW_POLLUTION;
   d485c:	2002      	movs	r0, #2
    else {
        return AirQualitySensor::FRESH_AIR;
    }

    return -1;
}
   d485e:	bd10      	pop	{r4, pc}

000d4860 <_GLOBAL__sub_I__ZN16AirQualitySensor12FORCE_SIGNALE>:
   d4860:	f000 bf0a 	b.w	d5678 <HAL_Pin_Map>

000d4864 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d4864:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d4866:	4602      	mov	r2, r0
   d4868:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d486a:	7913      	ldrb	r3, [r2, #4]
   d486c:	6895      	ldr	r5, [r2, #8]
   d486e:	b133      	cbz	r3, d487e <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d4870:	b93d      	cbnz	r5, d4882 <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d4872:	490c      	ldr	r1, [pc, #48]	; (d48a4 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d4874:	b004      	add	sp, #16
   d4876:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d487a:	f001 bf87 	b.w	d678c <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d487e:	4b0a      	ldr	r3, [pc, #40]	; (d48a8 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d4880:	e000      	b.n	d4884 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d4882:	4b0a      	ldr	r3, [pc, #40]	; (d48ac <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d4884:	7b16      	ldrb	r6, [r2, #12]
   d4886:	4c0a      	ldr	r4, [pc, #40]	; (d48b0 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d4888:	490a      	ldr	r1, [pc, #40]	; (d48b4 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d488a:	7b52      	ldrb	r2, [r2, #13]
   d488c:	9202      	str	r2, [sp, #8]
   d488e:	2e01      	cmp	r6, #1
   d4890:	bf08      	it	eq
   d4892:	4621      	moveq	r1, r4
   d4894:	9101      	str	r1, [sp, #4]
   d4896:	9500      	str	r5, [sp, #0]
   d4898:	4a07      	ldr	r2, [pc, #28]	; (d48b8 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d489a:	2100      	movs	r1, #0
   d489c:	f001 ffb3 	bl	d6806 <_ZN5Print11printf_implEbPKcz>
  }
   d48a0:	b004      	add	sp, #16
   d48a2:	bd70      	pop	{r4, r5, r6, pc}
   d48a4:	000d97cd 	.word	0x000d97cd
   d48a8:	000d9cb4 	.word	0x000d9cb4
   d48ac:	000d97bc 	.word	0x000d97bc
   d48b0:	000d97c5 	.word	0x000d97c5
   d48b4:	000d97c9 	.word	0x000d97c9
   d48b8:	000d97e3 	.word	0x000d97e3

000d48bc <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   d48bc:	22ff      	movs	r2, #255	; 0xff
   d48be:	7402      	strb	r2, [r0, #16]
   d48c0:	7442      	strb	r2, [r0, #17]
   d48c2:	7482      	strb	r2, [r0, #18]
   d48c4:	74c2      	strb	r2, [r0, #19]
{ }
   d48c6:	4770      	bx	lr

000d48c8 <_ZN15Adafruit_BME2807spixferEh>:
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d48c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
   d48cc:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d48d0:	3301      	adds	r3, #1
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d48d2:	4605      	mov	r5, r0
   d48d4:	460f      	mov	r7, r1
    // hardware SPI
    if (_sck == -1)
   d48d6:	d106      	bne.n	d48e6 <_ZN15Adafruit_BME2807spixferEh+0x1e>
        return SPI.transfer(x);
   d48d8:	f002 fbcc 	bl	d7074 <_ZN8particle7globals11instanceSpiEv>
   d48dc:	4639      	mov	r1, r7
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d48de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
    // hardware SPI
    if (_sck == -1)
        return SPI.transfer(x);
   d48e2:	f002 b895 	b.w	d6a10 <_ZN8SPIClass8transferEh>
   d48e6:	2607      	movs	r6, #7
   d48e8:	2400      	movs	r4, #0
    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
   d48ea:	f04f 0801 	mov.w	r8, #1

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
        digitalWrite(_sck, LOW);
   d48ee:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d48f2:	2100      	movs	r1, #0
   d48f4:	b280      	uxth	r0, r0
   d48f6:	f002 fb38 	bl	d6f6a <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   d48fa:	f995 0011 	ldrsb.w	r0, [r5, #17]
   d48fe:	fa08 f106 	lsl.w	r1, r8, r6
   d4902:	4039      	ands	r1, r7
   d4904:	b280      	uxth	r0, r0
   d4906:	f002 fb30 	bl	d6f6a <digitalWrite>
        digitalWrite(_sck, HIGH);
   d490a:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d490e:	2101      	movs	r1, #1
   d4910:	b280      	uxth	r0, r0
   d4912:	f002 fb2a 	bl	d6f6a <digitalWrite>
        if (digitalRead(_miso))
   d4916:	f995 0012 	ldrsb.w	r0, [r5, #18]
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
   d491a:	0064      	lsls	r4, r4, #1
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
   d491c:	b280      	uxth	r0, r0
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
   d491e:	b2e4      	uxtb	r4, r4
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
   d4920:	f002 fb3c 	bl	d6f9c <digitalRead>
   d4924:	b108      	cbz	r0, d492a <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   d4926:	f044 0401 	orr.w	r4, r4, #1
    if (_sck == -1)
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
   d492a:	f116 36ff 	adds.w	r6, r6, #4294967295	; 0xffffffff
   d492e:	d2de      	bcs.n	d48ee <_ZN15Adafruit_BME2807spixferEh+0x26>
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d4930:	4620      	mov	r0, r4
   d4932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d4938 <_ZN15Adafruit_BME2806write8Ehh>:
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   d4938:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   d493a:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d493e:	3301      	adds	r3, #1
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   d4940:	4604      	mov	r4, r0
   d4942:	460e      	mov	r6, r1
   d4944:	4615      	mov	r5, r2
    if (_cs == -1) {
   d4946:	d111      	bne.n	d496c <_ZN15Adafruit_BME2806write8Ehh+0x34>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4948:	7901      	ldrb	r1, [r0, #4]
   d494a:	6800      	ldr	r0, [r0, #0]
   d494c:	f001 fd09 	bl	d6362 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4950:	6820      	ldr	r0, [r4, #0]
   d4952:	6803      	ldr	r3, [r0, #0]
   d4954:	4631      	mov	r1, r6
   d4956:	689b      	ldr	r3, [r3, #8]
   d4958:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   d495a:	6820      	ldr	r0, [r4, #0]
   d495c:	6803      	ldr	r3, [r0, #0]
   d495e:	4629      	mov	r1, r5
   d4960:	689b      	ldr	r3, [r3, #8]
   d4962:	4798      	blx	r3
        _wire -> endTransmission();
   d4964:	6820      	ldr	r0, [r4, #0]
   d4966:	f001 fd07 	bl	d6378 <_ZN7TwoWire15endTransmissionEv>
   d496a:	e031      	b.n	d49d0 <_ZN15Adafruit_BME2806write8Ehh+0x98>
    } else {
        if (_sck == -1)
   d496c:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4970:	3301      	adds	r3, #1
   d4972:	d110      	bne.n	d4996 <_ZN15Adafruit_BME2806write8Ehh+0x5e>
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4974:	f002 fb7e 	bl	d7074 <_ZN8particle7globals11instanceSpiEv>
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
   d4978:	4b16      	ldr	r3, [pc, #88]	; (d49d4 <_ZN15Adafruit_BME2806write8Ehh+0x9c>)
   d497a:	4a17      	ldr	r2, [pc, #92]	; (d49d8 <_ZN15Adafruit_BME2806write8Ehh+0xa0>)
   d497c:	9300      	str	r3, [sp, #0]
   d497e:	9202      	str	r2, [sp, #8]
   d4980:	2300      	movs	r3, #0
   d4982:	2201      	movs	r2, #1
   d4984:	4669      	mov	r1, sp
   d4986:	f88d 3004 	strb.w	r3, [sp, #4]
   d498a:	f88d 200c 	strb.w	r2, [sp, #12]
   d498e:	f88d 300d 	strb.w	r3, [sp, #13]
   d4992:	f001 ffcd 	bl	d6930 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
        digitalWrite(_cs, LOW);
   d4996:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d499a:	2100      	movs	r1, #0
   d499c:	b280      	uxth	r0, r0
   d499e:	f002 fae4 	bl	d6f6a <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   d49a2:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   d49a6:	4620      	mov	r0, r4
   d49a8:	f7ff ff8e 	bl	d48c8 <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   d49ac:	4629      	mov	r1, r5
   d49ae:	4620      	mov	r0, r4
   d49b0:	f7ff ff8a 	bl	d48c8 <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   d49b4:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d49b8:	2101      	movs	r1, #1
   d49ba:	b280      	uxth	r0, r0
   d49bc:	f002 fad5 	bl	d6f6a <digitalWrite>
    if (_sck == -1)
   d49c0:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d49c4:	3301      	adds	r3, #1
   d49c6:	d103      	bne.n	d49d0 <_ZN15Adafruit_BME2806write8Ehh+0x98>
        SPI.endTransaction(); // release the SPI bus
   d49c8:	f002 fb54 	bl	d7074 <_ZN8particle7globals11instanceSpiEv>
   d49cc:	f001 ff97 	bl	d68fe <_ZN8SPIClass14endTransactionEv>
    }
}
   d49d0:	b004      	add	sp, #16
   d49d2:	bd70      	pop	{r4, r5, r6, pc}
   d49d4:	000d97b8 	.word	0x000d97b8
   d49d8:	0007a120 	.word	0x0007a120

000d49dc <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d49dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.mode     = mode;
   d49de:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d49e2:	f89d 6018 	ldrb.w	r6, [sp, #24]
   d49e6:	f89d e01c 	ldrb.w	lr, [sp, #28]
   d49ea:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _measReg.mode     = mode;
   d49ee:	f361 1587 	bfi	r5, r1, #6, #2
    _measReg.osrs_t   = tempSampling;
   d49f2:	f362 0502 	bfi	r5, r2, #0, #3
    _measReg.osrs_p   = pressSampling;
   d49f6:	f363 05c5 	bfi	r5, r3, #3, #3
        
    
    _humReg.osrs_h    = humSampling;
   d49fa:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
    _measReg.mode     = mode;
    _measReg.osrs_t   = tempSampling;
    _measReg.osrs_p   = pressSampling;
   d49fe:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
        
    
    _humReg.osrs_h    = humSampling;
   d4a02:	f366 1347 	bfi	r3, r6, #5, #3
   d4a06:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.filter = filter;
   d4a0a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   d4a0e:	f36e 03c5 	bfi	r3, lr, #3, #3
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d4a12:	4604      	mov	r4, r0
    _measReg.osrs_p   = pressSampling;
        
    
    _humReg.osrs_h    = humSampling;
    _configReg.filter = filter;
    _configReg.t_sb   = duration;
   d4a14:	f367 0302 	bfi	r3, r7, #0, #3
   d4a18:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    
    // you must make sure to also set REGISTER_CONTROL after setting the
    // CONTROLHUMID register, otherwise the values won't be applied (see DS 5.4.3)
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   d4a1c:	f006 0207 	and.w	r2, r6, #7
   d4a20:	21f2      	movs	r1, #242	; 0xf2
   d4a22:	f7ff ff89 	bl	d4938 <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   d4a26:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   d4a2a:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d4a2e:	f002 0107 	and.w	r1, r2, #7
   d4a32:	009b      	lsls	r3, r3, #2
   d4a34:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   d4a38:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   d4a3c:	4620      	mov	r0, r4
   d4a3e:	21f5      	movs	r1, #245	; 0xf5
   d4a40:	f7ff ff7a 	bl	d4938 <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   d4a44:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d4a48:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d4a4c:	f002 0107 	and.w	r1, r2, #7
   d4a50:	009b      	lsls	r3, r3, #2
   d4a52:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   d4a56:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   d4a5a:	4620      	mov	r0, r4
   d4a5c:	21f4      	movs	r1, #244	; 0xf4
}
   d4a5e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    
    // you must make sure to also set REGISTER_CONTROL after setting the
    // CONTROLHUMID register, otherwise the values won't be applied (see DS 5.4.3)
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
    write8(BME280_REGISTER_CONFIG, _configReg.get());
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d4a62:	f7ff bf69 	b.w	d4938 <_ZN15Adafruit_BME2806write8Ehh>
	...

000d4a68 <_ZN15Adafruit_BME2805read8Eh>:
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   d4a68:	b530      	push	{r4, r5, lr}
    uint8_t value;
    
    if (_cs == -1) {
   d4a6a:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d4a6e:	3301      	adds	r3, #1
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   d4a70:	b085      	sub	sp, #20
   d4a72:	4604      	mov	r4, r0
   d4a74:	460d      	mov	r5, r1
    uint8_t value;
    
    if (_cs == -1) {
   d4a76:	d116      	bne.n	d4aa6 <_ZN15Adafruit_BME2805read8Eh+0x3e>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4a78:	7901      	ldrb	r1, [r0, #4]
   d4a7a:	6800      	ldr	r0, [r0, #0]
   d4a7c:	f001 fc71 	bl	d6362 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4a80:	6820      	ldr	r0, [r4, #0]
   d4a82:	6803      	ldr	r3, [r0, #0]
   d4a84:	4629      	mov	r1, r5
   d4a86:	689b      	ldr	r3, [r3, #8]
   d4a88:	4798      	blx	r3
        _wire -> endTransmission();
   d4a8a:	6820      	ldr	r0, [r4, #0]
   d4a8c:	f001 fc74 	bl	d6378 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   d4a90:	2201      	movs	r2, #1
   d4a92:	7921      	ldrb	r1, [r4, #4]
   d4a94:	6820      	ldr	r0, [r4, #0]
   d4a96:	f001 fc61 	bl	d635c <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   d4a9a:	6820      	ldr	r0, [r4, #0]
   d4a9c:	6803      	ldr	r3, [r0, #0]
   d4a9e:	695b      	ldr	r3, [r3, #20]
   d4aa0:	4798      	blx	r3
   d4aa2:	b2c5      	uxtb	r5, r0
   d4aa4:	e032      	b.n	d4b0c <_ZN15Adafruit_BME2805read8Eh+0xa4>
    } else {
        if (_sck == -1)
   d4aa6:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4aaa:	3301      	adds	r3, #1
   d4aac:	d110      	bne.n	d4ad0 <_ZN15Adafruit_BME2805read8Eh+0x68>
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4aae:	f002 fae1 	bl	d7074 <_ZN8particle7globals11instanceSpiEv>
   d4ab2:	4b18      	ldr	r3, [pc, #96]	; (d4b14 <_ZN15Adafruit_BME2805read8Eh+0xac>)
   d4ab4:	4a18      	ldr	r2, [pc, #96]	; (d4b18 <_ZN15Adafruit_BME2805read8Eh+0xb0>)
   d4ab6:	9300      	str	r3, [sp, #0]
   d4ab8:	9202      	str	r2, [sp, #8]
   d4aba:	2300      	movs	r3, #0
   d4abc:	2201      	movs	r2, #1
   d4abe:	4669      	mov	r1, sp
   d4ac0:	f88d 3004 	strb.w	r3, [sp, #4]
   d4ac4:	f88d 200c 	strb.w	r2, [sp, #12]
   d4ac8:	f88d 300d 	strb.w	r3, [sp, #13]
   d4acc:	f001 ff30 	bl	d6930 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
        digitalWrite(_cs, LOW);
   d4ad0:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4ad4:	2100      	movs	r1, #0
   d4ad6:	b280      	uxth	r0, r0
   d4ad8:	f002 fa47 	bl	d6f6a <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d4adc:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d4ae0:	4620      	mov	r0, r4
   d4ae2:	f7ff fef1 	bl	d48c8 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d4ae6:	2100      	movs	r1, #0
   d4ae8:	4620      	mov	r0, r4
   d4aea:	f7ff feed 	bl	d48c8 <_ZN15Adafruit_BME2807spixferEh>
   d4aee:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   d4af0:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4af4:	2101      	movs	r1, #1
   d4af6:	b280      	uxth	r0, r0
   d4af8:	f002 fa37 	bl	d6f6a <digitalWrite>
        if (_sck == -1)
   d4afc:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4b00:	3301      	adds	r3, #1
   d4b02:	d103      	bne.n	d4b0c <_ZN15Adafruit_BME2805read8Eh+0xa4>
            SPI.endTransaction(); // release the SPI bus
   d4b04:	f002 fab6 	bl	d7074 <_ZN8particle7globals11instanceSpiEv>
   d4b08:	f001 fef9 	bl	d68fe <_ZN8SPIClass14endTransactionEv>
    }
    return value;
}
   d4b0c:	4628      	mov	r0, r5
   d4b0e:	b005      	add	sp, #20
   d4b10:	bd30      	pop	{r4, r5, pc}
   d4b12:	bf00      	nop
   d4b14:	000d97b8 	.word	0x000d97b8
   d4b18:	0007a120 	.word	0x0007a120

000d4b1c <_ZN15Adafruit_BME2806read16Eh>:
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
   d4b1c:	b530      	push	{r4, r5, lr}
    uint16_t value;

    if (_cs == -1) {
   d4b1e:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d4b22:	3301      	adds	r3, #1
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
   d4b24:	b085      	sub	sp, #20
   d4b26:	4604      	mov	r4, r0
   d4b28:	460d      	mov	r5, r1
    uint16_t value;

    if (_cs == -1) {
   d4b2a:	d11d      	bne.n	d4b68 <_ZN15Adafruit_BME2806read16Eh+0x4c>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4b2c:	7901      	ldrb	r1, [r0, #4]
   d4b2e:	6800      	ldr	r0, [r0, #0]
   d4b30:	f001 fc17 	bl	d6362 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4b34:	6820      	ldr	r0, [r4, #0]
   d4b36:	6803      	ldr	r3, [r0, #0]
   d4b38:	4629      	mov	r1, r5
   d4b3a:	689b      	ldr	r3, [r3, #8]
   d4b3c:	4798      	blx	r3
        _wire -> endTransmission();
   d4b3e:	6820      	ldr	r0, [r4, #0]
   d4b40:	f001 fc1a 	bl	d6378 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   d4b44:	2202      	movs	r2, #2
   d4b46:	7921      	ldrb	r1, [r4, #4]
   d4b48:	6820      	ldr	r0, [r4, #0]
   d4b4a:	f001 fc07 	bl	d635c <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   d4b4e:	6820      	ldr	r0, [r4, #0]
   d4b50:	6803      	ldr	r3, [r0, #0]
   d4b52:	695b      	ldr	r3, [r3, #20]
   d4b54:	4798      	blx	r3
   d4b56:	4605      	mov	r5, r0
   d4b58:	6820      	ldr	r0, [r4, #0]
   d4b5a:	6803      	ldr	r3, [r0, #0]
   d4b5c:	695b      	ldr	r3, [r3, #20]
   d4b5e:	4798      	blx	r3
   d4b60:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d4b64:	b285      	uxth	r5, r0
   d4b66:	e039      	b.n	d4bdc <_ZN15Adafruit_BME2806read16Eh+0xc0>
    } else {
        if (_sck == -1)
   d4b68:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4b6c:	3301      	adds	r3, #1
   d4b6e:	d110      	bne.n	d4b92 <_ZN15Adafruit_BME2806read16Eh+0x76>
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4b70:	f002 fa80 	bl	d7074 <_ZN8particle7globals11instanceSpiEv>
   d4b74:	4b1b      	ldr	r3, [pc, #108]	; (d4be4 <_ZN15Adafruit_BME2806read16Eh+0xc8>)
   d4b76:	4a1c      	ldr	r2, [pc, #112]	; (d4be8 <_ZN15Adafruit_BME2806read16Eh+0xcc>)
   d4b78:	9300      	str	r3, [sp, #0]
   d4b7a:	9202      	str	r2, [sp, #8]
   d4b7c:	2300      	movs	r3, #0
   d4b7e:	2201      	movs	r2, #1
   d4b80:	4669      	mov	r1, sp
   d4b82:	f88d 3004 	strb.w	r3, [sp, #4]
   d4b86:	f88d 200c 	strb.w	r2, [sp, #12]
   d4b8a:	f88d 300d 	strb.w	r3, [sp, #13]
   d4b8e:	f001 fecf 	bl	d6930 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
        digitalWrite(_cs, LOW);
   d4b92:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4b96:	2100      	movs	r1, #0
   d4b98:	b280      	uxth	r0, r0
   d4b9a:	f002 f9e6 	bl	d6f6a <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d4b9e:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d4ba2:	4620      	mov	r0, r4
   d4ba4:	f7ff fe90 	bl	d48c8 <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   d4ba8:	2100      	movs	r1, #0
   d4baa:	4620      	mov	r0, r4
   d4bac:	f7ff fe8c 	bl	d48c8 <_ZN15Adafruit_BME2807spixferEh>
   d4bb0:	2100      	movs	r1, #0
   d4bb2:	4605      	mov	r5, r0
   d4bb4:	4620      	mov	r0, r4
   d4bb6:	f7ff fe87 	bl	d48c8 <_ZN15Adafruit_BME2807spixferEh>
   d4bba:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d4bbe:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   d4bc0:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4bc4:	2101      	movs	r1, #1
   d4bc6:	b280      	uxth	r0, r0
   d4bc8:	f002 f9cf 	bl	d6f6a <digitalWrite>
        if (_sck == -1)
   d4bcc:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4bd0:	3301      	adds	r3, #1
   d4bd2:	d103      	bne.n	d4bdc <_ZN15Adafruit_BME2806read16Eh+0xc0>
            SPI.endTransaction(); // release the SPI bus
   d4bd4:	f002 fa4e 	bl	d7074 <_ZN8particle7globals11instanceSpiEv>
   d4bd8:	f001 fe91 	bl	d68fe <_ZN8SPIClass14endTransactionEv>
    }

    return value;
}
   d4bdc:	4628      	mov	r0, r5
   d4bde:	b005      	add	sp, #20
   d4be0:	bd30      	pop	{r4, r5, pc}
   d4be2:	bf00      	nop
   d4be4:	000d97b8 	.word	0x000d97b8
   d4be8:	0007a120 	.word	0x0007a120

000d4bec <_ZN15Adafruit_BME2809read16_LEEh>:
    @brief  Reads a signed 16 bit little endian value over I2C or SPI
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   d4bec:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   d4bee:	f7ff ff95 	bl	d4b1c <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   d4bf2:	ba40      	rev16	r0, r0
}
   d4bf4:	b280      	uxth	r0, r0
   d4bf6:	bd08      	pop	{r3, pc}

000d4bf8 <_ZN15Adafruit_BME2806read24Eh>:
    @param reg the register address to read from
    @returns the 24 bit data value read from the device
*/
/**************************************************************************/
uint32_t Adafruit_BME280::read24(byte reg)
{
   d4bf8:	b530      	push	{r4, r5, lr}
    uint32_t value;

    if (_cs == -1) {
   d4bfa:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d4bfe:	3301      	adds	r3, #1
    @param reg the register address to read from
    @returns the 24 bit data value read from the device
*/
/**************************************************************************/
uint32_t Adafruit_BME280::read24(byte reg)
{
   d4c00:	b085      	sub	sp, #20
   d4c02:	4604      	mov	r4, r0
   d4c04:	460d      	mov	r5, r1
    uint32_t value;

    if (_cs == -1) {
   d4c06:	d121      	bne.n	d4c4c <_ZN15Adafruit_BME2806read24Eh+0x54>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4c08:	7901      	ldrb	r1, [r0, #4]
   d4c0a:	6800      	ldr	r0, [r0, #0]
   d4c0c:	f001 fba9 	bl	d6362 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4c10:	6820      	ldr	r0, [r4, #0]
   d4c12:	6803      	ldr	r3, [r0, #0]
   d4c14:	4629      	mov	r1, r5
   d4c16:	689b      	ldr	r3, [r3, #8]
   d4c18:	4798      	blx	r3
        _wire -> endTransmission();
   d4c1a:	6820      	ldr	r0, [r4, #0]
   d4c1c:	f001 fbac 	bl	d6378 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)3);
   d4c20:	2203      	movs	r2, #3
   d4c22:	7921      	ldrb	r1, [r4, #4]
   d4c24:	6820      	ldr	r0, [r4, #0]
   d4c26:	f001 fb99 	bl	d635c <_ZN7TwoWire11requestFromEhj>

        value = _wire -> read();
   d4c2a:	6820      	ldr	r0, [r4, #0]
   d4c2c:	6803      	ldr	r3, [r0, #0]
   d4c2e:	695b      	ldr	r3, [r3, #20]
   d4c30:	4798      	blx	r3
        value <<= 8;
   d4c32:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d4c34:	6820      	ldr	r0, [r4, #0]
   d4c36:	6803      	ldr	r3, [r0, #0]
   d4c38:	695b      	ldr	r3, [r3, #20]
   d4c3a:	4798      	blx	r3
   d4c3c:	4328      	orrs	r0, r5
        value <<= 8;
   d4c3e:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d4c40:	6820      	ldr	r0, [r4, #0]
   d4c42:	6803      	ldr	r3, [r0, #0]
   d4c44:	695b      	ldr	r3, [r3, #20]
   d4c46:	4798      	blx	r3
   d4c48:	4305      	orrs	r5, r0
   d4c4a:	e03d      	b.n	d4cc8 <_ZN15Adafruit_BME2806read24Eh+0xd0>
    } else {
        if (_sck == -1)
   d4c4c:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4c50:	3301      	adds	r3, #1
   d4c52:	d110      	bne.n	d4c76 <_ZN15Adafruit_BME2806read24Eh+0x7e>
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4c54:	f002 fa0e 	bl	d7074 <_ZN8particle7globals11instanceSpiEv>
   d4c58:	4b1d      	ldr	r3, [pc, #116]	; (d4cd0 <_ZN15Adafruit_BME2806read24Eh+0xd8>)
   d4c5a:	4a1e      	ldr	r2, [pc, #120]	; (d4cd4 <_ZN15Adafruit_BME2806read24Eh+0xdc>)
   d4c5c:	9300      	str	r3, [sp, #0]
   d4c5e:	9202      	str	r2, [sp, #8]
   d4c60:	2300      	movs	r3, #0
   d4c62:	2201      	movs	r2, #1
   d4c64:	4669      	mov	r1, sp
   d4c66:	f88d 3004 	strb.w	r3, [sp, #4]
   d4c6a:	f88d 200c 	strb.w	r2, [sp, #12]
   d4c6e:	f88d 300d 	strb.w	r3, [sp, #13]
   d4c72:	f001 fe5d 	bl	d6930 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
        digitalWrite(_cs, LOW);
   d4c76:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4c7a:	2100      	movs	r1, #0
   d4c7c:	b280      	uxth	r0, r0
   d4c7e:	f002 f974 	bl	d6f6a <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d4c82:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d4c86:	4620      	mov	r0, r4
   d4c88:	f7ff fe1e 	bl	d48c8 <_ZN15Adafruit_BME2807spixferEh>

        value = spixfer(0);
   d4c8c:	2100      	movs	r1, #0
   d4c8e:	4620      	mov	r0, r4
   d4c90:	f7ff fe1a 	bl	d48c8 <_ZN15Adafruit_BME2807spixferEh>
        value <<= 8;
        value |= spixfer(0);
   d4c94:	2100      	movs	r1, #0
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
        digitalWrite(_cs, LOW);
        spixfer(reg | 0x80); // read, bit 7 high

        value = spixfer(0);
        value <<= 8;
   d4c96:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d4c98:	4620      	mov	r0, r4
   d4c9a:	f7ff fe15 	bl	d48c8 <_ZN15Adafruit_BME2807spixferEh>
   d4c9e:	4328      	orrs	r0, r5
        value <<= 8;
   d4ca0:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d4ca2:	2100      	movs	r1, #0
   d4ca4:	4620      	mov	r0, r4
   d4ca6:	f7ff fe0f 	bl	d48c8 <_ZN15Adafruit_BME2807spixferEh>
   d4caa:	4305      	orrs	r5, r0

        digitalWrite(_cs, HIGH);
   d4cac:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4cb0:	2101      	movs	r1, #1
   d4cb2:	b280      	uxth	r0, r0
   d4cb4:	f002 f959 	bl	d6f6a <digitalWrite>
        if (_sck == -1)
   d4cb8:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4cbc:	3301      	adds	r3, #1
   d4cbe:	d103      	bne.n	d4cc8 <_ZN15Adafruit_BME2806read24Eh+0xd0>
            SPI.endTransaction(); // release the SPI bus
   d4cc0:	f002 f9d8 	bl	d7074 <_ZN8particle7globals11instanceSpiEv>
   d4cc4:	f001 fe1b 	bl	d68fe <_ZN8SPIClass14endTransactionEv>
    }

    return value;
}
   d4cc8:	4628      	mov	r0, r5
   d4cca:	b005      	add	sp, #20
   d4ccc:	bd30      	pop	{r4, r5, pc}
   d4cce:	bf00      	nop
   d4cd0:	000d97b8 	.word	0x000d97b8
   d4cd4:	0007a120 	.word	0x0007a120

000d4cd8 <_ZN15Adafruit_BME28016readCoefficientsEv>:
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
   d4cd8:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d4cda:	2188      	movs	r1, #136	; 0x88
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
   d4cdc:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d4cde:	f7ff ff85 	bl	d4bec <_ZN15Adafruit_BME2809read16_LEEh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4ce2:	218a      	movs	r1, #138	; 0x8a
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d4ce4:	82a0      	strh	r0, [r4, #20]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4ce6:	4620      	mov	r0, r4
   d4ce8:	f7ff ff80 	bl	d4bec <_ZN15Adafruit_BME2809read16_LEEh>
   d4cec:	218c      	movs	r1, #140	; 0x8c
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   d4cee:	82e0      	strh	r0, [r4, #22]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4cf0:	4620      	mov	r0, r4
   d4cf2:	f7ff ff7b 	bl	d4bec <_ZN15Adafruit_BME2809read16_LEEh>
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d4cf6:	218e      	movs	r1, #142	; 0x8e
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   d4cf8:	8320      	strh	r0, [r4, #24]

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d4cfa:	4620      	mov	r0, r4
   d4cfc:	f7ff ff76 	bl	d4bec <_ZN15Adafruit_BME2809read16_LEEh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4d00:	2190      	movs	r1, #144	; 0x90
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d4d02:	8360      	strh	r0, [r4, #26]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4d04:	4620      	mov	r0, r4
   d4d06:	f7ff ff71 	bl	d4bec <_ZN15Adafruit_BME2809read16_LEEh>
   d4d0a:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   d4d0c:	83a0      	strh	r0, [r4, #28]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4d0e:	4620      	mov	r0, r4
   d4d10:	f7ff ff6c 	bl	d4bec <_ZN15Adafruit_BME2809read16_LEEh>
   d4d14:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   d4d16:	83e0      	strh	r0, [r4, #30]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4d18:	4620      	mov	r0, r4
   d4d1a:	f7ff ff67 	bl	d4bec <_ZN15Adafruit_BME2809read16_LEEh>
   d4d1e:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   d4d20:	8420      	strh	r0, [r4, #32]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4d22:	4620      	mov	r0, r4
   d4d24:	f7ff ff62 	bl	d4bec <_ZN15Adafruit_BME2809read16_LEEh>
   d4d28:	2198      	movs	r1, #152	; 0x98

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   d4d2a:	8460      	strh	r0, [r4, #34]	; 0x22
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4d2c:	4620      	mov	r0, r4
   d4d2e:	f7ff ff5d 	bl	d4bec <_ZN15Adafruit_BME2809read16_LEEh>
   d4d32:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   d4d34:	84a0      	strh	r0, [r4, #36]	; 0x24
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4d36:	4620      	mov	r0, r4
   d4d38:	f7ff ff58 	bl	d4bec <_ZN15Adafruit_BME2809read16_LEEh>
   d4d3c:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   d4d3e:	84e0      	strh	r0, [r4, #38]	; 0x26
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4d40:	4620      	mov	r0, r4
   d4d42:	f7ff ff53 	bl	d4bec <_ZN15Adafruit_BME2809read16_LEEh>
   d4d46:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   d4d48:	8520      	strh	r0, [r4, #40]	; 0x28
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4d4a:	4620      	mov	r0, r4
   d4d4c:	f7ff ff4e 	bl	d4bec <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d4d50:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   d4d52:	8560      	strh	r0, [r4, #42]	; 0x2a

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d4d54:	4620      	mov	r0, r4
   d4d56:	f7ff fe87 	bl	d4a68 <_ZN15Adafruit_BME2805read8Eh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4d5a:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d4d5c:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4d60:	4620      	mov	r0, r4
   d4d62:	f7ff ff43 	bl	d4bec <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d4d66:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   d4d68:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d4d6a:	4620      	mov	r0, r4
   d4d6c:	f7ff fe7c 	bl	d4a68 <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d4d70:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d4d72:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d4d76:	4620      	mov	r0, r4
   d4d78:	f7ff fe76 	bl	d4a68 <_ZN15Adafruit_BME2805read8Eh>
   d4d7c:	21e5      	movs	r1, #229	; 0xe5
   d4d7e:	4605      	mov	r5, r0
   d4d80:	4620      	mov	r0, r4
   d4d82:	f7ff fe71 	bl	d4a68 <_ZN15Adafruit_BME2805read8Eh>
   d4d86:	f000 000f 	and.w	r0, r0, #15
   d4d8a:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
   d4d8e:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   d4d90:	21e6      	movs	r1, #230	; 0xe6
   d4d92:	4620      	mov	r0, r4
   d4d94:	f7ff fe68 	bl	d4a68 <_ZN15Adafruit_BME2805read8Eh>
   d4d98:	21e5      	movs	r1, #229	; 0xe5
   d4d9a:	4605      	mov	r5, r0
   d4d9c:	4620      	mov	r0, r4
   d4d9e:	f7ff fe63 	bl	d4a68 <_ZN15Adafruit_BME2805read8Eh>
   d4da2:	1100      	asrs	r0, r0, #4
   d4da4:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
   d4da8:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   d4daa:	21e7      	movs	r1, #231	; 0xe7
   d4dac:	4620      	mov	r0, r4
   d4dae:	f7ff fe5b 	bl	d4a68 <_ZN15Adafruit_BME2805read8Eh>
   d4db2:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
   d4db6:	bd38      	pop	{r3, r4, r5, pc}

000d4db8 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
    @brief return true if chip is busy reading cal data
    @returns true if reading calibration, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::isReadingCalibration(void)
{
   d4db8:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   d4dba:	21f3      	movs	r1, #243	; 0xf3
   d4dbc:	f7ff fe54 	bl	d4a68 <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
   d4dc0:	f000 0001 	and.w	r0, r0, #1
   d4dc4:	bd08      	pop	{r3, pc}

000d4dc6 <_ZN15Adafruit_BME2804initEv>:
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::init()
{
   d4dc6:	b530      	push	{r4, r5, lr}
   d4dc8:	4604      	mov	r4, r0
    // init I2C or SPI sensor interface
    if (_cs == -1) {
   d4dca:	f990 0010 	ldrsb.w	r0, [r0, #16]
   d4dce:	1c42      	adds	r2, r0, #1
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::init()
{
   d4dd0:	b085      	sub	sp, #20
    // init I2C or SPI sensor interface
    if (_cs == -1) {
   d4dd2:	d103      	bne.n	d4ddc <_ZN15Adafruit_BME2804initEv+0x16>
        // I2C
        _wire -> begin();
   d4dd4:	6820      	ldr	r0, [r4, #0]
   d4dd6:	f001 fa8d 	bl	d62f4 <_ZN7TwoWire5beginEv>
   d4dda:	e022      	b.n	d4e22 <_ZN15Adafruit_BME2804initEv+0x5c>
    } else {
        digitalWrite(_cs, HIGH);
   d4ddc:	2101      	movs	r1, #1
   d4dde:	b280      	uxth	r0, r0
   d4de0:	f002 f8c3 	bl	d6f6a <digitalWrite>
        pinMode(_cs, OUTPUT);
   d4de4:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4de8:	2101      	movs	r1, #1
   d4dea:	b280      	uxth	r0, r0
   d4dec:	f002 f8ac 	bl	d6f48 <pinMode>
        if (_sck == -1) {
   d4df0:	f994 0013 	ldrsb.w	r0, [r4, #19]
   d4df4:	1c43      	adds	r3, r0, #1
   d4df6:	d104      	bne.n	d4e02 <_ZN15Adafruit_BME2804initEv+0x3c>
            // hardware SPI
            SPI.begin();
   d4df8:	f002 f93c 	bl	d7074 <_ZN8particle7globals11instanceSpiEv>
   d4dfc:	f001 fd6e 	bl	d68dc <_ZN8SPIClass5beginEv>
   d4e00:	e00f      	b.n	d4e22 <_ZN15Adafruit_BME2804initEv+0x5c>
        } else {
            // software SPI
            pinMode(_sck, OUTPUT);
   d4e02:	2101      	movs	r1, #1
   d4e04:	b280      	uxth	r0, r0
   d4e06:	f002 f89f 	bl	d6f48 <pinMode>
            pinMode(_mosi, OUTPUT);
   d4e0a:	f994 0011 	ldrsb.w	r0, [r4, #17]
   d4e0e:	2101      	movs	r1, #1
   d4e10:	b280      	uxth	r0, r0
   d4e12:	f002 f899 	bl	d6f48 <pinMode>
            pinMode(_miso, INPUT);
   d4e16:	f994 0012 	ldrsb.w	r0, [r4, #18]
   d4e1a:	2100      	movs	r1, #0
   d4e1c:	b280      	uxth	r0, r0
   d4e1e:	f002 f893 	bl	d6f48 <pinMode>
        }
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d4e22:	21d0      	movs	r1, #208	; 0xd0
   d4e24:	4620      	mov	r0, r4
   d4e26:	f7ff fe1f 	bl	d4a68 <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   d4e2a:	2860      	cmp	r0, #96	; 0x60
            pinMode(_miso, INPUT);
        }
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d4e2c:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   d4e2e:	d120      	bne.n	d4e72 <_ZN15Adafruit_BME2804initEv+0xac>
        return false;

    // reset the device using soft-reset
    // this makes sure the IIR is off, etc.
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   d4e30:	4620      	mov	r0, r4
   d4e32:	22b6      	movs	r2, #182	; 0xb6
   d4e34:	21e0      	movs	r1, #224	; 0xe0
   d4e36:	f7ff fd7f 	bl	d4938 <_ZN15Adafruit_BME2806write8Ehh>

    // wait for chip to wake up.
    delay(300);
   d4e3a:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d4e3e:	f000 fe5f 	bl	d5b00 <delay>

    // if chip is still reading calibration, delay
    while (isReadingCalibration())
   d4e42:	4620      	mov	r0, r4
   d4e44:	f7ff ffb8 	bl	d4db8 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   d4e48:	4605      	mov	r5, r0
   d4e4a:	b108      	cbz	r0, d4e50 <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   d4e4c:	2064      	movs	r0, #100	; 0x64
   d4e4e:	e7f6      	b.n	d4e3e <_ZN15Adafruit_BME2804initEv+0x78>

    readCoefficients(); // read trimming parameters, see DS 4.2.2
   d4e50:	4620      	mov	r0, r4
   d4e52:	f7ff ff41 	bl	d4cd8 <_ZN15Adafruit_BME28016readCoefficientsEv>

    setSampling(); // use defaults
   d4e56:	2305      	movs	r3, #5
   d4e58:	9300      	str	r3, [sp, #0]
   d4e5a:	461a      	mov	r2, r3
   d4e5c:	2103      	movs	r1, #3
   d4e5e:	4620      	mov	r0, r4
   d4e60:	9502      	str	r5, [sp, #8]
   d4e62:	9501      	str	r5, [sp, #4]
   d4e64:	f7ff fdba 	bl	d49dc <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>

    delay(100);
   d4e68:	2064      	movs	r0, #100	; 0x64
   d4e6a:	f000 fe49 	bl	d5b00 <delay>

    return true;
   d4e6e:	2001      	movs	r0, #1
   d4e70:	e000      	b.n	d4e74 <_ZN15Adafruit_BME2804initEv+0xae>
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
    if (_sensorID != 0x60)
        return false;
   d4e72:	2000      	movs	r0, #0
    setSampling(); // use defaults

    delay(100);

    return true;
}
   d4e74:	b005      	add	sp, #20
   d4e76:	bd30      	pop	{r4, r5, pc}

000d4e78 <_ZN15Adafruit_BME2805beginEv>:
*/
/**************************************************************************/
bool Adafruit_BME280::begin(void)
{
    bool status = false;
    _i2caddr = BME280_ADDRESS;
   d4e78:	2377      	movs	r3, #119	; 0x77
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::begin(void)
{
   d4e7a:	b510      	push	{r4, lr}
    bool status = false;
    _i2caddr = BME280_ADDRESS;
   d4e7c:	7103      	strb	r3, [r0, #4]
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::begin(void)
{
   d4e7e:	4604      	mov	r4, r0
    bool status = false;
    _i2caddr = BME280_ADDRESS;
	_wire = &Wire;
   d4e80:	f002 f8d2 	bl	d7028 <_Z19__fetch_global_Wirev>
   d4e84:	6020      	str	r0, [r4, #0]
	status = init();
   d4e86:	4620      	mov	r0, r4
   d4e88:	f7ff ff9d 	bl	d4dc6 <_ZN15Adafruit_BME2804initEv>
 	if(!status){
   d4e8c:	b930      	cbnz	r0, d4e9c <_ZN15Adafruit_BME2805beginEv+0x24>
 		_i2caddr = BME280_ADDRESS_ALTERNATE;
   d4e8e:	2376      	movs	r3, #118	; 0x76
   d4e90:	7123      	strb	r3, [r4, #4]
 		status = init();
   d4e92:	4620      	mov	r0, r4
 		}
	return status;
}
   d4e94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    _i2caddr = BME280_ADDRESS;
	_wire = &Wire;
	status = init();
 	if(!status){
 		_i2caddr = BME280_ADDRESS_ALTERNATE;
 		status = init();
   d4e98:	f7ff bf95 	b.w	d4dc6 <_ZN15Adafruit_BME2804initEv>
 		}
	return status;
}
   d4e9c:	bd10      	pop	{r4, pc}
	...

000d4ea0 <_ZN15Adafruit_BME28015readTemperatureEv>:
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   d4ea0:	b510      	push	{r4, lr}
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d4ea2:	21fa      	movs	r1, #250	; 0xfa
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   d4ea4:	4604      	mov	r4, r0
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d4ea6:	f7ff fea7 	bl	d4bf8 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
   d4eaa:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   d4eae:	d01e      	beq.n	d4eee <_ZN15Adafruit_BME28015readTemperatureEv+0x4e>
        return NAN;
    adc_T >>= 4;

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d4eb0:	8aa2      	ldrh	r2, [r4, #20]
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   d4eb2:	ed9f 7a10 	vldr	s14, [pc, #64]	; d4ef4 <_ZN15Adafruit_BME28015readTemperatureEv+0x54>

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
             
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
   d4eb6:	ebc2 2320 	rsb	r3, r2, r0, asr #8
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;
   d4eba:	0052      	lsls	r2, r2, #1
   d4ebc:	ebc2 10e0 	rsb	r0, r2, r0, asr #7
   d4ec0:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
   d4ec4:	435b      	muls	r3, r3
   d4ec6:	4350      	muls	r0, r2
   d4ec8:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
   d4ecc:	131b      	asrs	r3, r3, #12
   d4ece:	4353      	muls	r3, r2
   d4ed0:	139b      	asrs	r3, r3, #14
   d4ed2:	eb03 20e0 	add.w	r0, r3, r0, asr #11
   d4ed6:	60e0      	str	r0, [r4, #12]

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   d4ed8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   d4edc:	3080      	adds	r0, #128	; 0x80
   d4ede:	1200      	asrs	r0, r0, #8
   d4ee0:	ee07 0a90 	vmov	s15, r0
   d4ee4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4ee8:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d4eec:	bd10      	pop	{r4, pc}
{
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
    if (adc_T == 0x800000) // value in case temp measurement was disabled
        return NAN;
   d4eee:	ed9f 0a02 	vldr	s0, [pc, #8]	; d4ef8 <_ZN15Adafruit_BME28015readTemperatureEv+0x58>

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
}
   d4ef2:	bd10      	pop	{r4, pc}
   d4ef4:	42c80000 	.word	0x42c80000
   d4ef8:	7fc00000 	.word	0x7fc00000

000d4efc <_ZN15Adafruit_BME28012readPressureEv>:
/*!
    @brief  Returns the pressure from the sensor
    @returns the pressure value (in Pascal) read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readPressure(void) {
   d4efc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4f00:	4606      	mov	r6, r0
    int64_t var1, var2, p;

    readTemperature(); // must be done first to get t_fine
   d4f02:	f7ff ffcd 	bl	d4ea0 <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   d4f06:	21f7      	movs	r1, #247	; 0xf7
   d4f08:	4630      	mov	r0, r6
   d4f0a:	f7ff fe75 	bl	d4bf8 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   d4f0e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
float Adafruit_BME280::readPressure(void) {
    int64_t var1, var2, p;

    readTemperature(); // must be done first to get t_fine

    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   d4f12:	4607      	mov	r7, r0
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   d4f14:	f000 80c1 	beq.w	d509a <_ZN15Adafruit_BME28012readPressureEv+0x19e>
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
   d4f18:	68f4      	ldr	r4, [r6, #12]
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   d4f1a:	f9b6 201c 	ldrsh.w	r2, [r6, #28]
    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
   d4f1e:	17e5      	asrs	r5, r4, #31
   d4f20:	f5b4 34fa 	subs.w	r4, r4, #128000	; 0x1f400
   d4f24:	f145 35ff 	adc.w	r5, r5, #4294967295	; 0xffffffff
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d4f28:	fba4 8904 	umull	r8, r9, r4, r4
   d4f2c:	fb04 f305 	mul.w	r3, r4, r5
   d4f30:	eb09 0943 	add.w	r9, r9, r3, lsl #1
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   d4f34:	fb02 f105 	mul.w	r1, r2, r5
   d4f38:	17d3      	asrs	r3, r2, #31
   d4f3a:	fb04 1103 	mla	r1, r4, r3, r1
   d4f3e:	fba2 2304 	umull	r2, r3, r2, r4
   d4f42:	440b      	add	r3, r1
   d4f44:	0319      	lsls	r1, r3, #12
   d4f46:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
   d4f4a:	0310      	lsls	r0, r2, #12
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   d4f4c:	f9b6 201e 	ldrsh.w	r2, [r6, #30]
   d4f50:	17d3      	asrs	r3, r2, #31
   d4f52:	fb02 fe09 	mul.w	lr, r2, r9
   d4f56:	fb08 ee03 	mla	lr, r8, r3, lr
   d4f5a:	fba2 2308 	umull	r2, r3, r2, r8
   d4f5e:	4473      	add	r3, lr
   d4f60:	ea4f 2a12 	mov.w	sl, r2, lsr #8
   d4f64:	ea4a 6a03 	orr.w	sl, sl, r3, lsl #24
   d4f68:	eb1a 0a00 	adds.w	sl, sl, r0
   d4f6c:	8b72      	ldrh	r2, [r6, #26]
   d4f6e:	ea4f 2b23 	mov.w	fp, r3, asr #8
   d4f72:	eb4b 0b01 	adc.w	fp, fp, r1
   d4f76:	f11a 0000 	adds.w	r0, sl, #0
   d4f7a:	f54b 4100 	adc.w	r1, fp, #32768	; 0x8000
   d4f7e:	fba0 ab02 	umull	sl, fp, r0, r2
   d4f82:	fb02 bb01 	mla	fp, r2, r1, fp
   d4f86:	ea4f 026b 	mov.w	r2, fp, asr #1
   d4f8a:	ea4f 73eb 	mov.w	r3, fp, asr #31

    if (var1 == 0) {
   d4f8e:	ea52 0103 	orrs.w	r1, r2, r3
   d4f92:	f000 8086 	beq.w	d50a2 <_ZN15Adafruit_BME28012readPressureEv+0x1a6>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d4f96:	f9b6 a024 	ldrsh.w	sl, [r6, #36]	; 0x24
   d4f9a:	ea4f 7bea 	mov.w	fp, sl, asr #31
   d4f9e:	fb0a f109 	mul.w	r1, sl, r9
   d4fa2:	fb08 110b 	mla	r1, r8, fp, r1
   d4fa6:	fbaa 8908 	umull	r8, r9, sl, r8
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d4faa:	f9b6 a022 	ldrsh.w	sl, [r6, #34]	; 0x22
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d4fae:	4489      	add	r9, r1
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d4fb0:	ea4f 7bea 	mov.w	fp, sl, asr #31
   d4fb4:	fb0a f105 	mul.w	r1, sl, r5
   d4fb8:	fb04 110b 	mla	r1, r4, fp, r1
   d4fbc:	fbaa 4504 	umull	r4, r5, sl, r4
   d4fc0:	440d      	add	r5, r1
   d4fc2:	ea4f 4b45 	mov.w	fp, r5, lsl #17
   d4fc6:	ea4f 4a44 	mov.w	sl, r4, lsl #17

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
   d4fca:	1138      	asrs	r0, r7, #4
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d4fcc:	eb1a 0a08 	adds.w	sl, sl, r8

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
   d4fd0:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d4fd4:	ea4b 3bd4 	orr.w	fp, fp, r4, lsr #15
   d4fd8:	eb4b 0b09 	adc.w	fp, fp, r9

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
   d4fdc:	ea4f 79e0 	mov.w	r9, r0, asr #31
   d4fe0:	ea4f 75c9 	mov.w	r5, r9, lsl #31
   d4fe4:	ea45 0550 	orr.w	r5, r5, r0, lsr #1
   d4fe8:	07c4      	lsls	r4, r0, #31
   d4fea:	f9b6 0020 	ldrsh.w	r0, [r6, #32]
   d4fee:	f04f 0800 	mov.w	r8, #0
   d4ff2:	eb18 080a 	adds.w	r8, r8, sl
   d4ff6:	ea4f 09c0 	mov.w	r9, r0, lsl #3
   d4ffa:	eb49 090b 	adc.w	r9, r9, fp
   d4ffe:	f640 4735 	movw	r7, #3125	; 0xc35
   d5002:	ebb4 0408 	subs.w	r4, r4, r8
   d5006:	eb65 0509 	sbc.w	r5, r5, r9
   d500a:	fba4 0107 	umull	r0, r1, r4, r7
   d500e:	fb07 1105 	mla	r1, r7, r5, r1
   d5012:	f004 f8bb 	bl	d918c <__aeabi_ldivmod>
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d5016:	f9b6 202a 	ldrsh.w	r2, [r6, #42]	; 0x2a
    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   d501a:	134c      	asrs	r4, r1, #13
   d501c:	0b45      	lsrs	r5, r0, #13
   d501e:	ea45 45c1 	orr.w	r5, r5, r1, lsl #19
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d5022:	fb02 f704 	mul.w	r7, r2, r4
   d5026:	17d3      	asrs	r3, r2, #31
   d5028:	fb05 7703 	mla	r7, r5, r3, r7
   d502c:	fba2 2305 	umull	r2, r3, r2, r5
   d5030:	443b      	add	r3, r7
   d5032:	4354      	muls	r4, r2
   d5034:	fb05 4403 	mla	r4, r5, r3, r4
   d5038:	fba2 2305 	umull	r2, r3, r2, r5
   d503c:	4423      	add	r3, r4
   d503e:	0e54      	lsrs	r4, r2, #25
   d5040:	ea44 14c3 	orr.w	r4, r4, r3, lsl #7
   d5044:	f9b6 2028 	ldrsh.w	r2, [r6, #40]	; 0x28
   d5048:	1824      	adds	r4, r4, r0
   d504a:	ea4f 6563 	mov.w	r5, r3, asr #25
   d504e:	414d      	adcs	r5, r1
   d5050:	17d3      	asrs	r3, r2, #31
   d5052:	4351      	muls	r1, r2
   d5054:	fb00 1303 	mla	r3, r0, r3, r1
   d5058:	fba2 0100 	umull	r0, r1, r2, r0
   d505c:	4419      	add	r1, r3
   d505e:	0cc2      	lsrs	r2, r0, #19
   d5060:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
   d5064:	1912      	adds	r2, r2, r4
    return (float)p/256;
   d5066:	f9b6 4026 	ldrsh.w	r4, [r6, #38]	; 0x26
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d506a:	ea4f 43e1 	mov.w	r3, r1, asr #19
   d506e:	416b      	adcs	r3, r5
   d5070:	0a10      	lsrs	r0, r2, #8
    return (float)p/256;
   d5072:	17e5      	asrs	r5, r4, #31
   d5074:	0122      	lsls	r2, r4, #4
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d5076:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
   d507a:	1219      	asrs	r1, r3, #8
    return (float)p/256;
   d507c:	012b      	lsls	r3, r5, #4
   d507e:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
   d5082:	1880      	adds	r0, r0, r2
   d5084:	4159      	adcs	r1, r3
   d5086:	f004 f843 	bl	d9110 <__aeabi_l2f>
   d508a:	ed9f 0a08 	vldr	s0, [pc, #32]	; d50ac <_ZN15Adafruit_BME28012readPressureEv+0x1b0>
   d508e:	ee07 0a90 	vmov	s15, r0
   d5092:	ee27 0a80 	vmul.f32	s0, s15, s0
   d5096:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

    readTemperature(); // must be done first to get t_fine

    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
   d509a:	ed9f 0a05 	vldr	s0, [pc, #20]	; d50b0 <_ZN15Adafruit_BME28012readPressureEv+0x1b4>
   d509e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
   d50a2:	ed9f 0a04 	vldr	s0, [pc, #16]	; d50b4 <_ZN15Adafruit_BME28012readPressureEv+0x1b8>
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
    return (float)p/256;
}
   d50a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d50aa:	bf00      	nop
   d50ac:	3b800000 	.word	0x3b800000
   d50b0:	7fc00000 	.word	0x7fc00000
   d50b4:	00000000 	.word	0x00000000

000d50b8 <_ZN15Adafruit_BME28012readHumidityEv>:
/*!
    @brief  Returns the humidity from the sensor
    @returns the humidity value read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readHumidity(void) {
   d50b8:	b510      	push	{r4, lr}
   d50ba:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
   d50bc:	f7ff fef0 	bl	d4ea0 <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
   d50c0:	21fd      	movs	r1, #253	; 0xfd
   d50c2:	4620      	mov	r0, r4
   d50c4:	f7ff fd2a 	bl	d4b1c <_ZN15Adafruit_BME2806read16Eh>
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
   d50c8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   d50cc:	d038      	beq.n	d5140 <_ZN15Adafruit_BME28012readHumidityEv+0x88>
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d50ce:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
        return NAN;
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));
   d50d2:	68e2      	ldr	r2, [r4, #12]

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d50d4:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
   d50d8:	051b      	lsls	r3, r3, #20
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
        return NAN;
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));
   d50da:	f5a2 3296 	sub.w	r2, r2, #76800	; 0x12c00

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d50de:	ebc3 3380 	rsb	r3, r3, r0, lsl #14
   d50e2:	fb02 3311 	mls	r3, r2, r1, r3
   d50e6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   d50ea:	13d9      	asrs	r1, r3, #15
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   d50ec:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   d50f0:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d50f4:	4353      	muls	r3, r2
   d50f6:	12db      	asrs	r3, r3, #11
   d50f8:	4342      	muls	r2, r0
   d50fa:	1292      	asrs	r2, r2, #10
   d50fc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   d5100:	4353      	muls	r3, r2
   d5102:	129b      	asrs	r3, r3, #10
   d5104:	f9b4 202e 	ldrsh.w	r2, [r4, #46]	; 0x2e
   d5108:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   d510c:	4353      	muls	r3, r2
   d510e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   d5112:	139b      	asrs	r3, r3, #14
   d5114:	434b      	muls	r3, r1

    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   d5116:	13da      	asrs	r2, r3, #15
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
   d5118:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
   d511c:	4352      	muls	r2, r2
   d511e:	11d2      	asrs	r2, r2, #7
   d5120:	434a      	muls	r2, r1
   d5122:	eba3 1322 	sub.w	r3, r3, r2, asr #4

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
   d5126:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
    float h = (v_x1_u32r>>12);
    return  h / 1024.0;
   d512a:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   d512e:	bfa8      	it	ge
   d5130:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
   d5134:	131b      	asrs	r3, r3, #12
   d5136:	ee00 3a10 	vmov	s0, r3
   d513a:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
   d513e:	bd10      	pop	{r4, pc}
float Adafruit_BME280::readHumidity(void) {
    readTemperature(); // must be done first to get t_fine

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
        return NAN;
   d5140:	ed9f 0a01 	vldr	s0, [pc, #4]	; d5148 <_ZN15Adafruit_BME28012readHumidityEv+0x90>

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
    float h = (v_x1_u32r>>12);
    return  h / 1024.0;
}
   d5144:	bd10      	pop	{r4, pc}
   d5146:	bf00      	nop
   d5148:	7fc00000 	.word	0x7fc00000

000d514c <_GLOBAL__sub_I__ZN15Adafruit_BME280C2Ev>:
   d514c:	f000 ba94 	b.w	d5678 <HAL_Pin_Map>

000d5150 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d5150:	6803      	ldr	r3, [r0, #0]
   d5152:	b2c9      	uxtb	r1, r1
   d5154:	689b      	ldr	r3, [r3, #8]
   d5156:	4718      	bx	r3

000d5158 <_ZN9SeeedOLED11sendCommandEh>:
  delay(5);
  sendCommand(SeeedOLED_Normal_Display_Cmd); //Set Normal Display (default)
}

void SeeedOLED::sendCommand(unsigned char command)
{
   d5158:	b510      	push	{r4, lr}
   d515a:	460c      	mov	r4, r1
  Wire.beginTransmission(SeeedOLED_Address); // begin I2C communication
   d515c:	f001 ff64 	bl	d7028 <_Z19__fetch_global_Wirev>
   d5160:	213c      	movs	r1, #60	; 0x3c
   d5162:	f001 f902 	bl	d636a <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(SeeedOLED_Command_Mode);        // Set OLED Command mode
   d5166:	f001 ff5f 	bl	d7028 <_Z19__fetch_global_Wirev>
   d516a:	2180      	movs	r1, #128	; 0x80
   d516c:	f7ff fff0 	bl	d5150 <_ZN7TwoWire5writeEi>
  Wire.write(command);
   d5170:	f001 ff5a 	bl	d7028 <_Z19__fetch_global_Wirev>
   d5174:	6803      	ldr	r3, [r0, #0]
   d5176:	4621      	mov	r1, r4
   d5178:	689b      	ldr	r3, [r3, #8]
   d517a:	4798      	blx	r3
  Wire.endTransmission(); // End I2C communication
   d517c:	f001 ff54 	bl	d7028 <_Z19__fetch_global_Wirev>
}
   d5180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void SeeedOLED::sendCommand(unsigned char command)
{
  Wire.beginTransmission(SeeedOLED_Address); // begin I2C communication
  Wire.write(SeeedOLED_Command_Mode);        // Set OLED Command mode
  Wire.write(command);
  Wire.endTransmission(); // End I2C communication
   d5184:	f001 b8f8 	b.w	d6378 <_ZN7TwoWire15endTransmissionEv>

000d5188 <_ZN9SeeedOLED4initEv>:
        {0x00, 0x41, 0x36, 0x08, 0x00, 0x00, 0x00, 0x00},
        {0x00, 0x02, 0x01, 0x01, 0x02, 0x01, 0x00, 0x00},
        {0x00, 0x02, 0x05, 0x05, 0x02, 0x00, 0x00, 0x00}};

void SeeedOLED::init(void)
{
   d5188:	b510      	push	{r4, lr}
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
   d518a:	21ae      	movs	r1, #174	; 0xae
        {0x00, 0x41, 0x36, 0x08, 0x00, 0x00, 0x00, 0x00},
        {0x00, 0x02, 0x01, 0x01, 0x02, 0x01, 0x00, 0x00},
        {0x00, 0x02, 0x05, 0x05, 0x02, 0x00, 0x00, 0x00}};

void SeeedOLED::init(void)
{
   d518c:	4604      	mov	r4, r0
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
   d518e:	f7ff ffe3 	bl	d5158 <_ZN9SeeedOLED11sendCommandEh>
  delay(5);
   d5192:	2005      	movs	r0, #5
   d5194:	f000 fcb4 	bl	d5b00 <delay>
  sendCommand(SeeedOLED_Display_On_Cmd); //display on
   d5198:	21af      	movs	r1, #175	; 0xaf
   d519a:	4620      	mov	r0, r4
   d519c:	f7ff ffdc 	bl	d5158 <_ZN9SeeedOLED11sendCommandEh>
  delay(5);
   d51a0:	2005      	movs	r0, #5
   d51a2:	f000 fcad 	bl	d5b00 <delay>
  sendCommand(SeeedOLED_Normal_Display_Cmd); //Set Normal Display (default)
   d51a6:	4620      	mov	r0, r4
   d51a8:	21a6      	movs	r1, #166	; 0xa6
}
   d51aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
  delay(5);
  sendCommand(SeeedOLED_Display_On_Cmd); //display on
  delay(5);
  sendCommand(SeeedOLED_Normal_Display_Cmd); //Set Normal Display (default)
   d51ae:	f7ff bfd3 	b.w	d5158 <_ZN9SeeedOLED11sendCommandEh>

000d51b2 <_ZN9SeeedOLED11setPageModeEv>:
  sendCommand(0x20); //set addressing mode
  sendCommand(0x00); //set horizontal addressing mode
}

void SeeedOLED::setPageMode()
{
   d51b2:	b510      	push	{r4, lr}
  addressingMode = PAGE_MODE;
   d51b4:	2301      	movs	r3, #1
  sendCommand(0x20); //set addressing mode
  sendCommand(0x00); //set horizontal addressing mode
}

void SeeedOLED::setPageMode()
{
   d51b6:	4604      	mov	r4, r0
  addressingMode = PAGE_MODE;
   d51b8:	7003      	strb	r3, [r0, #0]
  sendCommand(0x20); //set addressing mode
   d51ba:	2120      	movs	r1, #32
   d51bc:	f7ff ffcc 	bl	d5158 <_ZN9SeeedOLED11sendCommandEh>
  sendCommand(0x02); //set page addressing mode
   d51c0:	4620      	mov	r0, r4
   d51c2:	2102      	movs	r1, #2
}
   d51c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void SeeedOLED::setPageMode()
{
  addressingMode = PAGE_MODE;
  sendCommand(0x20); //set addressing mode
  sendCommand(0x02); //set page addressing mode
   d51c8:	f7ff bfc6 	b.w	d5158 <_ZN9SeeedOLED11sendCommandEh>

000d51cc <_ZN9SeeedOLED9setTextXYEhh>:
}

void SeeedOLED::setTextXY(unsigned char Row, unsigned char Column)
{
   d51cc:	b538      	push	{r3, r4, r5, lr}
  sendCommand(0xB0 + Row);                        //set page address
   d51ce:	3950      	subs	r1, #80	; 0x50
  sendCommand(0x20); //set addressing mode
  sendCommand(0x02); //set page addressing mode
}

void SeeedOLED::setTextXY(unsigned char Row, unsigned char Column)
{
   d51d0:	4614      	mov	r4, r2
  sendCommand(0xB0 + Row);                        //set page address
   d51d2:	b2c9      	uxtb	r1, r1
  sendCommand(0x20); //set addressing mode
  sendCommand(0x02); //set page addressing mode
}

void SeeedOLED::setTextXY(unsigned char Row, unsigned char Column)
{
   d51d4:	4605      	mov	r5, r0
  sendCommand(0xB0 + Row);                        //set page address
   d51d6:	f7ff ffbf 	bl	d5158 <_ZN9SeeedOLED11sendCommandEh>
  sendCommand(0x00 + (8 * Column & 0x0F));        //set column lower address
   d51da:	00e1      	lsls	r1, r4, #3
   d51dc:	4628      	mov	r0, r5
   d51de:	f001 0108 	and.w	r1, r1, #8
   d51e2:	f7ff ffb9 	bl	d5158 <_ZN9SeeedOLED11sendCommandEh>
  sendCommand(0x10 + ((8 * Column >> 4) & 0x0F)); //set column higher address
   d51e6:	f3c4 0143 	ubfx	r1, r4, #1, #4
   d51ea:	4628      	mov	r0, r5
   d51ec:	3110      	adds	r1, #16
}
   d51ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

void SeeedOLED::setTextXY(unsigned char Row, unsigned char Column)
{
  sendCommand(0xB0 + Row);                        //set page address
  sendCommand(0x00 + (8 * Column & 0x0F));        //set column lower address
  sendCommand(0x10 + ((8 * Column >> 4) & 0x0F)); //set column higher address
   d51f2:	f7ff bfb1 	b.w	d5158 <_ZN9SeeedOLED11sendCommandEh>

000d51f6 <_ZN9SeeedOLED8sendDataEh>:
  sendCommand(SeeedOLED_Display_On_Cmd); //display on
  setTextXY(0, 0);
}

void SeeedOLED::sendData(unsigned char Data)
{
   d51f6:	b510      	push	{r4, lr}
   d51f8:	460c      	mov	r4, r1
  Wire.beginTransmission(SeeedOLED_Address); // begin I2C transmission
   d51fa:	f001 ff15 	bl	d7028 <_Z19__fetch_global_Wirev>
   d51fe:	213c      	movs	r1, #60	; 0x3c
   d5200:	f001 f8b3 	bl	d636a <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(SeeedOLED_Data_Mode);           // data mode
   d5204:	f001 ff10 	bl	d7028 <_Z19__fetch_global_Wirev>
   d5208:	2140      	movs	r1, #64	; 0x40
   d520a:	f7ff ffa1 	bl	d5150 <_ZN7TwoWire5writeEi>
  Wire.write(Data);
   d520e:	f001 ff0b 	bl	d7028 <_Z19__fetch_global_Wirev>
   d5212:	6803      	ldr	r3, [r0, #0]
   d5214:	4621      	mov	r1, r4
   d5216:	689b      	ldr	r3, [r3, #8]
   d5218:	4798      	blx	r3
  Wire.endTransmission(); // stop I2C transmission
   d521a:	f001 ff05 	bl	d7028 <_Z19__fetch_global_Wirev>
}
   d521e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void SeeedOLED::sendData(unsigned char Data)
{
  Wire.beginTransmission(SeeedOLED_Address); // begin I2C transmission
  Wire.write(SeeedOLED_Data_Mode);           // data mode
  Wire.write(Data);
  Wire.endTransmission(); // stop I2C transmission
   d5222:	f001 b8a9 	b.w	d6378 <_ZN7TwoWire15endTransmissionEv>
	...

000d5228 <_ZN9SeeedOLED7putCharEh>:
}

void SeeedOLED::putChar(unsigned char C)
{
  if (C < 32 || C > 127) //Ignore non-printable ASCII characters. This can be modified for multilingual font.
   d5228:	f1a1 0320 	sub.w	r3, r1, #32
  {
    C = ' '; //Space
   d522c:	2b5f      	cmp	r3, #95	; 0x5f
   d522e:	4b0b      	ldr	r3, [pc, #44]	; (d525c <_ZN9SeeedOLED7putCharEh+0x34>)
   d5230:	bf88      	it	hi
   d5232:	2120      	movhi	r1, #32
  Wire.write(Data);
  Wire.endTransmission(); // stop I2C transmission
}

void SeeedOLED::putChar(unsigned char C)
{
   d5234:	b570      	push	{r4, r5, r6, lr}
   d5236:	f46f 7280 	mvn.w	r2, #256	; 0x100
   d523a:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
   d523e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   d5242:	4606      	mov	r6, r0
   d5244:	4415      	add	r5, r2
   d5246:	f1a3 04f9 	sub.w	r4, r3, #249	; 0xf9
  }
  unsigned char i = 0;
  for (i = 0; i < 8; i++)
  {
    //read bytes from code memory
    sendData(pgm_read_byte(&BasicFont[C - 32][i])); //font array starts at 0, ASCII starts at 32. Hence the translation
   d524a:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   d524e:	4630      	mov	r0, r6
   d5250:	f7ff ffd1 	bl	d51f6 <_ZN9SeeedOLED8sendDataEh>
  if (C < 32 || C > 127) //Ignore non-printable ASCII characters. This can be modified for multilingual font.
  {
    C = ' '; //Space
  }
  unsigned char i = 0;
  for (i = 0; i < 8; i++)
   d5254:	42a5      	cmp	r5, r4
   d5256:	d1f8      	bne.n	d524a <_ZN9SeeedOLED7putCharEh+0x22>
  {
    //read bytes from code memory
    sendData(pgm_read_byte(&BasicFont[C - 32][i])); //font array starts at 0, ASCII starts at 32. Hence the translation
  }
}
   d5258:	bd70      	pop	{r4, r5, r6, pc}
   d525a:	bf00      	nop
   d525c:	000d9801 	.word	0x000d9801

000d5260 <_ZN9SeeedOLED12clearDisplayEv>:
  sendCommand(0x00 + (8 * Column & 0x0F));        //set column lower address
  sendCommand(0x10 + ((8 * Column >> 4) & 0x0F)); //set column higher address
}

void SeeedOLED::clearDisplay()
{
   d5260:	b570      	push	{r4, r5, r6, lr}
  unsigned char i, j;
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
   d5262:	21ae      	movs	r1, #174	; 0xae
  sendCommand(0x00 + (8 * Column & 0x0F));        //set column lower address
  sendCommand(0x10 + ((8 * Column >> 4) & 0x0F)); //set column higher address
}

void SeeedOLED::clearDisplay()
{
   d5264:	4605      	mov	r5, r0
  unsigned char i, j;
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
   d5266:	f7ff ff77 	bl	d5158 <_ZN9SeeedOLED11sendCommandEh>
   d526a:	2600      	movs	r6, #0
  for (j = 0; j < 8; j++)
  {
    setTextXY(j, 0);
   d526c:	2200      	movs	r2, #0
   d526e:	b2f1      	uxtb	r1, r6
   d5270:	4628      	mov	r0, r5
   d5272:	f7ff ffab 	bl	d51cc <_ZN9SeeedOLED9setTextXYEhh>
   d5276:	2410      	movs	r4, #16
    {
      for (i = 0; i < 16; i++) //clear all columns
      {
        putChar(' ');
   d5278:	2120      	movs	r1, #32
   d527a:	4628      	mov	r0, r5
   d527c:	3c01      	subs	r4, #1
   d527e:	f7ff ffd3 	bl	d5228 <_ZN9SeeedOLED7putCharEh>
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
  for (j = 0; j < 8; j++)
  {
    setTextXY(j, 0);
    {
      for (i = 0; i < 16; i++) //clear all columns
   d5282:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   d5286:	d1f7      	bne.n	d5278 <_ZN9SeeedOLED12clearDisplayEv+0x18>
   d5288:	3601      	adds	r6, #1

void SeeedOLED::clearDisplay()
{
  unsigned char i, j;
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
  for (j = 0; j < 8; j++)
   d528a:	2e08      	cmp	r6, #8
   d528c:	d1ee      	bne.n	d526c <_ZN9SeeedOLED12clearDisplayEv+0xc>
      {
        putChar(' ');
      }
    }
  }
  sendCommand(SeeedOLED_Display_On_Cmd); //display on
   d528e:	4628      	mov	r0, r5
   d5290:	21af      	movs	r1, #175	; 0xaf
   d5292:	f7ff ff61 	bl	d5158 <_ZN9SeeedOLED11sendCommandEh>
  setTextXY(0, 0);
   d5296:	4622      	mov	r2, r4
   d5298:	4621      	mov	r1, r4
   d529a:	4628      	mov	r0, r5
}
   d529c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        putChar(' ');
      }
    }
  }
  sendCommand(SeeedOLED_Display_On_Cmd); //display on
  setTextXY(0, 0);
   d52a0:	f7ff bf94 	b.w	d51cc <_ZN9SeeedOLED9setTextXYEhh>

000d52a4 <_ZN9SeeedOLED9putStringEPKc>:
    sendData(pgm_read_byte(&BasicFont[C - 32][i])); //font array starts at 0, ASCII starts at 32. Hence the translation
  }
}

void SeeedOLED::putString(const char *String)
{
   d52a4:	b570      	push	{r4, r5, r6, lr}
   d52a6:	4605      	mov	r5, r0
   d52a8:	460e      	mov	r6, r1
   d52aa:	2400      	movs	r4, #0
  unsigned char i = 0;
  while (String[i])
   d52ac:	b2e3      	uxtb	r3, r4
   d52ae:	3401      	adds	r4, #1
   d52b0:	5cf1      	ldrb	r1, [r6, r3]
   d52b2:	b119      	cbz	r1, d52bc <_ZN9SeeedOLED9putStringEPKc+0x18>
  {
    putChar(String[i]);
   d52b4:	4628      	mov	r0, r5
   d52b6:	f7ff ffb7 	bl	d5228 <_ZN9SeeedOLED7putCharEh>
}

void SeeedOLED::putString(const char *String)
{
  unsigned char i = 0;
  while (String[i])
   d52ba:	e7f7      	b.n	d52ac <_ZN9SeeedOLED9putStringEPKc+0x8>
   d52bc:	bd70      	pop	{r4, r5, r6, pc}

000d52be <_ZN9SeeedOLED9putNumberEl>:
    i++;
  }
}

unsigned char SeeedOLED::putNumber(long long_num)
{
   d52be:	b5f0      	push	{r4, r5, r6, r7, lr}
   d52c0:	b085      	sub	sp, #20
  unsigned char char_buffer[10] = "";
   d52c2:	2300      	movs	r3, #0
  unsigned char i = 0;
  unsigned char f = 0;

  if (long_num < 0)
   d52c4:	1e0e      	subs	r6, r1, #0
    i++;
  }
}

unsigned char SeeedOLED::putNumber(long long_num)
{
   d52c6:	4607      	mov	r7, r0
  unsigned char char_buffer[10] = "";
   d52c8:	9301      	str	r3, [sp, #4]
   d52ca:	9302      	str	r3, [sp, #8]
   d52cc:	f8ad 300c 	strh.w	r3, [sp, #12]
  unsigned char i = 0;
  unsigned char f = 0;

  if (long_num < 0)
   d52d0:	da07      	bge.n	d52e2 <_ZN9SeeedOLED9putNumberEl+0x24>
  {
    f = 1;
    putChar('-');
   d52d2:	212d      	movs	r1, #45	; 0x2d
   d52d4:	f7ff ffa8 	bl	d5228 <_ZN9SeeedOLED7putCharEh>
    long_num = -long_num;
   d52d8:	4276      	negs	r6, r6
  unsigned char i = 0;
  unsigned char f = 0;

  if (long_num < 0)
  {
    f = 1;
   d52da:	2301      	movs	r3, #1

unsigned char SeeedOLED::putNumber(long long_num)
{
  unsigned char char_buffer[10] = "";
  unsigned char i = 0;
  unsigned char f = 0;
   d52dc:	2400      	movs	r4, #0
    return f;
  }

  while (long_num > 0)
  {
    char_buffer[i++] = long_num % 10;
   d52de:	210a      	movs	r1, #10
   d52e0:	e005      	b.n	d52ee <_ZN9SeeedOLED9putNumberEl+0x30>
  {
    f = 1;
    putChar('-');
    long_num = -long_num;
  }
  else if (long_num == 0)
   d52e2:	d1fb      	bne.n	d52dc <_ZN9SeeedOLED9putNumberEl+0x1e>
  {
    f = 1;
    putChar('0');
   d52e4:	2130      	movs	r1, #48	; 0x30
   d52e6:	f7ff ff9f 	bl	d5228 <_ZN9SeeedOLED7putCharEh>
    return f;
   d52ea:	2001      	movs	r0, #1
   d52ec:	e01d      	b.n	d532a <_ZN9SeeedOLED9putNumberEl+0x6c>
  }

  while (long_num > 0)
  {
    char_buffer[i++] = long_num % 10;
   d52ee:	aa04      	add	r2, sp, #16
   d52f0:	1c65      	adds	r5, r4, #1
   d52f2:	4414      	add	r4, r2
   d52f4:	b2ed      	uxtb	r5, r5
   d52f6:	fb96 f2f1 	sdiv	r2, r6, r1
   d52fa:	fb01 6612 	mls	r6, r1, r2, r6
   d52fe:	f804 6c0c 	strb.w	r6, [r4, #-12]
   d5302:	462c      	mov	r4, r5
    f = 1;
    putChar('0');
    return f;
  }

  while (long_num > 0)
   d5304:	4616      	mov	r6, r2
   d5306:	2a00      	cmp	r2, #0
   d5308:	d1f1      	bne.n	d52ee <_ZN9SeeedOLED9putNumberEl+0x30>
  {
    char_buffer[i++] = long_num % 10;
    long_num /= 10;
  }

  f = f + i;
   d530a:	442b      	add	r3, r5
   d530c:	b2dc      	uxtb	r4, r3
  for (; i > 0; i--)
   d530e:	b15d      	cbz	r5, d5328 <_ZN9SeeedOLED9putNumberEl+0x6a>
  {
    putChar('0' + char_buffer[i - 1]);
   d5310:	ab04      	add	r3, sp, #16
   d5312:	442b      	add	r3, r5
   d5314:	4638      	mov	r0, r7
   d5316:	f813 1c0d 	ldrb.w	r1, [r3, #-13]
   d531a:	3130      	adds	r1, #48	; 0x30
   d531c:	b2c9      	uxtb	r1, r1
    char_buffer[i++] = long_num % 10;
    long_num /= 10;
  }

  f = f + i;
  for (; i > 0; i--)
   d531e:	3d01      	subs	r5, #1
  {
    putChar('0' + char_buffer[i - 1]);
   d5320:	f7ff ff82 	bl	d5228 <_ZN9SeeedOLED7putCharEh>
    char_buffer[i++] = long_num % 10;
    long_num /= 10;
  }

  f = f + i;
  for (; i > 0; i--)
   d5324:	b2ed      	uxtb	r5, r5
   d5326:	e7f2      	b.n	d530e <_ZN9SeeedOLED9putNumberEl+0x50>
  {
    putChar('0' + char_buffer[i - 1]);
  }
  return f;
   d5328:	4620      	mov	r0, r4
}
   d532a:	b005      	add	sp, #20
   d532c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d532e <_ZN9SeeedOLED16setNormalDisplayEv>:
  sendCommand(SeeedOLED_Dectivate_Scroll_Cmd);
}

void SeeedOLED::setNormalDisplay()
{
  sendCommand(SeeedOLED_Normal_Display_Cmd);
   d532e:	21a6      	movs	r1, #166	; 0xa6
   d5330:	f7ff bf12 	b.w	d5158 <_ZN9SeeedOLED11sendCommandEh>

000d5334 <_GLOBAL__sub_I__ZN9SeeedOLED4initEv>:
   d5334:	f000 b9a0 	b.w	d5678 <HAL_Pin_Map>

000d5338 <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d5338:	b510      	push	{r4, lr}
   d533a:	4b05      	ldr	r3, [pc, #20]	; (d5350 <_ZN10JsonBufferD1Ev+0x18>)
   d533c:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   d533e:	7c03      	ldrb	r3, [r0, #16]


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d5340:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   d5342:	b91b      	cbnz	r3, d534c <_ZN10JsonBufferD1Ev+0x14>
   d5344:	6840      	ldr	r0, [r0, #4]
   d5346:	b108      	cbz	r0, d534c <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   d5348:	f000 fbaa 	bl	d5aa0 <free>
	}
}
   d534c:	4620      	mov	r0, r4
   d534e:	bd10      	pop	{r4, pc}
   d5350:	000d9b0c 	.word	0x000d9b0c

000d5354 <_ZN10JsonBufferD0Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d5354:	b510      	push	{r4, lr}
   d5356:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}
   d5358:	f7ff ffee 	bl	d5338 <_ZN10JsonBufferD1Ev>
   d535c:	4620      	mov	r0, r4
   d535e:	2114      	movs	r1, #20
   d5360:	f001 fead 	bl	d70be <_ZdlPvj>
   d5364:	4620      	mov	r0, r4
   d5366:	bd10      	pop	{r4, pc}

000d5368 <_ZN10JsonWriterD1Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   d5368:	b510      	push	{r4, lr}
   d536a:	4b03      	ldr	r3, [pc, #12]	; (d5378 <_ZN10JsonWriterD1Ev+0x10>)
   d536c:	6003      	str	r3, [r0, #0]
   d536e:	4604      	mov	r4, r0
   d5370:	f7ff ffe2 	bl	d5338 <_ZN10JsonBufferD1Ev>

}
   d5374:	4620      	mov	r0, r4
   d5376:	bd10      	pop	{r4, pc}
   d5378:	000d9b1c 	.word	0x000d9b1c

000d537c <_ZN10JsonWriterD0Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   d537c:	b510      	push	{r4, lr}
   d537e:	4604      	mov	r4, r0

}
   d5380:	f7ff fff2 	bl	d5368 <_ZN10JsonWriterD1Ev>
   d5384:	4620      	mov	r0, r4
   d5386:	2130      	movs	r1, #48	; 0x30
   d5388:	f001 fe99 	bl	d70be <_ZdlPvj>
   d538c:	4620      	mov	r0, r4
   d538e:	bd10      	pop	{r4, pc}

000d5390 <_ZN10JsonWriter4initEv>:
	init();
}

void JsonWriter::init() {
	// Save start of insertion point for later
	offset = 0;
   d5390:	2300      	movs	r3, #0

	contextIndex = 0;
	context[contextIndex].isFirst = true;
   d5392:	2201      	movs	r2, #1
	init();
}

void JsonWriter::init() {
	// Save start of insertion point for later
	offset = 0;
   d5394:	60c3      	str	r3, [r0, #12]

	contextIndex = 0;
   d5396:	6143      	str	r3, [r0, #20]
	context[contextIndex].isFirst = true;
   d5398:	7602      	strb	r2, [r0, #24]
	context[contextIndex].terminator = 0;
   d539a:	7643      	strb	r3, [r0, #25]

	truncated = false;
   d539c:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
   d53a0:	4770      	bx	lr
	...

000d53a4 <_ZN10JsonWriterC1EPcj>:
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d53a4:	2300      	movs	r3, #0

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d53a6:	b510      	push	{r4, lr}
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d53a8:	60c3      	str	r3, [r0, #12]
   d53aa:	2301      	movs	r3, #1
   d53ac:	7403      	strb	r3, [r0, #16]

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d53ae:	4b05      	ldr	r3, [pc, #20]	; (d53c4 <_ZN10JsonWriterC1EPcj+0x20>)
   d53b0:	6003      	str	r3, [r0, #0]
   d53b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d53b6:	6041      	str	r1, [r0, #4]
   d53b8:	6082      	str	r2, [r0, #8]

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d53ba:	62c3      	str	r3, [r0, #44]	; 0x2c
	init();
   d53bc:	f7ff ffe8 	bl	d5390 <_ZN10JsonWriter4initEv>
}
   d53c0:	bd10      	pop	{r4, pc}
   d53c2:	bf00      	nop
   d53c4:	000d9b1c 	.word	0x000d9b1c

000d53c8 <_ZN10JsonWriter10insertCharEc>:
	}
}


void JsonWriter::insertChar(char ch) {
	if (offset < bufferLen) {
   d53c8:	68c3      	ldr	r3, [r0, #12]
   d53ca:	6882      	ldr	r2, [r0, #8]
		buffer[bufferLen - 1] = 0;
	}
}


void JsonWriter::insertChar(char ch) {
   d53cc:	b510      	push	{r4, lr}
	if (offset < bufferLen) {
   d53ce:	4293      	cmp	r3, r2
		buffer[offset++] = ch;
   d53d0:	bf3f      	itttt	cc
   d53d2:	6842      	ldrcc	r2, [r0, #4]
   d53d4:	1c5c      	addcc	r4, r3, #1
   d53d6:	60c4      	strcc	r4, [r0, #12]
   d53d8:	54d1      	strbcc	r1, [r2, r3]
	}
	else {
		truncated = true;
   d53da:	bf24      	itt	cs
   d53dc:	2301      	movcs	r3, #1
   d53de:	f880 302a 	strbcs.w	r3, [r0, #42]	; 0x2a
   d53e2:	bd10      	pop	{r4, pc}

000d53e4 <_ZN10JsonWriter19finishObjectOrArrayEv>:
	insertChar(startChar);
	return true;
}


void JsonWriter::finishObjectOrArray() {
   d53e4:	b510      	push	{r4, lr}
	if (contextIndex > 0) {
   d53e6:	6943      	ldr	r3, [r0, #20]
	insertChar(startChar);
	return true;
}


void JsonWriter::finishObjectOrArray() {
   d53e8:	4604      	mov	r4, r0
	if (contextIndex > 0) {
   d53ea:	b143      	cbz	r3, d53fe <_ZN10JsonWriter19finishObjectOrArrayEv+0x1a>
		if (context[contextIndex].terminator != 0) {
   d53ec:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   d53f0:	7e59      	ldrb	r1, [r3, #25]
   d53f2:	b109      	cbz	r1, d53f8 <_ZN10JsonWriter19finishObjectOrArrayEv+0x14>
			insertChar(context[contextIndex].terminator);
   d53f4:	f7ff ffe8 	bl	d53c8 <_ZN10JsonWriter10insertCharEc>
		}
		contextIndex--;
   d53f8:	6963      	ldr	r3, [r4, #20]
   d53fa:	3b01      	subs	r3, #1
   d53fc:	6163      	str	r3, [r4, #20]
	}
	// Make sure buffer is null terminated
	if (offset < bufferLen) {
   d53fe:	68a3      	ldr	r3, [r4, #8]
   d5400:	68e0      	ldr	r0, [r4, #12]
   d5402:	6861      	ldr	r1, [r4, #4]
   d5404:	4298      	cmp	r0, r3
   d5406:	f04f 0200 	mov.w	r2, #0
		buffer[offset] = 0;
	}
	else {
		buffer[bufferLen - 1] = 0;
   d540a:	bf2a      	itet	cs
   d540c:	185b      	addcs	r3, r3, r1
		}
		contextIndex--;
	}
	// Make sure buffer is null terminated
	if (offset < bufferLen) {
		buffer[offset] = 0;
   d540e:	540a      	strbcc	r2, [r1, r0]
	}
	else {
		buffer[bufferLen - 1] = 0;
   d5410:	f803 2c01 	strbcs.w	r2, [r3, #-1]
   d5414:	bd10      	pop	{r4, pc}

000d5416 <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>:
	va_start(ap, fmt);
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   d5416:	b570      	push	{r4, r5, r6, lr}
   d5418:	4604      	mov	r4, r0
	size_t spaceAvailable = bufferLen - offset;
   d541a:	68c0      	ldr	r0, [r0, #12]
   d541c:	68a5      	ldr	r5, [r4, #8]

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   d541e:	6866      	ldr	r6, [r4, #4]
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;
   d5420:	1a2d      	subs	r5, r5, r0

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   d5422:	4613      	mov	r3, r2
   d5424:	4430      	add	r0, r6
   d5426:	460a      	mov	r2, r1
   d5428:	4629      	mov	r1, r5
   d542a:	f000 fb49 	bl	d5ac0 <vsnprintf>
	if (count <= spaceAvailable) {
   d542e:	4285      	cmp	r5, r0
		offset += count;
   d5430:	bf2d      	iteet	cs
   d5432:	68e3      	ldrcs	r3, [r4, #12]
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
   d5434:	68a3      	ldrcc	r3, [r4, #8]
   d5436:	60e3      	strcc	r3, [r4, #12]
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
	if (count <= spaceAvailable) {
		offset += count;
   d5438:	18c0      	addcs	r0, r0, r3
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
		truncated = true;
   d543a:	bf36      	itet	cc
   d543c:	2301      	movcc	r3, #1
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
	if (count <= spaceAvailable) {
		offset += count;
   d543e:	60e0      	strcs	r0, [r4, #12]
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
		truncated = true;
   d5440:	f884 302a 	strbcc.w	r3, [r4, #42]	; 0x2a
   d5444:	bd70      	pop	{r4, r5, r6, pc}

000d5446 <_ZN10JsonWriter13insertsprintfEPKcz>:

}



void JsonWriter::insertsprintf(const char *fmt, ...) {
   d5446:	b40e      	push	{r1, r2, r3}
   d5448:	b503      	push	{r0, r1, lr}
   d544a:	aa03      	add	r2, sp, #12
   d544c:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, fmt);
   d5450:	9201      	str	r2, [sp, #4]
	insertvsprintf(fmt, ap);
   d5452:	f7ff ffe0 	bl	d5416 <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>
	va_end(ap);
}
   d5456:	b002      	add	sp, #8
   d5458:	f85d eb04 	ldr.w	lr, [sp], #4
   d545c:	b003      	add	sp, #12
   d545e:	4770      	bx	lr

000d5460 <_ZN10JsonWriter12insertStringEPKcb>:
	else {
		truncated = true;
	}
}

void JsonWriter::insertString(const char *s, bool quoted) {
   d5460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5464:	4604      	mov	r4, r0
   d5466:	460e      	mov	r6, r1
	// 110xxxxx 10xxxxxx

	// 0x00000800 - 0x0000FFFF:
	// 1110xxxx 10xxxxxx 10xxxxxx

	if (quoted) {
   d5468:	4617      	mov	r7, r2
   d546a:	b112      	cbz	r2, d5472 <_ZN10JsonWriter12insertStringEPKcb+0x12>
		insertChar('"');
   d546c:	2122      	movs	r1, #34	; 0x22
   d546e:	f7ff ffab 	bl	d53c8 <_ZN10JsonWriter10insertCharEc>
	else {
		truncated = true;
	}
}

void JsonWriter::insertString(const char *s, bool quoted) {
   d5472:	2500      	movs	r5, #0

	if (quoted) {
		insertChar('"');
	}

	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   d5474:	5d71      	ldrb	r1, [r6, r5]
   d5476:	eb06 0805 	add.w	r8, r6, r5
   d547a:	2900      	cmp	r1, #0
   d547c:	d071      	beq.n	d5562 <_ZN10JsonWriter12insertStringEPKcb+0x102>
   d547e:	68e2      	ldr	r2, [r4, #12]
   d5480:	68a3      	ldr	r3, [r4, #8]
   d5482:	429a      	cmp	r2, r3
   d5484:	d26d      	bcs.n	d5562 <_ZN10JsonWriter12insertStringEPKcb+0x102>
		if (s[ii] & 0x80) {
   d5486:	060b      	lsls	r3, r1, #24
   d5488:	d533      	bpl.n	d54f2 <_ZN10JsonWriter12insertStringEPKcb+0x92>
			// High bit set: convert UTF-8 to JSON Unicode escape
			if (((s[ii] & 0b11110000) == 0b11100000) && ((s[ii+1] & 0b11000000) == 0b10000000) && ((s[ii+2] & 0b11000000) == 0b10000000)) {
   d548a:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
   d548e:	2be0      	cmp	r3, #224	; 0xe0
   d5490:	d117      	bne.n	d54c2 <_ZN10JsonWriter12insertStringEPKcb+0x62>
   d5492:	f898 3001 	ldrb.w	r3, [r8, #1]
   d5496:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   d549a:	2a80      	cmp	r2, #128	; 0x80
   d549c:	d111      	bne.n	d54c2 <_ZN10JsonWriter12insertStringEPKcb+0x62>
   d549e:	f105 0802 	add.w	r8, r5, #2
   d54a2:	f816 2008 	ldrb.w	r2, [r6, r8]
   d54a6:	f002 00c0 	and.w	r0, r2, #192	; 0xc0
   d54aa:	2880      	cmp	r0, #128	; 0x80
   d54ac:	d109      	bne.n	d54c2 <_ZN10JsonWriter12insertStringEPKcb+0x62>
				// 3-byte
				uint16_t utf16 = ((s[ii] & 0b1111) << 12) | ((s[ii+1] & 0b111111) << 6) | (s[ii+2] & 0b111111);
				insertsprintf("\\u%04X", utf16);
   d54ae:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   d54b2:	019b      	lsls	r3, r3, #6
   d54b4:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
   d54b8:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
   d54bc:	431a      	orrs	r2, r3
   d54be:	b292      	uxth	r2, r2
   d54c0:	e011      	b.n	d54e6 <_ZN10JsonWriter12insertStringEPKcb+0x86>
				ii += 2; // plus one more in loop increment
			}
			else
			if (((s[ii] & 0b11100000) == 0b11000000) && ((s[ii+1] & 0b11000000) == 0b10000000)) {
   d54c2:	f001 03e0 	and.w	r3, r1, #224	; 0xe0
   d54c6:	2bc0      	cmp	r3, #192	; 0xc0
   d54c8:	d146      	bne.n	d5558 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
   d54ca:	f105 0801 	add.w	r8, r5, #1
   d54ce:	f816 3008 	ldrb.w	r3, [r6, r8]
   d54d2:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   d54d6:	2a80      	cmp	r2, #128	; 0x80
   d54d8:	d13e      	bne.n	d5558 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				// 2-byte
				uint16_t utf16 = ((s[ii] & 0b11111) << 6) | (s[ii+1] & 0b111111);
				insertsprintf("\\u%04X", utf16);
   d54da:	0189      	lsls	r1, r1, #6
   d54dc:	f401 62f8 	and.w	r2, r1, #1984	; 0x7c0
   d54e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   d54e4:	431a      	orrs	r2, r3
   d54e6:	4923      	ldr	r1, [pc, #140]	; (d5574 <_ZN10JsonWriter12insertStringEPKcb+0x114>)
   d54e8:	4620      	mov	r0, r4
   d54ea:	f7ff ffac 	bl	d5446 <_ZN10JsonWriter13insertsprintfEPKcz>
				ii++; // plus one more in loop increment
   d54ee:	4645      	mov	r5, r8
   d54f0:	e035      	b.n	d555e <_ZN10JsonWriter12insertStringEPKcb+0xfe>
				// Not valid unicode, just pass characters through
				insertChar(s[ii]);
			}
		}
		else {
			switch(s[ii]) {
   d54f2:	290c      	cmp	r1, #12
   d54f4:	d018      	beq.n	d5528 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
   d54f6:	d80b      	bhi.n	d5510 <_ZN10JsonWriter12insertStringEPKcb+0xb0>
   d54f8:	2909      	cmp	r1, #9
   d54fa:	d021      	beq.n	d5540 <_ZN10JsonWriter12insertStringEPKcb+0xe0>
   d54fc:	290a      	cmp	r1, #10
   d54fe:	d019      	beq.n	d5534 <_ZN10JsonWriter12insertStringEPKcb+0xd4>
   d5500:	2908      	cmp	r1, #8
   d5502:	d129      	bne.n	d5558 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
			case '\b':
				insertChar('\\');
   d5504:	215c      	movs	r1, #92	; 0x5c
   d5506:	4620      	mov	r0, r4
   d5508:	f7ff ff5e 	bl	d53c8 <_ZN10JsonWriter10insertCharEc>
				insertChar('b');
   d550c:	2162      	movs	r1, #98	; 0x62
   d550e:	e023      	b.n	d5558 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				// Not valid unicode, just pass characters through
				insertChar(s[ii]);
			}
		}
		else {
			switch(s[ii]) {
   d5510:	2922      	cmp	r1, #34	; 0x22
   d5512:	d01b      	beq.n	d554c <_ZN10JsonWriter12insertStringEPKcb+0xec>
   d5514:	295c      	cmp	r1, #92	; 0x5c
   d5516:	d019      	beq.n	d554c <_ZN10JsonWriter12insertStringEPKcb+0xec>
   d5518:	290d      	cmp	r1, #13
   d551a:	d11d      	bne.n	d5558 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('n');
				break;

			case '\r':
				insertChar('\\');
   d551c:	215c      	movs	r1, #92	; 0x5c
   d551e:	4620      	mov	r0, r4
   d5520:	f7ff ff52 	bl	d53c8 <_ZN10JsonWriter10insertCharEc>
				insertChar('r');
   d5524:	2172      	movs	r1, #114	; 0x72
   d5526:	e017      	b.n	d5558 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('b');
				break;

			case '\f':
				insertChar('\\');
   d5528:	215c      	movs	r1, #92	; 0x5c
   d552a:	4620      	mov	r0, r4
   d552c:	f7ff ff4c 	bl	d53c8 <_ZN10JsonWriter10insertCharEc>
				insertChar('f');
   d5530:	2166      	movs	r1, #102	; 0x66
   d5532:	e011      	b.n	d5558 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				break;

			case '\n':
				insertChar('\\');
   d5534:	215c      	movs	r1, #92	; 0x5c
   d5536:	4620      	mov	r0, r4
   d5538:	f7ff ff46 	bl	d53c8 <_ZN10JsonWriter10insertCharEc>
				insertChar('n');
   d553c:	216e      	movs	r1, #110	; 0x6e
   d553e:	e00b      	b.n	d5558 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('r');
				break;

			case '\t':
				insertChar('\\');
   d5540:	215c      	movs	r1, #92	; 0x5c
   d5542:	4620      	mov	r0, r4
   d5544:	f7ff ff40 	bl	d53c8 <_ZN10JsonWriter10insertCharEc>
				insertChar('t');
   d5548:	2174      	movs	r1, #116	; 0x74
   d554a:	e005      	b.n	d5558 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				break;

			case '"':
			case '\\':
				insertChar('\\');
   d554c:	215c      	movs	r1, #92	; 0x5c
   d554e:	4620      	mov	r0, r4
   d5550:	f7ff ff3a 	bl	d53c8 <_ZN10JsonWriter10insertCharEc>
				insertChar(s[ii]);
   d5554:	f898 1000 	ldrb.w	r1, [r8]
				break;

			default:
				insertChar(s[ii]);
   d5558:	4620      	mov	r0, r4
   d555a:	f7ff ff35 	bl	d53c8 <_ZN10JsonWriter10insertCharEc>

	if (quoted) {
		insertChar('"');
	}

	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   d555e:	3501      	adds	r5, #1
   d5560:	e788      	b.n	d5474 <_ZN10JsonWriter12insertStringEPKcb+0x14>
				insertChar(s[ii]);
				break;
			}
		}
	}
	if (quoted) {
   d5562:	b12f      	cbz	r7, d5570 <_ZN10JsonWriter12insertStringEPKcb+0x110>
		insertChar('"');
   d5564:	4620      	mov	r0, r4
   d5566:	2122      	movs	r1, #34	; 0x22
	}

}
   d5568:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				break;
			}
		}
	}
	if (quoted) {
		insertChar('"');
   d556c:	f7ff bf2c 	b.w	d53c8 <_ZN10JsonWriter10insertCharEc>
   d5570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5574:	000d9b29 	.word	0x000d9b29

000d5578 <_ZN10JsonWriter20insertCheckSeparatorEv>:
		offset = bufferLen;
		truncated = true;
	}
}

void JsonWriter::insertCheckSeparator() {
   d5578:	6942      	ldr	r2, [r0, #20]
   d557a:	eb00 0342 	add.w	r3, r0, r2, lsl #1
	if (context[contextIndex].isFirst) {
   d557e:	7e1a      	ldrb	r2, [r3, #24]
   d5580:	b112      	cbz	r2, d5588 <_ZN10JsonWriter20insertCheckSeparatorEv+0x10>
		context[contextIndex].isFirst = false;
   d5582:	2200      	movs	r2, #0
   d5584:	761a      	strb	r2, [r3, #24]
   d5586:	4770      	bx	lr
	}
	else {
		insertChar(',');
   d5588:	212c      	movs	r1, #44	; 0x2c
   d558a:	f7ff bf1d 	b.w	d53c8 <_ZN10JsonWriter10insertCharEc>

000d558e <_ZN10JsonWriter18startObjectOrArrayEcc>:

	truncated = false;

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   d558e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   d5590:	6943      	ldr	r3, [r0, #20]
   d5592:	3301      	adds	r3, #1
   d5594:	2b08      	cmp	r3, #8

	truncated = false;

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   d5596:	460e      	mov	r6, r1
   d5598:	4617      	mov	r7, r2
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   d559a:	d80e      	bhi.n	d55ba <_ZN10JsonWriter18startObjectOrArrayEcc+0x2c>
		return false;
	}
	insertCheckSeparator();
   d559c:	f7ff ffec 	bl	d5578 <_ZN10JsonWriter20insertCheckSeparatorEv>

	contextIndex++;
   d55a0:	6943      	ldr	r3, [r0, #20]
   d55a2:	1c5a      	adds	r2, r3, #1
   d55a4:	eb00 0343 	add.w	r3, r0, r3, lsl #1

	context[contextIndex].isFirst = true;
   d55a8:	2401      	movs	r4, #1
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
		return false;
	}
	insertCheckSeparator();

	contextIndex++;
   d55aa:	6142      	str	r2, [r0, #20]

	context[contextIndex].isFirst = true;
	context[contextIndex].terminator = endChar;

	insertChar(startChar);
   d55ac:	4631      	mov	r1, r6
	}
	insertCheckSeparator();

	contextIndex++;

	context[contextIndex].isFirst = true;
   d55ae:	769c      	strb	r4, [r3, #26]
	context[contextIndex].terminator = endChar;
   d55b0:	76df      	strb	r7, [r3, #27]

	insertChar(startChar);
   d55b2:	f7ff ff09 	bl	d53c8 <_ZN10JsonWriter10insertCharEc>
   d55b6:	4620      	mov	r0, r4
   d55b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
		return false;
   d55ba:	2000      	movs	r0, #0
	context[contextIndex].isFirst = true;
	context[contextIndex].terminator = endChar;

	insertChar(startChar);
	return true;
}
   d55bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d55c0 <_ZN10JsonWriter11insertValueEf>:
	else {
		insertString("false");
	}
}

void JsonWriter::insertValue(float value) {
   d55c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d55c2:	4604      	mov	r4, r0
   d55c4:	ee10 0a10 	vmov	r0, s0
	if (floatPlaces >= 0) {
   d55c8:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
   d55ca:	2d00      	cmp	r5, #0
   d55cc:	db0a      	blt.n	d55e4 <_ZN10JsonWriter11insertValueEf+0x24>
		insertsprintf("%.*f", floatPlaces, value);
   d55ce:	f003 f97b 	bl	d88c8 <__aeabi_f2d>
   d55d2:	462a      	mov	r2, r5
   d55d4:	e9cd 0100 	strd	r0, r1, [sp]
   d55d8:	4908      	ldr	r1, [pc, #32]	; (d55fc <_ZN10JsonWriter11insertValueEf+0x3c>)
   d55da:	4620      	mov	r0, r4
   d55dc:	f7ff ff33 	bl	d5446 <_ZN10JsonWriter13insertsprintfEPKcz>
	}
	else {
		insertsprintf("%f", value);
	}
}
   d55e0:	b003      	add	sp, #12
   d55e2:	bd30      	pop	{r4, r5, pc}
void JsonWriter::insertValue(float value) {
	if (floatPlaces >= 0) {
		insertsprintf("%.*f", floatPlaces, value);
	}
	else {
		insertsprintf("%f", value);
   d55e4:	f003 f970 	bl	d88c8 <__aeabi_f2d>
   d55e8:	460b      	mov	r3, r1
   d55ea:	4905      	ldr	r1, [pc, #20]	; (d5600 <_ZN10JsonWriter11insertValueEf+0x40>)
   d55ec:	4602      	mov	r2, r0
   d55ee:	4620      	mov	r0, r4
	}
}
   d55f0:	b003      	add	sp, #12
   d55f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
void JsonWriter::insertValue(float value) {
	if (floatPlaces >= 0) {
		insertsprintf("%.*f", floatPlaces, value);
	}
	else {
		insertsprintf("%f", value);
   d55f6:	f7ff bf26 	b.w	d5446 <_ZN10JsonWriter13insertsprintfEPKcz>
   d55fa:	bf00      	nop
   d55fc:	000d9b3b 	.word	0x000d9b3b
   d5600:	000d9b40 	.word	0x000d9b40

000d5604 <_GLOBAL__sub_I__ZN10JsonBufferC2Ev>:
   d5604:	f000 b838 	b.w	d5678 <HAL_Pin_Map>

000d5608 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d5608:	b508      	push	{r3, lr}
   d560a:	4b02      	ldr	r3, [pc, #8]	; (d5614 <os_thread_is_current+0xc>)
   d560c:	681b      	ldr	r3, [r3, #0]
   d560e:	689b      	ldr	r3, [r3, #8]
   d5610:	9301      	str	r3, [sp, #4]
   d5612:	bd08      	pop	{r3, pc}
   d5614:	00030248 	.word	0x00030248

000d5618 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d5618:	b508      	push	{r3, lr}
   d561a:	4b02      	ldr	r3, [pc, #8]	; (d5624 <os_thread_join+0xc>)
   d561c:	681b      	ldr	r3, [r3, #0]
   d561e:	691b      	ldr	r3, [r3, #16]
   d5620:	9301      	str	r3, [sp, #4]
   d5622:	bd08      	pop	{r3, pc}
   d5624:	00030248 	.word	0x00030248

000d5628 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d5628:	b508      	push	{r3, lr}
   d562a:	4b02      	ldr	r3, [pc, #8]	; (d5634 <os_thread_cleanup+0xc>)
   d562c:	681b      	ldr	r3, [r3, #0]
   d562e:	695b      	ldr	r3, [r3, #20]
   d5630:	9301      	str	r3, [sp, #4]
   d5632:	bd08      	pop	{r3, pc}
   d5634:	00030248 	.word	0x00030248

000d5638 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5638:	b508      	push	{r3, lr}
   d563a:	4b02      	ldr	r3, [pc, #8]	; (d5644 <os_mutex_recursive_create+0xc>)
   d563c:	681b      	ldr	r3, [r3, #0]
   d563e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5640:	9301      	str	r3, [sp, #4]
   d5642:	bd08      	pop	{r3, pc}
   d5644:	00030248 	.word	0x00030248

000d5648 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5648:	b508      	push	{r3, lr}
   d564a:	4b02      	ldr	r3, [pc, #8]	; (d5654 <os_mutex_recursive_destroy+0xc>)
   d564c:	681b      	ldr	r3, [r3, #0]
   d564e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5650:	9301      	str	r3, [sp, #4]
   d5652:	bd08      	pop	{r3, pc}
   d5654:	00030248 	.word	0x00030248

000d5658 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5658:	b508      	push	{r3, lr}
   d565a:	4b02      	ldr	r3, [pc, #8]	; (d5664 <HAL_RNG_GetRandomNumber+0xc>)
   d565c:	681b      	ldr	r3, [r3, #0]
   d565e:	685b      	ldr	r3, [r3, #4]
   d5660:	9301      	str	r3, [sp, #4]
   d5662:	bd08      	pop	{r3, pc}
   d5664:	00030218 	.word	0x00030218

000d5668 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5668:	b508      	push	{r3, lr}
   d566a:	4b02      	ldr	r3, [pc, #8]	; (d5674 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d566c:	681b      	ldr	r3, [r3, #0]
   d566e:	695b      	ldr	r3, [r3, #20]
   d5670:	9301      	str	r3, [sp, #4]
   d5672:	bd08      	pop	{r3, pc}
   d5674:	00030218 	.word	0x00030218

000d5678 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d5678:	b508      	push	{r3, lr}
   d567a:	4b02      	ldr	r3, [pc, #8]	; (d5684 <HAL_Pin_Map+0xc>)
   d567c:	681b      	ldr	r3, [r3, #0]
   d567e:	681b      	ldr	r3, [r3, #0]
   d5680:	9301      	str	r3, [sp, #4]
   d5682:	bd08      	pop	{r3, pc}
   d5684:	0003022c 	.word	0x0003022c

000d5688 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d5688:	b508      	push	{r3, lr}
   d568a:	4b02      	ldr	r3, [pc, #8]	; (d5694 <HAL_Validate_Pin_Function+0xc>)
   d568c:	681b      	ldr	r3, [r3, #0]
   d568e:	685b      	ldr	r3, [r3, #4]
   d5690:	9301      	str	r3, [sp, #4]
   d5692:	bd08      	pop	{r3, pc}
   d5694:	0003022c 	.word	0x0003022c

000d5698 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5698:	b508      	push	{r3, lr}
   d569a:	4b02      	ldr	r3, [pc, #8]	; (d56a4 <HAL_Pin_Mode+0xc>)
   d569c:	681b      	ldr	r3, [r3, #0]
   d569e:	689b      	ldr	r3, [r3, #8]
   d56a0:	9301      	str	r3, [sp, #4]
   d56a2:	bd08      	pop	{r3, pc}
   d56a4:	0003022c 	.word	0x0003022c

000d56a8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d56a8:	b508      	push	{r3, lr}
   d56aa:	4b02      	ldr	r3, [pc, #8]	; (d56b4 <HAL_Get_Pin_Mode+0xc>)
   d56ac:	681b      	ldr	r3, [r3, #0]
   d56ae:	68db      	ldr	r3, [r3, #12]
   d56b0:	9301      	str	r3, [sp, #4]
   d56b2:	bd08      	pop	{r3, pc}
   d56b4:	0003022c 	.word	0x0003022c

000d56b8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d56b8:	b508      	push	{r3, lr}
   d56ba:	4b02      	ldr	r3, [pc, #8]	; (d56c4 <HAL_GPIO_Write+0xc>)
   d56bc:	681b      	ldr	r3, [r3, #0]
   d56be:	691b      	ldr	r3, [r3, #16]
   d56c0:	9301      	str	r3, [sp, #4]
   d56c2:	bd08      	pop	{r3, pc}
   d56c4:	0003022c 	.word	0x0003022c

000d56c8 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d56c8:	b508      	push	{r3, lr}
   d56ca:	4b02      	ldr	r3, [pc, #8]	; (d56d4 <HAL_GPIO_Read+0xc>)
   d56cc:	681b      	ldr	r3, [r3, #0]
   d56ce:	695b      	ldr	r3, [r3, #20]
   d56d0:	9301      	str	r3, [sp, #4]
   d56d2:	bd08      	pop	{r3, pc}
   d56d4:	0003022c 	.word	0x0003022c

000d56d8 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d56d8:	b508      	push	{r3, lr}
   d56da:	4b02      	ldr	r3, [pc, #8]	; (d56e4 <HAL_ADC_Read+0xc>)
   d56dc:	681b      	ldr	r3, [r3, #0]
   d56de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d56e0:	9301      	str	r3, [sp, #4]
   d56e2:	bd08      	pop	{r3, pc}
   d56e4:	0003022c 	.word	0x0003022c

000d56e8 <HAL_Pulse_In>:

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
DYNALIB_FN(17, hal_gpio, HAL_Get_System_Interrupt_Handler, uint8_t(hal_irq_t, HAL_InterruptCallback*, void*))
DYNALIB_FN(18, hal_gpio, HAL_System_Interrupt_Trigger, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, HAL_Pulse_In, uint32_t(pin_t, uint16_t))
   d56e8:	b508      	push	{r3, lr}
   d56ea:	4b02      	ldr	r3, [pc, #8]	; (d56f4 <HAL_Pulse_In+0xc>)
   d56ec:	681b      	ldr	r3, [r3, #0]
   d56ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d56f0:	9301      	str	r3, [sp, #4]
   d56f2:	bd08      	pop	{r3, pc}
   d56f4:	0003022c 	.word	0x0003022c

000d56f8 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d56f8:	b508      	push	{r3, lr}
   d56fa:	4b02      	ldr	r3, [pc, #8]	; (d5704 <HAL_I2C_Begin+0xc>)
   d56fc:	681b      	ldr	r3, [r3, #0]
   d56fe:	68db      	ldr	r3, [r3, #12]
   d5700:	9301      	str	r3, [sp, #4]
   d5702:	bd08      	pop	{r3, pc}
   d5704:	00030228 	.word	0x00030228

000d5708 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d5708:	b508      	push	{r3, lr}
   d570a:	4b02      	ldr	r3, [pc, #8]	; (d5714 <HAL_I2C_Begin_Transmission+0xc>)
   d570c:	681b      	ldr	r3, [r3, #0]
   d570e:	699b      	ldr	r3, [r3, #24]
   d5710:	9301      	str	r3, [sp, #4]
   d5712:	bd08      	pop	{r3, pc}
   d5714:	00030228 	.word	0x00030228

000d5718 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d5718:	b508      	push	{r3, lr}
   d571a:	4b02      	ldr	r3, [pc, #8]	; (d5724 <HAL_I2C_End_Transmission+0xc>)
   d571c:	681b      	ldr	r3, [r3, #0]
   d571e:	69db      	ldr	r3, [r3, #28]
   d5720:	9301      	str	r3, [sp, #4]
   d5722:	bd08      	pop	{r3, pc}
   d5724:	00030228 	.word	0x00030228

000d5728 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d5728:	b508      	push	{r3, lr}
   d572a:	4b02      	ldr	r3, [pc, #8]	; (d5734 <HAL_I2C_Write_Data+0xc>)
   d572c:	681b      	ldr	r3, [r3, #0]
   d572e:	6a1b      	ldr	r3, [r3, #32]
   d5730:	9301      	str	r3, [sp, #4]
   d5732:	bd08      	pop	{r3, pc}
   d5734:	00030228 	.word	0x00030228

000d5738 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d5738:	b508      	push	{r3, lr}
   d573a:	4b02      	ldr	r3, [pc, #8]	; (d5744 <HAL_I2C_Available_Data+0xc>)
   d573c:	681b      	ldr	r3, [r3, #0]
   d573e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5740:	9301      	str	r3, [sp, #4]
   d5742:	bd08      	pop	{r3, pc}
   d5744:	00030228 	.word	0x00030228

000d5748 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d5748:	b508      	push	{r3, lr}
   d574a:	4b02      	ldr	r3, [pc, #8]	; (d5754 <HAL_I2C_Read_Data+0xc>)
   d574c:	681b      	ldr	r3, [r3, #0]
   d574e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5750:	9301      	str	r3, [sp, #4]
   d5752:	bd08      	pop	{r3, pc}
   d5754:	00030228 	.word	0x00030228

000d5758 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d5758:	b508      	push	{r3, lr}
   d575a:	4b02      	ldr	r3, [pc, #8]	; (d5764 <HAL_I2C_Peek_Data+0xc>)
   d575c:	681b      	ldr	r3, [r3, #0]
   d575e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5760:	9301      	str	r3, [sp, #4]
   d5762:	bd08      	pop	{r3, pc}
   d5764:	00030228 	.word	0x00030228

000d5768 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d5768:	b508      	push	{r3, lr}
   d576a:	4b02      	ldr	r3, [pc, #8]	; (d5774 <HAL_I2C_Flush_Data+0xc>)
   d576c:	681b      	ldr	r3, [r3, #0]
   d576e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5770:	9301      	str	r3, [sp, #4]
   d5772:	bd08      	pop	{r3, pc}
   d5774:	00030228 	.word	0x00030228

000d5778 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d5778:	b508      	push	{r3, lr}
   d577a:	4b02      	ldr	r3, [pc, #8]	; (d5784 <HAL_I2C_Is_Enabled+0xc>)
   d577c:	681b      	ldr	r3, [r3, #0]
   d577e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5780:	9301      	str	r3, [sp, #4]
   d5782:	bd08      	pop	{r3, pc}
   d5784:	00030228 	.word	0x00030228

000d5788 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d5788:	b508      	push	{r3, lr}
   d578a:	4b02      	ldr	r3, [pc, #8]	; (d5794 <HAL_I2C_Init+0xc>)
   d578c:	681b      	ldr	r3, [r3, #0]
   d578e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5790:	9301      	str	r3, [sp, #4]
   d5792:	bd08      	pop	{r3, pc}
   d5794:	00030228 	.word	0x00030228

000d5798 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d5798:	b508      	push	{r3, lr}
   d579a:	4b02      	ldr	r3, [pc, #8]	; (d57a4 <HAL_I2C_Request_Data_Ex+0xc>)
   d579c:	681b      	ldr	r3, [r3, #0]
   d579e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d57a0:	9301      	str	r3, [sp, #4]
   d57a2:	bd08      	pop	{r3, pc}
   d57a4:	00030228 	.word	0x00030228

000d57a8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d57a8:	b508      	push	{r3, lr}
   d57aa:	4b02      	ldr	r3, [pc, #8]	; (d57b4 <inet_inet_ntop+0xc>)
   d57ac:	681b      	ldr	r3, [r3, #0]
   d57ae:	695b      	ldr	r3, [r3, #20]
   d57b0:	9301      	str	r3, [sp, #4]
   d57b2:	bd08      	pop	{r3, pc}
   d57b4:	00030264 	.word	0x00030264

000d57b8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d57b8:	b508      	push	{r3, lr}
   d57ba:	4b02      	ldr	r3, [pc, #8]	; (d57c4 <netdb_freeaddrinfo+0xc>)
   d57bc:	681b      	ldr	r3, [r3, #0]
   d57be:	689b      	ldr	r3, [r3, #8]
   d57c0:	9301      	str	r3, [sp, #4]
   d57c2:	bd08      	pop	{r3, pc}
   d57c4:	00030268 	.word	0x00030268

000d57c8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d57c8:	b508      	push	{r3, lr}
   d57ca:	4b02      	ldr	r3, [pc, #8]	; (d57d4 <netdb_getaddrinfo+0xc>)
   d57cc:	681b      	ldr	r3, [r3, #0]
   d57ce:	68db      	ldr	r3, [r3, #12]
   d57d0:	9301      	str	r3, [sp, #4]
   d57d2:	bd08      	pop	{r3, pc}
   d57d4:	00030268 	.word	0x00030268

000d57d8 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d57d8:	b508      	push	{r3, lr}
   d57da:	4b02      	ldr	r3, [pc, #8]	; (d57e4 <HAL_SPI_Begin+0xc>)
   d57dc:	681b      	ldr	r3, [r3, #0]
   d57de:	681b      	ldr	r3, [r3, #0]
   d57e0:	9301      	str	r3, [sp, #4]
   d57e2:	bd08      	pop	{r3, pc}
   d57e4:	00030230 	.word	0x00030230

000d57e8 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d57e8:	b508      	push	{r3, lr}
   d57ea:	4b02      	ldr	r3, [pc, #8]	; (d57f4 <HAL_SPI_Send_Receive_Data+0xc>)
   d57ec:	681b      	ldr	r3, [r3, #0]
   d57ee:	695b      	ldr	r3, [r3, #20]
   d57f0:	9301      	str	r3, [sp, #4]
   d57f2:	bd08      	pop	{r3, pc}
   d57f4:	00030230 	.word	0x00030230

000d57f8 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d57f8:	b508      	push	{r3, lr}
   d57fa:	4b02      	ldr	r3, [pc, #8]	; (d5804 <HAL_SPI_Init+0xc>)
   d57fc:	681b      	ldr	r3, [r3, #0]
   d57fe:	69db      	ldr	r3, [r3, #28]
   d5800:	9301      	str	r3, [sp, #4]
   d5802:	bd08      	pop	{r3, pc}
   d5804:	00030230 	.word	0x00030230

000d5808 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d5808:	b508      	push	{r3, lr}
   d580a:	4b02      	ldr	r3, [pc, #8]	; (d5814 <HAL_SPI_Is_Enabled+0xc>)
   d580c:	681b      	ldr	r3, [r3, #0]
   d580e:	6a1b      	ldr	r3, [r3, #32]
   d5810:	9301      	str	r3, [sp, #4]
   d5812:	bd08      	pop	{r3, pc}
   d5814:	00030230 	.word	0x00030230

000d5818 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d5818:	b508      	push	{r3, lr}
   d581a:	4b02      	ldr	r3, [pc, #8]	; (d5824 <HAL_SPI_Info+0xc>)
   d581c:	681b      	ldr	r3, [r3, #0]
   d581e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5820:	9301      	str	r3, [sp, #4]
   d5822:	bd08      	pop	{r3, pc}
   d5824:	00030230 	.word	0x00030230

000d5828 <HAL_SPI_Set_Settings>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d5828:	b508      	push	{r3, lr}
   d582a:	4b02      	ldr	r3, [pc, #8]	; (d5834 <HAL_SPI_Set_Settings+0xc>)
   d582c:	681b      	ldr	r3, [r3, #0]
   d582e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5830:	9301      	str	r3, [sp, #4]
   d5832:	bd08      	pop	{r3, pc}
   d5834:	00030230 	.word	0x00030230

000d5838 <HAL_SPI_Acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d5838:	b508      	push	{r3, lr}
   d583a:	4b02      	ldr	r3, [pc, #8]	; (d5844 <HAL_SPI_Acquire+0xc>)
   d583c:	681b      	ldr	r3, [r3, #0]
   d583e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5840:	9301      	str	r3, [sp, #4]
   d5842:	bd08      	pop	{r3, pc}
   d5844:	00030230 	.word	0x00030230

000d5848 <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d5848:	b508      	push	{r3, lr}
   d584a:	4b02      	ldr	r3, [pc, #8]	; (d5854 <HAL_SPI_Release+0xc>)
   d584c:	681b      	ldr	r3, [r3, #0]
   d584e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5850:	9301      	str	r3, [sp, #4]
   d5852:	bd08      	pop	{r3, pc}
   d5854:	00030230 	.word	0x00030230

000d5858 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d5858:	b508      	push	{r3, lr}
   d585a:	4b02      	ldr	r3, [pc, #8]	; (d5864 <HAL_USART_Init+0xc>)
   d585c:	681b      	ldr	r3, [r3, #0]
   d585e:	681b      	ldr	r3, [r3, #0]
   d5860:	9301      	str	r3, [sp, #4]
   d5862:	bd08      	pop	{r3, pc}
   d5864:	0003023c 	.word	0x0003023c

000d5868 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d5868:	b508      	push	{r3, lr}
   d586a:	4b02      	ldr	r3, [pc, #8]	; (d5874 <HAL_USART_Write_Data+0xc>)
   d586c:	681b      	ldr	r3, [r3, #0]
   d586e:	68db      	ldr	r3, [r3, #12]
   d5870:	9301      	str	r3, [sp, #4]
   d5872:	bd08      	pop	{r3, pc}
   d5874:	0003023c 	.word	0x0003023c

000d5878 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d5878:	b508      	push	{r3, lr}
   d587a:	4b02      	ldr	r3, [pc, #8]	; (d5884 <HAL_USART_Available_Data+0xc>)
   d587c:	681b      	ldr	r3, [r3, #0]
   d587e:	691b      	ldr	r3, [r3, #16]
   d5880:	9301      	str	r3, [sp, #4]
   d5882:	bd08      	pop	{r3, pc}
   d5884:	0003023c 	.word	0x0003023c

000d5888 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d5888:	b508      	push	{r3, lr}
   d588a:	4b02      	ldr	r3, [pc, #8]	; (d5894 <HAL_USART_Read_Data+0xc>)
   d588c:	681b      	ldr	r3, [r3, #0]
   d588e:	695b      	ldr	r3, [r3, #20]
   d5890:	9301      	str	r3, [sp, #4]
   d5892:	bd08      	pop	{r3, pc}
   d5894:	0003023c 	.word	0x0003023c

000d5898 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d5898:	b508      	push	{r3, lr}
   d589a:	4b02      	ldr	r3, [pc, #8]	; (d58a4 <HAL_USART_Peek_Data+0xc>)
   d589c:	681b      	ldr	r3, [r3, #0]
   d589e:	699b      	ldr	r3, [r3, #24]
   d58a0:	9301      	str	r3, [sp, #4]
   d58a2:	bd08      	pop	{r3, pc}
   d58a4:	0003023c 	.word	0x0003023c

000d58a8 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d58a8:	b508      	push	{r3, lr}
   d58aa:	4b02      	ldr	r3, [pc, #8]	; (d58b4 <HAL_USART_Flush_Data+0xc>)
   d58ac:	681b      	ldr	r3, [r3, #0]
   d58ae:	69db      	ldr	r3, [r3, #28]
   d58b0:	9301      	str	r3, [sp, #4]
   d58b2:	bd08      	pop	{r3, pc}
   d58b4:	0003023c 	.word	0x0003023c

000d58b8 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d58b8:	b508      	push	{r3, lr}
   d58ba:	4b02      	ldr	r3, [pc, #8]	; (d58c4 <HAL_USART_Is_Enabled+0xc>)
   d58bc:	681b      	ldr	r3, [r3, #0]
   d58be:	6a1b      	ldr	r3, [r3, #32]
   d58c0:	9301      	str	r3, [sp, #4]
   d58c2:	bd08      	pop	{r3, pc}
   d58c4:	0003023c 	.word	0x0003023c

000d58c8 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d58c8:	b508      	push	{r3, lr}
   d58ca:	4b02      	ldr	r3, [pc, #8]	; (d58d4 <HAL_USART_Available_Data_For_Write+0xc>)
   d58cc:	681b      	ldr	r3, [r3, #0]
   d58ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d58d0:	9301      	str	r3, [sp, #4]
   d58d2:	bd08      	pop	{r3, pc}
   d58d4:	0003023c 	.word	0x0003023c

000d58d8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d58d8:	b508      	push	{r3, lr}
   d58da:	4b02      	ldr	r3, [pc, #8]	; (d58e4 <HAL_USB_USART_Init+0xc>)
   d58dc:	681b      	ldr	r3, [r3, #0]
   d58de:	681b      	ldr	r3, [r3, #0]
   d58e0:	9301      	str	r3, [sp, #4]
   d58e2:	bd08      	pop	{r3, pc}
   d58e4:	0003024c 	.word	0x0003024c

000d58e8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d58e8:	b508      	push	{r3, lr}
   d58ea:	4b02      	ldr	r3, [pc, #8]	; (d58f4 <HAL_USB_USART_Begin+0xc>)
   d58ec:	681b      	ldr	r3, [r3, #0]
   d58ee:	685b      	ldr	r3, [r3, #4]
   d58f0:	9301      	str	r3, [sp, #4]
   d58f2:	bd08      	pop	{r3, pc}
   d58f4:	0003024c 	.word	0x0003024c

000d58f8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d58f8:	b508      	push	{r3, lr}
   d58fa:	4b02      	ldr	r3, [pc, #8]	; (d5904 <HAL_USB_USART_Available_Data+0xc>)
   d58fc:	681b      	ldr	r3, [r3, #0]
   d58fe:	691b      	ldr	r3, [r3, #16]
   d5900:	9301      	str	r3, [sp, #4]
   d5902:	bd08      	pop	{r3, pc}
   d5904:	0003024c 	.word	0x0003024c

000d5908 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5908:	b508      	push	{r3, lr}
   d590a:	4b02      	ldr	r3, [pc, #8]	; (d5914 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d590c:	681b      	ldr	r3, [r3, #0]
   d590e:	695b      	ldr	r3, [r3, #20]
   d5910:	9301      	str	r3, [sp, #4]
   d5912:	bd08      	pop	{r3, pc}
   d5914:	0003024c 	.word	0x0003024c

000d5918 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5918:	b508      	push	{r3, lr}
   d591a:	4b02      	ldr	r3, [pc, #8]	; (d5924 <HAL_USB_USART_Receive_Data+0xc>)
   d591c:	681b      	ldr	r3, [r3, #0]
   d591e:	699b      	ldr	r3, [r3, #24]
   d5920:	9301      	str	r3, [sp, #4]
   d5922:	bd08      	pop	{r3, pc}
   d5924:	0003024c 	.word	0x0003024c

000d5928 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5928:	b508      	push	{r3, lr}
   d592a:	4b02      	ldr	r3, [pc, #8]	; (d5934 <HAL_USB_USART_Send_Data+0xc>)
   d592c:	681b      	ldr	r3, [r3, #0]
   d592e:	69db      	ldr	r3, [r3, #28]
   d5930:	9301      	str	r3, [sp, #4]
   d5932:	bd08      	pop	{r3, pc}
   d5934:	0003024c 	.word	0x0003024c

000d5938 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5938:	b508      	push	{r3, lr}
   d593a:	4b02      	ldr	r3, [pc, #8]	; (d5944 <HAL_USB_USART_Flush_Data+0xc>)
   d593c:	681b      	ldr	r3, [r3, #0]
   d593e:	6a1b      	ldr	r3, [r3, #32]
   d5940:	9301      	str	r3, [sp, #4]
   d5942:	bd08      	pop	{r3, pc}
   d5944:	0003024c 	.word	0x0003024c

000d5948 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5948:	b508      	push	{r3, lr}
   d594a:	4b02      	ldr	r3, [pc, #8]	; (d5954 <set_system_mode+0xc>)
   d594c:	681b      	ldr	r3, [r3, #0]
   d594e:	685b      	ldr	r3, [r3, #4]
   d5950:	9301      	str	r3, [sp, #4]
   d5952:	bd08      	pop	{r3, pc}
   d5954:	00030220 	.word	0x00030220

000d5958 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5958:	b508      	push	{r3, lr}
   d595a:	4b02      	ldr	r3, [pc, #8]	; (d5964 <system_delay_ms+0xc>)
   d595c:	681b      	ldr	r3, [r3, #0]
   d595e:	695b      	ldr	r3, [r3, #20]
   d5960:	9301      	str	r3, [sp, #4]
   d5962:	bd08      	pop	{r3, pc}
   d5964:	00030220 	.word	0x00030220

000d5968 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d5968:	b508      	push	{r3, lr}
   d596a:	4b02      	ldr	r3, [pc, #8]	; (d5974 <system_thread_set_state+0xc>)
   d596c:	681b      	ldr	r3, [r3, #0]
   d596e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5970:	9301      	str	r3, [sp, #4]
   d5972:	bd08      	pop	{r3, pc}
   d5974:	00030220 	.word	0x00030220

000d5978 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d5978:	b508      	push	{r3, lr}
   d597a:	4b02      	ldr	r3, [pc, #8]	; (d5984 <application_thread_current+0xc>)
   d597c:	681b      	ldr	r3, [r3, #0]
   d597e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5980:	9301      	str	r3, [sp, #4]
   d5982:	bd08      	pop	{r3, pc}
   d5984:	00030220 	.word	0x00030220

000d5988 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d5988:	b508      	push	{r3, lr}
   d598a:	4b02      	ldr	r3, [pc, #8]	; (d5994 <application_thread_invoke+0xc>)
   d598c:	681b      	ldr	r3, [r3, #0]
   d598e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5990:	9301      	str	r3, [sp, #4]
   d5992:	bd08      	pop	{r3, pc}
   d5994:	00030220 	.word	0x00030220

000d5998 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5998:	b508      	push	{r3, lr}
   d599a:	4b03      	ldr	r3, [pc, #12]	; (d59a8 <system_ctrl_set_app_request_handler+0x10>)
   d599c:	681b      	ldr	r3, [r3, #0]
   d599e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d59a2:	9301      	str	r3, [sp, #4]
   d59a4:	bd08      	pop	{r3, pc}
   d59a6:	0000      	.short	0x0000
   d59a8:	00030220 	.word	0x00030220

000d59ac <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d59ac:	b508      	push	{r3, lr}
   d59ae:	4b03      	ldr	r3, [pc, #12]	; (d59bc <system_ctrl_set_result+0x10>)
   d59b0:	681b      	ldr	r3, [r3, #0]
   d59b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d59b6:	9301      	str	r3, [sp, #4]
   d59b8:	bd08      	pop	{r3, pc}
   d59ba:	0000      	.short	0x0000
   d59bc:	00030220 	.word	0x00030220

000d59c0 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d59c0:	b508      	push	{r3, lr}
   d59c2:	4b02      	ldr	r3, [pc, #8]	; (d59cc <spark_cloud_flag_connected+0xc>)
   d59c4:	681b      	ldr	r3, [r3, #0]
   d59c6:	695b      	ldr	r3, [r3, #20]
   d59c8:	9301      	str	r3, [sp, #4]
   d59ca:	bd08      	pop	{r3, pc}
   d59cc:	00030244 	.word	0x00030244

000d59d0 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d59d0:	b508      	push	{r3, lr}
   d59d2:	4b02      	ldr	r3, [pc, #8]	; (d59dc <spark_send_event+0xc>)
   d59d4:	681b      	ldr	r3, [r3, #0]
   d59d6:	6a1b      	ldr	r3, [r3, #32]
   d59d8:	9301      	str	r3, [sp, #4]
   d59da:	bd08      	pop	{r3, pc}
   d59dc:	00030244 	.word	0x00030244

000d59e0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d59e0:	b508      	push	{r3, lr}
   d59e2:	4b02      	ldr	r3, [pc, #8]	; (d59ec <spark_set_random_seed_from_cloud_handler+0xc>)
   d59e4:	681b      	ldr	r3, [r3, #0]
   d59e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d59e8:	9301      	str	r3, [sp, #4]
   d59ea:	bd08      	pop	{r3, pc}
   d59ec:	00030244 	.word	0x00030244

000d59f0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d59f0:	b508      	push	{r3, lr}
   d59f2:	4b02      	ldr	r3, [pc, #8]	; (d59fc <network_connect+0xc>)
   d59f4:	681b      	ldr	r3, [r3, #0]
   d59f6:	685b      	ldr	r3, [r3, #4]
   d59f8:	9301      	str	r3, [sp, #4]
   d59fa:	bd08      	pop	{r3, pc}
   d59fc:	00030240 	.word	0x00030240

000d5a00 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5a00:	b508      	push	{r3, lr}
   d5a02:	4b02      	ldr	r3, [pc, #8]	; (d5a0c <network_connecting+0xc>)
   d5a04:	681b      	ldr	r3, [r3, #0]
   d5a06:	689b      	ldr	r3, [r3, #8]
   d5a08:	9301      	str	r3, [sp, #4]
   d5a0a:	bd08      	pop	{r3, pc}
   d5a0c:	00030240 	.word	0x00030240

000d5a10 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5a10:	b508      	push	{r3, lr}
   d5a12:	4b02      	ldr	r3, [pc, #8]	; (d5a1c <network_disconnect+0xc>)
   d5a14:	681b      	ldr	r3, [r3, #0]
   d5a16:	68db      	ldr	r3, [r3, #12]
   d5a18:	9301      	str	r3, [sp, #4]
   d5a1a:	bd08      	pop	{r3, pc}
   d5a1c:	00030240 	.word	0x00030240

000d5a20 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5a20:	b508      	push	{r3, lr}
   d5a22:	4b02      	ldr	r3, [pc, #8]	; (d5a2c <network_ready+0xc>)
   d5a24:	681b      	ldr	r3, [r3, #0]
   d5a26:	691b      	ldr	r3, [r3, #16]
   d5a28:	9301      	str	r3, [sp, #4]
   d5a2a:	bd08      	pop	{r3, pc}
   d5a2c:	00030240 	.word	0x00030240

000d5a30 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5a30:	b508      	push	{r3, lr}
   d5a32:	4b02      	ldr	r3, [pc, #8]	; (d5a3c <network_on+0xc>)
   d5a34:	681b      	ldr	r3, [r3, #0]
   d5a36:	695b      	ldr	r3, [r3, #20]
   d5a38:	9301      	str	r3, [sp, #4]
   d5a3a:	bd08      	pop	{r3, pc}
   d5a3c:	00030240 	.word	0x00030240

000d5a40 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5a40:	b508      	push	{r3, lr}
   d5a42:	4b02      	ldr	r3, [pc, #8]	; (d5a4c <network_off+0xc>)
   d5a44:	681b      	ldr	r3, [r3, #0]
   d5a46:	699b      	ldr	r3, [r3, #24]
   d5a48:	9301      	str	r3, [sp, #4]
   d5a4a:	bd08      	pop	{r3, pc}
   d5a4c:	00030240 	.word	0x00030240

000d5a50 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5a50:	b508      	push	{r3, lr}
   d5a52:	4b02      	ldr	r3, [pc, #8]	; (d5a5c <network_listen+0xc>)
   d5a54:	681b      	ldr	r3, [r3, #0]
   d5a56:	69db      	ldr	r3, [r3, #28]
   d5a58:	9301      	str	r3, [sp, #4]
   d5a5a:	bd08      	pop	{r3, pc}
   d5a5c:	00030240 	.word	0x00030240

000d5a60 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5a60:	b508      	push	{r3, lr}
   d5a62:	4b02      	ldr	r3, [pc, #8]	; (d5a6c <network_listening+0xc>)
   d5a64:	681b      	ldr	r3, [r3, #0]
   d5a66:	6a1b      	ldr	r3, [r3, #32]
   d5a68:	9301      	str	r3, [sp, #4]
   d5a6a:	bd08      	pop	{r3, pc}
   d5a6c:	00030240 	.word	0x00030240

000d5a70 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5a70:	b508      	push	{r3, lr}
   d5a72:	4b02      	ldr	r3, [pc, #8]	; (d5a7c <network_set_listen_timeout+0xc>)
   d5a74:	681b      	ldr	r3, [r3, #0]
   d5a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5a78:	9301      	str	r3, [sp, #4]
   d5a7a:	bd08      	pop	{r3, pc}
   d5a7c:	00030240 	.word	0x00030240

000d5a80 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5a80:	b508      	push	{r3, lr}
   d5a82:	4b02      	ldr	r3, [pc, #8]	; (d5a8c <network_get_listen_timeout+0xc>)
   d5a84:	681b      	ldr	r3, [r3, #0]
   d5a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5a88:	9301      	str	r3, [sp, #4]
   d5a8a:	bd08      	pop	{r3, pc}
   d5a8c:	00030240 	.word	0x00030240

000d5a90 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5a90:	b508      	push	{r3, lr}
   d5a92:	4b02      	ldr	r3, [pc, #8]	; (d5a9c <malloc+0xc>)
   d5a94:	681b      	ldr	r3, [r3, #0]
   d5a96:	681b      	ldr	r3, [r3, #0]
   d5a98:	9301      	str	r3, [sp, #4]
   d5a9a:	bd08      	pop	{r3, pc}
   d5a9c:	0003021c 	.word	0x0003021c

000d5aa0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5aa0:	b508      	push	{r3, lr}
   d5aa2:	4b02      	ldr	r3, [pc, #8]	; (d5aac <free+0xc>)
   d5aa4:	681b      	ldr	r3, [r3, #0]
   d5aa6:	685b      	ldr	r3, [r3, #4]
   d5aa8:	9301      	str	r3, [sp, #4]
   d5aaa:	bd08      	pop	{r3, pc}
   d5aac:	0003021c 	.word	0x0003021c

000d5ab0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5ab0:	b508      	push	{r3, lr}
   d5ab2:	4b02      	ldr	r3, [pc, #8]	; (d5abc <realloc+0xc>)
   d5ab4:	681b      	ldr	r3, [r3, #0]
   d5ab6:	689b      	ldr	r3, [r3, #8]
   d5ab8:	9301      	str	r3, [sp, #4]
   d5aba:	bd08      	pop	{r3, pc}
   d5abc:	0003021c 	.word	0x0003021c

000d5ac0 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d5ac0:	b508      	push	{r3, lr}
   d5ac2:	4b02      	ldr	r3, [pc, #8]	; (d5acc <vsnprintf+0xc>)
   d5ac4:	681b      	ldr	r3, [r3, #0]
   d5ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5ac8:	9301      	str	r3, [sp, #4]
   d5aca:	bd08      	pop	{r3, pc}
   d5acc:	0003021c 	.word	0x0003021c

000d5ad0 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d5ad0:	b508      	push	{r3, lr}
   d5ad2:	4b02      	ldr	r3, [pc, #8]	; (d5adc <abort+0xc>)
   d5ad4:	681b      	ldr	r3, [r3, #0]
   d5ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5ad8:	9301      	str	r3, [sp, #4]
   d5ada:	bd08      	pop	{r3, pc}
   d5adc:	0003021c 	.word	0x0003021c

000d5ae0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d5ae0:	b508      	push	{r3, lr}
   d5ae2:	4b02      	ldr	r3, [pc, #8]	; (d5aec <_malloc_r+0xc>)
   d5ae4:	681b      	ldr	r3, [r3, #0]
   d5ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5ae8:	9301      	str	r3, [sp, #4]
   d5aea:	bd08      	pop	{r3, pc}
   d5aec:	0003021c 	.word	0x0003021c

000d5af0 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d5af0:	b508      	push	{r3, lr}
   d5af2:	4b02      	ldr	r3, [pc, #8]	; (d5afc <__errno+0xc>)
   d5af4:	681b      	ldr	r3, [r3, #0]
   d5af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5af8:	9301      	str	r3, [sp, #4]
   d5afa:	bd08      	pop	{r3, pc}
   d5afc:	0003021c 	.word	0x0003021c

000d5b00 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5b00:	2100      	movs	r1, #0
   d5b02:	f7ff bf29 	b.w	d5958 <system_delay_ms>

000d5b06 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d5b06:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5b08:	6883      	ldr	r3, [r0, #8]
   d5b0a:	4604      	mov	r4, r0
   d5b0c:	b90b      	cbnz	r3, d5b12 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d5b0e:	f001 faf2 	bl	d70f6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5b12:	68c3      	ldr	r3, [r0, #12]
   d5b14:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5b16:	68a3      	ldr	r3, [r4, #8]
   d5b18:	b11b      	cbz	r3, d5b22 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5b1a:	2203      	movs	r2, #3
   d5b1c:	4621      	mov	r1, r4
   d5b1e:	4620      	mov	r0, r4
   d5b20:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5b22:	4620      	mov	r0, r4
   d5b24:	2110      	movs	r1, #16
}
   d5b26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5b2a:	f001 bac8 	b.w	d70be <_ZdlPvj>

000d5b2e <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d5b2e:	b510      	push	{r4, lr}
   d5b30:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5b32:	6800      	ldr	r0, [r0, #0]
   d5b34:	b108      	cbz	r0, d5b3a <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d5b36:	f7ff fd87 	bl	d5648 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d5b3a:	4620      	mov	r0, r4
   d5b3c:	bd10      	pop	{r4, pc}

000d5b3e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5b3e:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d5b40:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5b42:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d5b44:	689b      	ldr	r3, [r3, #8]
   d5b46:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5b48:	68a3      	ldr	r3, [r4, #8]
   d5b4a:	3b01      	subs	r3, #1
   d5b4c:	60a3      	str	r3, [r4, #8]
   d5b4e:	b92b      	cbnz	r3, d5b5c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d5b50:	6823      	ldr	r3, [r4, #0]
   d5b52:	4620      	mov	r0, r4
   d5b54:	68db      	ldr	r3, [r3, #12]
        }
    }
   d5b56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d5b5a:	4718      	bx	r3
   d5b5c:	bd10      	pop	{r4, pc}

000d5b5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d5b5e:	680b      	ldr	r3, [r1, #0]
   d5b60:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d5b62:	b113      	cbz	r3, d5b6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d5b64:	685a      	ldr	r2, [r3, #4]
   d5b66:	3201      	adds	r2, #1
   d5b68:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d5b6a:	4770      	bx	lr

000d5b6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d5b6c:	b510      	push	{r4, lr}
   d5b6e:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d5b70:	6800      	ldr	r0, [r0, #0]
   d5b72:	b128      	cbz	r0, d5b80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d5b74:	6843      	ldr	r3, [r0, #4]
   d5b76:	3b01      	subs	r3, #1
   d5b78:	6043      	str	r3, [r0, #4]
   d5b7a:	b90b      	cbnz	r3, d5b80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d5b7c:	f7ff ffdf 	bl	d5b3e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d5b80:	4620      	mov	r0, r4
   d5b82:	bd10      	pop	{r4, pc}

000d5b84 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5b84:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5b86:	4c06      	ldr	r4, [pc, #24]	; (d5ba0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5b88:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d5b8a:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5b8c:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d5b8e:	f7ff fd53 	bl	d5638 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d5b92:	4620      	mov	r0, r4
   d5b94:	4a03      	ldr	r2, [pc, #12]	; (d5ba4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d5b96:	4904      	ldr	r1, [pc, #16]	; (d5ba8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5b98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d5b9c:	f001 ba8a 	b.w	d70b4 <__aeabi_atexit>
   d5ba0:	2003e4a4 	.word	0x2003e4a4
   d5ba4:	2003e420 	.word	0x2003e420
   d5ba8:	000d5b2f 	.word	0x000d5b2f

000d5bac <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d5bac:	2200      	movs	r2, #0
   d5bae:	4611      	mov	r1, r2
   d5bb0:	6840      	ldr	r0, [r0, #4]
   d5bb2:	f7ff bf35 	b.w	d5a20 <network_ready>

000d5bb6 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5bb6:	2200      	movs	r2, #0
   d5bb8:	4611      	mov	r1, r2
   d5bba:	6840      	ldr	r0, [r0, #4]
   d5bbc:	f7ff bf50 	b.w	d5a60 <network_listening>

000d5bc0 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5bc0:	2200      	movs	r2, #0
   d5bc2:	4611      	mov	r1, r2
   d5bc4:	6840      	ldr	r0, [r0, #4]
   d5bc6:	f7ff bf5b 	b.w	d5a80 <network_get_listen_timeout>

000d5bca <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5bca:	2200      	movs	r2, #0
   d5bcc:	6840      	ldr	r0, [r0, #4]
   d5bce:	f7ff bf4f 	b.w	d5a70 <network_set_listen_timeout>

000d5bd2 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5bd2:	2200      	movs	r2, #0
   d5bd4:	f081 0101 	eor.w	r1, r1, #1
   d5bd8:	6840      	ldr	r0, [r0, #4]
   d5bda:	f7ff bf39 	b.w	d5a50 <network_listen>

000d5bde <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d5bde:	2300      	movs	r3, #0
   d5be0:	461a      	mov	r2, r3
   d5be2:	4619      	mov	r1, r3
   d5be4:	6840      	ldr	r0, [r0, #4]
   d5be6:	f7ff bf2b 	b.w	d5a40 <network_off>

000d5bea <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d5bea:	2300      	movs	r3, #0
   d5bec:	461a      	mov	r2, r3
   d5bee:	4619      	mov	r1, r3
   d5bf0:	6840      	ldr	r0, [r0, #4]
   d5bf2:	f7ff bf1d 	b.w	d5a30 <network_on>

000d5bf6 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5bf6:	2200      	movs	r2, #0
   d5bf8:	4611      	mov	r1, r2
   d5bfa:	6840      	ldr	r0, [r0, #4]
   d5bfc:	f7ff bf00 	b.w	d5a00 <network_connecting>

000d5c00 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5c00:	2200      	movs	r2, #0
   d5c02:	2102      	movs	r1, #2
   d5c04:	6840      	ldr	r0, [r0, #4]
   d5c06:	f7ff bf03 	b.w	d5a10 <network_disconnect>

000d5c0a <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5c0a:	2300      	movs	r3, #0
   d5c0c:	461a      	mov	r2, r3
   d5c0e:	6840      	ldr	r0, [r0, #4]
   d5c10:	f7ff beee 	b.w	d59f0 <network_connect>

000d5c14 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d5c14:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d5c16:	4c08      	ldr	r4, [pc, #32]	; (d5c38 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d5c18:	2528      	movs	r5, #40	; 0x28
   d5c1a:	462a      	mov	r2, r5
   d5c1c:	2100      	movs	r1, #0
   d5c1e:	4620      	mov	r0, r4
   d5c20:	f003 fc91 	bl	d9546 <memset>
        cid = -1;
   d5c24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d5c28:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5c2a:	4b04      	ldr	r3, [pc, #16]	; (d5c3c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d5c2c:	8025      	strh	r5, [r4, #0]
   d5c2e:	2204      	movs	r2, #4
   d5c30:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d5c32:	4a03      	ldr	r2, [pc, #12]	; (d5c40 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d5c34:	601a      	str	r2, [r3, #0]
   d5c36:	bd38      	pop	{r3, r4, r5, pc}
   d5c38:	2003e4b0 	.word	0x2003e4b0
   d5c3c:	2003e4a8 	.word	0x2003e4a8
   d5c40:	000d9b58 	.word	0x000d9b58

000d5c44 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5c44:	4770      	bx	lr

000d5c46 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d5c46:	2000      	movs	r0, #0
   d5c48:	4770      	bx	lr

000d5c4a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5c4a:	b510      	push	{r4, lr}
   d5c4c:	2110      	movs	r1, #16
   d5c4e:	4604      	mov	r4, r0
   d5c50:	f001 fa35 	bl	d70be <_ZdlPvj>
   d5c54:	4620      	mov	r0, r4
   d5c56:	bd10      	pop	{r4, pc}

000d5c58 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d5c58:	b508      	push	{r3, lr}
      { delete this; }
   d5c5a:	b108      	cbz	r0, d5c60 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d5c5c:	f7ff fff5 	bl	d5c4a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d5c60:	bd08      	pop	{r3, pc}

000d5c62 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5c62:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5c64:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5c66:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d5c68:	b113      	cbz	r3, d5c70 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5c6a:	2203      	movs	r2, #3
   d5c6c:	4601      	mov	r1, r0
   d5c6e:	4798      	blx	r3
    }
   d5c70:	4620      	mov	r0, r4
   d5c72:	bd10      	pop	{r4, pc}

000d5c74 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5c74:	2200      	movs	r2, #0
   d5c76:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d5c78:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5c7a:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d5c7e:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5c80:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d5c84:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d5c86:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5c88:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5c8a:	680c      	ldr	r4, [r1, #0]
   d5c8c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d5c8e:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d5c90:	bd10      	pop	{r4, pc}

000d5c92 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d5c92:	b510      	push	{r4, lr}
   d5c94:	4604      	mov	r4, r0
    free((void*)msg_);
   d5c96:	6800      	ldr	r0, [r0, #0]
   d5c98:	f7ff ff02 	bl	d5aa0 <free>
}
   d5c9c:	4620      	mov	r0, r4
   d5c9e:	bd10      	pop	{r4, pc}

000d5ca0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d5ca0:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d5ca2:	68c4      	ldr	r4, [r0, #12]
   d5ca4:	b1f4      	cbz	r4, d5ce4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d5ca6:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d5ca8:	2b02      	cmp	r3, #2
   d5caa:	d103      	bne.n	d5cb4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d5cac:	f104 000c 	add.w	r0, r4, #12
   d5cb0:	f7ff ffef 	bl	d5c92 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d5cb4:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d5cb6:	b135      	cbz	r5, d5cc6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5cb8:	4628      	mov	r0, r5
   d5cba:	f7ff ffd2 	bl	d5c62 <_ZNSt14_Function_baseD1Ev>
   d5cbe:	2110      	movs	r1, #16
   d5cc0:	4628      	mov	r0, r5
   d5cc2:	f001 f9fc 	bl	d70be <_ZdlPvj>
   d5cc6:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d5cc8:	b135      	cbz	r5, d5cd8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d5cca:	4628      	mov	r0, r5
   d5ccc:	f7ff ffc9 	bl	d5c62 <_ZNSt14_Function_baseD1Ev>
   d5cd0:	2110      	movs	r1, #16
   d5cd2:	4628      	mov	r0, r5
   d5cd4:	f001 f9f3 	bl	d70be <_ZdlPvj>
   d5cd8:	4620      	mov	r0, r4
   d5cda:	2114      	movs	r1, #20
   d5cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d5ce0:	f001 b9ed 	b.w	d70be <_ZdlPvj>
   d5ce4:	bd38      	pop	{r3, r4, r5, pc}

000d5ce6 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d5ce6:	b513      	push	{r0, r1, r4, lr}
   d5ce8:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5cea:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d5cee:	2300      	movs	r3, #0
   d5cf0:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5cf2:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5cf4:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d5cf6:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5cf8:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d5cfa:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5cfc:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5cfe:	f7ff ff35 	bl	d5b6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5d02:	4620      	mov	r0, r4
   d5d04:	b002      	add	sp, #8
   d5d06:	bd10      	pop	{r4, pc}

000d5d08 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d5d08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5d0a:	460c      	mov	r4, r1
   d5d0c:	ad02      	add	r5, sp, #8
   d5d0e:	f854 3b04 	ldr.w	r3, [r4], #4
   d5d12:	f845 3d08 	str.w	r3, [r5, #-8]!
   d5d16:	4606      	mov	r6, r0
   d5d18:	460f      	mov	r7, r1
   d5d1a:	a801      	add	r0, sp, #4
   d5d1c:	4621      	mov	r1, r4
   d5d1e:	f7ff ff1e 	bl	d5b5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d5d22:	4629      	mov	r1, r5
   d5d24:	4630      	mov	r0, r6
   d5d26:	f7ff ffde 	bl	d5ce6 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5d2a:	a801      	add	r0, sp, #4
   d5d2c:	f7ff ff1e 	bl	d5b6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5d30:	4620      	mov	r0, r4
   d5d32:	f7ff ff1b 	bl	d5b6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d5d36:	4638      	mov	r0, r7
   d5d38:	2108      	movs	r1, #8
   d5d3a:	f001 f9c0 	bl	d70be <_ZdlPvj>
        return p;
    }
   d5d3e:	4630      	mov	r0, r6
   d5d40:	b003      	add	sp, #12
   d5d42:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5d44 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d5d44:	b513      	push	{r0, r1, r4, lr}
   d5d46:	460b      	mov	r3, r1
   d5d48:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5d4a:	c803      	ldmia	r0, {r0, r1}
   d5d4c:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5d50:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5d54:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5d58:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d5d5c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d5d60:	b002      	add	sp, #8
   d5d62:	bd10      	pop	{r4, pc}

000d5d64 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d5d64:	b538      	push	{r3, r4, r5, lr}
   d5d66:	2300      	movs	r3, #0
   d5d68:	4604      	mov	r4, r0
   d5d6a:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5d6c:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d5d6e:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5d70:	f7fe f993 	bl	d409a <_Znwj>
   d5d74:	b128      	cbz	r0, d5d82 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d5d76:	2301      	movs	r3, #1
   d5d78:	6043      	str	r3, [r0, #4]
   d5d7a:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d5d7c:	4b02      	ldr	r3, [pc, #8]	; (d5d88 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d5d7e:	6003      	str	r3, [r0, #0]
   d5d80:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5d82:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d5d84:	4620      	mov	r0, r4
   d5d86:	bd38      	pop	{r3, r4, r5, pc}
   d5d88:	000d9b8c 	.word	0x000d9b8c

000d5d8c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5d8c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5d8e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5d90:	b90a      	cbnz	r2, d5d96 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d5d92:	f001 f9b0 	bl	d70f6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5d96:	68c3      	ldr	r3, [r0, #12]
    }
   d5d98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5d9c:	4718      	bx	r3

000d5d9e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5d9e:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5da0:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d5da2:	f100 0110 	add.w	r1, r0, #16
   d5da6:	f7ff fff1 	bl	d5d8c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5daa:	bd08      	pop	{r3, pc}

000d5dac <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5dac:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5dae:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5db0:	b90a      	cbnz	r2, d5db6 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d5db2:	f001 f9a0 	bl	d70f6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5db6:	68c3      	ldr	r3, [r0, #12]
    }
   d5db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5dbc:	4718      	bx	r3

000d5dbe <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5dbe:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5dc0:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d5dc2:	f100 0110 	add.w	r1, r0, #16
   d5dc6:	f7ff fff1 	bl	d5dac <_ZNKSt8functionIFvRKbEEclES1_>
   d5dca:	bd08      	pop	{r3, pc}

000d5dcc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5dcc:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5dce:	2300      	movs	r3, #0
   d5dd0:	6083      	str	r3, [r0, #8]
   d5dd2:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5dd4:	4604      	mov	r4, r0
   d5dd6:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5dd8:	b12b      	cbz	r3, d5de6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5dda:	2202      	movs	r2, #2
   d5ddc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5dde:	68eb      	ldr	r3, [r5, #12]
   d5de0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5de2:	68ab      	ldr	r3, [r5, #8]
   d5de4:	60a3      	str	r3, [r4, #8]
	}
    }
   d5de6:	4620      	mov	r0, r4
   d5de8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5dec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d5dec:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5dee:	b089      	sub	sp, #36	; 0x24
   d5df0:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d5df2:	4668      	mov	r0, sp
   d5df4:	f7ff ff3e 	bl	d5c74 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5df8:	2300      	movs	r3, #0
   d5dfa:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5dfe:	f04f 0202 	mov.w	r2, #2
   d5e02:	e8d4 3f4f 	ldrexb	r3, [r4]
   d5e06:	2b00      	cmp	r3, #0
   d5e08:	d103      	bne.n	d5e12 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d5e0a:	e8c4 2f41 	strexb	r1, r2, [r4]
   d5e0e:	2900      	cmp	r1, #0
   d5e10:	d1f7      	bne.n	d5e02 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d5e12:	d002      	beq.n	d5e1a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d5e14:	f88d 3008 	strb.w	r3, [sp, #8]
   d5e18:	e063      	b.n	d5ee2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d5e1a:	f114 050c 	adds.w	r5, r4, #12
   d5e1e:	d003      	beq.n	d5e28 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d5e20:	4669      	mov	r1, sp
   d5e22:	4628      	mov	r0, r5
   d5e24:	f7ff ff26 	bl	d5c74 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5e28:	f3bf 8f5f 	dmb	sy
   d5e2c:	2301      	movs	r3, #1
   d5e2e:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d5e30:	2000      	movs	r0, #0
   d5e32:	f104 0308 	add.w	r3, r4, #8
   d5e36:	f3bf 8f5f 	dmb	sy
   d5e3a:	e853 6f00 	ldrex	r6, [r3]
   d5e3e:	e843 0200 	strex	r2, r0, [r3]
   d5e42:	2a00      	cmp	r2, #0
   d5e44:	d1f9      	bne.n	d5e3a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d5e46:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5e4a:	2e00      	cmp	r6, #0
   d5e4c:	d049      	beq.n	d5ee2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5e4e:	f7ff fd93 	bl	d5978 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d5e52:	b120      	cbz	r0, d5e5e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5e54:	4629      	mov	r1, r5
   d5e56:	4630      	mov	r0, r6
   d5e58:	f7ff ff98 	bl	d5d8c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5e5c:	e03a      	b.n	d5ed4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5e5e:	4631      	mov	r1, r6
   d5e60:	a802      	add	r0, sp, #8
   d5e62:	f7ff ffb3 	bl	d5dcc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d5e66:	68e0      	ldr	r0, [r4, #12]
   d5e68:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5e6c:	b108      	cbz	r0, d5e72 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d5e6e:	f003 fb9b 	bl	d95a8 <strdup>
   d5e72:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5e74:	2010      	movs	r0, #16
   d5e76:	f8ad 501c 	strh.w	r5, [sp, #28]
   d5e7a:	f7fe f90e 	bl	d409a <_Znwj>
   d5e7e:	4605      	mov	r5, r0
   d5e80:	b1e8      	cbz	r0, d5ebe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5e82:	2700      	movs	r7, #0
   d5e84:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5e86:	2018      	movs	r0, #24
   d5e88:	f7fe f907 	bl	d409a <_Znwj>
   d5e8c:	4604      	mov	r4, r0
   d5e8e:	b188      	cbz	r0, d5eb4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5e90:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5e92:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5e94:	a802      	add	r0, sp, #8
   d5e96:	f7ff ff55 	bl	d5d44 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5e9a:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5e9c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5e9e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5ea0:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5ea2:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5ea4:	a906      	add	r1, sp, #24
   d5ea6:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5ea8:	60e3      	str	r3, [r4, #12]
   d5eaa:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5eae:	9205      	str	r2, [sp, #20]
   d5eb0:	f7ff fee0 	bl	d5c74 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5eb4:	4b0d      	ldr	r3, [pc, #52]	; (d5eec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d5eb6:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5eb8:	4b0d      	ldr	r3, [pc, #52]	; (d5ef0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5eba:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5ebc:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d5ebe:	a806      	add	r0, sp, #24
   d5ec0:	f7ff fee7 	bl	d5c92 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5ec4:	a802      	add	r0, sp, #8
   d5ec6:	f7ff fecc 	bl	d5c62 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5eca:	2200      	movs	r2, #0
   d5ecc:	4629      	mov	r1, r5
   d5ece:	4809      	ldr	r0, [pc, #36]	; (d5ef4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d5ed0:	f7ff fd5a 	bl	d5988 <application_thread_invoke>
   d5ed4:	4630      	mov	r0, r6
   d5ed6:	f7ff fec4 	bl	d5c62 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5eda:	2110      	movs	r1, #16
   d5edc:	4630      	mov	r0, r6
   d5ede:	f001 f8ee 	bl	d70be <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d5ee2:	4668      	mov	r0, sp
   d5ee4:	f7ff fed5 	bl	d5c92 <_ZN8particle5ErrorD1Ev>
    }
   d5ee8:	b009      	add	sp, #36	; 0x24
   d5eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5eec:	000d5d9f 	.word	0x000d5d9f
   d5ef0:	000d6015 	.word	0x000d6015
   d5ef4:	000d5b07 	.word	0x000d5b07

000d5ef8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5efc:	b08b      	sub	sp, #44	; 0x2c
   d5efe:	4606      	mov	r6, r0
   d5f00:	460f      	mov	r7, r1
   d5f02:	4690      	mov	r8, r2
   d5f04:	4699      	mov	r9, r3
   d5f06:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5f0a:	f7ff fd59 	bl	d59c0 <spark_cloud_flag_connected>
   d5f0e:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d5f10:	4683      	mov	fp, r0
   d5f12:	bb30      	cbnz	r0, d5f62 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5f14:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d5f18:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5f1a:	a905      	add	r1, sp, #20
   d5f1c:	4628      	mov	r0, r5
   d5f1e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5f22:	f7ff fea7 	bl	d5c74 <_ZN8particle5ErrorC1EOS0_>
   d5f26:	2014      	movs	r0, #20
   d5f28:	f7fe f8b7 	bl	d409a <_Znwj>
   d5f2c:	4604      	mov	r4, r0
   d5f2e:	b158      	cbz	r0, d5f48 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d5f30:	2302      	movs	r3, #2
   d5f32:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5f34:	2301      	movs	r3, #1
   d5f36:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5f38:	f8c0 b004 	str.w	fp, [r0, #4]
   d5f3c:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d5f40:	4629      	mov	r1, r5
   d5f42:	300c      	adds	r0, #12
   d5f44:	f7ff fe96 	bl	d5c74 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d5f48:	4630      	mov	r0, r6
   d5f4a:	4621      	mov	r1, r4
   d5f4c:	f840 4b04 	str.w	r4, [r0], #4
   d5f50:	f7ff ff08 	bl	d5d64 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5f54:	4628      	mov	r0, r5
   d5f56:	f7ff fe9c 	bl	d5c92 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d5f5a:	a805      	add	r0, sp, #20
   d5f5c:	f7ff fe99 	bl	d5c92 <_ZN8particle5ErrorD1Ev>
   d5f60:	e052      	b.n	d6008 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d5f62:	2400      	movs	r4, #0
   d5f64:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d5f66:	2014      	movs	r0, #20
   d5f68:	606c      	str	r4, [r5, #4]
   d5f6a:	60ac      	str	r4, [r5, #8]
   d5f6c:	9307      	str	r3, [sp, #28]
   d5f6e:	f7fe f894 	bl	d409a <_Znwj>
   d5f72:	4601      	mov	r1, r0
   d5f74:	b118      	cbz	r0, d5f7e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d5f76:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5f78:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5f7a:	6044      	str	r4, [r0, #4]
   d5f7c:	6084      	str	r4, [r0, #8]
   d5f7e:	a804      	add	r0, sp, #16
   d5f80:	9103      	str	r1, [sp, #12]
   d5f82:	f7ff feef 	bl	d5d64 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d5f86:	4b22      	ldr	r3, [pc, #136]	; (d6010 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d5f88:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d5f8a:	2008      	movs	r0, #8
   d5f8c:	f7fe f885 	bl	d409a <_Znwj>
   d5f90:	4604      	mov	r4, r0
   d5f92:	b128      	cbz	r0, d5fa0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5f94:	9b03      	ldr	r3, [sp, #12]
   d5f96:	f840 3b04 	str.w	r3, [r0], #4
   d5f9a:	a904      	add	r1, sp, #16
   d5f9c:	f7ff fddf 	bl	d5b5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5fa0:	9500      	str	r5, [sp, #0]
   d5fa2:	fa5f f38a 	uxtb.w	r3, sl
   d5fa6:	464a      	mov	r2, r9
   d5fa8:	4641      	mov	r1, r8
   d5faa:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d5fac:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5fae:	f7ff fd0f 	bl	d59d0 <spark_send_event>
   d5fb2:	b920      	cbnz	r0, d5fbe <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d5fb4:	9b03      	ldr	r3, [sp, #12]
   d5fb6:	785b      	ldrb	r3, [r3, #1]
   d5fb8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d5fbc:	b183      	cbz	r3, d5fe0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d5fbe:	9b03      	ldr	r3, [sp, #12]
   d5fc0:	9305      	str	r3, [sp, #20]
   d5fc2:	a904      	add	r1, sp, #16
   d5fc4:	a806      	add	r0, sp, #24
   d5fc6:	f7ff fdca 	bl	d5b5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d5fca:	a905      	add	r1, sp, #20
   d5fcc:	4630      	mov	r0, r6
   d5fce:	f7ff fe8a 	bl	d5ce6 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5fd2:	a806      	add	r0, sp, #24
   d5fd4:	f7ff fdca 	bl	d5b6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5fd8:	a804      	add	r0, sp, #16
   d5fda:	f7ff fdc7 	bl	d5b6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5fde:	e013      	b.n	d6008 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d5fe0:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d5fe4:	a905      	add	r1, sp, #20
   d5fe6:	a803      	add	r0, sp, #12
   d5fe8:	9205      	str	r2, [sp, #20]
   d5fea:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5fee:	f7ff fefd 	bl	d5dec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5ff2:	a805      	add	r0, sp, #20
   d5ff4:	f7ff fe4d 	bl	d5c92 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d5ff8:	a805      	add	r0, sp, #20
   d5ffa:	9909      	ldr	r1, [sp, #36]	; 0x24
   d5ffc:	f7ff fe84 	bl	d5d08 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d6000:	a806      	add	r0, sp, #24
   d6002:	f7ff fdb3 	bl	d5b6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6006:	e7da      	b.n	d5fbe <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d6008:	4630      	mov	r0, r6
   d600a:	b00b      	add	sp, #44	; 0x2c
   d600c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6010:	000d6185 	.word	0x000d6185

000d6014 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d6014:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6016:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6018:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d601a:	d006      	beq.n	d602a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d601c:	2a03      	cmp	r2, #3
   d601e:	d017      	beq.n	d6050 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d6020:	2a01      	cmp	r2, #1
   d6022:	d122      	bne.n	d606a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6024:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6026:	6003      	str	r3, [r0, #0]
	      break;
   d6028:	e01f      	b.n	d606a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d602a:	2018      	movs	r0, #24
   d602c:	680e      	ldr	r6, [r1, #0]
   d602e:	f7fe f834 	bl	d409a <_Znwj>
   d6032:	4605      	mov	r5, r0
   d6034:	b150      	cbz	r0, d604c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d6036:	4631      	mov	r1, r6
   d6038:	f7ff fec8 	bl	d5dcc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d603c:	6930      	ldr	r0, [r6, #16]
   d603e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d6042:	b108      	cbz	r0, d6048 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d6044:	f003 fab0 	bl	d95a8 <strdup>
   d6048:	6128      	str	r0, [r5, #16]
   d604a:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d604c:	6025      	str	r5, [r4, #0]
   d604e:	e00c      	b.n	d606a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6050:	6804      	ldr	r4, [r0, #0]
   d6052:	b154      	cbz	r4, d606a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d6054:	f104 0010 	add.w	r0, r4, #16
   d6058:	f7ff fe1b 	bl	d5c92 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d605c:	4620      	mov	r0, r4
   d605e:	f7ff fe00 	bl	d5c62 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6062:	2118      	movs	r1, #24
   d6064:	4620      	mov	r0, r4
   d6066:	f001 f82a 	bl	d70be <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d606a:	2000      	movs	r0, #0
   d606c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d606e <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d606e:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6070:	2300      	movs	r3, #0
   d6072:	6083      	str	r3, [r0, #8]
   d6074:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6076:	4604      	mov	r4, r0
   d6078:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d607a:	b12b      	cbz	r3, d6088 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d607c:	2202      	movs	r2, #2
   d607e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6080:	68eb      	ldr	r3, [r5, #12]
   d6082:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6084:	68ab      	ldr	r3, [r5, #8]
   d6086:	60a3      	str	r3, [r4, #8]
	}
    }
   d6088:	4620      	mov	r0, r4
   d608a:	bd38      	pop	{r3, r4, r5, pc}

000d608c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d608c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d608e:	b570      	push	{r4, r5, r6, lr}
   d6090:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d6092:	d006      	beq.n	d60a2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d6094:	2a03      	cmp	r2, #3
   d6096:	d011      	beq.n	d60bc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d6098:	2a01      	cmp	r2, #1
   d609a:	d118      	bne.n	d60ce <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d609c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d609e:	6003      	str	r3, [r0, #0]
	      break;
   d60a0:	e015      	b.n	d60ce <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d60a2:	2014      	movs	r0, #20
   d60a4:	680e      	ldr	r6, [r1, #0]
   d60a6:	f7fd fff8 	bl	d409a <_Znwj>
   d60aa:	4605      	mov	r5, r0
   d60ac:	b120      	cbz	r0, d60b8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d60ae:	4631      	mov	r1, r6
   d60b0:	f7ff ffdd 	bl	d606e <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d60b4:	7c33      	ldrb	r3, [r6, #16]
   d60b6:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d60b8:	6025      	str	r5, [r4, #0]
   d60ba:	e008      	b.n	d60ce <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d60bc:	6804      	ldr	r4, [r0, #0]
   d60be:	b134      	cbz	r4, d60ce <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d60c0:	4620      	mov	r0, r4
   d60c2:	f7ff fdce 	bl	d5c62 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d60c6:	2114      	movs	r1, #20
   d60c8:	4620      	mov	r0, r4
   d60ca:	f000 fff8 	bl	d70be <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d60ce:	2000      	movs	r0, #0
   d60d0:	bd70      	pop	{r4, r5, r6, pc}
	...

000d60d4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d60d4:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d60d6:	2300      	movs	r3, #0
   d60d8:	b087      	sub	sp, #28
   d60da:	460c      	mov	r4, r1
   d60dc:	f3bf 8f5f 	dmb	sy
   d60e0:	e850 6f00 	ldrex	r6, [r0]
   d60e4:	e840 3200 	strex	r2, r3, [r0]
   d60e8:	2a00      	cmp	r2, #0
   d60ea:	d1f9      	bne.n	d60e0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d60ec:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d60f0:	2e00      	cmp	r6, #0
   d60f2:	d03f      	beq.n	d6174 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d60f4:	4618      	mov	r0, r3
   d60f6:	f7ff fc3f 	bl	d5978 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d60fa:	4607      	mov	r7, r0
   d60fc:	b120      	cbz	r0, d6108 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d60fe:	4621      	mov	r1, r4
   d6100:	4630      	mov	r0, r6
   d6102:	f7ff fe53 	bl	d5dac <_ZNKSt8functionIFvRKbEEclES1_>
   d6106:	e02e      	b.n	d6166 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6108:	4631      	mov	r1, r6
   d610a:	a801      	add	r0, sp, #4
   d610c:	f7ff ffaf 	bl	d606e <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6110:	7823      	ldrb	r3, [r4, #0]
   d6112:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d6116:	2010      	movs	r0, #16
   d6118:	f7fd ffbf 	bl	d409a <_Znwj>
   d611c:	4605      	mov	r5, r0
   d611e:	b1d0      	cbz	r0, d6156 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6120:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6122:	2014      	movs	r0, #20
   d6124:	f7fd ffb9 	bl	d409a <_Znwj>
   d6128:	4604      	mov	r4, r0
   d612a:	b178      	cbz	r0, d614c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d612c:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d612e:	4601      	mov	r1, r0
   d6130:	a801      	add	r0, sp, #4
   d6132:	f7ff fe07 	bl	d5d44 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6136:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d6138:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d613a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d613c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d613e:	9203      	str	r2, [sp, #12]
   d6140:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6142:	60e3      	str	r3, [r4, #12]
   d6144:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6148:	9204      	str	r2, [sp, #16]
   d614a:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d614c:	4b0a      	ldr	r3, [pc, #40]	; (d6178 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d614e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6150:	4b0a      	ldr	r3, [pc, #40]	; (d617c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6152:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d6154:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6156:	a801      	add	r0, sp, #4
   d6158:	f7ff fd83 	bl	d5c62 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d615c:	2200      	movs	r2, #0
   d615e:	4629      	mov	r1, r5
   d6160:	4807      	ldr	r0, [pc, #28]	; (d6180 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d6162:	f7ff fc11 	bl	d5988 <application_thread_invoke>
   d6166:	4630      	mov	r0, r6
   d6168:	f7ff fd7b 	bl	d5c62 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d616c:	2110      	movs	r1, #16
   d616e:	4630      	mov	r0, r6
   d6170:	f000 ffa5 	bl	d70be <_ZdlPvj>
        }
    }
   d6174:	b007      	add	sp, #28
   d6176:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6178:	000d5dbf 	.word	0x000d5dbf
   d617c:	000d608d 	.word	0x000d608d
   d6180:	000d5b07 	.word	0x000d5b07

000d6184 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d6184:	b530      	push	{r4, r5, lr}
   d6186:	b085      	sub	sp, #20
   d6188:	4604      	mov	r4, r0
   d618a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d618c:	4668      	mov	r0, sp
   d618e:	4611      	mov	r1, r2
   d6190:	f7ff fdba 	bl	d5d08 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d6194:	b17c      	cbz	r4, d61b6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d6196:	b224      	sxth	r4, r4
   d6198:	4628      	mov	r0, r5
   d619a:	b10d      	cbz	r5, d61a0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d619c:	f003 fa04 	bl	d95a8 <strdup>
   d61a0:	9002      	str	r0, [sp, #8]
   d61a2:	a902      	add	r1, sp, #8
   d61a4:	4668      	mov	r0, sp
   d61a6:	f8ad 400c 	strh.w	r4, [sp, #12]
   d61aa:	f7ff fe1f 	bl	d5dec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d61ae:	a802      	add	r0, sp, #8
   d61b0:	f7ff fd6f 	bl	d5c92 <_ZN8particle5ErrorD1Ev>
   d61b4:	e01d      	b.n	d61f2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d61b6:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d61b8:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d61bc:	f04f 0201 	mov.w	r2, #1
   d61c0:	e8d0 3f4f 	ldrexb	r3, [r0]
   d61c4:	42a3      	cmp	r3, r4
   d61c6:	d103      	bne.n	d61d0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d61c8:	e8c0 2f41 	strexb	r1, r2, [r0]
   d61cc:	2900      	cmp	r1, #0
   d61ce:	d1f7      	bne.n	d61c0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d61d0:	d002      	beq.n	d61d8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d61d2:	f88d 3008 	strb.w	r3, [sp, #8]
   d61d6:	e00c      	b.n	d61f2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d61d8:	f110 010c 	adds.w	r1, r0, #12
   d61dc:	f04f 0301 	mov.w	r3, #1
   d61e0:	bf18      	it	ne
   d61e2:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d61e4:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d61e8:	3004      	adds	r0, #4
   d61ea:	f800 3c03 	strb.w	r3, [r0, #-3]
   d61ee:	f7ff ff71 	bl	d60d4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d61f2:	a801      	add	r0, sp, #4
   d61f4:	f7ff fcba 	bl	d5b6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d61f8:	b005      	add	sp, #20
   d61fa:	bd30      	pop	{r4, r5, pc}

000d61fc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d61fc:	2200      	movs	r2, #0
   d61fe:	4611      	mov	r1, r2
   d6200:	6840      	ldr	r0, [r0, #4]
   d6202:	f7ff bc2d 	b.w	d5a60 <network_listening>

000d6206 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6206:	2200      	movs	r2, #0
   d6208:	4611      	mov	r1, r2
   d620a:	6840      	ldr	r0, [r0, #4]
   d620c:	f7ff bc38 	b.w	d5a80 <network_get_listen_timeout>

000d6210 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6210:	2200      	movs	r2, #0
   d6212:	6840      	ldr	r0, [r0, #4]
   d6214:	f7ff bc2c 	b.w	d5a70 <network_set_listen_timeout>

000d6218 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6218:	2200      	movs	r2, #0
   d621a:	f081 0101 	eor.w	r1, r1, #1
   d621e:	6840      	ldr	r0, [r0, #4]
   d6220:	f7ff bc16 	b.w	d5a50 <network_listen>

000d6224 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d6224:	2300      	movs	r3, #0
   d6226:	461a      	mov	r2, r3
   d6228:	4619      	mov	r1, r3
   d622a:	6840      	ldr	r0, [r0, #4]
   d622c:	f7ff bc08 	b.w	d5a40 <network_off>

000d6230 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6230:	2300      	movs	r3, #0
   d6232:	461a      	mov	r2, r3
   d6234:	4619      	mov	r1, r3
   d6236:	6840      	ldr	r0, [r0, #4]
   d6238:	f7ff bbfa 	b.w	d5a30 <network_on>

000d623c <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d623c:	2200      	movs	r2, #0
   d623e:	4611      	mov	r1, r2
   d6240:	6840      	ldr	r0, [r0, #4]
   d6242:	f7ff bbed 	b.w	d5a20 <network_ready>

000d6246 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6246:	2200      	movs	r2, #0
   d6248:	4611      	mov	r1, r2
   d624a:	6840      	ldr	r0, [r0, #4]
   d624c:	f7ff bbd8 	b.w	d5a00 <network_connecting>

000d6250 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6250:	2200      	movs	r2, #0
   d6252:	2102      	movs	r1, #2
   d6254:	6840      	ldr	r0, [r0, #4]
   d6256:	f7ff bbdb 	b.w	d5a10 <network_disconnect>

000d625a <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d625a:	2300      	movs	r3, #0
   d625c:	461a      	mov	r2, r3
   d625e:	6840      	ldr	r0, [r0, #4]
   d6260:	f7ff bbc6 	b.w	d59f0 <network_connect>

000d6264 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d6264:	4b02      	ldr	r3, [pc, #8]	; (d6270 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d6266:	2203      	movs	r2, #3
   d6268:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d626a:	4a02      	ldr	r2, [pc, #8]	; (d6274 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d626c:	601a      	str	r2, [r3, #0]
   d626e:	4770      	bx	lr
   d6270:	2003e4d8 	.word	0x2003e4d8
   d6274:	000d9ba8 	.word	0x000d9ba8

000d6278 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d6278:	4770      	bx	lr

000d627a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d627a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d627c:	4606      	mov	r6, r0
   d627e:	4615      	mov	r5, r2
   d6280:	460c      	mov	r4, r1
   d6282:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6284:	42bc      	cmp	r4, r7
   d6286:	d006      	beq.n	d6296 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6288:	6833      	ldr	r3, [r6, #0]
   d628a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d628e:	689b      	ldr	r3, [r3, #8]
   d6290:	4630      	mov	r0, r6
   d6292:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6294:	e7f6      	b.n	d6284 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d6296:	4628      	mov	r0, r5
   d6298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d629a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d629a:	2200      	movs	r2, #0
   d629c:	7c00      	ldrb	r0, [r0, #16]
   d629e:	f7ff ba43 	b.w	d5728 <HAL_I2C_Write_Data>

000d62a2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d62a2:	2100      	movs	r1, #0
   d62a4:	7c00      	ldrb	r0, [r0, #16]
   d62a6:	f7ff ba47 	b.w	d5738 <HAL_I2C_Available_Data>

000d62aa <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d62aa:	2100      	movs	r1, #0
   d62ac:	7c00      	ldrb	r0, [r0, #16]
   d62ae:	f7ff ba4b 	b.w	d5748 <HAL_I2C_Read_Data>

000d62b2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d62b2:	2100      	movs	r1, #0
   d62b4:	7c00      	ldrb	r0, [r0, #16]
   d62b6:	f7ff ba4f 	b.w	d5758 <HAL_I2C_Peek_Data>

000d62ba <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d62ba:	2100      	movs	r1, #0
   d62bc:	7c00      	ldrb	r0, [r0, #16]
   d62be:	f7ff ba53 	b.w	d5768 <HAL_I2C_Flush_Data>

000d62c2 <_ZN7TwoWireD0Ev>:
   d62c2:	b510      	push	{r4, lr}
   d62c4:	2114      	movs	r1, #20
   d62c6:	4604      	mov	r4, r0
   d62c8:	f000 fef9 	bl	d70be <_ZdlPvj>
   d62cc:	4620      	mov	r0, r4
   d62ce:	bd10      	pop	{r4, pc}

000d62d0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d62d0:	b510      	push	{r4, lr}
   d62d2:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d62d4:	2300      	movs	r3, #0
   d62d6:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d62d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d62dc:	60a3      	str	r3, [r4, #8]
   d62de:	4b04      	ldr	r3, [pc, #16]	; (d62f0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d62e0:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d62e2:	4608      	mov	r0, r1
   d62e4:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d62e6:	4611      	mov	r1, r2
   d62e8:	f7ff fa4e 	bl	d5788 <HAL_I2C_Init>
}
   d62ec:	4620      	mov	r0, r4
   d62ee:	bd10      	pop	{r4, pc}
   d62f0:	000d9bdc 	.word	0x000d9bdc

000d62f4 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d62f4:	2300      	movs	r3, #0
   d62f6:	461a      	mov	r2, r3
   d62f8:	4619      	mov	r1, r3
   d62fa:	7c00      	ldrb	r0, [r0, #16]
   d62fc:	f7ff b9fc 	b.w	d56f8 <HAL_I2C_Begin>

000d6300 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d6300:	b570      	push	{r4, r5, r6, lr}
   d6302:	460c      	mov	r4, r1
   d6304:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d6306:	2514      	movs	r5, #20
   d6308:	4606      	mov	r6, r0
   d630a:	462a      	mov	r2, r5
   d630c:	2100      	movs	r1, #0
   d630e:	a801      	add	r0, sp, #4
   d6310:	f003 f919 	bl	d9546 <memset>
   d6314:	7823      	ldrb	r3, [r4, #0]
   d6316:	f88d 3008 	strb.w	r3, [sp, #8]
   d631a:	6863      	ldr	r3, [r4, #4]
   d631c:	9303      	str	r3, [sp, #12]
   d631e:	68e3      	ldr	r3, [r4, #12]
   d6320:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d6322:	2200      	movs	r2, #0
   d6324:	7a23      	ldrb	r3, [r4, #8]
   d6326:	7c30      	ldrb	r0, [r6, #16]
   d6328:	f8ad 5004 	strh.w	r5, [sp, #4]
   d632c:	a901      	add	r1, sp, #4
   d632e:	9305      	str	r3, [sp, #20]
   d6330:	f7ff fa32 	bl	d5798 <HAL_I2C_Request_Data_Ex>
}
   d6334:	b006      	add	sp, #24
   d6336:	bd70      	pop	{r4, r5, r6, pc}

000d6338 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d6338:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d633a:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d633c:	f88d 1000 	strb.w	r1, [sp]
   d6340:	f04f 0164 	mov.w	r1, #100	; 0x64
   d6344:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d6346:	bf18      	it	ne
   d6348:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d634a:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d634c:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d634e:	f88d 3008 	strb.w	r3, [sp, #8]
   d6352:	f7ff ffd5 	bl	d6300 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d6356:	b005      	add	sp, #20
   d6358:	f85d fb04 	ldr.w	pc, [sp], #4

000d635c <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   d635c:	2301      	movs	r3, #1
   d635e:	f7ff bfeb 	b.w	d6338 <_ZN7TwoWire11requestFromEhjh>

000d6362 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d6362:	2200      	movs	r2, #0
   d6364:	7c00      	ldrb	r0, [r0, #16]
   d6366:	f7ff b9cf 	b.w	d5708 <HAL_I2C_Begin_Transmission>

000d636a <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d636a:	b2c9      	uxtb	r1, r1
   d636c:	f7ff bff9 	b.w	d6362 <_ZN7TwoWire17beginTransmissionEh>

000d6370 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d6370:	2200      	movs	r2, #0
   d6372:	7c00      	ldrb	r0, [r0, #16]
   d6374:	f7ff b9d0 	b.w	d5718 <HAL_I2C_End_Transmission>

000d6378 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d6378:	2101      	movs	r1, #1
   d637a:	f7ff bff9 	b.w	d6370 <_ZN7TwoWire15endTransmissionEh>

000d637e <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d637e:	2100      	movs	r1, #0
   d6380:	7c00      	ldrb	r0, [r0, #16]
   d6382:	f7ff b9f9 	b.w	d5778 <HAL_I2C_Is_Enabled>

000d6386 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d6386:	4770      	bx	lr

000d6388 <_ZN9IPAddressD0Ev>:
   d6388:	b510      	push	{r4, lr}
   d638a:	2118      	movs	r1, #24
   d638c:	4604      	mov	r4, r0
   d638e:	f000 fe96 	bl	d70be <_ZdlPvj>
   d6392:	4620      	mov	r0, r4
   d6394:	bd10      	pop	{r4, pc}

000d6396 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6396:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6398:	7d03      	ldrb	r3, [r0, #20]
   d639a:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d639c:	b08d      	sub	sp, #52	; 0x34
   d639e:	460e      	mov	r6, r1
   d63a0:	f100 0704 	add.w	r7, r0, #4
   d63a4:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d63a8:	d002      	beq.n	d63b0 <_ZNK9IPAddress7printToER5Print+0x1a>
   d63aa:	f100 0508 	add.w	r5, r0, #8
   d63ae:	e018      	b.n	d63e2 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d63b0:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d63b2:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d63b4:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d63b8:	232f      	movs	r3, #47	; 0x2f
   d63ba:	462a      	mov	r2, r5
   d63bc:	200a      	movs	r0, #10
   d63be:	f7ff f9f3 	bl	d57a8 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d63c2:	4628      	mov	r0, r5
   d63c4:	f003 f90b 	bl	d95de <strlen>
   d63c8:	6833      	ldr	r3, [r6, #0]
   d63ca:	4602      	mov	r2, r0
   d63cc:	68db      	ldr	r3, [r3, #12]
   d63ce:	4629      	mov	r1, r5
   d63d0:	4630      	mov	r0, r6
   d63d2:	4798      	blx	r3
   d63d4:	e00f      	b.n	d63f6 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d63d6:	b124      	cbz	r4, d63e2 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d63d8:	212e      	movs	r1, #46	; 0x2e
   d63da:	4630      	mov	r0, r6
   d63dc:	f000 f9da 	bl	d6794 <_ZN5Print5printEc>
   d63e0:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d63e2:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d63e6:	220a      	movs	r2, #10
   d63e8:	4630      	mov	r0, r6
   d63ea:	f000 f9ec 	bl	d67c6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d63ee:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d63f0:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d63f2:	d1f0      	bne.n	d63d6 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d63f4:	4620      	mov	r0, r4
    }
    return n;
}
   d63f6:	b00d      	add	sp, #52	; 0x34
   d63f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d63fc <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d63fc:	b510      	push	{r4, lr}
   d63fe:	4b05      	ldr	r3, [pc, #20]	; (d6414 <_ZN9IPAddressC1Ev+0x18>)
   d6400:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6402:	2211      	movs	r2, #17
   d6404:	f840 3b04 	str.w	r3, [r0], #4
   d6408:	2100      	movs	r1, #0
   d640a:	f003 f89c 	bl	d9546 <memset>
{
    clear();
}
   d640e:	4620      	mov	r0, r4
   d6410:	bd10      	pop	{r4, pc}
   d6412:	bf00      	nop
   d6414:	000d9c04 	.word	0x000d9c04

000d6418 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d6418:	4603      	mov	r3, r0
   d641a:	4a07      	ldr	r2, [pc, #28]	; (d6438 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d641c:	b510      	push	{r4, lr}
   d641e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d6422:	f101 0210 	add.w	r2, r1, #16
   d6426:	f851 4b04 	ldr.w	r4, [r1], #4
   d642a:	f843 4b04 	str.w	r4, [r3], #4
   d642e:	4291      	cmp	r1, r2
   d6430:	d1f9      	bne.n	d6426 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6432:	780a      	ldrb	r2, [r1, #0]
   d6434:	701a      	strb	r2, [r3, #0]
}
   d6436:	bd10      	pop	{r4, pc}
   d6438:	000d9c04 	.word	0x000d9c04

000d643c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d643c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d643e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d6442:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d6446:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d644a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d644e:	2304      	movs	r3, #4
   d6450:	6041      	str	r1, [r0, #4]
   d6452:	7503      	strb	r3, [r0, #20]
   d6454:	bd10      	pop	{r4, pc}

000d6456 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d6456:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d6458:	780d      	ldrb	r5, [r1, #0]
   d645a:	788b      	ldrb	r3, [r1, #2]
   d645c:	784a      	ldrb	r2, [r1, #1]
   d645e:	78c9      	ldrb	r1, [r1, #3]
   d6460:	9100      	str	r1, [sp, #0]
   d6462:	4629      	mov	r1, r5
   d6464:	f7ff ffea 	bl	d643c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d6468:	b003      	add	sp, #12
   d646a:	bd30      	pop	{r4, r5, pc}

000d646c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d646c:	4b01      	ldr	r3, [pc, #4]	; (d6474 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d646e:	4a02      	ldr	r2, [pc, #8]	; (d6478 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6470:	601a      	str	r2, [r3, #0]
   d6472:	4770      	bx	lr
   d6474:	2003e4e0 	.word	0x2003e4e0
   d6478:	000d9c83 	.word	0x000d9c83

000d647c <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d647c:	2200      	movs	r2, #0
   d647e:	4611      	mov	r1, r2
   d6480:	6840      	ldr	r0, [r0, #4]
   d6482:	f7ff baed 	b.w	d5a60 <network_listening>

000d6486 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6486:	2200      	movs	r2, #0
   d6488:	4611      	mov	r1, r2
   d648a:	6840      	ldr	r0, [r0, #4]
   d648c:	f7ff baf8 	b.w	d5a80 <network_get_listen_timeout>

000d6490 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6490:	2200      	movs	r2, #0
   d6492:	6840      	ldr	r0, [r0, #4]
   d6494:	f7ff baec 	b.w	d5a70 <network_set_listen_timeout>

000d6498 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6498:	2200      	movs	r2, #0
   d649a:	f081 0101 	eor.w	r1, r1, #1
   d649e:	6840      	ldr	r0, [r0, #4]
   d64a0:	f7ff bad6 	b.w	d5a50 <network_listen>

000d64a4 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d64a4:	2300      	movs	r3, #0
   d64a6:	461a      	mov	r2, r3
   d64a8:	2101      	movs	r1, #1
   d64aa:	6840      	ldr	r0, [r0, #4]
   d64ac:	f7ff bac8 	b.w	d5a40 <network_off>

000d64b0 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d64b0:	2300      	movs	r3, #0
   d64b2:	461a      	mov	r2, r3
   d64b4:	4619      	mov	r1, r3
   d64b6:	6840      	ldr	r0, [r0, #4]
   d64b8:	f7ff baba 	b.w	d5a30 <network_on>

000d64bc <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d64bc:	2200      	movs	r2, #0
   d64be:	4611      	mov	r1, r2
   d64c0:	6840      	ldr	r0, [r0, #4]
   d64c2:	f7ff baad 	b.w	d5a20 <network_ready>

000d64c6 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d64c6:	2200      	movs	r2, #0
   d64c8:	4611      	mov	r1, r2
   d64ca:	6840      	ldr	r0, [r0, #4]
   d64cc:	f7ff ba98 	b.w	d5a00 <network_connecting>

000d64d0 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d64d0:	2200      	movs	r2, #0
   d64d2:	2102      	movs	r1, #2
   d64d4:	6840      	ldr	r0, [r0, #4]
   d64d6:	f7ff ba9b 	b.w	d5a10 <network_disconnect>

000d64da <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d64da:	2300      	movs	r3, #0
   d64dc:	461a      	mov	r2, r3
   d64de:	6840      	ldr	r0, [r0, #4]
   d64e0:	f7ff ba86 	b.w	d59f0 <network_connect>

000d64e4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d64e4:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d64e6:	4605      	mov	r5, r0
   d64e8:	b188      	cbz	r0, d650e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d64ea:	6804      	ldr	r4, [r0, #0]
   d64ec:	b14c      	cbz	r4, d6502 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d64ee:	68a3      	ldr	r3, [r4, #8]
   d64f0:	b11b      	cbz	r3, d64fa <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d64f2:	2203      	movs	r2, #3
   d64f4:	4621      	mov	r1, r4
   d64f6:	4620      	mov	r0, r4
   d64f8:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d64fa:	2110      	movs	r1, #16
   d64fc:	4620      	mov	r0, r4
   d64fe:	f000 fdde 	bl	d70be <_ZdlPvj>
   d6502:	4628      	mov	r0, r5
   d6504:	2114      	movs	r1, #20
      }
   d6506:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d650a:	f000 bdd8 	b.w	d70be <_ZdlPvj>
   d650e:	bd38      	pop	{r3, r4, r5, pc}

000d6510 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d6510:	b110      	cbz	r0, d6518 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d6512:	6803      	ldr	r3, [r0, #0]
   d6514:	685b      	ldr	r3, [r3, #4]
   d6516:	4718      	bx	r3
   d6518:	4770      	bx	lr

000d651a <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d651a:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d651c:	6803      	ldr	r3, [r0, #0]
   d651e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d6520:	b1bb      	cbz	r3, d6552 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d6522:	6858      	ldr	r0, [r3, #4]
   d6524:	f7ff f870 	bl	d5608 <os_thread_is_current>
   d6528:	b978      	cbnz	r0, d654a <_ZN6ThreadD1Ev+0x30>
   d652a:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d652c:	7c5a      	ldrb	r2, [r3, #17]
   d652e:	b912      	cbnz	r2, d6536 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d6530:	6858      	ldr	r0, [r3, #4]
   d6532:	f7ff f871 	bl	d5618 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d6536:	6823      	ldr	r3, [r4, #0]
   d6538:	6858      	ldr	r0, [r3, #4]
   d653a:	f7ff f875 	bl	d5628 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d653e:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6540:	2300      	movs	r3, #0
   d6542:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6544:	b128      	cbz	r0, d6552 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d6546:	f7ff ffcd 	bl	d64e4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d654a:	6820      	ldr	r0, [r4, #0]
   d654c:	b108      	cbz	r0, d6552 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d654e:	f7ff ffc9 	bl	d64e4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d6552:	4620      	mov	r0, r4
   d6554:	bd10      	pop	{r4, pc}

000d6556 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d6556:	b538      	push	{r3, r4, r5, lr}
   d6558:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d655a:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d655e:	b108      	cbz	r0, d6564 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d6560:	f7fd fd9f 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6564:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d6568:	b108      	cbz	r0, d656e <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d656a:	f7ff f86d 	bl	d5648 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d656e:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d6572:	b135      	cbz	r5, d6582 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6574:	4628      	mov	r0, r5
   d6576:	f7ff ffd0 	bl	d651a <_ZN6ThreadD1Ev>
   d657a:	2104      	movs	r1, #4
   d657c:	4628      	mov	r0, r5
   d657e:	f000 fd9e 	bl	d70be <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6582:	6820      	ldr	r0, [r4, #0]
   d6584:	b108      	cbz	r0, d658a <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d6586:	f7ff ffc3 	bl	d6510 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d658a:	4620      	mov	r0, r4
   d658c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6590 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d6590:	b510      	push	{r4, lr}
   d6592:	4b04      	ldr	r3, [pc, #16]	; (d65a4 <_ZN5spark9MeshClassD1Ev+0x14>)
   d6594:	4604      	mov	r4, r0
   d6596:	f840 3b08 	str.w	r3, [r0], #8
   d659a:	f7ff ffdc 	bl	d6556 <_ZN5spark11MeshPublishD1Ev>
   d659e:	4620      	mov	r0, r4
   d65a0:	bd10      	pop	{r4, pc}
   d65a2:	bf00      	nop
   d65a4:	000d9cf4 	.word	0x000d9cf4

000d65a8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d65a8:	b538      	push	{r3, r4, r5, lr}
   d65aa:	4c0e      	ldr	r4, [pc, #56]	; (d65e4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d65ac:	4b0e      	ldr	r3, [pc, #56]	; (d65e8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d65ae:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d65b0:	2500      	movs	r5, #0
   d65b2:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d65b4:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d65b8:	6063      	str	r3, [r4, #4]
   d65ba:	60a5      	str	r5, [r4, #8]
   d65bc:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d65c0:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d65c4:	f7ff f838 	bl	d5638 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d65c8:	4b08      	ldr	r3, [pc, #32]	; (d65ec <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d65ca:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d65ce:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d65d2:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d65d4:	4620      	mov	r0, r4
   d65d6:	4a06      	ldr	r2, [pc, #24]	; (d65f0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d65d8:	4906      	ldr	r1, [pc, #24]	; (d65f4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d65da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d65de:	f000 bd69 	b.w	d70b4 <__aeabi_atexit>
   d65e2:	bf00      	nop
   d65e4:	2003e4e4 	.word	0x2003e4e4
   d65e8:	000d9d28 	.word	0x000d9d28
   d65ec:	000d9cf4 	.word	0x000d9cf4
   d65f0:	2003e420 	.word	0x2003e420
   d65f4:	000d6591 	.word	0x000d6591

000d65f8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d65f8:	2300      	movs	r3, #0
   d65fa:	461a      	mov	r2, r3
   d65fc:	6840      	ldr	r0, [r0, #4]
   d65fe:	f7ff b9f7 	b.w	d59f0 <network_connect>

000d6602 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d6602:	2200      	movs	r2, #0
   d6604:	2102      	movs	r1, #2
   d6606:	6840      	ldr	r0, [r0, #4]
   d6608:	f7ff ba02 	b.w	d5a10 <network_disconnect>

000d660c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d660c:	2200      	movs	r2, #0
   d660e:	4611      	mov	r1, r2
   d6610:	6840      	ldr	r0, [r0, #4]
   d6612:	f7ff b9f5 	b.w	d5a00 <network_connecting>

000d6616 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6616:	2200      	movs	r2, #0
   d6618:	4611      	mov	r1, r2
   d661a:	6840      	ldr	r0, [r0, #4]
   d661c:	f7ff ba00 	b.w	d5a20 <network_ready>

000d6620 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6620:	2300      	movs	r3, #0
   d6622:	461a      	mov	r2, r3
   d6624:	4619      	mov	r1, r3
   d6626:	6840      	ldr	r0, [r0, #4]
   d6628:	f7ff ba02 	b.w	d5a30 <network_on>

000d662c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d662c:	2300      	movs	r3, #0
   d662e:	461a      	mov	r2, r3
   d6630:	4619      	mov	r1, r3
   d6632:	6840      	ldr	r0, [r0, #4]
   d6634:	f7ff ba04 	b.w	d5a40 <network_off>

000d6638 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6638:	2200      	movs	r2, #0
   d663a:	f081 0101 	eor.w	r1, r1, #1
   d663e:	6840      	ldr	r0, [r0, #4]
   d6640:	f7ff ba06 	b.w	d5a50 <network_listen>

000d6644 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6644:	2200      	movs	r2, #0
   d6646:	6840      	ldr	r0, [r0, #4]
   d6648:	f7ff ba12 	b.w	d5a70 <network_set_listen_timeout>

000d664c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d664c:	2200      	movs	r2, #0
   d664e:	4611      	mov	r1, r2
   d6650:	6840      	ldr	r0, [r0, #4]
   d6652:	f7ff ba15 	b.w	d5a80 <network_get_listen_timeout>

000d6656 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6656:	2200      	movs	r2, #0
   d6658:	4611      	mov	r1, r2
   d665a:	6840      	ldr	r0, [r0, #4]
   d665c:	f7ff ba00 	b.w	d5a60 <network_listening>

000d6660 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6660:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6664:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d6666:	b095      	sub	sp, #84	; 0x54
   d6668:	4616      	mov	r6, r2
   d666a:	460d      	mov	r5, r1
   d666c:	4607      	mov	r7, r0
    IPAddress addr;
   d666e:	f7ff fec5 	bl	d63fc <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d6672:	4621      	mov	r1, r4
   d6674:	2220      	movs	r2, #32
   d6676:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6678:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d667a:	f002 ff64 	bl	d9546 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d667e:	2340      	movs	r3, #64	; 0x40
   d6680:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6682:	4621      	mov	r1, r4
   d6684:	466b      	mov	r3, sp
   d6686:	aa0c      	add	r2, sp, #48	; 0x30
   d6688:	4630      	mov	r0, r6
   d668a:	f7ff f89d 	bl	d57c8 <netdb_getaddrinfo>
    if (!r) {
   d668e:	4604      	mov	r4, r0
   d6690:	2800      	cmp	r0, #0
   d6692:	d144      	bne.n	d671e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6694:	4602      	mov	r2, r0
   d6696:	2101      	movs	r1, #1
   d6698:	6868      	ldr	r0, [r5, #4]
   d669a:	f7ff f9c1 	bl	d5a20 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d669e:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d66a0:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d66a2:	4622      	mov	r2, r4
   d66a4:	6868      	ldr	r0, [r5, #4]
   d66a6:	f7ff f9bb 	bl	d5a20 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d66aa:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d66ac:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d66ae:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d66b0:	2e00      	cmp	r6, #0
   d66b2:	d034      	beq.n	d671e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d66b4:	2900      	cmp	r1, #0
   d66b6:	d132      	bne.n	d671e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d66b8:	6873      	ldr	r3, [r6, #4]
   d66ba:	2b02      	cmp	r3, #2
   d66bc:	d002      	beq.n	d66c4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d66be:	2b0a      	cmp	r3, #10
   d66c0:	d009      	beq.n	d66d6 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d66c2:	e02a      	b.n	d671a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d66c4:	f1b8 0f00 	cmp.w	r8, #0
   d66c8:	d027      	beq.n	d671a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d66ca:	6971      	ldr	r1, [r6, #20]
   d66cc:	4638      	mov	r0, r7
   d66ce:	3104      	adds	r1, #4
   d66d0:	f7ff fec1 	bl	d6456 <_ZN9IPAddressaSEPKh>
   d66d4:	e020      	b.n	d6718 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d66d6:	f1b9 0f00 	cmp.w	r9, #0
   d66da:	d01e      	beq.n	d671a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d66dc:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d66de:	2211      	movs	r2, #17
   d66e0:	a801      	add	r0, sp, #4
   d66e2:	f002 ff30 	bl	d9546 <memset>
                    a.v = 6;
   d66e6:	2306      	movs	r3, #6
   d66e8:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d66ec:	ad01      	add	r5, sp, #4
   d66ee:	f104 0308 	add.w	r3, r4, #8
   d66f2:	3418      	adds	r4, #24
   d66f4:	6818      	ldr	r0, [r3, #0]
   d66f6:	6859      	ldr	r1, [r3, #4]
   d66f8:	462a      	mov	r2, r5
   d66fa:	c203      	stmia	r2!, {r0, r1}
   d66fc:	3308      	adds	r3, #8
   d66fe:	42a3      	cmp	r3, r4
   d6700:	4615      	mov	r5, r2
   d6702:	d1f7      	bne.n	d66f4 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d6704:	a901      	add	r1, sp, #4
   d6706:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6708:	ad07      	add	r5, sp, #28
   d670a:	f7ff fe85 	bl	d6418 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d670e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6710:	1d3c      	adds	r4, r7, #4
   d6712:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6714:	682b      	ldr	r3, [r5, #0]
   d6716:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d6718:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d671a:	69f6      	ldr	r6, [r6, #28]
   d671c:	e7c8      	b.n	d66b0 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d671e:	9800      	ldr	r0, [sp, #0]
   d6720:	f7ff f84a 	bl	d57b8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6724:	4638      	mov	r0, r7
   d6726:	b015      	add	sp, #84	; 0x54
   d6728:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d672c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d672c:	4b02      	ldr	r3, [pc, #8]	; (d6738 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d672e:	4a03      	ldr	r2, [pc, #12]	; (d673c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6730:	601a      	str	r2, [r3, #0]
   d6732:	2200      	movs	r2, #0
   d6734:	605a      	str	r2, [r3, #4]
   d6736:	4770      	bx	lr
   d6738:	2003e6b8 	.word	0x2003e6b8
   d673c:	000d9d28 	.word	0x000d9d28

000d6740 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6742:	4606      	mov	r6, r0
   d6744:	460d      	mov	r5, r1
   d6746:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d6748:	2400      	movs	r4, #0
  while (size--) {
   d674a:	42bd      	cmp	r5, r7
   d674c:	d00c      	beq.n	d6768 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d674e:	6833      	ldr	r3, [r6, #0]
   d6750:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6754:	689b      	ldr	r3, [r3, #8]
   d6756:	4630      	mov	r0, r6
   d6758:	4798      	blx	r3
     if (chunk>=0)
   d675a:	2800      	cmp	r0, #0
   d675c:	db01      	blt.n	d6762 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d675e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d6760:	e7f3      	b.n	d674a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d6762:	2c00      	cmp	r4, #0
   d6764:	bf08      	it	eq
   d6766:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d6768:	4620      	mov	r0, r4
   d676a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d676c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d676c:	b570      	push	{r4, r5, r6, lr}
   d676e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d6770:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d6772:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d6774:	b149      	cbz	r1, d678a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d6776:	f002 ff32 	bl	d95de <strlen>
   d677a:	682b      	ldr	r3, [r5, #0]
   d677c:	4602      	mov	r2, r0
   d677e:	4621      	mov	r1, r4
   d6780:	4628      	mov	r0, r5
   d6782:	68db      	ldr	r3, [r3, #12]
    }
   d6784:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6788:	4718      	bx	r3
    }
   d678a:	bd70      	pop	{r4, r5, r6, pc}

000d678c <_ZN5Print5printEPKc>:
   d678c:	b508      	push	{r3, lr}
   d678e:	f7ff ffed 	bl	d676c <_ZN5Print5writeEPKc>
   d6792:	bd08      	pop	{r3, pc}

000d6794 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6794:	6803      	ldr	r3, [r0, #0]
   d6796:	689b      	ldr	r3, [r3, #8]
   d6798:	4718      	bx	r3

000d679a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d679a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d679c:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d679e:	4605      	mov	r5, r0
  size_t n = print('\r');
   d67a0:	f7ff fff8 	bl	d6794 <_ZN5Print5printEc>
  n += print('\n');
   d67a4:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d67a6:	4604      	mov	r4, r0
  n += print('\n');
   d67a8:	4628      	mov	r0, r5
   d67aa:	f7ff fff3 	bl	d6794 <_ZN5Print5printEc>
  return n;
}
   d67ae:	4420      	add	r0, r4
   d67b0:	bd38      	pop	{r3, r4, r5, pc}

000d67b2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d67b2:	b538      	push	{r3, r4, r5, lr}
   d67b4:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d67b6:	f7ff ffd9 	bl	d676c <_ZN5Print5writeEPKc>
   d67ba:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d67bc:	4628      	mov	r0, r5
   d67be:	f7ff ffec 	bl	d679a <_ZN5Print7printlnEv>
  return n;
}
   d67c2:	4420      	add	r0, r4
   d67c4:	bd38      	pop	{r3, r4, r5, pc}

000d67c6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d67c6:	b530      	push	{r4, r5, lr}
   d67c8:	b08b      	sub	sp, #44	; 0x2c
   d67ca:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d67cc:	2100      	movs	r1, #0
   d67ce:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d67d2:	2a01      	cmp	r2, #1
   d67d4:	bf98      	it	ls
   d67d6:	220a      	movls	r2, #10
   d67d8:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d67dc:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d67e0:	fb05 3312 	mls	r3, r5, r2, r3
   d67e4:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d67e8:	2b09      	cmp	r3, #9
   d67ea:	bf94      	ite	ls
   d67ec:	3330      	addls	r3, #48	; 0x30
   d67ee:	3337      	addhi	r3, #55	; 0x37
   d67f0:	b2db      	uxtb	r3, r3
   d67f2:	4621      	mov	r1, r4
   d67f4:	f804 3901 	strb.w	r3, [r4], #-1
   d67f8:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d67fa:	2d00      	cmp	r5, #0
   d67fc:	d1ee      	bne.n	d67dc <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d67fe:	f7ff ffb5 	bl	d676c <_ZN5Print5writeEPKc>
}
   d6802:	b00b      	add	sp, #44	; 0x2c
   d6804:	bd30      	pop	{r4, r5, pc}

000d6806 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d6806:	b40c      	push	{r2, r3}
   d6808:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d680c:	b087      	sub	sp, #28
   d680e:	af00      	add	r7, sp, #0
   d6810:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d6814:	4605      	mov	r5, r0
   d6816:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d681a:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d681c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d681e:	4623      	mov	r3, r4
   d6820:	464a      	mov	r2, r9
   d6822:	2114      	movs	r1, #20
   d6824:	1d38      	adds	r0, r7, #4
   d6826:	f7ff f94b 	bl	d5ac0 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d682a:	2813      	cmp	r0, #19
   d682c:	d805      	bhi.n	d683a <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d682e:	1d39      	adds	r1, r7, #4
   d6830:	4628      	mov	r0, r5
   d6832:	f7ff ff9b 	bl	d676c <_ZN5Print5writeEPKc>
   d6836:	4604      	mov	r4, r0
   d6838:	e013      	b.n	d6862 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d683a:	f100 0308 	add.w	r3, r0, #8
   d683e:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d6842:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d6844:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d6848:	1c41      	adds	r1, r0, #1
   d684a:	4623      	mov	r3, r4
   d684c:	464a      	mov	r2, r9
   d684e:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d6850:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d6852:	f7ff f935 	bl	d5ac0 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6856:	4669      	mov	r1, sp
   d6858:	4628      	mov	r0, r5
   d685a:	f7ff ff87 	bl	d676c <_ZN5Print5writeEPKc>
   d685e:	4604      	mov	r4, r0
   d6860:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d6862:	b11e      	cbz	r6, d686c <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d6864:	4628      	mov	r0, r5
   d6866:	f7ff ff98 	bl	d679a <_ZN5Print7printlnEv>
   d686a:	4404      	add	r4, r0
    return n;
}
   d686c:	4620      	mov	r0, r4
   d686e:	371c      	adds	r7, #28
   d6870:	46bd      	mov	sp, r7
   d6872:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6876:	b002      	add	sp, #8
   d6878:	4770      	bx	lr

000d687a <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d687a:	b510      	push	{r4, lr}
   d687c:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d687e:	f7ff f9f0 	bl	d5c62 <_ZNSt14_Function_baseD1Ev>
   d6882:	4620      	mov	r0, r4
   d6884:	bd10      	pop	{r4, pc}
	...

000d6888 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6888:	4803      	ldr	r0, [pc, #12]	; (d6898 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d688a:	4a04      	ldr	r2, [pc, #16]	; (d689c <_GLOBAL__sub_I_RGB+0x14>)
   d688c:	4904      	ldr	r1, [pc, #16]	; (d68a0 <_GLOBAL__sub_I_RGB+0x18>)
   d688e:	2300      	movs	r3, #0
   d6890:	6083      	str	r3, [r0, #8]
   d6892:	f000 bc0f 	b.w	d70b4 <__aeabi_atexit>
   d6896:	bf00      	nop
   d6898:	2003e6c0 	.word	0x2003e6c0
   d689c:	2003e420 	.word	0x2003e420
   d68a0:	000d687b 	.word	0x000d687b

000d68a4 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d68a4:	4770      	bx	lr

000d68a6 <_ZN8SPIClassD0Ev>:
   d68a6:	b510      	push	{r4, lr}
   d68a8:	210c      	movs	r1, #12
   d68aa:	4604      	mov	r4, r0
   d68ac:	f000 fc07 	bl	d70be <_ZdlPvj>
   d68b0:	4620      	mov	r0, r4
   d68b2:	bd10      	pop	{r4, pc}

000d68b4 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d68b4:	2100      	movs	r1, #0
   d68b6:	f7fe bfbf 	b.w	d5838 <HAL_SPI_Acquire>

000d68ba <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d68ba:	2100      	movs	r1, #0
   d68bc:	f7fe bfc4 	b.w	d5848 <HAL_SPI_Release>

000d68c0 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d68c0:	b510      	push	{r4, lr}
   d68c2:	4b05      	ldr	r3, [pc, #20]	; (d68d8 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x18>)
   d68c4:	6003      	str	r3, [r0, #0]
   d68c6:	4604      	mov	r4, r0
{
    _spi = spi;
   d68c8:	7101      	strb	r1, [r0, #4]
    HAL_SPI_Init(_spi);
   d68ca:	4608      	mov	r0, r1
   d68cc:	f7fe ff94 	bl	d57f8 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d68d0:	2300      	movs	r3, #0
   d68d2:	60a3      	str	r3, [r4, #8]
}
   d68d4:	4620      	mov	r0, r4
   d68d6:	bd10      	pop	{r4, pc}
   d68d8:	000d9d5c 	.word	0x000d9d5c

000d68dc <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d68dc:	b510      	push	{r4, lr}
   d68de:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d68e0:	7900      	ldrb	r0, [r0, #4]
   d68e2:	f7ff ffe7 	bl	d68b4 <_ZN8SPIClass4lockEv.isra.0>
   d68e6:	b948      	cbnz	r0, d68fc <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d68e8:	7920      	ldrb	r0, [r4, #4]
   d68ea:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d68ee:	f7fe ff73 	bl	d57d8 <HAL_SPI_Begin>
        unlock();
   d68f2:	7920      	ldrb	r0, [r4, #4]
    }
}
   d68f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d68f8:	f7ff bfdf 	b.w	d68ba <_ZN8SPIClass6unlockEv.isra.1>
   d68fc:	bd10      	pop	{r4, pc}

000d68fe <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d68fe:	7900      	ldrb	r0, [r0, #4]
   d6900:	f7ff bfdb 	b.w	d68ba <_ZN8SPIClass6unlockEv.isra.1>

000d6904 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d6904:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d6906:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d6908:	6018      	str	r0, [r3, #0]
   d690a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d690c:	6818      	ldr	r0, [r3, #0]
   d690e:	4288      	cmp	r0, r1
   d6910:	b2e5      	uxtb	r5, r4
   d6912:	d906      	bls.n	d6922 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d6914:	3401      	adds	r4, #1
   d6916:	2c08      	cmp	r4, #8
   d6918:	d002      	beq.n	d6920 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d691a:	0840      	lsrs	r0, r0, #1
   d691c:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d691e:	e7f5      	b.n	d690c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d6920:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d6922:	4b02      	ldr	r3, [pc, #8]	; (d692c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d6924:	5d5b      	ldrb	r3, [r3, r5]
   d6926:	7013      	strb	r3, [r2, #0]
   d6928:	bd30      	pop	{r4, r5, pc}
   d692a:	bf00      	nop
   d692c:	000d9d64 	.word	0x000d9d64

000d6930 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d6930:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6934:	4607      	mov	r7, r0
   d6936:	b08f      	sub	sp, #60	; 0x3c
    // Lock peripheral
    CHECK(lock());
   d6938:	7900      	ldrb	r0, [r0, #4]
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d693a:	460e      	mov	r6, r1
    // Lock peripheral
    CHECK(lock());
   d693c:	f7ff ffba 	bl	d68b4 <_ZN8SPIClass4lockEv.isra.0>
   d6940:	2800      	cmp	r0, #0
   d6942:	db62      	blt.n	d6a0a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
   d6944:	793c      	ldrb	r4, [r7, #4]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d6946:	2214      	movs	r2, #20
   d6948:	2100      	movs	r1, #0
   d694a:	a809      	add	r0, sp, #36	; 0x24
   d694c:	f002 fdfb 	bl	d9546 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d6950:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d6952:	4620      	mov	r0, r4
   d6954:	2200      	movs	r2, #0
   d6956:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d6958:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
   d695c:	f7fe ff5c 	bl	d5818 <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
   d6960:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d6964:	b154      	cbz	r4, d697c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4c>
   d6966:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d696a:	b935      	cbnz	r5, d697a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4a>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d696c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d6970:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d6974:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d6978:	e003      	b.n	d6982 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x52>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d697a:	2400      	movs	r4, #0
   d697c:	46a1      	mov	r9, r4
   d697e:	46a0      	mov	r8, r4
   d6980:	2501      	movs	r5, #1
   d6982:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d6984:	b105      	cbz	r5, d6988 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x58>
   d6986:	b9bb      	cbnz	r3, d69b8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
      return true;

    if (default_ == other.default_ &&
   d6988:	429d      	cmp	r5, r3
   d698a:	d10b      	bne.n	d69a4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
   d698c:	68b2      	ldr	r2, [r6, #8]
   d698e:	4542      	cmp	r2, r8
   d6990:	d108      	bne.n	d69a4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d6992:	f88d 9020 	strb.w	r9, [sp, #32]
   d6996:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d699a:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d699e:	89b2      	ldrh	r2, [r6, #12]
   d69a0:	4291      	cmp	r1, r2
   d69a2:	d009      	beq.n	d69b8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
   d69a4:	b153      	cbz	r3, d69bc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d69a6:	2400      	movs	r4, #0
   d69a8:	7938      	ldrb	r0, [r7, #4]
   d69aa:	9401      	str	r4, [sp, #4]
   d69ac:	9400      	str	r4, [sp, #0]
   d69ae:	4623      	mov	r3, r4
   d69b0:	4622      	mov	r2, r4
   d69b2:	2101      	movs	r1, #1

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d69b4:	f7fe ff38 	bl	d5828 <HAL_SPI_Set_Settings>
            }
        }
    }

    return 0;
   d69b8:	2000      	movs	r0, #0
   d69ba:	e026      	b.n	d6a0a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
   d69bc:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
   d69c0:	68b1      	ldr	r1, [r6, #8]
   d69c2:	980a      	ldr	r0, [sp, #40]	; 0x28
   d69c4:	ab04      	add	r3, sp, #16
   d69c6:	f10d 020f 	add.w	r2, sp, #15
   d69ca:	f7ff ff9b 	bl	d6904 <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d69ce:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d69d0:	b105      	cbz	r5, d69d4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>
   d69d2:	b9b1      	cbnz	r1, d6a02 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d69d4:	42a9      	cmp	r1, r5
   d69d6:	d008      	beq.n	d69ea <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xba>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d69d8:	2400      	movs	r4, #0
   d69da:	7938      	ldrb	r0, [r7, #4]
   d69dc:	9401      	str	r4, [sp, #4]
   d69de:	7b74      	ldrb	r4, [r6, #13]
   d69e0:	7b33      	ldrb	r3, [r6, #12]
   d69e2:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d69e6:	9400      	str	r4, [sp, #0]
   d69e8:	e7e4      	b.n	d69b4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
   d69ea:	68b3      	ldr	r3, [r6, #8]
   d69ec:	4543      	cmp	r3, r8
   d69ee:	d3f3      	bcc.n	d69d8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d69f0:	f88d 9020 	strb.w	r9, [sp, #32]
   d69f4:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d69f8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d69fc:	89b3      	ldrh	r3, [r6, #12]
   d69fe:	429a      	cmp	r2, r3
   d6a00:	d1ea      	bne.n	d69d8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d6a02:	9b04      	ldr	r3, [sp, #16]
   d6a04:	4543      	cmp	r3, r8
   d6a06:	d1e7      	bne.n	d69d8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
   d6a08:	e7d6      	b.n	d69b8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
            }
        }
    }

    return 0;
}
   d6a0a:	b00f      	add	sp, #60	; 0x3c
   d6a0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6a10 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d6a10:	b538      	push	{r3, r4, r5, lr}
   d6a12:	4604      	mov	r4, r0
    uint16_t result = 0;
    if (!lock())
   d6a14:	7900      	ldrb	r0, [r0, #4]

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d6a16:	460d      	mov	r5, r1
    uint16_t result = 0;
    if (!lock())
   d6a18:	f7ff ff4c 	bl	d68b4 <_ZN8SPIClass4lockEv.isra.0>
   d6a1c:	b940      	cbnz	r0, d6a30 <_ZN8SPIClass8transferEh+0x20>
    {
        result = HAL_SPI_Send_Receive_Data(_spi, _data);
   d6a1e:	4629      	mov	r1, r5
   d6a20:	7920      	ldrb	r0, [r4, #4]
   d6a22:	f7fe fee1 	bl	d57e8 <HAL_SPI_Send_Receive_Data>
   d6a26:	4605      	mov	r5, r0
        unlock();
   d6a28:	7920      	ldrb	r0, [r4, #4]
   d6a2a:	f7ff ff46 	bl	d68ba <_ZN8SPIClass6unlockEv.isra.1>
   d6a2e:	e000      	b.n	d6a32 <_ZN8SPIClass8transferEh+0x22>
    return clock;
}

byte SPIClass::transfer(byte _data)
{
    uint16_t result = 0;
   d6a30:	2500      	movs	r5, #0
    {
        result = HAL_SPI_Send_Receive_Data(_spi, _data);
        unlock();
    }
    return static_cast<byte>(result);
}
   d6a32:	b2e8      	uxtb	r0, r5
   d6a34:	bd38      	pop	{r3, r4, r5, pc}

000d6a36 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d6a36:	7900      	ldrb	r0, [r0, #4]
   d6a38:	f7fe bee6 	b.w	d5808 <HAL_SPI_Is_Enabled>

000d6a3c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d6a3c:	b510      	push	{r4, lr}
   d6a3e:	4604      	mov	r4, r0
{
	free(buffer);
   d6a40:	6800      	ldr	r0, [r0, #0]
   d6a42:	f7ff f82d 	bl	d5aa0 <free>
}
   d6a46:	4620      	mov	r0, r4
   d6a48:	bd10      	pop	{r4, pc}

000d6a4a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d6a4a:	b510      	push	{r4, lr}
   d6a4c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d6a4e:	6800      	ldr	r0, [r0, #0]
   d6a50:	b108      	cbz	r0, d6a56 <_ZN6String10invalidateEv+0xc>
   d6a52:	f7ff f825 	bl	d5aa0 <free>
	buffer = NULL;
   d6a56:	2300      	movs	r3, #0
   d6a58:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d6a5a:	60a3      	str	r3, [r4, #8]
   d6a5c:	6063      	str	r3, [r4, #4]
   d6a5e:	bd10      	pop	{r4, pc}

000d6a60 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d6a60:	b538      	push	{r3, r4, r5, lr}
   d6a62:	4604      	mov	r4, r0
   d6a64:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d6a66:	6800      	ldr	r0, [r0, #0]
   d6a68:	3101      	adds	r1, #1
   d6a6a:	f7ff f821 	bl	d5ab0 <realloc>
	if (newbuffer) {
   d6a6e:	b110      	cbz	r0, d6a76 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d6a70:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d6a74:	2001      	movs	r0, #1
	}
	return 0;
}
   d6a76:	bd38      	pop	{r3, r4, r5, pc}

000d6a78 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d6a78:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d6a7a:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d6a7c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d6a7e:	b113      	cbz	r3, d6a86 <_ZN6String7reserveEj+0xe>
   d6a80:	6843      	ldr	r3, [r0, #4]
   d6a82:	428b      	cmp	r3, r1
   d6a84:	d207      	bcs.n	d6a96 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d6a86:	4620      	mov	r0, r4
   d6a88:	f7ff ffea 	bl	d6a60 <_ZN6String12changeBufferEj>
   d6a8c:	b120      	cbz	r0, d6a98 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d6a8e:	68a3      	ldr	r3, [r4, #8]
   d6a90:	b90b      	cbnz	r3, d6a96 <_ZN6String7reserveEj+0x1e>
   d6a92:	6822      	ldr	r2, [r4, #0]
   d6a94:	7013      	strb	r3, [r2, #0]
   d6a96:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d6a98:	bd10      	pop	{r4, pc}

000d6a9a <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6a9a:	b570      	push	{r4, r5, r6, lr}
   d6a9c:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d6a9e:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6aa0:	4604      	mov	r4, r0
   d6aa2:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d6aa4:	f7ff ffe8 	bl	d6a78 <_ZN6String7reserveEj>
   d6aa8:	b918      	cbnz	r0, d6ab2 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d6aaa:	4620      	mov	r0, r4
   d6aac:	f7ff ffcd 	bl	d6a4a <_ZN6String10invalidateEv>
		return *this;
   d6ab0:	e009      	b.n	d6ac6 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d6ab2:	462a      	mov	r2, r5
   d6ab4:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d6ab6:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d6ab8:	6820      	ldr	r0, [r4, #0]
   d6aba:	f002 fd39 	bl	d9530 <memcpy>
	buffer[len] = 0;
   d6abe:	6822      	ldr	r2, [r4, #0]
   d6ac0:	68a3      	ldr	r3, [r4, #8]
   d6ac2:	2100      	movs	r1, #0
   d6ac4:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d6ac6:	4620      	mov	r0, r4
   d6ac8:	bd70      	pop	{r4, r5, r6, pc}

000d6aca <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d6aca:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6acc:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d6ace:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6ad0:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d6ad2:	6043      	str	r3, [r0, #4]
	len = 0;
   d6ad4:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6ad6:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d6ad8:	460d      	mov	r5, r1
   d6ada:	b139      	cbz	r1, d6aec <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d6adc:	4608      	mov	r0, r1
   d6ade:	f002 fd7e 	bl	d95de <strlen>
   d6ae2:	4629      	mov	r1, r5
   d6ae4:	4602      	mov	r2, r0
   d6ae6:	4620      	mov	r0, r4
   d6ae8:	f7ff ffd7 	bl	d6a9a <_ZN6String4copyEPKcj>
}
   d6aec:	4620      	mov	r0, r4
   d6aee:	bd38      	pop	{r3, r4, r5, pc}

000d6af0 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d6af0:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d6af2:	b510      	push	{r4, lr}
   d6af4:	460b      	mov	r3, r1
   d6af6:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d6af8:	d007      	beq.n	d6b0a <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d6afa:	6809      	ldr	r1, [r1, #0]
   d6afc:	b119      	cbz	r1, d6b06 <_ZN6StringaSERKS_+0x16>
   d6afe:	689a      	ldr	r2, [r3, #8]
   d6b00:	f7ff ffcb 	bl	d6a9a <_ZN6String4copyEPKcj>
   d6b04:	e001      	b.n	d6b0a <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d6b06:	f7ff ffa0 	bl	d6a4a <_ZN6String10invalidateEv>

	return *this;
}
   d6b0a:	4620      	mov	r0, r4
   d6b0c:	bd10      	pop	{r4, pc}

000d6b0e <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d6b0e:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6b10:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d6b12:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6b14:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d6b16:	6043      	str	r3, [r0, #4]
	len = 0;
   d6b18:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6b1a:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d6b1c:	f7ff ffe8 	bl	d6af0 <_ZN6StringaSERKS_>
}
   d6b20:	4620      	mov	r0, r4
   d6b22:	bd10      	pop	{r4, pc}

000d6b24 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d6b24:	b538      	push	{r3, r4, r5, lr}
   d6b26:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d6b28:	460c      	mov	r4, r1
   d6b2a:	b141      	cbz	r1, d6b3e <_ZN6StringaSEPKc+0x1a>
   d6b2c:	4608      	mov	r0, r1
   d6b2e:	f002 fd56 	bl	d95de <strlen>
   d6b32:	4621      	mov	r1, r4
   d6b34:	4602      	mov	r2, r0
   d6b36:	4628      	mov	r0, r5
   d6b38:	f7ff ffaf 	bl	d6a9a <_ZN6String4copyEPKcj>
   d6b3c:	e001      	b.n	d6b42 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d6b3e:	f7ff ff84 	bl	d6a4a <_ZN6String10invalidateEv>

	return *this;
}
   d6b42:	4628      	mov	r0, r5
   d6b44:	bd38      	pop	{r3, r4, r5, pc}

000d6b46 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d6b46:	b510      	push	{r4, lr}
   d6b48:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d6b4a:	6800      	ldr	r0, [r0, #0]
   d6b4c:	b118      	cbz	r0, d6b56 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d6b4e:	f7fe ffa7 	bl	d5aa0 <free>
            wakeupSource_ = nullptr;
   d6b52:	2300      	movs	r3, #0
   d6b54:	6023      	str	r3, [r4, #0]
   d6b56:	bd10      	pop	{r4, pc}

000d6b58 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d6b58:	b510      	push	{r4, lr}
   d6b5a:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d6b5c:	f7ff fff3 	bl	d6b46 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d6b60:	4620      	mov	r0, r4
   d6b62:	bd10      	pop	{r4, pc}

000d6b64 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d6b64:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d6b66:	4c09      	ldr	r4, [pc, #36]	; (d6b8c <_GLOBAL__sub_I_System+0x28>)
   d6b68:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d6b6a:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d6b6e:	6020      	str	r0, [r4, #0]
   d6b70:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d6b72:	71a0      	strb	r0, [r4, #6]
   d6b74:	8120      	strh	r0, [r4, #8]
   d6b76:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d6b78:	f7fe fee6 	bl	d5948 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d6b7c:	4620      	mov	r0, r4
   d6b7e:	4a04      	ldr	r2, [pc, #16]	; (d6b90 <_GLOBAL__sub_I_System+0x2c>)
   d6b80:	4904      	ldr	r1, [pc, #16]	; (d6b94 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d6b82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d6b86:	f000 ba95 	b.w	d70b4 <__aeabi_atexit>
   d6b8a:	bf00      	nop
   d6b8c:	2003e6d0 	.word	0x2003e6d0
   d6b90:	2003e420 	.word	0x2003e420
   d6b94:	000d6b59 	.word	0x000d6b59

000d6b98 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6b98:	4b02      	ldr	r3, [pc, #8]	; (d6ba4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d6b9a:	681a      	ldr	r2, [r3, #0]
   d6b9c:	4b02      	ldr	r3, [pc, #8]	; (d6ba8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d6b9e:	601a      	str	r2, [r3, #0]
   d6ba0:	4770      	bx	lr
   d6ba2:	bf00      	nop
   d6ba4:	2003e3b4 	.word	0x2003e3b4
   d6ba8:	2003e6dc 	.word	0x2003e6dc

000d6bac <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d6bac:	4770      	bx	lr

000d6bae <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6bae:	7441      	strb	r1, [r0, #17]
   d6bb0:	4770      	bx	lr

000d6bb2 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d6bb2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d6bb4:	7c00      	ldrb	r0, [r0, #16]
   d6bb6:	f7fe fe87 	bl	d58c8 <HAL_USART_Available_Data_For_Write>
}
   d6bba:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6bbe:	bd08      	pop	{r3, pc}

000d6bc0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6bc0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d6bc2:	7c00      	ldrb	r0, [r0, #16]
   d6bc4:	f7fe fe58 	bl	d5878 <HAL_USART_Available_Data>
}
   d6bc8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6bcc:	bd08      	pop	{r3, pc}

000d6bce <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d6bce:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d6bd0:	7c00      	ldrb	r0, [r0, #16]
   d6bd2:	f7fe fe61 	bl	d5898 <HAL_USART_Peek_Data>
}
   d6bd6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6bda:	bf28      	it	cs
   d6bdc:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6be0:	bd08      	pop	{r3, pc}

000d6be2 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d6be2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d6be4:	7c00      	ldrb	r0, [r0, #16]
   d6be6:	f7fe fe4f 	bl	d5888 <HAL_USART_Read_Data>
}
   d6bea:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6bee:	bf28      	it	cs
   d6bf0:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6bf4:	bd08      	pop	{r3, pc}

000d6bf6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d6bf6:	7c00      	ldrb	r0, [r0, #16]
   d6bf8:	f7fe be56 	b.w	d58a8 <HAL_USART_Flush_Data>

000d6bfc <_ZN11USARTSerialD0Ev>:
   d6bfc:	b510      	push	{r4, lr}
   d6bfe:	2114      	movs	r1, #20
   d6c00:	4604      	mov	r4, r0
   d6c02:	f000 fa5c 	bl	d70be <_ZdlPvj>
   d6c06:	4620      	mov	r0, r4
   d6c08:	bd10      	pop	{r4, pc}

000d6c0a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6c0a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6c0c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d6c0e:	4604      	mov	r4, r0
   d6c10:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6c12:	b925      	cbnz	r5, d6c1e <_ZN11USARTSerial5writeEh+0x14>
   d6c14:	7c00      	ldrb	r0, [r0, #16]
   d6c16:	f7fe fe57 	bl	d58c8 <HAL_USART_Available_Data_For_Write>
   d6c1a:	2800      	cmp	r0, #0
   d6c1c:	dd05      	ble.n	d6c2a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6c1e:	4631      	mov	r1, r6
   d6c20:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d6c22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6c26:	f7fe be1f 	b.w	d5868 <HAL_USART_Write_Data>
  }
  return 0;
}
   d6c2a:	4628      	mov	r0, r5
   d6c2c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6c30 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d6c30:	b510      	push	{r4, lr}
   d6c32:	4604      	mov	r4, r0
   d6c34:	4608      	mov	r0, r1
   d6c36:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6c38:	2200      	movs	r2, #0
   d6c3a:	6062      	str	r2, [r4, #4]
   d6c3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6c40:	60a2      	str	r2, [r4, #8]
   d6c42:	4a05      	ldr	r2, [pc, #20]	; (d6c58 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d6c44:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d6c46:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d6c48:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d6c4a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d6c4c:	461a      	mov	r2, r3
   d6c4e:	f7fe fe03 	bl	d5858 <HAL_USART_Init>
}
   d6c52:	4620      	mov	r0, r4
   d6c54:	bd10      	pop	{r4, pc}
   d6c56:	bf00      	nop
   d6c58:	000d9da0 	.word	0x000d9da0

000d6c5c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d6c5c:	7c00      	ldrb	r0, [r0, #16]
   d6c5e:	f7fe be2b 	b.w	d58b8 <HAL_USART_Is_Enabled>
	...

000d6c64 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   d6c66:	4c19      	ldr	r4, [pc, #100]	; (d6ccc <_Z22__fetch_global_Serial1v+0x68>)
   d6c68:	6825      	ldr	r5, [r4, #0]
   d6c6a:	b94d      	cbnz	r5, d6c80 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
   d6c6c:	2084      	movs	r0, #132	; 0x84
   d6c6e:	f7fd fa14 	bl	d409a <_Znwj>
   d6c72:	4606      	mov	r6, r0
   d6c74:	b118      	cbz	r0, d6c7e <_Z22__fetch_global_Serial1v+0x1a>
   d6c76:	2284      	movs	r2, #132	; 0x84
   d6c78:	4629      	mov	r1, r5
   d6c7a:	f002 fc64 	bl	d9546 <memset>
   d6c7e:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
   d6c80:	4d13      	ldr	r5, [pc, #76]	; (d6cd0 <_Z22__fetch_global_Serial1v+0x6c>)
   d6c82:	682e      	ldr	r6, [r5, #0]
   d6c84:	b94e      	cbnz	r6, d6c9a <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
   d6c86:	2084      	movs	r0, #132	; 0x84
   d6c88:	f7fd fa07 	bl	d409a <_Znwj>
   d6c8c:	4607      	mov	r7, r0
   d6c8e:	b118      	cbz	r0, d6c98 <_Z22__fetch_global_Serial1v+0x34>
   d6c90:	2284      	movs	r2, #132	; 0x84
   d6c92:	4631      	mov	r1, r6
   d6c94:	f002 fc57 	bl	d9546 <memset>
   d6c98:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d6c9a:	4f0e      	ldr	r7, [pc, #56]	; (d6cd4 <_Z22__fetch_global_Serial1v+0x70>)
   d6c9c:	6839      	ldr	r1, [r7, #0]
   d6c9e:	f011 0601 	ands.w	r6, r1, #1
   d6ca2:	d111      	bne.n	d6cc8 <_Z22__fetch_global_Serial1v+0x64>
   d6ca4:	4638      	mov	r0, r7
   d6ca6:	f7fd f9fe 	bl	d40a6 <__cxa_guard_acquire>
   d6caa:	b168      	cbz	r0, d6cc8 <_Z22__fetch_global_Serial1v+0x64>
   d6cac:	6822      	ldr	r2, [r4, #0]
   d6cae:	682b      	ldr	r3, [r5, #0]
   d6cb0:	4809      	ldr	r0, [pc, #36]	; (d6cd8 <_Z22__fetch_global_Serial1v+0x74>)
   d6cb2:	4631      	mov	r1, r6
   d6cb4:	f7ff ffbc 	bl	d6c30 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d6cb8:	4638      	mov	r0, r7
   d6cba:	f7fd f9f9 	bl	d40b0 <__cxa_guard_release>
   d6cbe:	4a07      	ldr	r2, [pc, #28]	; (d6cdc <_Z22__fetch_global_Serial1v+0x78>)
   d6cc0:	4907      	ldr	r1, [pc, #28]	; (d6ce0 <_Z22__fetch_global_Serial1v+0x7c>)
   d6cc2:	4805      	ldr	r0, [pc, #20]	; (d6cd8 <_Z22__fetch_global_Serial1v+0x74>)
   d6cc4:	f000 f9f6 	bl	d70b4 <__aeabi_atexit>
#endif
	return serial1;
}
   d6cc8:	4803      	ldr	r0, [pc, #12]	; (d6cd8 <_Z22__fetch_global_Serial1v+0x74>)
   d6cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d6ccc:	2003e6fc 	.word	0x2003e6fc
   d6cd0:	2003e6f4 	.word	0x2003e6f4
   d6cd4:	2003e6f8 	.word	0x2003e6f8
   d6cd8:	2003e6e0 	.word	0x2003e6e0
   d6cdc:	2003e420 	.word	0x2003e420
   d6ce0:	000d6bad 	.word	0x000d6bad

000d6ce4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6ce4:	7441      	strb	r1, [r0, #17]
   d6ce6:	4770      	bx	lr

000d6ce8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6ce8:	4770      	bx	lr

000d6cea <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d6cea:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6cec:	2100      	movs	r1, #0
   d6cee:	7c00      	ldrb	r0, [r0, #16]
   d6cf0:	f7fe fe12 	bl	d5918 <HAL_USB_USART_Receive_Data>
}
   d6cf4:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6cf8:	bf28      	it	cs
   d6cfa:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6cfe:	bd08      	pop	{r3, pc}

000d6d00 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d6d00:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d6d02:	2101      	movs	r1, #1
   d6d04:	7c00      	ldrb	r0, [r0, #16]
   d6d06:	f7fe fe07 	bl	d5918 <HAL_USB_USART_Receive_Data>
}
   d6d0a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6d0e:	bf28      	it	cs
   d6d10:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d6d14:	bd08      	pop	{r3, pc}

000d6d16 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d6d16:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6d18:	7c00      	ldrb	r0, [r0, #16]
   d6d1a:	f7fe fdf5 	bl	d5908 <HAL_USB_USART_Available_Data_For_Write>
}
   d6d1e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6d22:	bd08      	pop	{r3, pc}

000d6d24 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d6d24:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6d26:	7c00      	ldrb	r0, [r0, #16]
   d6d28:	f7fe fde6 	bl	d58f8 <HAL_USB_USART_Available_Data>
}
   d6d2c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6d30:	bd08      	pop	{r3, pc}

000d6d32 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d6d32:	7c00      	ldrb	r0, [r0, #16]
   d6d34:	f7fe be00 	b.w	d5938 <HAL_USB_USART_Flush_Data>

000d6d38 <_ZN9USBSerialD0Ev>:
   d6d38:	b510      	push	{r4, lr}
   d6d3a:	2114      	movs	r1, #20
   d6d3c:	4604      	mov	r4, r0
   d6d3e:	f000 f9be 	bl	d70be <_ZdlPvj>
   d6d42:	4620      	mov	r0, r4
   d6d44:	bd10      	pop	{r4, pc}

000d6d46 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6d46:	b538      	push	{r3, r4, r5, lr}
   d6d48:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6d4a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6d4c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6d4e:	f7fe fddb 	bl	d5908 <HAL_USB_USART_Available_Data_For_Write>
   d6d52:	2800      	cmp	r0, #0
   d6d54:	dc01      	bgt.n	d6d5a <_ZN9USBSerial5writeEh+0x14>
   d6d56:	7c60      	ldrb	r0, [r4, #17]
   d6d58:	b128      	cbz	r0, d6d66 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6d5a:	4629      	mov	r1, r5
   d6d5c:	7c20      	ldrb	r0, [r4, #16]
   d6d5e:	f7fe fde3 	bl	d5928 <HAL_USB_USART_Send_Data>
   d6d62:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d6d66:	bd38      	pop	{r3, r4, r5, pc}

000d6d68 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6d68:	b510      	push	{r4, lr}
   d6d6a:	4604      	mov	r4, r0
   d6d6c:	2300      	movs	r3, #0
   d6d6e:	6063      	str	r3, [r4, #4]
   d6d70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6d74:	60a3      	str	r3, [r4, #8]
   d6d76:	4b05      	ldr	r3, [pc, #20]	; (d6d8c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6d78:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d6d7a:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6d7c:	4608      	mov	r0, r1
{
  _serial = serial;
   d6d7e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d6d80:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d6d82:	4611      	mov	r1, r2
   d6d84:	f7fe fda8 	bl	d58d8 <HAL_USB_USART_Init>
}
   d6d88:	4620      	mov	r0, r4
   d6d8a:	bd10      	pop	{r4, pc}
   d6d8c:	000d9dd0 	.word	0x000d9dd0

000d6d90 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d6d90:	2200      	movs	r2, #0
   d6d92:	7c00      	ldrb	r0, [r0, #16]
   d6d94:	f7fe bda8 	b.w	d58e8 <HAL_USB_USART_Begin>

000d6d98 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6d98:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6d9a:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6d9c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6d9e:	2100      	movs	r1, #0
   d6da0:	f002 fbd1 	bl	d9546 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6da4:	4620      	mov	r0, r4
   d6da6:	bd10      	pop	{r4, pc}

000d6da8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6da8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6daa:	4d0e      	ldr	r5, [pc, #56]	; (d6de4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d6dac:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6dae:	a801      	add	r0, sp, #4
   d6db0:	f7ff fff2 	bl	d6d98 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6db4:	6829      	ldr	r1, [r5, #0]
   d6db6:	f011 0401 	ands.w	r4, r1, #1
   d6dba:	d110      	bne.n	d6dde <_Z16_fetch_usbserialv+0x36>
   d6dbc:	4628      	mov	r0, r5
   d6dbe:	f7fd f972 	bl	d40a6 <__cxa_guard_acquire>
   d6dc2:	b160      	cbz	r0, d6dde <_Z16_fetch_usbserialv+0x36>
   d6dc4:	aa01      	add	r2, sp, #4
   d6dc6:	4621      	mov	r1, r4
   d6dc8:	4807      	ldr	r0, [pc, #28]	; (d6de8 <_Z16_fetch_usbserialv+0x40>)
   d6dca:	f7ff ffcd 	bl	d6d68 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6dce:	4628      	mov	r0, r5
   d6dd0:	f7fd f96e 	bl	d40b0 <__cxa_guard_release>
   d6dd4:	4a05      	ldr	r2, [pc, #20]	; (d6dec <_Z16_fetch_usbserialv+0x44>)
   d6dd6:	4906      	ldr	r1, [pc, #24]	; (d6df0 <_Z16_fetch_usbserialv+0x48>)
   d6dd8:	4803      	ldr	r0, [pc, #12]	; (d6de8 <_Z16_fetch_usbserialv+0x40>)
   d6dda:	f000 f96b 	bl	d70b4 <__aeabi_atexit>
	return _usbserial;
}
   d6dde:	4802      	ldr	r0, [pc, #8]	; (d6de8 <_Z16_fetch_usbserialv+0x40>)
   d6de0:	b007      	add	sp, #28
   d6de2:	bd30      	pop	{r4, r5, pc}
   d6de4:	2003e700 	.word	0x2003e700
   d6de8:	2003e704 	.word	0x2003e704
   d6dec:	2003e420 	.word	0x2003e420
   d6df0:	000d6ce9 	.word	0x000d6ce9

000d6df4 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d6df4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6df6:	4b0c      	ldr	r3, [pc, #48]	; (d6e28 <serialEventRun+0x34>)
   d6df8:	b133      	cbz	r3, d6e08 <serialEventRun+0x14>
   d6dfa:	f7ff ffd5 	bl	d6da8 <_Z16_fetch_usbserialv>
   d6dfe:	6803      	ldr	r3, [r0, #0]
   d6e00:	691b      	ldr	r3, [r3, #16]
   d6e02:	4798      	blx	r3
   d6e04:	2800      	cmp	r0, #0
   d6e06:	dc09      	bgt.n	d6e1c <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d6e08:	4b08      	ldr	r3, [pc, #32]	; (d6e2c <serialEventRun+0x38>)
   d6e0a:	b163      	cbz	r3, d6e26 <serialEventRun+0x32>
   d6e0c:	f7ff ff2a 	bl	d6c64 <_Z22__fetch_global_Serial1v>
   d6e10:	6803      	ldr	r3, [r0, #0]
   d6e12:	691b      	ldr	r3, [r3, #16]
   d6e14:	4798      	blx	r3
   d6e16:	2800      	cmp	r0, #0
   d6e18:	dc03      	bgt.n	d6e22 <serialEventRun+0x2e>
   d6e1a:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d6e1c:	f3af 8000 	nop.w
   d6e20:	e7f2      	b.n	d6e08 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d6e22:	f3af 8000 	nop.w
   d6e26:	bd08      	pop	{r3, pc}
	...

000d6e30 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d6e30:	b508      	push	{r3, lr}
	serialEventRun();
   d6e32:	f7ff ffdf 	bl	d6df4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6e36:	f7fe fc17 	bl	d5668 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6e3a:	4b01      	ldr	r3, [pc, #4]	; (d6e40 <_post_loop+0x10>)
   d6e3c:	6018      	str	r0, [r3, #0]
   d6e3e:	bd08      	pop	{r3, pc}
   d6e40:	2003e720 	.word	0x2003e720

000d6e44 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d6e44:	4802      	ldr	r0, [pc, #8]	; (d6e50 <_Z33system_initialize_user_backup_ramv+0xc>)
   d6e46:	4a03      	ldr	r2, [pc, #12]	; (d6e54 <_Z33system_initialize_user_backup_ramv+0x10>)
   d6e48:	4903      	ldr	r1, [pc, #12]	; (d6e58 <_Z33system_initialize_user_backup_ramv+0x14>)
   d6e4a:	1a12      	subs	r2, r2, r0
   d6e4c:	f002 bb70 	b.w	d9530 <memcpy>
   d6e50:	2003f400 	.word	0x2003f400
   d6e54:	2003f404 	.word	0x2003f404
   d6e58:	000d9ec8 	.word	0x000d9ec8

000d6e5c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6e5c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6e5e:	2300      	movs	r3, #0
   d6e60:	9300      	str	r3, [sp, #0]
   d6e62:	461a      	mov	r2, r3
   d6e64:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6e68:	f7fe fda0 	bl	d59ac <system_ctrl_set_result>
}
   d6e6c:	b003      	add	sp, #12
   d6e6e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6e74 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d6e74:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6e76:	8843      	ldrh	r3, [r0, #2]
   d6e78:	2b0a      	cmp	r3, #10
   d6e7a:	d008      	beq.n	d6e8e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6e7c:	2b50      	cmp	r3, #80	; 0x50
   d6e7e:	d109      	bne.n	d6e94 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d6e80:	4b09      	ldr	r3, [pc, #36]	; (d6ea8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6e82:	681b      	ldr	r3, [r3, #0]
   d6e84:	b13b      	cbz	r3, d6e96 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d6e86:	b003      	add	sp, #12
   d6e88:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d6e8c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d6e8e:	f7ff ffe5 	bl	d6e5c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d6e92:	e006      	b.n	d6ea2 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6e94:	2300      	movs	r3, #0
   d6e96:	9300      	str	r3, [sp, #0]
   d6e98:	461a      	mov	r2, r3
   d6e9a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6e9e:	f7fe fd85 	bl	d59ac <system_ctrl_set_result>
        break;
    }
}
   d6ea2:	b003      	add	sp, #12
   d6ea4:	f85d fb04 	ldr.w	pc, [sp], #4
   d6ea8:	2003e718 	.word	0x2003e718

000d6eac <module_user_init_hook>:

void module_user_init_hook()
{
   d6eac:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6eae:	4c10      	ldr	r4, [pc, #64]	; (d6ef0 <module_user_init_hook+0x44>)
   d6eb0:	4d10      	ldr	r5, [pc, #64]	; (d6ef4 <module_user_init_hook+0x48>)
   d6eb2:	6823      	ldr	r3, [r4, #0]
   d6eb4:	42ab      	cmp	r3, r5
   d6eb6:	4b10      	ldr	r3, [pc, #64]	; (d6ef8 <module_user_init_hook+0x4c>)
   d6eb8:	bf0c      	ite	eq
   d6eba:	2201      	moveq	r2, #1
   d6ebc:	2200      	movne	r2, #0
   d6ebe:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d6ec0:	d002      	beq.n	d6ec8 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d6ec2:	f7ff ffbf 	bl	d6e44 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d6ec6:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6ec8:	f7fe fbc6 	bl	d5658 <HAL_RNG_GetRandomNumber>
   d6ecc:	4604      	mov	r4, r0
    srand(seed);
   d6ece:	f002 fb43 	bl	d9558 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6ed2:	4b0a      	ldr	r3, [pc, #40]	; (d6efc <module_user_init_hook+0x50>)
   d6ed4:	b113      	cbz	r3, d6edc <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d6ed6:	4620      	mov	r0, r4
   d6ed8:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6edc:	2100      	movs	r1, #0
   d6ede:	4807      	ldr	r0, [pc, #28]	; (d6efc <module_user_init_hook+0x50>)
   d6ee0:	f7fe fd7e 	bl	d59e0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6ee4:	2100      	movs	r1, #0
   d6ee6:	4806      	ldr	r0, [pc, #24]	; (d6f00 <module_user_init_hook+0x54>)
}
   d6ee8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6eec:	f7fe bd54 	b.w	d5998 <system_ctrl_set_app_request_handler>
   d6ef0:	2003f400 	.word	0x2003f400
   d6ef4:	9a271c1e 	.word	0x9a271c1e
   d6ef8:	2003e71c 	.word	0x2003e71c
   d6efc:	00000000 	.word	0x00000000
   d6f00:	000d6e75 	.word	0x000d6e75

000d6f04 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d6f04:	b510      	push	{r4, lr}
   d6f06:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d6f08:	f000 f8b4 	bl	d7074 <_ZN8particle7globals11instanceSpiEv>
   d6f0c:	f7ff fd93 	bl	d6a36 <_ZN8SPIClass9isEnabledEv>
   d6f10:	b128      	cbz	r0, d6f1e <pinAvailable+0x1a>
   d6f12:	f1a4 030b 	sub.w	r3, r4, #11
   d6f16:	2b02      	cmp	r3, #2
   d6f18:	d801      	bhi.n	d6f1e <pinAvailable+0x1a>
  {
    return 0; // 'pin' is used
   d6f1a:	2000      	movs	r0, #0
   d6f1c:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d6f1e:	f000 f883 	bl	d7028 <_Z19__fetch_global_Wirev>
   d6f22:	f7ff fa2c 	bl	d637e <_ZN7TwoWire9isEnabledEv>
   d6f26:	b108      	cbz	r0, d6f2c <pinAvailable+0x28>
   d6f28:	2c01      	cmp	r4, #1
   d6f2a:	d9f6      	bls.n	d6f1a <pinAvailable+0x16>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d6f2c:	f7ff fe9a 	bl	d6c64 <_Z22__fetch_global_Serial1v>
   d6f30:	f7ff fe94 	bl	d6c5c <_ZN11USARTSerial9isEnabledEv>
   d6f34:	b118      	cbz	r0, d6f3e <pinAvailable+0x3a>
   d6f36:	f1a4 0309 	sub.w	r3, r4, #9
   d6f3a:	2b01      	cmp	r3, #1
   d6f3c:	d9ed      	bls.n	d6f1a <pinAvailable+0x16>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d6f3e:	2c23      	cmp	r4, #35	; 0x23
   d6f40:	bf8c      	ite	hi
   d6f42:	2000      	movhi	r0, #0
   d6f44:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d6f46:	bd10      	pop	{r4, pc}

000d6f48 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6f48:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d6f4a:	b538      	push	{r3, r4, r5, lr}
   d6f4c:	4604      	mov	r4, r0
   d6f4e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6f50:	d80a      	bhi.n	d6f68 <pinMode+0x20>
   d6f52:	29ff      	cmp	r1, #255	; 0xff
   d6f54:	d008      	beq.n	d6f68 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6f56:	f7ff ffd5 	bl	d6f04 <pinAvailable>
   d6f5a:	b128      	cbz	r0, d6f68 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6f5c:	4629      	mov	r1, r5
   d6f5e:	4620      	mov	r0, r4
}
   d6f60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6f64:	f7fe bb98 	b.w	d5698 <HAL_Pin_Mode>
   d6f68:	bd38      	pop	{r3, r4, r5, pc}

000d6f6a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d6f6a:	b538      	push	{r3, r4, r5, lr}
   d6f6c:	4604      	mov	r4, r0
   d6f6e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6f70:	f7fe fb9a 	bl	d56a8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6f74:	28ff      	cmp	r0, #255	; 0xff
   d6f76:	d010      	beq.n	d6f9a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d6f78:	2806      	cmp	r0, #6
   d6f7a:	d804      	bhi.n	d6f86 <digitalWrite+0x1c>
   d6f7c:	234d      	movs	r3, #77	; 0x4d
   d6f7e:	fa23 f000 	lsr.w	r0, r3, r0
   d6f82:	07c3      	lsls	r3, r0, #31
   d6f84:	d409      	bmi.n	d6f9a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d6f86:	4620      	mov	r0, r4
   d6f88:	f7ff ffbc 	bl	d6f04 <pinAvailable>
   d6f8c:	b128      	cbz	r0, d6f9a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6f8e:	4629      	mov	r1, r5
   d6f90:	4620      	mov	r0, r4
}
   d6f92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6f96:	f7fe bb8f 	b.w	d56b8 <HAL_GPIO_Write>
   d6f9a:	bd38      	pop	{r3, r4, r5, pc}

000d6f9c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d6f9c:	b510      	push	{r4, lr}
   d6f9e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6fa0:	f7fe fb82 	bl	d56a8 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d6fa4:	3804      	subs	r0, #4
   d6fa6:	b2c0      	uxtb	r0, r0
   d6fa8:	2801      	cmp	r0, #1
   d6faa:	d908      	bls.n	d6fbe <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d6fac:	4620      	mov	r0, r4
   d6fae:	f7ff ffa9 	bl	d6f04 <pinAvailable>
   d6fb2:	b120      	cbz	r0, d6fbe <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d6fb4:	4620      	mov	r0, r4
}
   d6fb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d6fba:	f7fe bb85 	b.w	d56c8 <HAL_GPIO_Read>
}
   d6fbe:	2000      	movs	r0, #0
   d6fc0:	bd10      	pop	{r4, pc}

000d6fc2 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d6fc2:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d6fc4:	b510      	push	{r4, lr}
   d6fc6:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d6fc8:	bf9c      	itt	ls
   d6fca:	340e      	addls	r4, #14
   d6fcc:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6fce:	4620      	mov	r0, r4
   d6fd0:	f7ff ff98 	bl	d6f04 <pinAvailable>
   d6fd4:	b150      	cbz	r0, d6fec <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d6fd6:	2103      	movs	r1, #3
   d6fd8:	4620      	mov	r0, r4
   d6fda:	f7fe fb55 	bl	d5688 <HAL_Validate_Pin_Function>
   d6fde:	2803      	cmp	r0, #3
   d6fe0:	d104      	bne.n	d6fec <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d6fe2:	4620      	mov	r0, r4
}
   d6fe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d6fe8:	f7fe bb76 	b.w	d56d8 <HAL_ADC_Read>
}
   d6fec:	2000      	movs	r0, #0
   d6fee:	bd10      	pop	{r4, pc}

000d6ff0 <pulseIn>:
 */
uint32_t pulseIn(pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return HAL_Pulse_In(pin, value);
   d6ff0:	f7fe bb7a 	b.w	d56e8 <HAL_Pulse_In>

000d6ff4 <_Z17acquireWireBufferv>:
   d6ff4:	b570      	push	{r4, r5, r6, lr}
   d6ff6:	4604      	mov	r4, r0
   d6ff8:	2514      	movs	r5, #20
   d6ffa:	462a      	mov	r2, r5
   d6ffc:	4e09      	ldr	r6, [pc, #36]	; (d7024 <_Z17acquireWireBufferv+0x30>)
   d6ffe:	2100      	movs	r1, #0
   d7000:	f002 faa1 	bl	d9546 <memset>
   d7004:	8025      	strh	r5, [r4, #0]
   d7006:	2520      	movs	r5, #32
   d7008:	4631      	mov	r1, r6
   d700a:	60a5      	str	r5, [r4, #8]
   d700c:	6125      	str	r5, [r4, #16]
   d700e:	4628      	mov	r0, r5
   d7010:	f000 f86f 	bl	d70f2 <_ZnajRKSt9nothrow_t>
   d7014:	4631      	mov	r1, r6
   d7016:	6060      	str	r0, [r4, #4]
   d7018:	4628      	mov	r0, r5
   d701a:	f000 f86a 	bl	d70f2 <_ZnajRKSt9nothrow_t>
   d701e:	60e0      	str	r0, [r4, #12]
   d7020:	4620      	mov	r0, r4
   d7022:	bd70      	pop	{r4, r5, r6, pc}
   d7024:	000d9df8 	.word	0x000d9df8

000d7028 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d7028:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d702a:	4d0e      	ldr	r5, [pc, #56]	; (d7064 <_Z19__fetch_global_Wirev+0x3c>)
   d702c:	6829      	ldr	r1, [r5, #0]
   d702e:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d7032:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7034:	d113      	bne.n	d705e <_Z19__fetch_global_Wirev+0x36>
   d7036:	4628      	mov	r0, r5
   d7038:	f7fd f835 	bl	d40a6 <__cxa_guard_acquire>
   d703c:	b178      	cbz	r0, d705e <_Z19__fetch_global_Wirev+0x36>
   d703e:	a801      	add	r0, sp, #4
   d7040:	f7ff ffd8 	bl	d6ff4 <_Z17acquireWireBufferv>
   d7044:	aa01      	add	r2, sp, #4
   d7046:	4621      	mov	r1, r4
   d7048:	4807      	ldr	r0, [pc, #28]	; (d7068 <_Z19__fetch_global_Wirev+0x40>)
   d704a:	f7ff f941 	bl	d62d0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d704e:	4628      	mov	r0, r5
   d7050:	f7fd f82e 	bl	d40b0 <__cxa_guard_release>
   d7054:	4a05      	ldr	r2, [pc, #20]	; (d706c <_Z19__fetch_global_Wirev+0x44>)
   d7056:	4906      	ldr	r1, [pc, #24]	; (d7070 <_Z19__fetch_global_Wirev+0x48>)
   d7058:	4803      	ldr	r0, [pc, #12]	; (d7068 <_Z19__fetch_global_Wirev+0x40>)
   d705a:	f000 f82b 	bl	d70b4 <__aeabi_atexit>
	return wire;
}
   d705e:	4802      	ldr	r0, [pc, #8]	; (d7068 <_Z19__fetch_global_Wirev+0x40>)
   d7060:	b007      	add	sp, #28
   d7062:	bd30      	pop	{r4, r5, pc}
   d7064:	2003e724 	.word	0x2003e724
   d7068:	2003e728 	.word	0x2003e728
   d706c:	2003e420 	.word	0x2003e420
   d7070:	000d6279 	.word	0x000d6279

000d7074 <_ZN8particle7globals11instanceSpiEv>:
#ifndef SPARK_WIRING_NO_SPI

namespace particle {
namespace globals {

SPIClass& instanceSpi() {
   d7074:	b538      	push	{r3, r4, r5, lr}
    static SPIClass instance(HAL_SPI_INTERFACE1);
   d7076:	4d0b      	ldr	r5, [pc, #44]	; (d70a4 <_ZN8particle7globals11instanceSpiEv+0x30>)
   d7078:	6829      	ldr	r1, [r5, #0]
   d707a:	f011 0401 	ands.w	r4, r1, #1
   d707e:	d10f      	bne.n	d70a0 <_ZN8particle7globals11instanceSpiEv+0x2c>
   d7080:	4628      	mov	r0, r5
   d7082:	f7fd f810 	bl	d40a6 <__cxa_guard_acquire>
   d7086:	b158      	cbz	r0, d70a0 <_ZN8particle7globals11instanceSpiEv+0x2c>
   d7088:	4621      	mov	r1, r4
   d708a:	4807      	ldr	r0, [pc, #28]	; (d70a8 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d708c:	f7ff fc18 	bl	d68c0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d7090:	4628      	mov	r0, r5
   d7092:	f7fd f80d 	bl	d40b0 <__cxa_guard_release>
   d7096:	4a05      	ldr	r2, [pc, #20]	; (d70ac <_ZN8particle7globals11instanceSpiEv+0x38>)
   d7098:	4905      	ldr	r1, [pc, #20]	; (d70b0 <_ZN8particle7globals11instanceSpiEv+0x3c>)
   d709a:	4803      	ldr	r0, [pc, #12]	; (d70a8 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d709c:	f000 f80a 	bl	d70b4 <__aeabi_atexit>
    return instance;
}
   d70a0:	4801      	ldr	r0, [pc, #4]	; (d70a8 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d70a2:	bd38      	pop	{r3, r4, r5, pc}
   d70a4:	2003e748 	.word	0x2003e748
   d70a8:	2003e73c 	.word	0x2003e73c
   d70ac:	2003e420 	.word	0x2003e420
   d70b0:	000d68a5 	.word	0x000d68a5

000d70b4 <__aeabi_atexit>:
   d70b4:	460b      	mov	r3, r1
   d70b6:	4601      	mov	r1, r0
   d70b8:	4618      	mov	r0, r3
   d70ba:	f002 ba2b 	b.w	d9514 <__cxa_atexit>

000d70be <_ZdlPvj>:
   d70be:	f7fc bfee 	b.w	d409e <_ZdlPv>
	...

000d70c4 <_ZSt15get_new_handlerv>:
   d70c4:	4b02      	ldr	r3, [pc, #8]	; (d70d0 <_ZSt15get_new_handlerv+0xc>)
   d70c6:	6818      	ldr	r0, [r3, #0]
   d70c8:	f3bf 8f5f 	dmb	sy
   d70cc:	4770      	bx	lr
   d70ce:	bf00      	nop
   d70d0:	2003e74c 	.word	0x2003e74c

000d70d4 <_ZnwjRKSt9nothrow_t>:
   d70d4:	b510      	push	{r4, lr}
   d70d6:	2800      	cmp	r0, #0
   d70d8:	bf14      	ite	ne
   d70da:	4604      	movne	r4, r0
   d70dc:	2401      	moveq	r4, #1
   d70de:	4620      	mov	r0, r4
   d70e0:	f7fe fcd6 	bl	d5a90 <malloc>
   d70e4:	b920      	cbnz	r0, d70f0 <_ZnwjRKSt9nothrow_t+0x1c>
   d70e6:	f7ff ffed 	bl	d70c4 <_ZSt15get_new_handlerv>
   d70ea:	b108      	cbz	r0, d70f0 <_ZnwjRKSt9nothrow_t+0x1c>
   d70ec:	4780      	blx	r0
   d70ee:	e7f6      	b.n	d70de <_ZnwjRKSt9nothrow_t+0xa>
   d70f0:	bd10      	pop	{r4, pc}

000d70f2 <_ZnajRKSt9nothrow_t>:
   d70f2:	f7ff bfef 	b.w	d70d4 <_ZnwjRKSt9nothrow_t>

000d70f6 <_ZSt25__throw_bad_function_callv>:
   d70f6:	b508      	push	{r3, lr}
   d70f8:	f7fe fcea 	bl	d5ad0 <abort>

000d70fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d70fc:	4b24      	ldr	r3, [pc, #144]	; (d7190 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d70fe:	681a      	ldr	r2, [r3, #0]
   d7100:	07d0      	lsls	r0, r2, #31
   d7102:	bf5c      	itt	pl
   d7104:	2201      	movpl	r2, #1
   d7106:	601a      	strpl	r2, [r3, #0]
   d7108:	4b22      	ldr	r3, [pc, #136]	; (d7194 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d710a:	681a      	ldr	r2, [r3, #0]
   d710c:	07d1      	lsls	r1, r2, #31
   d710e:	bf5c      	itt	pl
   d7110:	2201      	movpl	r2, #1
   d7112:	601a      	strpl	r2, [r3, #0]
   d7114:	4b20      	ldr	r3, [pc, #128]	; (d7198 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d7116:	681a      	ldr	r2, [r3, #0]
   d7118:	07d2      	lsls	r2, r2, #31
   d711a:	bf5c      	itt	pl
   d711c:	2201      	movpl	r2, #1
   d711e:	601a      	strpl	r2, [r3, #0]
   d7120:	4b1e      	ldr	r3, [pc, #120]	; (d719c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d7122:	681a      	ldr	r2, [r3, #0]
   d7124:	07d0      	lsls	r0, r2, #31
   d7126:	bf5c      	itt	pl
   d7128:	2201      	movpl	r2, #1
   d712a:	601a      	strpl	r2, [r3, #0]
   d712c:	4b1c      	ldr	r3, [pc, #112]	; (d71a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d712e:	681a      	ldr	r2, [r3, #0]
   d7130:	07d1      	lsls	r1, r2, #31
   d7132:	bf5c      	itt	pl
   d7134:	2201      	movpl	r2, #1
   d7136:	601a      	strpl	r2, [r3, #0]
   d7138:	4b1a      	ldr	r3, [pc, #104]	; (d71a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d713a:	681a      	ldr	r2, [r3, #0]
   d713c:	07d2      	lsls	r2, r2, #31
   d713e:	bf5c      	itt	pl
   d7140:	2201      	movpl	r2, #1
   d7142:	601a      	strpl	r2, [r3, #0]
   d7144:	4b18      	ldr	r3, [pc, #96]	; (d71a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d7146:	681a      	ldr	r2, [r3, #0]
   d7148:	07d0      	lsls	r0, r2, #31
   d714a:	bf5c      	itt	pl
   d714c:	2201      	movpl	r2, #1
   d714e:	601a      	strpl	r2, [r3, #0]
   d7150:	4b16      	ldr	r3, [pc, #88]	; (d71ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d7152:	681a      	ldr	r2, [r3, #0]
   d7154:	07d1      	lsls	r1, r2, #31
   d7156:	bf5c      	itt	pl
   d7158:	2201      	movpl	r2, #1
   d715a:	601a      	strpl	r2, [r3, #0]
   d715c:	4b14      	ldr	r3, [pc, #80]	; (d71b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d715e:	681a      	ldr	r2, [r3, #0]
   d7160:	07d2      	lsls	r2, r2, #31
   d7162:	bf5c      	itt	pl
   d7164:	2201      	movpl	r2, #1
   d7166:	601a      	strpl	r2, [r3, #0]
   d7168:	4b12      	ldr	r3, [pc, #72]	; (d71b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d716a:	681a      	ldr	r2, [r3, #0]
   d716c:	07d0      	lsls	r0, r2, #31
   d716e:	bf5c      	itt	pl
   d7170:	2201      	movpl	r2, #1
   d7172:	601a      	strpl	r2, [r3, #0]
   d7174:	4b10      	ldr	r3, [pc, #64]	; (d71b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d7176:	681a      	ldr	r2, [r3, #0]
   d7178:	07d1      	lsls	r1, r2, #31
   d717a:	bf5c      	itt	pl
   d717c:	2201      	movpl	r2, #1
   d717e:	601a      	strpl	r2, [r3, #0]
   d7180:	4b0e      	ldr	r3, [pc, #56]	; (d71bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d7182:	681a      	ldr	r2, [r3, #0]
   d7184:	07d2      	lsls	r2, r2, #31
   d7186:	bf5c      	itt	pl
   d7188:	2201      	movpl	r2, #1
   d718a:	601a      	strpl	r2, [r3, #0]
   d718c:	4770      	bx	lr
   d718e:	bf00      	nop
   d7190:	2003e77c 	.word	0x2003e77c
   d7194:	2003e778 	.word	0x2003e778
   d7198:	2003e774 	.word	0x2003e774
   d719c:	2003e770 	.word	0x2003e770
   d71a0:	2003e76c 	.word	0x2003e76c
   d71a4:	2003e768 	.word	0x2003e768
   d71a8:	2003e764 	.word	0x2003e764
   d71ac:	2003e760 	.word	0x2003e760
   d71b0:	2003e75c 	.word	0x2003e75c
   d71b4:	2003e758 	.word	0x2003e758
   d71b8:	2003e754 	.word	0x2003e754
   d71bc:	2003e750 	.word	0x2003e750

000d71c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d71c0:	4b18      	ldr	r3, [pc, #96]	; (d7224 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d71c2:	681a      	ldr	r2, [r3, #0]
   d71c4:	07d1      	lsls	r1, r2, #31
   d71c6:	bf5c      	itt	pl
   d71c8:	2201      	movpl	r2, #1
   d71ca:	601a      	strpl	r2, [r3, #0]
   d71cc:	4b16      	ldr	r3, [pc, #88]	; (d7228 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d71ce:	681a      	ldr	r2, [r3, #0]
   d71d0:	07d2      	lsls	r2, r2, #31
   d71d2:	bf5c      	itt	pl
   d71d4:	2201      	movpl	r2, #1
   d71d6:	601a      	strpl	r2, [r3, #0]
   d71d8:	4b14      	ldr	r3, [pc, #80]	; (d722c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d71da:	681a      	ldr	r2, [r3, #0]
   d71dc:	07d0      	lsls	r0, r2, #31
   d71de:	bf5c      	itt	pl
   d71e0:	2201      	movpl	r2, #1
   d71e2:	601a      	strpl	r2, [r3, #0]
   d71e4:	4b12      	ldr	r3, [pc, #72]	; (d7230 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d71e6:	681a      	ldr	r2, [r3, #0]
   d71e8:	07d1      	lsls	r1, r2, #31
   d71ea:	bf5c      	itt	pl
   d71ec:	2201      	movpl	r2, #1
   d71ee:	601a      	strpl	r2, [r3, #0]
   d71f0:	4b10      	ldr	r3, [pc, #64]	; (d7234 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d71f2:	681a      	ldr	r2, [r3, #0]
   d71f4:	07d2      	lsls	r2, r2, #31
   d71f6:	bf5c      	itt	pl
   d71f8:	2201      	movpl	r2, #1
   d71fa:	601a      	strpl	r2, [r3, #0]
   d71fc:	4b0e      	ldr	r3, [pc, #56]	; (d7238 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d71fe:	681a      	ldr	r2, [r3, #0]
   d7200:	07d0      	lsls	r0, r2, #31
   d7202:	bf5c      	itt	pl
   d7204:	2201      	movpl	r2, #1
   d7206:	601a      	strpl	r2, [r3, #0]
   d7208:	4b0c      	ldr	r3, [pc, #48]	; (d723c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d720a:	681a      	ldr	r2, [r3, #0]
   d720c:	07d1      	lsls	r1, r2, #31
   d720e:	bf5c      	itt	pl
   d7210:	2201      	movpl	r2, #1
   d7212:	601a      	strpl	r2, [r3, #0]
   d7214:	4b0a      	ldr	r3, [pc, #40]	; (d7240 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7216:	681a      	ldr	r2, [r3, #0]
   d7218:	07d2      	lsls	r2, r2, #31
   d721a:	bf5c      	itt	pl
   d721c:	2201      	movpl	r2, #1
   d721e:	601a      	strpl	r2, [r3, #0]
   d7220:	4770      	bx	lr
   d7222:	bf00      	nop
   d7224:	2003e79c 	.word	0x2003e79c
   d7228:	2003e798 	.word	0x2003e798
   d722c:	2003e794 	.word	0x2003e794
   d7230:	2003e790 	.word	0x2003e790
   d7234:	2003e78c 	.word	0x2003e78c
   d7238:	2003e788 	.word	0x2003e788
   d723c:	2003e784 	.word	0x2003e784
   d7240:	2003e780 	.word	0x2003e780

000d7244 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7244:	4b18      	ldr	r3, [pc, #96]	; (d72a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7246:	681a      	ldr	r2, [r3, #0]
   d7248:	07d1      	lsls	r1, r2, #31
   d724a:	bf5c      	itt	pl
   d724c:	2201      	movpl	r2, #1
   d724e:	601a      	strpl	r2, [r3, #0]
   d7250:	4b16      	ldr	r3, [pc, #88]	; (d72ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7252:	681a      	ldr	r2, [r3, #0]
   d7254:	07d2      	lsls	r2, r2, #31
   d7256:	bf5c      	itt	pl
   d7258:	2201      	movpl	r2, #1
   d725a:	601a      	strpl	r2, [r3, #0]
   d725c:	4b14      	ldr	r3, [pc, #80]	; (d72b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d725e:	681a      	ldr	r2, [r3, #0]
   d7260:	07d0      	lsls	r0, r2, #31
   d7262:	bf5c      	itt	pl
   d7264:	2201      	movpl	r2, #1
   d7266:	601a      	strpl	r2, [r3, #0]
   d7268:	4b12      	ldr	r3, [pc, #72]	; (d72b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d726a:	681a      	ldr	r2, [r3, #0]
   d726c:	07d1      	lsls	r1, r2, #31
   d726e:	bf5c      	itt	pl
   d7270:	2201      	movpl	r2, #1
   d7272:	601a      	strpl	r2, [r3, #0]
   d7274:	4b10      	ldr	r3, [pc, #64]	; (d72b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7276:	681a      	ldr	r2, [r3, #0]
   d7278:	07d2      	lsls	r2, r2, #31
   d727a:	bf5c      	itt	pl
   d727c:	2201      	movpl	r2, #1
   d727e:	601a      	strpl	r2, [r3, #0]
   d7280:	4b0e      	ldr	r3, [pc, #56]	; (d72bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7282:	681a      	ldr	r2, [r3, #0]
   d7284:	07d0      	lsls	r0, r2, #31
   d7286:	bf5c      	itt	pl
   d7288:	2201      	movpl	r2, #1
   d728a:	601a      	strpl	r2, [r3, #0]
   d728c:	4b0c      	ldr	r3, [pc, #48]	; (d72c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d728e:	681a      	ldr	r2, [r3, #0]
   d7290:	07d1      	lsls	r1, r2, #31
   d7292:	bf5c      	itt	pl
   d7294:	2201      	movpl	r2, #1
   d7296:	601a      	strpl	r2, [r3, #0]
   d7298:	4b0a      	ldr	r3, [pc, #40]	; (d72c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d729a:	681a      	ldr	r2, [r3, #0]
   d729c:	07d2      	lsls	r2, r2, #31
   d729e:	bf5c      	itt	pl
   d72a0:	2201      	movpl	r2, #1
   d72a2:	601a      	strpl	r2, [r3, #0]
   d72a4:	4770      	bx	lr
   d72a6:	bf00      	nop
   d72a8:	2003e7bc 	.word	0x2003e7bc
   d72ac:	2003e7b8 	.word	0x2003e7b8
   d72b0:	2003e7b4 	.word	0x2003e7b4
   d72b4:	2003e7b0 	.word	0x2003e7b0
   d72b8:	2003e7ac 	.word	0x2003e7ac
   d72bc:	2003e7a8 	.word	0x2003e7a8
   d72c0:	2003e7a4 	.word	0x2003e7a4
   d72c4:	2003e7a0 	.word	0x2003e7a0

000d72c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d72c8:	4b24      	ldr	r3, [pc, #144]	; (d735c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d72ca:	681a      	ldr	r2, [r3, #0]
   d72cc:	07d0      	lsls	r0, r2, #31
   d72ce:	bf5c      	itt	pl
   d72d0:	2201      	movpl	r2, #1
   d72d2:	601a      	strpl	r2, [r3, #0]
   d72d4:	4b22      	ldr	r3, [pc, #136]	; (d7360 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d72d6:	681a      	ldr	r2, [r3, #0]
   d72d8:	07d1      	lsls	r1, r2, #31
   d72da:	bf5c      	itt	pl
   d72dc:	2201      	movpl	r2, #1
   d72de:	601a      	strpl	r2, [r3, #0]
   d72e0:	4b20      	ldr	r3, [pc, #128]	; (d7364 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d72e2:	681a      	ldr	r2, [r3, #0]
   d72e4:	07d2      	lsls	r2, r2, #31
   d72e6:	bf5c      	itt	pl
   d72e8:	2201      	movpl	r2, #1
   d72ea:	601a      	strpl	r2, [r3, #0]
   d72ec:	4b1e      	ldr	r3, [pc, #120]	; (d7368 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d72ee:	681a      	ldr	r2, [r3, #0]
   d72f0:	07d0      	lsls	r0, r2, #31
   d72f2:	bf5c      	itt	pl
   d72f4:	2201      	movpl	r2, #1
   d72f6:	601a      	strpl	r2, [r3, #0]
   d72f8:	4b1c      	ldr	r3, [pc, #112]	; (d736c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d72fa:	681a      	ldr	r2, [r3, #0]
   d72fc:	07d1      	lsls	r1, r2, #31
   d72fe:	bf5c      	itt	pl
   d7300:	2201      	movpl	r2, #1
   d7302:	601a      	strpl	r2, [r3, #0]
   d7304:	4b1a      	ldr	r3, [pc, #104]	; (d7370 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d7306:	681a      	ldr	r2, [r3, #0]
   d7308:	07d2      	lsls	r2, r2, #31
   d730a:	bf5c      	itt	pl
   d730c:	2201      	movpl	r2, #1
   d730e:	601a      	strpl	r2, [r3, #0]
   d7310:	4b18      	ldr	r3, [pc, #96]	; (d7374 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d7312:	681a      	ldr	r2, [r3, #0]
   d7314:	07d0      	lsls	r0, r2, #31
   d7316:	bf5c      	itt	pl
   d7318:	2201      	movpl	r2, #1
   d731a:	601a      	strpl	r2, [r3, #0]
   d731c:	4b16      	ldr	r3, [pc, #88]	; (d7378 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d731e:	681a      	ldr	r2, [r3, #0]
   d7320:	07d1      	lsls	r1, r2, #31
   d7322:	bf5c      	itt	pl
   d7324:	2201      	movpl	r2, #1
   d7326:	601a      	strpl	r2, [r3, #0]
   d7328:	4b14      	ldr	r3, [pc, #80]	; (d737c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d732a:	681a      	ldr	r2, [r3, #0]
   d732c:	07d2      	lsls	r2, r2, #31
   d732e:	bf5c      	itt	pl
   d7330:	2201      	movpl	r2, #1
   d7332:	601a      	strpl	r2, [r3, #0]
   d7334:	4b12      	ldr	r3, [pc, #72]	; (d7380 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d7336:	681a      	ldr	r2, [r3, #0]
   d7338:	07d0      	lsls	r0, r2, #31
   d733a:	bf5c      	itt	pl
   d733c:	2201      	movpl	r2, #1
   d733e:	601a      	strpl	r2, [r3, #0]
   d7340:	4b10      	ldr	r3, [pc, #64]	; (d7384 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d7342:	681a      	ldr	r2, [r3, #0]
   d7344:	07d1      	lsls	r1, r2, #31
   d7346:	bf5c      	itt	pl
   d7348:	2201      	movpl	r2, #1
   d734a:	601a      	strpl	r2, [r3, #0]
   d734c:	4b0e      	ldr	r3, [pc, #56]	; (d7388 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d734e:	681a      	ldr	r2, [r3, #0]
   d7350:	07d2      	lsls	r2, r2, #31
   d7352:	bf5c      	itt	pl
   d7354:	2201      	movpl	r2, #1
   d7356:	601a      	strpl	r2, [r3, #0]
   d7358:	4770      	bx	lr
   d735a:	bf00      	nop
   d735c:	2003e7ec 	.word	0x2003e7ec
   d7360:	2003e7e8 	.word	0x2003e7e8
   d7364:	2003e7e4 	.word	0x2003e7e4
   d7368:	2003e7e0 	.word	0x2003e7e0
   d736c:	2003e7dc 	.word	0x2003e7dc
   d7370:	2003e7d8 	.word	0x2003e7d8
   d7374:	2003e7d4 	.word	0x2003e7d4
   d7378:	2003e7d0 	.word	0x2003e7d0
   d737c:	2003e7cc 	.word	0x2003e7cc
   d7380:	2003e7c8 	.word	0x2003e7c8
   d7384:	2003e7c4 	.word	0x2003e7c4
   d7388:	2003e7c0 	.word	0x2003e7c0
   d738c:	00000000 	.word	0x00000000

000d7390 <pow>:
   d7390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7394:	ed2d 8b02 	vpush	{d8}
   d7398:	f8df a324 	ldr.w	sl, [pc, #804]	; d76c0 <pow+0x330>
   d739c:	b08b      	sub	sp, #44	; 0x2c
   d739e:	ec57 6b10 	vmov	r6, r7, d0
   d73a2:	ec55 4b11 	vmov	r4, r5, d1
   d73a6:	f000 f98f 	bl	d76c8 <__ieee754_pow>
   d73aa:	f99a 8000 	ldrsb.w	r8, [sl]
   d73ae:	eeb0 8a40 	vmov.f32	s16, s0
   d73b2:	eef0 8a60 	vmov.f32	s17, s1
   d73b6:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   d73ba:	d048      	beq.n	d744e <pow+0xbe>
   d73bc:	4622      	mov	r2, r4
   d73be:	462b      	mov	r3, r5
   d73c0:	4620      	mov	r0, r4
   d73c2:	4629      	mov	r1, r5
   d73c4:	f001 fd6e 	bl	d8ea4 <__aeabi_dcmpun>
   d73c8:	4683      	mov	fp, r0
   d73ca:	2800      	cmp	r0, #0
   d73cc:	d13f      	bne.n	d744e <pow+0xbe>
   d73ce:	4632      	mov	r2, r6
   d73d0:	463b      	mov	r3, r7
   d73d2:	4630      	mov	r0, r6
   d73d4:	4639      	mov	r1, r7
   d73d6:	f001 fd65 	bl	d8ea4 <__aeabi_dcmpun>
   d73da:	4681      	mov	r9, r0
   d73dc:	2800      	cmp	r0, #0
   d73de:	f040 8090 	bne.w	d7502 <pow+0x172>
   d73e2:	4630      	mov	r0, r6
   d73e4:	4639      	mov	r1, r7
   d73e6:	2200      	movs	r2, #0
   d73e8:	2300      	movs	r3, #0
   d73ea:	f001 fd29 	bl	d8e40 <__aeabi_dcmpeq>
   d73ee:	2800      	cmp	r0, #0
   d73f0:	d036      	beq.n	d7460 <pow+0xd0>
   d73f2:	2200      	movs	r2, #0
   d73f4:	2300      	movs	r3, #0
   d73f6:	4620      	mov	r0, r4
   d73f8:	4629      	mov	r1, r5
   d73fa:	f001 fd21 	bl	d8e40 <__aeabi_dcmpeq>
   d73fe:	4683      	mov	fp, r0
   d7400:	b1b8      	cbz	r0, d7432 <pow+0xa2>
   d7402:	ed9f 7ba5 	vldr	d7, [pc, #660]	; d7698 <pow+0x308>
   d7406:	2201      	movs	r2, #1
   d7408:	4ba9      	ldr	r3, [pc, #676]	; (d76b0 <pow+0x320>)
   d740a:	f8cd 9020 	str.w	r9, [sp, #32]
   d740e:	9200      	str	r2, [sp, #0]
   d7410:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d7414:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d7418:	ed8d 7b06 	vstr	d7, [sp, #24]
   d741c:	9301      	str	r3, [sp, #4]
   d741e:	f1b8 0f00 	cmp.w	r8, #0
   d7422:	d05b      	beq.n	d74dc <pow+0x14c>
   d7424:	ed9f 0b9e 	vldr	d0, [pc, #632]	; d76a0 <pow+0x310>
   d7428:	b00b      	add	sp, #44	; 0x2c
   d742a:	ecbd 8b02 	vpop	{d8}
   d742e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7432:	ec45 4b10 	vmov	d0, r4, r5
   d7436:	f000 ffa7 	bl	d8388 <finite>
   d743a:	b140      	cbz	r0, d744e <pow+0xbe>
   d743c:	2200      	movs	r2, #0
   d743e:	2300      	movs	r3, #0
   d7440:	4620      	mov	r0, r4
   d7442:	4629      	mov	r1, r5
   d7444:	f001 fd06 	bl	d8e54 <__aeabi_dcmplt>
   d7448:	2800      	cmp	r0, #0
   d744a:	f040 80c5 	bne.w	d75d8 <pow+0x248>
   d744e:	eeb0 0a48 	vmov.f32	s0, s16
   d7452:	eef0 0a68 	vmov.f32	s1, s17
   d7456:	b00b      	add	sp, #44	; 0x2c
   d7458:	ecbd 8b02 	vpop	{d8}
   d745c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7460:	eeb0 0a48 	vmov.f32	s0, s16
   d7464:	eef0 0a68 	vmov.f32	s1, s17
   d7468:	f000 ff8e 	bl	d8388 <finite>
   d746c:	4680      	mov	r8, r0
   d746e:	2800      	cmp	r0, #0
   d7470:	d061      	beq.n	d7536 <pow+0x1a6>
   d7472:	f04f 0800 	mov.w	r8, #0
   d7476:	f04f 0900 	mov.w	r9, #0
   d747a:	ec51 0b18 	vmov	r0, r1, d8
   d747e:	4642      	mov	r2, r8
   d7480:	464b      	mov	r3, r9
   d7482:	f001 fcdd 	bl	d8e40 <__aeabi_dcmpeq>
   d7486:	2800      	cmp	r0, #0
   d7488:	d0e1      	beq.n	d744e <pow+0xbe>
   d748a:	ec47 6b10 	vmov	d0, r6, r7
   d748e:	f000 ff7b 	bl	d8388 <finite>
   d7492:	2800      	cmp	r0, #0
   d7494:	d0db      	beq.n	d744e <pow+0xbe>
   d7496:	ec45 4b10 	vmov	d0, r4, r5
   d749a:	f000 ff75 	bl	d8388 <finite>
   d749e:	2800      	cmp	r0, #0
   d74a0:	d0d5      	beq.n	d744e <pow+0xbe>
   d74a2:	f99a 3000 	ldrsb.w	r3, [sl]
   d74a6:	4a82      	ldr	r2, [pc, #520]	; (d76b0 <pow+0x320>)
   d74a8:	9201      	str	r2, [sp, #4]
   d74aa:	2104      	movs	r1, #4
   d74ac:	2200      	movs	r2, #0
   d74ae:	2b02      	cmp	r3, #2
   d74b0:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d74b4:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d74b8:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d74bc:	9100      	str	r1, [sp, #0]
   d74be:	9208      	str	r2, [sp, #32]
   d74c0:	d003      	beq.n	d74ca <pow+0x13a>
   d74c2:	4668      	mov	r0, sp
   d74c4:	f000 ff68 	bl	d8398 <matherr>
   d74c8:	b970      	cbnz	r0, d74e8 <pow+0x158>
   d74ca:	f7fe fb11 	bl	d5af0 <__errno>
   d74ce:	2322      	movs	r3, #34	; 0x22
   d74d0:	6003      	str	r3, [r0, #0]
   d74d2:	e009      	b.n	d74e8 <pow+0x158>
   d74d4:	ed9f 7b70 	vldr	d7, [pc, #448]	; d7698 <pow+0x308>
   d74d8:	ed8d 7b06 	vstr	d7, [sp, #24]
   d74dc:	4668      	mov	r0, sp
   d74de:	f000 ff5b 	bl	d8398 <matherr>
   d74e2:	2800      	cmp	r0, #0
   d74e4:	f000 808e 	beq.w	d7604 <pow+0x274>
   d74e8:	9b08      	ldr	r3, [sp, #32]
   d74ea:	b11b      	cbz	r3, d74f4 <pow+0x164>
   d74ec:	f7fe fb00 	bl	d5af0 <__errno>
   d74f0:	9b08      	ldr	r3, [sp, #32]
   d74f2:	6003      	str	r3, [r0, #0]
   d74f4:	ed9d 0b06 	vldr	d0, [sp, #24]
   d74f8:	b00b      	add	sp, #44	; 0x2c
   d74fa:	ecbd 8b02 	vpop	{d8}
   d74fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7502:	2200      	movs	r2, #0
   d7504:	2300      	movs	r3, #0
   d7506:	4620      	mov	r0, r4
   d7508:	4629      	mov	r1, r5
   d750a:	f001 fc99 	bl	d8e40 <__aeabi_dcmpeq>
   d750e:	2800      	cmp	r0, #0
   d7510:	d09d      	beq.n	d744e <pow+0xbe>
   d7512:	ed9f 0b63 	vldr	d0, [pc, #396]	; d76a0 <pow+0x310>
   d7516:	4b66      	ldr	r3, [pc, #408]	; (d76b0 <pow+0x320>)
   d7518:	f8cd b020 	str.w	fp, [sp, #32]
   d751c:	2201      	movs	r2, #1
   d751e:	f1b8 0f02 	cmp.w	r8, #2
   d7522:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d7526:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d752a:	ed8d 0b06 	vstr	d0, [sp, #24]
   d752e:	e88d 000c 	stmia.w	sp, {r2, r3}
   d7532:	d1d3      	bne.n	d74dc <pow+0x14c>
   d7534:	e78f      	b.n	d7456 <pow+0xc6>
   d7536:	ec47 6b10 	vmov	d0, r6, r7
   d753a:	f000 ff25 	bl	d8388 <finite>
   d753e:	2800      	cmp	r0, #0
   d7540:	d097      	beq.n	d7472 <pow+0xe2>
   d7542:	ec45 4b10 	vmov	d0, r4, r5
   d7546:	f000 ff1f 	bl	d8388 <finite>
   d754a:	2800      	cmp	r0, #0
   d754c:	d091      	beq.n	d7472 <pow+0xe2>
   d754e:	ec53 2b18 	vmov	r2, r3, d8
   d7552:	ee18 0a10 	vmov	r0, s16
   d7556:	4619      	mov	r1, r3
   d7558:	f001 fca4 	bl	d8ea4 <__aeabi_dcmpun>
   d755c:	2800      	cmp	r0, #0
   d755e:	d17c      	bne.n	d765a <pow+0x2ca>
   d7560:	2303      	movs	r3, #3
   d7562:	f99a 8000 	ldrsb.w	r8, [sl]
   d7566:	9300      	str	r3, [sp, #0]
   d7568:	4b51      	ldr	r3, [pc, #324]	; (d76b0 <pow+0x320>)
   d756a:	9008      	str	r0, [sp, #32]
   d756c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d7570:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d7574:	9301      	str	r3, [sp, #4]
   d7576:	f1b8 0f00 	cmp.w	r8, #0
   d757a:	d148      	bne.n	d760e <pow+0x27e>
   d757c:	f8df 9144 	ldr.w	r9, [pc, #324]	; d76c4 <pow+0x334>
   d7580:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
   d7584:	2200      	movs	r2, #0
   d7586:	2300      	movs	r3, #0
   d7588:	4630      	mov	r0, r6
   d758a:	4639      	mov	r1, r7
   d758c:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d7590:	f001 fc60 	bl	d8e54 <__aeabi_dcmplt>
   d7594:	2800      	cmp	r0, #0
   d7596:	d094      	beq.n	d74c2 <pow+0x132>
   d7598:	2200      	movs	r2, #0
   d759a:	4b46      	ldr	r3, [pc, #280]	; (d76b4 <pow+0x324>)
   d759c:	4620      	mov	r0, r4
   d759e:	4629      	mov	r1, r5
   d75a0:	f001 f9e6 	bl	d8970 <__aeabi_dmul>
   d75a4:	4604      	mov	r4, r0
   d75a6:	460d      	mov	r5, r1
   d75a8:	ec45 4b10 	vmov	d0, r4, r5
   d75ac:	f000 ff00 	bl	d83b0 <rint>
   d75b0:	4620      	mov	r0, r4
   d75b2:	ec53 2b10 	vmov	r2, r3, d0
   d75b6:	4629      	mov	r1, r5
   d75b8:	f001 fc42 	bl	d8e40 <__aeabi_dcmpeq>
   d75bc:	2800      	cmp	r0, #0
   d75be:	d149      	bne.n	d7654 <pow+0x2c4>
   d75c0:	4b3d      	ldr	r3, [pc, #244]	; (d76b8 <pow+0x328>)
   d75c2:	f99a 8000 	ldrsb.w	r8, [sl]
   d75c6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d75ca:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d75ce:	f1b8 0f02 	cmp.w	r8, #2
   d75d2:	f47f af76 	bne.w	d74c2 <pow+0x132>
   d75d6:	e778      	b.n	d74ca <pow+0x13a>
   d75d8:	4a35      	ldr	r2, [pc, #212]	; (d76b0 <pow+0x320>)
   d75da:	f99a 3000 	ldrsb.w	r3, [sl]
   d75de:	f8cd b020 	str.w	fp, [sp, #32]
   d75e2:	2101      	movs	r1, #1
   d75e4:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d75e8:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d75ec:	e88d 0006 	stmia.w	sp, {r1, r2}
   d75f0:	2b00      	cmp	r3, #0
   d75f2:	f43f af6f 	beq.w	d74d4 <pow+0x144>
   d75f6:	4931      	ldr	r1, [pc, #196]	; (d76bc <pow+0x32c>)
   d75f8:	2000      	movs	r0, #0
   d75fa:	2b02      	cmp	r3, #2
   d75fc:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d7600:	f47f af6c 	bne.w	d74dc <pow+0x14c>
   d7604:	f7fe fa74 	bl	d5af0 <__errno>
   d7608:	2321      	movs	r3, #33	; 0x21
   d760a:	6003      	str	r3, [r0, #0]
   d760c:	e76c      	b.n	d74e8 <pow+0x158>
   d760e:	ed9f 7b26 	vldr	d7, [pc, #152]	; d76a8 <pow+0x318>
   d7612:	2200      	movs	r2, #0
   d7614:	2300      	movs	r3, #0
   d7616:	4630      	mov	r0, r6
   d7618:	4639      	mov	r1, r7
   d761a:	ed8d 7b06 	vstr	d7, [sp, #24]
   d761e:	f001 fc19 	bl	d8e54 <__aeabi_dcmplt>
   d7622:	2800      	cmp	r0, #0
   d7624:	d0d3      	beq.n	d75ce <pow+0x23e>
   d7626:	2200      	movs	r2, #0
   d7628:	4b22      	ldr	r3, [pc, #136]	; (d76b4 <pow+0x324>)
   d762a:	4620      	mov	r0, r4
   d762c:	4629      	mov	r1, r5
   d762e:	f001 f99f 	bl	d8970 <__aeabi_dmul>
   d7632:	4604      	mov	r4, r0
   d7634:	460d      	mov	r5, r1
   d7636:	ec45 4b10 	vmov	d0, r4, r5
   d763a:	f000 feb9 	bl	d83b0 <rint>
   d763e:	4620      	mov	r0, r4
   d7640:	ec53 2b10 	vmov	r2, r3, d0
   d7644:	4629      	mov	r1, r5
   d7646:	f001 fbfb 	bl	d8e40 <__aeabi_dcmpeq>
   d764a:	b918      	cbnz	r0, d7654 <pow+0x2c4>
   d764c:	4b1b      	ldr	r3, [pc, #108]	; (d76bc <pow+0x32c>)
   d764e:	2200      	movs	r2, #0
   d7650:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d7654:	f99a 8000 	ldrsb.w	r8, [sl]
   d7658:	e7b9      	b.n	d75ce <pow+0x23e>
   d765a:	4b15      	ldr	r3, [pc, #84]	; (d76b0 <pow+0x320>)
   d765c:	f99a 9000 	ldrsb.w	r9, [sl]
   d7660:	f8cd 8020 	str.w	r8, [sp, #32]
   d7664:	2201      	movs	r2, #1
   d7666:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d766a:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d766e:	e88d 000c 	stmia.w	sp, {r2, r3}
   d7672:	f1b9 0f00 	cmp.w	r9, #0
   d7676:	f43f af2d 	beq.w	d74d4 <pow+0x144>
   d767a:	2200      	movs	r2, #0
   d767c:	2300      	movs	r3, #0
   d767e:	4610      	mov	r0, r2
   d7680:	4619      	mov	r1, r3
   d7682:	f001 fa9f 	bl	d8bc4 <__aeabi_ddiv>
   d7686:	f1b9 0f02 	cmp.w	r9, #2
   d768a:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d768e:	d0b9      	beq.n	d7604 <pow+0x274>
   d7690:	e724      	b.n	d74dc <pow+0x14c>
   d7692:	bf00      	nop
   d7694:	f3af 8000 	nop.w
	...
   d76a4:	3ff00000 	.word	0x3ff00000
   d76a8:	00000000 	.word	0x00000000
   d76ac:	7ff00000 	.word	0x7ff00000
   d76b0:	000d9dfc 	.word	0x000d9dfc
   d76b4:	3fe00000 	.word	0x3fe00000
   d76b8:	c7efffff 	.word	0xc7efffff
   d76bc:	fff00000 	.word	0xfff00000
   d76c0:	2003e3b8 	.word	0x2003e3b8
   d76c4:	47efffff 	.word	0x47efffff

000d76c8 <__ieee754_pow>:
   d76c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d76cc:	ec51 0b11 	vmov	r0, r1, d1
   d76d0:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   d76d4:	ea58 0400 	orrs.w	r4, r8, r0
   d76d8:	b093      	sub	sp, #76	; 0x4c
   d76da:	d03c      	beq.n	d7756 <__ieee754_pow+0x8e>
   d76dc:	ec53 2b10 	vmov	r2, r3, d0
   d76e0:	4e6d      	ldr	r6, [pc, #436]	; (d7898 <__ieee754_pow+0x1d0>)
   d76e2:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   d76e6:	42b4      	cmp	r4, r6
   d76e8:	ee10 aa10 	vmov	sl, s0
   d76ec:	461d      	mov	r5, r3
   d76ee:	dc2b      	bgt.n	d7748 <__ieee754_pow+0x80>
   d76f0:	4689      	mov	r9, r1
   d76f2:	ee11 ea10 	vmov	lr, s2
   d76f6:	d026      	beq.n	d7746 <__ieee754_pow+0x7e>
   d76f8:	45b0      	cmp	r8, r6
   d76fa:	dc25      	bgt.n	d7748 <__ieee754_pow+0x80>
   d76fc:	4e66      	ldr	r6, [pc, #408]	; (d7898 <__ieee754_pow+0x1d0>)
   d76fe:	45b0      	cmp	r8, r6
   d7700:	d077      	beq.n	d77f2 <__ieee754_pow+0x12a>
   d7702:	2d00      	cmp	r5, #0
   d7704:	4616      	mov	r6, r2
   d7706:	461f      	mov	r7, r3
   d7708:	e9cd 0100 	strd	r0, r1, [sp]
   d770c:	db75      	blt.n	d77fa <__ieee754_pow+0x132>
   d770e:	f04f 0b00 	mov.w	fp, #0
   d7712:	f1be 0f00 	cmp.w	lr, #0
   d7716:	d12d      	bne.n	d7774 <__ieee754_pow+0xac>
   d7718:	4b5f      	ldr	r3, [pc, #380]	; (d7898 <__ieee754_pow+0x1d0>)
   d771a:	4598      	cmp	r8, r3
   d771c:	f000 8089 	beq.w	d7832 <__ieee754_pow+0x16a>
   d7720:	4b5e      	ldr	r3, [pc, #376]	; (d789c <__ieee754_pow+0x1d4>)
   d7722:	4598      	cmp	r8, r3
   d7724:	d05e      	beq.n	d77e4 <__ieee754_pow+0x11c>
   d7726:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
   d772a:	f000 83de 	beq.w	d7eea <__ieee754_pow+0x822>
   d772e:	4b5c      	ldr	r3, [pc, #368]	; (d78a0 <__ieee754_pow+0x1d8>)
   d7730:	4599      	cmp	r9, r3
   d7732:	d11f      	bne.n	d7774 <__ieee754_pow+0xac>
   d7734:	2d00      	cmp	r5, #0
   d7736:	db1d      	blt.n	d7774 <__ieee754_pow+0xac>
   d7738:	ec47 6b10 	vmov	d0, r6, r7
   d773c:	b013      	add	sp, #76	; 0x4c
   d773e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7742:	f000 bd49 	b.w	d81d8 <__ieee754_sqrt>
   d7746:	b15a      	cbz	r2, d7760 <__ieee754_pow+0x98>
   d7748:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
   d774c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
   d7750:	ea54 030a 	orrs.w	r3, r4, sl
   d7754:	d106      	bne.n	d7764 <__ieee754_pow+0x9c>
   d7756:	ed9f 0b4a 	vldr	d0, [pc, #296]	; d7880 <__ieee754_pow+0x1b8>
   d775a:	b013      	add	sp, #76	; 0x4c
   d775c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7760:	45a0      	cmp	r8, r4
   d7762:	ddcb      	ble.n	d76fc <__ieee754_pow+0x34>
   d7764:	484f      	ldr	r0, [pc, #316]	; (d78a4 <__ieee754_pow+0x1dc>)
   d7766:	b013      	add	sp, #76	; 0x4c
   d7768:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d776c:	f000 be18 	b.w	d83a0 <nan>
   d7770:	f04f 0b00 	mov.w	fp, #0
   d7774:	ec47 6b10 	vmov	d0, r6, r7
   d7778:	f000 fdfe 	bl	d8378 <fabs>
   d777c:	ec51 0b10 	vmov	r0, r1, d0
   d7780:	f1ba 0f00 	cmp.w	sl, #0
   d7784:	d01e      	beq.n	d77c4 <__ieee754_pow+0xfc>
   d7786:	0fed      	lsrs	r5, r5, #31
   d7788:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
   d778c:	ea5b 030a 	orrs.w	r3, fp, sl
   d7790:	d063      	beq.n	d785a <__ieee754_pow+0x192>
   d7792:	4b45      	ldr	r3, [pc, #276]	; (d78a8 <__ieee754_pow+0x1e0>)
   d7794:	4598      	cmp	r8, r3
   d7796:	f340 808d 	ble.w	d78b4 <__ieee754_pow+0x1ec>
   d779a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   d779e:	4598      	cmp	r8, r3
   d77a0:	f340 8438 	ble.w	d8014 <__ieee754_pow+0x94c>
   d77a4:	4b41      	ldr	r3, [pc, #260]	; (d78ac <__ieee754_pow+0x1e4>)
   d77a6:	429c      	cmp	r4, r3
   d77a8:	dd62      	ble.n	d7870 <__ieee754_pow+0x1a8>
   d77aa:	f1b9 0f00 	cmp.w	r9, #0
   d77ae:	dd62      	ble.n	d7876 <__ieee754_pow+0x1ae>
   d77b0:	a335      	add	r3, pc, #212	; (adr r3, d7888 <__ieee754_pow+0x1c0>)
   d77b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d77b6:	4610      	mov	r0, r2
   d77b8:	4619      	mov	r1, r3
   d77ba:	f001 f8d9 	bl	d8970 <__aeabi_dmul>
   d77be:	ec41 0b10 	vmov	d0, r0, r1
   d77c2:	e7ca      	b.n	d775a <__ieee754_pow+0x92>
   d77c4:	b124      	cbz	r4, d77d0 <__ieee754_pow+0x108>
   d77c6:	4b35      	ldr	r3, [pc, #212]	; (d789c <__ieee754_pow+0x1d4>)
   d77c8:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
   d77cc:	429a      	cmp	r2, r3
   d77ce:	d1da      	bne.n	d7786 <__ieee754_pow+0xbe>
   d77d0:	f1b9 0f00 	cmp.w	r9, #0
   d77d4:	f2c0 83cb 	blt.w	d7f6e <__ieee754_pow+0x8a6>
   d77d8:	2d00      	cmp	r5, #0
   d77da:	f2c0 8374 	blt.w	d7ec6 <__ieee754_pow+0x7fe>
   d77de:	ec41 0b10 	vmov	d0, r0, r1
   d77e2:	e7ba      	b.n	d775a <__ieee754_pow+0x92>
   d77e4:	f1b9 0f00 	cmp.w	r9, #0
   d77e8:	f2c0 847a 	blt.w	d80e0 <__ieee754_pow+0xa18>
   d77ec:	ec47 6b10 	vmov	d0, r6, r7
   d77f0:	e7b3      	b.n	d775a <__ieee754_pow+0x92>
   d77f2:	f1be 0f00 	cmp.w	lr, #0
   d77f6:	d084      	beq.n	d7702 <__ieee754_pow+0x3a>
   d77f8:	e7a6      	b.n	d7748 <__ieee754_pow+0x80>
   d77fa:	4b2d      	ldr	r3, [pc, #180]	; (d78b0 <__ieee754_pow+0x1e8>)
   d77fc:	4598      	cmp	r8, r3
   d77fe:	dc29      	bgt.n	d7854 <__ieee754_pow+0x18c>
   d7800:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
   d7804:	4598      	cmp	r8, r3
   d7806:	dd82      	ble.n	d770e <__ieee754_pow+0x46>
   d7808:	ea4f 5328 	mov.w	r3, r8, asr #20
   d780c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   d7810:	2b14      	cmp	r3, #20
   d7812:	f340 847f 	ble.w	d8114 <__ieee754_pow+0xa4c>
   d7816:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
   d781a:	fa2e f203 	lsr.w	r2, lr, r3
   d781e:	fa02 f303 	lsl.w	r3, r2, r3
   d7822:	459e      	cmp	lr, r3
   d7824:	f47f af73 	bne.w	d770e <__ieee754_pow+0x46>
   d7828:	f002 0201 	and.w	r2, r2, #1
   d782c:	f1c2 0b02 	rsb	fp, r2, #2
   d7830:	e76f      	b.n	d7712 <__ieee754_pow+0x4a>
   d7832:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
   d7836:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   d783a:	ea53 030a 	orrs.w	r3, r3, sl
   d783e:	d08a      	beq.n	d7756 <__ieee754_pow+0x8e>
   d7840:	4b1a      	ldr	r3, [pc, #104]	; (d78ac <__ieee754_pow+0x1e4>)
   d7842:	429c      	cmp	r4, r3
   d7844:	f340 8385 	ble.w	d7f52 <__ieee754_pow+0x88a>
   d7848:	f1b9 0f00 	cmp.w	r9, #0
   d784c:	db13      	blt.n	d7876 <__ieee754_pow+0x1ae>
   d784e:	ed9d 0b00 	vldr	d0, [sp]
   d7852:	e782      	b.n	d775a <__ieee754_pow+0x92>
   d7854:	f04f 0b02 	mov.w	fp, #2
   d7858:	e75b      	b.n	d7712 <__ieee754_pow+0x4a>
   d785a:	4632      	mov	r2, r6
   d785c:	463b      	mov	r3, r7
   d785e:	4610      	mov	r0, r2
   d7860:	4619      	mov	r1, r3
   d7862:	f000 fed1 	bl	d8608 <__aeabi_dsub>
   d7866:	4602      	mov	r2, r0
   d7868:	460b      	mov	r3, r1
   d786a:	f001 f9ab 	bl	d8bc4 <__aeabi_ddiv>
   d786e:	e7b6      	b.n	d77de <__ieee754_pow+0x116>
   d7870:	f1b9 0f00 	cmp.w	r9, #0
   d7874:	db9c      	blt.n	d77b0 <__ieee754_pow+0xe8>
   d7876:	ed9f 0b06 	vldr	d0, [pc, #24]	; d7890 <__ieee754_pow+0x1c8>
   d787a:	e76e      	b.n	d775a <__ieee754_pow+0x92>
   d787c:	f3af 8000 	nop.w
   d7880:	00000000 	.word	0x00000000
   d7884:	3ff00000 	.word	0x3ff00000
   d7888:	8800759c 	.word	0x8800759c
   d788c:	7e37e43c 	.word	0x7e37e43c
	...
   d7898:	7ff00000 	.word	0x7ff00000
   d789c:	3ff00000 	.word	0x3ff00000
   d78a0:	3fe00000 	.word	0x3fe00000
   d78a4:	000d9e00 	.word	0x000d9e00
   d78a8:	41e00000 	.word	0x41e00000
   d78ac:	3fefffff 	.word	0x3fefffff
   d78b0:	433fffff 	.word	0x433fffff
   d78b4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
   d78b8:	f04f 0200 	mov.w	r2, #0
   d78bc:	da05      	bge.n	d78ca <__ieee754_pow+0x202>
   d78be:	4bd6      	ldr	r3, [pc, #856]	; (d7c18 <__ieee754_pow+0x550>)
   d78c0:	f001 f856 	bl	d8970 <__aeabi_dmul>
   d78c4:	f06f 0234 	mvn.w	r2, #52	; 0x34
   d78c8:	460c      	mov	r4, r1
   d78ca:	1523      	asrs	r3, r4, #20
   d78cc:	4ed3      	ldr	r6, [pc, #844]	; (d7c1c <__ieee754_pow+0x554>)
   d78ce:	f3c4 0413 	ubfx	r4, r4, #0, #20
   d78d2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   d78d6:	4413      	add	r3, r2
   d78d8:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
   d78dc:	42b4      	cmp	r4, r6
   d78de:	461a      	mov	r2, r3
   d78e0:	930d      	str	r3, [sp, #52]	; 0x34
   d78e2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
   d78e6:	f340 8349 	ble.w	d7f7c <__ieee754_pow+0x8b4>
   d78ea:	4bcd      	ldr	r3, [pc, #820]	; (d7c20 <__ieee754_pow+0x558>)
   d78ec:	429c      	cmp	r4, r3
   d78ee:	f340 842d 	ble.w	d814c <__ieee754_pow+0xa84>
   d78f2:	ed9f 7bb3 	vldr	d7, [pc, #716]	; d7bc0 <__ieee754_pow+0x4f8>
   d78f6:	ed8d 7b08 	vstr	d7, [sp, #32]
   d78fa:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d78fe:	ed9f 7bb2 	vldr	d7, [pc, #712]	; d7bc8 <__ieee754_pow+0x500>
   d7902:	4613      	mov	r3, r2
   d7904:	ed8d 7b06 	vstr	d7, [sp, #24]
   d7908:	3301      	adds	r3, #1
   d790a:	930d      	str	r3, [sp, #52]	; 0x34
   d790c:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
   d7910:	f04f 0800 	mov.w	r8, #0
   d7914:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d7918:	4629      	mov	r1, r5
   d791a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d791e:	f000 fe73 	bl	d8608 <__aeabi_dsub>
   d7922:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d7926:	4606      	mov	r6, r0
   d7928:	460f      	mov	r7, r1
   d792a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d792e:	f000 fe6d 	bl	d860c <__adddf3>
   d7932:	4602      	mov	r2, r0
   d7934:	460b      	mov	r3, r1
   d7936:	2000      	movs	r0, #0
   d7938:	49ba      	ldr	r1, [pc, #744]	; (d7c24 <__ieee754_pow+0x55c>)
   d793a:	f001 f943 	bl	d8bc4 <__aeabi_ddiv>
   d793e:	4603      	mov	r3, r0
   d7940:	460c      	mov	r4, r1
   d7942:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
   d7946:	4602      	mov	r2, r0
   d7948:	460b      	mov	r3, r1
   d794a:	4630      	mov	r0, r6
   d794c:	4639      	mov	r1, r7
   d794e:	f001 f80f 	bl	d8970 <__aeabi_dmul>
   d7952:	106b      	asrs	r3, r5, #1
   d7954:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   d7958:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
   d795c:	eb03 0508 	add.w	r5, r3, r8
   d7960:	460a      	mov	r2, r1
   d7962:	2300      	movs	r3, #0
   d7964:	4601      	mov	r1, r0
   d7966:	e9cd 1202 	strd	r1, r2, [sp, #8]
   d796a:	9302      	str	r3, [sp, #8]
   d796c:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
   d7970:	2400      	movs	r4, #0
   d7972:	e9cd 1204 	strd	r1, r2, [sp, #16]
   d7976:	462b      	mov	r3, r5
   d7978:	4622      	mov	r2, r4
   d797a:	4640      	mov	r0, r8
   d797c:	4649      	mov	r1, r9
   d797e:	f000 fff7 	bl	d8970 <__aeabi_dmul>
   d7982:	4602      	mov	r2, r0
   d7984:	460b      	mov	r3, r1
   d7986:	4630      	mov	r0, r6
   d7988:	4639      	mov	r1, r7
   d798a:	f000 fe3d 	bl	d8608 <__aeabi_dsub>
   d798e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d7992:	4606      	mov	r6, r0
   d7994:	460f      	mov	r7, r1
   d7996:	4620      	mov	r0, r4
   d7998:	4629      	mov	r1, r5
   d799a:	f000 fe35 	bl	d8608 <__aeabi_dsub>
   d799e:	4602      	mov	r2, r0
   d79a0:	460b      	mov	r3, r1
   d79a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d79a6:	f000 fe2f 	bl	d8608 <__aeabi_dsub>
   d79aa:	4642      	mov	r2, r8
   d79ac:	464b      	mov	r3, r9
   d79ae:	f000 ffdf 	bl	d8970 <__aeabi_dmul>
   d79b2:	4602      	mov	r2, r0
   d79b4:	460b      	mov	r3, r1
   d79b6:	4630      	mov	r0, r6
   d79b8:	4639      	mov	r1, r7
   d79ba:	f000 fe25 	bl	d8608 <__aeabi_dsub>
   d79be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   d79c2:	f000 ffd5 	bl	d8970 <__aeabi_dmul>
   d79c6:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
   d79ca:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d79ce:	4622      	mov	r2, r4
   d79d0:	462b      	mov	r3, r5
   d79d2:	4620      	mov	r0, r4
   d79d4:	4629      	mov	r1, r5
   d79d6:	f000 ffcb 	bl	d8970 <__aeabi_dmul>
   d79da:	a37d      	add	r3, pc, #500	; (adr r3, d7bd0 <__ieee754_pow+0x508>)
   d79dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d79e0:	4604      	mov	r4, r0
   d79e2:	460d      	mov	r5, r1
   d79e4:	f000 ffc4 	bl	d8970 <__aeabi_dmul>
   d79e8:	a37b      	add	r3, pc, #492	; (adr r3, d7bd8 <__ieee754_pow+0x510>)
   d79ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   d79ee:	f000 fe0d 	bl	d860c <__adddf3>
   d79f2:	4622      	mov	r2, r4
   d79f4:	462b      	mov	r3, r5
   d79f6:	f000 ffbb 	bl	d8970 <__aeabi_dmul>
   d79fa:	a379      	add	r3, pc, #484	; (adr r3, d7be0 <__ieee754_pow+0x518>)
   d79fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7a00:	f000 fe04 	bl	d860c <__adddf3>
   d7a04:	4622      	mov	r2, r4
   d7a06:	462b      	mov	r3, r5
   d7a08:	f000 ffb2 	bl	d8970 <__aeabi_dmul>
   d7a0c:	a376      	add	r3, pc, #472	; (adr r3, d7be8 <__ieee754_pow+0x520>)
   d7a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7a12:	f000 fdfb 	bl	d860c <__adddf3>
   d7a16:	4622      	mov	r2, r4
   d7a18:	462b      	mov	r3, r5
   d7a1a:	f000 ffa9 	bl	d8970 <__aeabi_dmul>
   d7a1e:	a374      	add	r3, pc, #464	; (adr r3, d7bf0 <__ieee754_pow+0x528>)
   d7a20:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7a24:	f000 fdf2 	bl	d860c <__adddf3>
   d7a28:	4622      	mov	r2, r4
   d7a2a:	462b      	mov	r3, r5
   d7a2c:	f000 ffa0 	bl	d8970 <__aeabi_dmul>
   d7a30:	a371      	add	r3, pc, #452	; (adr r3, d7bf8 <__ieee754_pow+0x530>)
   d7a32:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7a36:	f000 fde9 	bl	d860c <__adddf3>
   d7a3a:	4622      	mov	r2, r4
   d7a3c:	4606      	mov	r6, r0
   d7a3e:	460f      	mov	r7, r1
   d7a40:	462b      	mov	r3, r5
   d7a42:	4620      	mov	r0, r4
   d7a44:	4629      	mov	r1, r5
   d7a46:	f000 ff93 	bl	d8970 <__aeabi_dmul>
   d7a4a:	4602      	mov	r2, r0
   d7a4c:	460b      	mov	r3, r1
   d7a4e:	4630      	mov	r0, r6
   d7a50:	4639      	mov	r1, r7
   d7a52:	f000 ff8d 	bl	d8970 <__aeabi_dmul>
   d7a56:	4642      	mov	r2, r8
   d7a58:	4604      	mov	r4, r0
   d7a5a:	460d      	mov	r5, r1
   d7a5c:	464b      	mov	r3, r9
   d7a5e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d7a62:	f000 fdd3 	bl	d860c <__adddf3>
   d7a66:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d7a6a:	f000 ff81 	bl	d8970 <__aeabi_dmul>
   d7a6e:	4622      	mov	r2, r4
   d7a70:	462b      	mov	r3, r5
   d7a72:	f000 fdcb 	bl	d860c <__adddf3>
   d7a76:	4642      	mov	r2, r8
   d7a78:	4606      	mov	r6, r0
   d7a7a:	460f      	mov	r7, r1
   d7a7c:	464b      	mov	r3, r9
   d7a7e:	4640      	mov	r0, r8
   d7a80:	4649      	mov	r1, r9
   d7a82:	f000 ff75 	bl	d8970 <__aeabi_dmul>
   d7a86:	2200      	movs	r2, #0
   d7a88:	4b67      	ldr	r3, [pc, #412]	; (d7c28 <__ieee754_pow+0x560>)
   d7a8a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d7a8e:	f000 fdbd 	bl	d860c <__adddf3>
   d7a92:	4632      	mov	r2, r6
   d7a94:	463b      	mov	r3, r7
   d7a96:	f000 fdb9 	bl	d860c <__adddf3>
   d7a9a:	9802      	ldr	r0, [sp, #8]
   d7a9c:	460d      	mov	r5, r1
   d7a9e:	4604      	mov	r4, r0
   d7aa0:	4622      	mov	r2, r4
   d7aa2:	462b      	mov	r3, r5
   d7aa4:	4640      	mov	r0, r8
   d7aa6:	4649      	mov	r1, r9
   d7aa8:	f000 ff62 	bl	d8970 <__aeabi_dmul>
   d7aac:	2200      	movs	r2, #0
   d7aae:	4680      	mov	r8, r0
   d7ab0:	4689      	mov	r9, r1
   d7ab2:	4b5d      	ldr	r3, [pc, #372]	; (d7c28 <__ieee754_pow+0x560>)
   d7ab4:	4620      	mov	r0, r4
   d7ab6:	4629      	mov	r1, r5
   d7ab8:	f000 fda6 	bl	d8608 <__aeabi_dsub>
   d7abc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d7ac0:	f000 fda2 	bl	d8608 <__aeabi_dsub>
   d7ac4:	4602      	mov	r2, r0
   d7ac6:	460b      	mov	r3, r1
   d7ac8:	4630      	mov	r0, r6
   d7aca:	4639      	mov	r1, r7
   d7acc:	f000 fd9c 	bl	d8608 <__aeabi_dsub>
   d7ad0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d7ad4:	f000 ff4c 	bl	d8970 <__aeabi_dmul>
   d7ad8:	4622      	mov	r2, r4
   d7ada:	4606      	mov	r6, r0
   d7adc:	460f      	mov	r7, r1
   d7ade:	462b      	mov	r3, r5
   d7ae0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d7ae4:	f000 ff44 	bl	d8970 <__aeabi_dmul>
   d7ae8:	4602      	mov	r2, r0
   d7aea:	460b      	mov	r3, r1
   d7aec:	4630      	mov	r0, r6
   d7aee:	4639      	mov	r1, r7
   d7af0:	f000 fd8c 	bl	d860c <__adddf3>
   d7af4:	4606      	mov	r6, r0
   d7af6:	460f      	mov	r7, r1
   d7af8:	4602      	mov	r2, r0
   d7afa:	460b      	mov	r3, r1
   d7afc:	4640      	mov	r0, r8
   d7afe:	4649      	mov	r1, r9
   d7b00:	e9cd 8904 	strd	r8, r9, [sp, #16]
   d7b04:	f000 fd82 	bl	d860c <__adddf3>
   d7b08:	9802      	ldr	r0, [sp, #8]
   d7b0a:	a33d      	add	r3, pc, #244	; (adr r3, d7c00 <__ieee754_pow+0x538>)
   d7b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7b10:	4604      	mov	r4, r0
   d7b12:	460d      	mov	r5, r1
   d7b14:	f000 ff2c 	bl	d8970 <__aeabi_dmul>
   d7b18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d7b1c:	4680      	mov	r8, r0
   d7b1e:	4689      	mov	r9, r1
   d7b20:	4620      	mov	r0, r4
   d7b22:	4629      	mov	r1, r5
   d7b24:	f000 fd70 	bl	d8608 <__aeabi_dsub>
   d7b28:	4602      	mov	r2, r0
   d7b2a:	460b      	mov	r3, r1
   d7b2c:	4630      	mov	r0, r6
   d7b2e:	4639      	mov	r1, r7
   d7b30:	f000 fd6a 	bl	d8608 <__aeabi_dsub>
   d7b34:	a334      	add	r3, pc, #208	; (adr r3, d7c08 <__ieee754_pow+0x540>)
   d7b36:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7b3a:	f000 ff19 	bl	d8970 <__aeabi_dmul>
   d7b3e:	a334      	add	r3, pc, #208	; (adr r3, d7c10 <__ieee754_pow+0x548>)
   d7b40:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7b44:	4606      	mov	r6, r0
   d7b46:	460f      	mov	r7, r1
   d7b48:	4620      	mov	r0, r4
   d7b4a:	4629      	mov	r1, r5
   d7b4c:	f000 ff10 	bl	d8970 <__aeabi_dmul>
   d7b50:	4602      	mov	r2, r0
   d7b52:	460b      	mov	r3, r1
   d7b54:	4630      	mov	r0, r6
   d7b56:	4639      	mov	r1, r7
   d7b58:	f000 fd58 	bl	d860c <__adddf3>
   d7b5c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   d7b60:	f000 fd54 	bl	d860c <__adddf3>
   d7b64:	4606      	mov	r6, r0
   d7b66:	980d      	ldr	r0, [sp, #52]	; 0x34
   d7b68:	460f      	mov	r7, r1
   d7b6a:	f000 fe9b 	bl	d88a4 <__aeabi_i2d>
   d7b6e:	4632      	mov	r2, r6
   d7b70:	4604      	mov	r4, r0
   d7b72:	460d      	mov	r5, r1
   d7b74:	463b      	mov	r3, r7
   d7b76:	4640      	mov	r0, r8
   d7b78:	4649      	mov	r1, r9
   d7b7a:	f000 fd47 	bl	d860c <__adddf3>
   d7b7e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d7b82:	f000 fd43 	bl	d860c <__adddf3>
   d7b86:	4622      	mov	r2, r4
   d7b88:	462b      	mov	r3, r5
   d7b8a:	f000 fd3f 	bl	d860c <__adddf3>
   d7b8e:	9802      	ldr	r0, [sp, #8]
   d7b90:	4622      	mov	r2, r4
   d7b92:	462b      	mov	r3, r5
   d7b94:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d7b98:	f000 fd36 	bl	d8608 <__aeabi_dsub>
   d7b9c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d7ba0:	f000 fd32 	bl	d8608 <__aeabi_dsub>
   d7ba4:	4642      	mov	r2, r8
   d7ba6:	464b      	mov	r3, r9
   d7ba8:	f000 fd2e 	bl	d8608 <__aeabi_dsub>
   d7bac:	4602      	mov	r2, r0
   d7bae:	460b      	mov	r3, r1
   d7bb0:	4630      	mov	r0, r6
   d7bb2:	4639      	mov	r1, r7
   d7bb4:	f000 fd28 	bl	d8608 <__aeabi_dsub>
   d7bb8:	4680      	mov	r8, r0
   d7bba:	4689      	mov	r9, r1
   d7bbc:	e036      	b.n	d7c2c <__ieee754_pow+0x564>
   d7bbe:	bf00      	nop
	...
   d7bcc:	3ff00000 	.word	0x3ff00000
   d7bd0:	4a454eef 	.word	0x4a454eef
   d7bd4:	3fca7e28 	.word	0x3fca7e28
   d7bd8:	93c9db65 	.word	0x93c9db65
   d7bdc:	3fcd864a 	.word	0x3fcd864a
   d7be0:	a91d4101 	.word	0xa91d4101
   d7be4:	3fd17460 	.word	0x3fd17460
   d7be8:	518f264d 	.word	0x518f264d
   d7bec:	3fd55555 	.word	0x3fd55555
   d7bf0:	db6fabff 	.word	0xdb6fabff
   d7bf4:	3fdb6db6 	.word	0x3fdb6db6
   d7bf8:	33333303 	.word	0x33333303
   d7bfc:	3fe33333 	.word	0x3fe33333
   d7c00:	e0000000 	.word	0xe0000000
   d7c04:	3feec709 	.word	0x3feec709
   d7c08:	dc3a03fd 	.word	0xdc3a03fd
   d7c0c:	3feec709 	.word	0x3feec709
   d7c10:	145b01f5 	.word	0x145b01f5
   d7c14:	be3e2fe0 	.word	0xbe3e2fe0
   d7c18:	43400000 	.word	0x43400000
   d7c1c:	0003988e 	.word	0x0003988e
   d7c20:	000bb679 	.word	0x000bb679
   d7c24:	3ff00000 	.word	0x3ff00000
   d7c28:	40080000 	.word	0x40080000
   d7c2c:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
   d7c30:	ea53 030a 	orrs.w	r3, r3, sl
   d7c34:	f000 8188 	beq.w	d7f48 <__ieee754_pow+0x880>
   d7c38:	ed9f 7bd7 	vldr	d7, [pc, #860]	; d7f98 <__ieee754_pow+0x8d0>
   d7c3c:	ed8d 7b06 	vstr	d7, [sp, #24]
   d7c40:	e9dd ab00 	ldrd	sl, fp, [sp]
   d7c44:	4653      	mov	r3, sl
   d7c46:	465c      	mov	r4, fp
   d7c48:	e9cd 3400 	strd	r3, r4, [sp]
   d7c4c:	2300      	movs	r3, #0
   d7c4e:	9300      	str	r3, [sp, #0]
   d7c50:	e9dd 4500 	ldrd	r4, r5, [sp]
   d7c54:	4650      	mov	r0, sl
   d7c56:	4622      	mov	r2, r4
   d7c58:	462b      	mov	r3, r5
   d7c5a:	4659      	mov	r1, fp
   d7c5c:	f000 fcd4 	bl	d8608 <__aeabi_dsub>
   d7c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d7c64:	f000 fe84 	bl	d8970 <__aeabi_dmul>
   d7c68:	4652      	mov	r2, sl
   d7c6a:	4606      	mov	r6, r0
   d7c6c:	460f      	mov	r7, r1
   d7c6e:	465b      	mov	r3, fp
   d7c70:	4640      	mov	r0, r8
   d7c72:	4649      	mov	r1, r9
   d7c74:	f000 fe7c 	bl	d8970 <__aeabi_dmul>
   d7c78:	4602      	mov	r2, r0
   d7c7a:	460b      	mov	r3, r1
   d7c7c:	4630      	mov	r0, r6
   d7c7e:	4639      	mov	r1, r7
   d7c80:	f000 fcc4 	bl	d860c <__adddf3>
   d7c84:	4622      	mov	r2, r4
   d7c86:	4680      	mov	r8, r0
   d7c88:	4689      	mov	r9, r1
   d7c8a:	462b      	mov	r3, r5
   d7c8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d7c90:	e9cd 8904 	strd	r8, r9, [sp, #16]
   d7c94:	f000 fe6c 	bl	d8970 <__aeabi_dmul>
   d7c98:	460b      	mov	r3, r1
   d7c9a:	4602      	mov	r2, r0
   d7c9c:	4606      	mov	r6, r0
   d7c9e:	460f      	mov	r7, r1
   d7ca0:	4640      	mov	r0, r8
   d7ca2:	4649      	mov	r1, r9
   d7ca4:	f000 fcb2 	bl	d860c <__adddf3>
   d7ca8:	4bd5      	ldr	r3, [pc, #852]	; (d8000 <__ieee754_pow+0x938>)
   d7caa:	4299      	cmp	r1, r3
   d7cac:	4604      	mov	r4, r0
   d7cae:	460d      	mov	r5, r1
   d7cb0:	468a      	mov	sl, r1
   d7cb2:	f340 8123 	ble.w	d7efc <__ieee754_pow+0x834>
   d7cb6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   d7cba:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   d7cbe:	4303      	orrs	r3, r0
   d7cc0:	f040 8218 	bne.w	d80f4 <__ieee754_pow+0xa2c>
   d7cc4:	a3b6      	add	r3, pc, #728	; (adr r3, d7fa0 <__ieee754_pow+0x8d8>)
   d7cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7cca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d7cce:	f000 fc9d 	bl	d860c <__adddf3>
   d7cd2:	4632      	mov	r2, r6
   d7cd4:	4680      	mov	r8, r0
   d7cd6:	4689      	mov	r9, r1
   d7cd8:	463b      	mov	r3, r7
   d7cda:	4620      	mov	r0, r4
   d7cdc:	4629      	mov	r1, r5
   d7cde:	f000 fc93 	bl	d8608 <__aeabi_dsub>
   d7ce2:	4602      	mov	r2, r0
   d7ce4:	460b      	mov	r3, r1
   d7ce6:	4640      	mov	r0, r8
   d7ce8:	4649      	mov	r1, r9
   d7cea:	f001 f8d1 	bl	d8e90 <__aeabi_dcmpgt>
   d7cee:	2800      	cmp	r0, #0
   d7cf0:	f040 8200 	bne.w	d80f4 <__ieee754_pow+0xa2c>
   d7cf4:	46a8      	mov	r8, r5
   d7cf6:	ea4f 5328 	mov.w	r3, r8, asr #20
   d7cfa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   d7cfe:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   d7d02:	fa42 f303 	asr.w	r3, r2, r3
   d7d06:	4453      	add	r3, sl
   d7d08:	f3c3 520a 	ubfx	r2, r3, #20, #11
   d7d0c:	4dbd      	ldr	r5, [pc, #756]	; (d8004 <__ieee754_pow+0x93c>)
   d7d0e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   d7d12:	4115      	asrs	r5, r2
   d7d14:	f3c3 0b13 	ubfx	fp, r3, #0, #20
   d7d18:	2000      	movs	r0, #0
   d7d1a:	f1c2 0414 	rsb	r4, r2, #20
   d7d1e:	ea23 0105 	bic.w	r1, r3, r5
   d7d22:	f44b 1b80 	orr.w	fp, fp, #1048576	; 0x100000
   d7d26:	f1ba 0f00 	cmp.w	sl, #0
   d7d2a:	4602      	mov	r2, r0
   d7d2c:	460b      	mov	r3, r1
   d7d2e:	fa4b fb04 	asr.w	fp, fp, r4
   d7d32:	4630      	mov	r0, r6
   d7d34:	4639      	mov	r1, r7
   d7d36:	bfb8      	it	lt
   d7d38:	f1cb 0b00 	rsblt	fp, fp, #0
   d7d3c:	f000 fc64 	bl	d8608 <__aeabi_dsub>
   d7d40:	4602      	mov	r2, r0
   d7d42:	460b      	mov	r3, r1
   d7d44:	4606      	mov	r6, r0
   d7d46:	460f      	mov	r7, r1
   d7d48:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d7d4c:	f000 fc5e 	bl	d860c <__adddf3>
   d7d50:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
   d7d54:	2400      	movs	r4, #0
   d7d56:	a394      	add	r3, pc, #592	; (adr r3, d7fa8 <__ieee754_pow+0x8e0>)
   d7d58:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7d5c:	4620      	mov	r0, r4
   d7d5e:	460d      	mov	r5, r1
   d7d60:	f000 fe06 	bl	d8970 <__aeabi_dmul>
   d7d64:	4632      	mov	r2, r6
   d7d66:	4680      	mov	r8, r0
   d7d68:	4689      	mov	r9, r1
   d7d6a:	463b      	mov	r3, r7
   d7d6c:	4620      	mov	r0, r4
   d7d6e:	4629      	mov	r1, r5
   d7d70:	f000 fc4a 	bl	d8608 <__aeabi_dsub>
   d7d74:	4602      	mov	r2, r0
   d7d76:	460b      	mov	r3, r1
   d7d78:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d7d7c:	f000 fc44 	bl	d8608 <__aeabi_dsub>
   d7d80:	a38b      	add	r3, pc, #556	; (adr r3, d7fb0 <__ieee754_pow+0x8e8>)
   d7d82:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7d86:	f000 fdf3 	bl	d8970 <__aeabi_dmul>
   d7d8a:	a38b      	add	r3, pc, #556	; (adr r3, d7fb8 <__ieee754_pow+0x8f0>)
   d7d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7d90:	4606      	mov	r6, r0
   d7d92:	460f      	mov	r7, r1
   d7d94:	4620      	mov	r0, r4
   d7d96:	4629      	mov	r1, r5
   d7d98:	f000 fdea 	bl	d8970 <__aeabi_dmul>
   d7d9c:	4602      	mov	r2, r0
   d7d9e:	460b      	mov	r3, r1
   d7da0:	4630      	mov	r0, r6
   d7da2:	4639      	mov	r1, r7
   d7da4:	f000 fc32 	bl	d860c <__adddf3>
   d7da8:	4606      	mov	r6, r0
   d7daa:	460f      	mov	r7, r1
   d7dac:	4602      	mov	r2, r0
   d7dae:	460b      	mov	r3, r1
   d7db0:	4640      	mov	r0, r8
   d7db2:	4649      	mov	r1, r9
   d7db4:	f000 fc2a 	bl	d860c <__adddf3>
   d7db8:	4642      	mov	r2, r8
   d7dba:	464b      	mov	r3, r9
   d7dbc:	4604      	mov	r4, r0
   d7dbe:	460d      	mov	r5, r1
   d7dc0:	f000 fc22 	bl	d8608 <__aeabi_dsub>
   d7dc4:	4602      	mov	r2, r0
   d7dc6:	460b      	mov	r3, r1
   d7dc8:	4630      	mov	r0, r6
   d7dca:	4639      	mov	r1, r7
   d7dcc:	f000 fc1c 	bl	d8608 <__aeabi_dsub>
   d7dd0:	4622      	mov	r2, r4
   d7dd2:	4680      	mov	r8, r0
   d7dd4:	4689      	mov	r9, r1
   d7dd6:	462b      	mov	r3, r5
   d7dd8:	4620      	mov	r0, r4
   d7dda:	4629      	mov	r1, r5
   d7ddc:	f000 fdc8 	bl	d8970 <__aeabi_dmul>
   d7de0:	a377      	add	r3, pc, #476	; (adr r3, d7fc0 <__ieee754_pow+0x8f8>)
   d7de2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7de6:	4606      	mov	r6, r0
   d7de8:	460f      	mov	r7, r1
   d7dea:	f000 fdc1 	bl	d8970 <__aeabi_dmul>
   d7dee:	a376      	add	r3, pc, #472	; (adr r3, d7fc8 <__ieee754_pow+0x900>)
   d7df0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7df4:	f000 fc08 	bl	d8608 <__aeabi_dsub>
   d7df8:	4632      	mov	r2, r6
   d7dfa:	463b      	mov	r3, r7
   d7dfc:	f000 fdb8 	bl	d8970 <__aeabi_dmul>
   d7e00:	a373      	add	r3, pc, #460	; (adr r3, d7fd0 <__ieee754_pow+0x908>)
   d7e02:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7e06:	f000 fc01 	bl	d860c <__adddf3>
   d7e0a:	4632      	mov	r2, r6
   d7e0c:	463b      	mov	r3, r7
   d7e0e:	f000 fdaf 	bl	d8970 <__aeabi_dmul>
   d7e12:	a371      	add	r3, pc, #452	; (adr r3, d7fd8 <__ieee754_pow+0x910>)
   d7e14:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7e18:	f000 fbf6 	bl	d8608 <__aeabi_dsub>
   d7e1c:	4632      	mov	r2, r6
   d7e1e:	463b      	mov	r3, r7
   d7e20:	f000 fda6 	bl	d8970 <__aeabi_dmul>
   d7e24:	a36e      	add	r3, pc, #440	; (adr r3, d7fe0 <__ieee754_pow+0x918>)
   d7e26:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7e2a:	f000 fbef 	bl	d860c <__adddf3>
   d7e2e:	4632      	mov	r2, r6
   d7e30:	463b      	mov	r3, r7
   d7e32:	f000 fd9d 	bl	d8970 <__aeabi_dmul>
   d7e36:	4602      	mov	r2, r0
   d7e38:	460b      	mov	r3, r1
   d7e3a:	4620      	mov	r0, r4
   d7e3c:	4629      	mov	r1, r5
   d7e3e:	f000 fbe3 	bl	d8608 <__aeabi_dsub>
   d7e42:	4606      	mov	r6, r0
   d7e44:	460f      	mov	r7, r1
   d7e46:	4602      	mov	r2, r0
   d7e48:	460b      	mov	r3, r1
   d7e4a:	4620      	mov	r0, r4
   d7e4c:	4629      	mov	r1, r5
   d7e4e:	f000 fd8f 	bl	d8970 <__aeabi_dmul>
   d7e52:	2200      	movs	r2, #0
   d7e54:	e9cd 0100 	strd	r0, r1, [sp]
   d7e58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d7e5c:	4630      	mov	r0, r6
   d7e5e:	4639      	mov	r1, r7
   d7e60:	f000 fbd2 	bl	d8608 <__aeabi_dsub>
   d7e64:	4602      	mov	r2, r0
   d7e66:	460b      	mov	r3, r1
   d7e68:	e9dd 0100 	ldrd	r0, r1, [sp]
   d7e6c:	f000 feaa 	bl	d8bc4 <__aeabi_ddiv>
   d7e70:	4642      	mov	r2, r8
   d7e72:	4606      	mov	r6, r0
   d7e74:	460f      	mov	r7, r1
   d7e76:	464b      	mov	r3, r9
   d7e78:	4620      	mov	r0, r4
   d7e7a:	4629      	mov	r1, r5
   d7e7c:	f000 fd78 	bl	d8970 <__aeabi_dmul>
   d7e80:	4642      	mov	r2, r8
   d7e82:	464b      	mov	r3, r9
   d7e84:	f000 fbc2 	bl	d860c <__adddf3>
   d7e88:	4602      	mov	r2, r0
   d7e8a:	460b      	mov	r3, r1
   d7e8c:	4630      	mov	r0, r6
   d7e8e:	4639      	mov	r1, r7
   d7e90:	f000 fbba 	bl	d8608 <__aeabi_dsub>
   d7e94:	4622      	mov	r2, r4
   d7e96:	462b      	mov	r3, r5
   d7e98:	f000 fbb6 	bl	d8608 <__aeabi_dsub>
   d7e9c:	4602      	mov	r2, r0
   d7e9e:	460b      	mov	r3, r1
   d7ea0:	2000      	movs	r0, #0
   d7ea2:	4959      	ldr	r1, [pc, #356]	; (d8008 <__ieee754_pow+0x940>)
   d7ea4:	f000 fbb0 	bl	d8608 <__aeabi_dsub>
   d7ea8:	448a      	add	sl, r1
   d7eaa:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
   d7eae:	4602      	mov	r2, r0
   d7eb0:	460b      	mov	r3, r1
   d7eb2:	f2c0 815b 	blt.w	d816c <__ieee754_pow+0xaa4>
   d7eb6:	4651      	mov	r1, sl
   d7eb8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d7ebc:	f000 fd58 	bl	d8970 <__aeabi_dmul>
   d7ec0:	ec41 0b10 	vmov	d0, r0, r1
   d7ec4:	e449      	b.n	d775a <__ieee754_pow+0x92>
   d7ec6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
   d7eca:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
   d7ece:	ea54 030b 	orrs.w	r3, r4, fp
   d7ed2:	f000 8137 	beq.w	d8144 <__ieee754_pow+0xa7c>
   d7ed6:	f1bb 0f01 	cmp.w	fp, #1
   d7eda:	f47f ac80 	bne.w	d77de <__ieee754_pow+0x116>
   d7ede:	4602      	mov	r2, r0
   d7ee0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d7ee4:	ec43 2b10 	vmov	d0, r2, r3
   d7ee8:	e437      	b.n	d775a <__ieee754_pow+0x92>
   d7eea:	4632      	mov	r2, r6
   d7eec:	463b      	mov	r3, r7
   d7eee:	4630      	mov	r0, r6
   d7ef0:	4639      	mov	r1, r7
   d7ef2:	f000 fd3d 	bl	d8970 <__aeabi_dmul>
   d7ef6:	ec41 0b10 	vmov	d0, r0, r1
   d7efa:	e42e      	b.n	d775a <__ieee754_pow+0x92>
   d7efc:	4b43      	ldr	r3, [pc, #268]	; (d800c <__ieee754_pow+0x944>)
   d7efe:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   d7f02:	4598      	cmp	r8, r3
   d7f04:	f340 8115 	ble.w	d8132 <__ieee754_pow+0xa6a>
   d7f08:	4b41      	ldr	r3, [pc, #260]	; (d8010 <__ieee754_pow+0x948>)
   d7f0a:	440b      	add	r3, r1
   d7f0c:	4303      	orrs	r3, r0
   d7f0e:	d10c      	bne.n	d7f2a <__ieee754_pow+0x862>
   d7f10:	4632      	mov	r2, r6
   d7f12:	463b      	mov	r3, r7
   d7f14:	f000 fb78 	bl	d8608 <__aeabi_dsub>
   d7f18:	4602      	mov	r2, r0
   d7f1a:	460b      	mov	r3, r1
   d7f1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d7f20:	f000 ffa2 	bl	d8e68 <__aeabi_dcmple>
   d7f24:	2800      	cmp	r0, #0
   d7f26:	f43f aee6 	beq.w	d7cf6 <__ieee754_pow+0x62e>
   d7f2a:	a32f      	add	r3, pc, #188	; (adr r3, d7fe8 <__ieee754_pow+0x920>)
   d7f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7f30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d7f34:	f000 fd1c 	bl	d8970 <__aeabi_dmul>
   d7f38:	a32b      	add	r3, pc, #172	; (adr r3, d7fe8 <__ieee754_pow+0x920>)
   d7f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7f3e:	f000 fd17 	bl	d8970 <__aeabi_dmul>
   d7f42:	ec41 0b10 	vmov	d0, r0, r1
   d7f46:	e408      	b.n	d775a <__ieee754_pow+0x92>
   d7f48:	ed9f 7b29 	vldr	d7, [pc, #164]	; d7ff0 <__ieee754_pow+0x928>
   d7f4c:	ed8d 7b06 	vstr	d7, [sp, #24]
   d7f50:	e676      	b.n	d7c40 <__ieee754_pow+0x578>
   d7f52:	f1b9 0f00 	cmp.w	r9, #0
   d7f56:	f6bf ac8e 	bge.w	d7876 <__ieee754_pow+0x1ae>
   d7f5a:	e9dd 3400 	ldrd	r3, r4, [sp]
   d7f5e:	ee00 3a10 	vmov	s0, r3
   d7f62:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
   d7f66:	ee00 3a90 	vmov	s1, r3
   d7f6a:	f7ff bbf6 	b.w	d775a <__ieee754_pow+0x92>
   d7f6e:	4602      	mov	r2, r0
   d7f70:	460b      	mov	r3, r1
   d7f72:	2000      	movs	r0, #0
   d7f74:	4924      	ldr	r1, [pc, #144]	; (d8008 <__ieee754_pow+0x940>)
   d7f76:	f000 fe25 	bl	d8bc4 <__aeabi_ddiv>
   d7f7a:	e42d      	b.n	d77d8 <__ieee754_pow+0x110>
   d7f7c:	ed9f 7b1e 	vldr	d7, [pc, #120]	; d7ff8 <__ieee754_pow+0x930>
   d7f80:	ed8d 7b08 	vstr	d7, [sp, #32]
   d7f84:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d7f88:	ed9f 7b03 	vldr	d7, [pc, #12]	; d7f98 <__ieee754_pow+0x8d0>
   d7f8c:	f04f 0800 	mov.w	r8, #0
   d7f90:	ed8d 7b06 	vstr	d7, [sp, #24]
   d7f94:	e4be      	b.n	d7914 <__ieee754_pow+0x24c>
   d7f96:	bf00      	nop
   d7f98:	00000000 	.word	0x00000000
   d7f9c:	3ff00000 	.word	0x3ff00000
   d7fa0:	652b82fe 	.word	0x652b82fe
   d7fa4:	3c971547 	.word	0x3c971547
   d7fa8:	00000000 	.word	0x00000000
   d7fac:	3fe62e43 	.word	0x3fe62e43
   d7fb0:	fefa39ef 	.word	0xfefa39ef
   d7fb4:	3fe62e42 	.word	0x3fe62e42
   d7fb8:	0ca86c39 	.word	0x0ca86c39
   d7fbc:	be205c61 	.word	0xbe205c61
   d7fc0:	72bea4d0 	.word	0x72bea4d0
   d7fc4:	3e663769 	.word	0x3e663769
   d7fc8:	c5d26bf1 	.word	0xc5d26bf1
   d7fcc:	3ebbbd41 	.word	0x3ebbbd41
   d7fd0:	af25de2c 	.word	0xaf25de2c
   d7fd4:	3f11566a 	.word	0x3f11566a
   d7fd8:	16bebd93 	.word	0x16bebd93
   d7fdc:	3f66c16c 	.word	0x3f66c16c
   d7fe0:	5555553e 	.word	0x5555553e
   d7fe4:	3fc55555 	.word	0x3fc55555
   d7fe8:	c2f8f359 	.word	0xc2f8f359
   d7fec:	01a56e1f 	.word	0x01a56e1f
   d7ff0:	00000000 	.word	0x00000000
   d7ff4:	bff00000 	.word	0xbff00000
	...
   d8000:	408fffff 	.word	0x408fffff
   d8004:	000fffff 	.word	0x000fffff
   d8008:	3ff00000 	.word	0x3ff00000
   d800c:	4090cbff 	.word	0x4090cbff
   d8010:	3f6f3400 	.word	0x3f6f3400
   d8014:	4b6c      	ldr	r3, [pc, #432]	; (d81c8 <__ieee754_pow+0xb00>)
   d8016:	429c      	cmp	r4, r3
   d8018:	f77f ac2a 	ble.w	d7870 <__ieee754_pow+0x1a8>
   d801c:	4b6b      	ldr	r3, [pc, #428]	; (d81cc <__ieee754_pow+0xb04>)
   d801e:	429c      	cmp	r4, r3
   d8020:	f73f abc3 	bgt.w	d77aa <__ieee754_pow+0xe2>
   d8024:	2200      	movs	r2, #0
   d8026:	4b69      	ldr	r3, [pc, #420]	; (d81cc <__ieee754_pow+0xb04>)
   d8028:	f000 faee 	bl	d8608 <__aeabi_dsub>
   d802c:	a356      	add	r3, pc, #344	; (adr r3, d8188 <__ieee754_pow+0xac0>)
   d802e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8032:	4604      	mov	r4, r0
   d8034:	460d      	mov	r5, r1
   d8036:	f000 fc9b 	bl	d8970 <__aeabi_dmul>
   d803a:	a355      	add	r3, pc, #340	; (adr r3, d8190 <__ieee754_pow+0xac8>)
   d803c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8040:	4680      	mov	r8, r0
   d8042:	4689      	mov	r9, r1
   d8044:	4620      	mov	r0, r4
   d8046:	4629      	mov	r1, r5
   d8048:	f000 fc92 	bl	d8970 <__aeabi_dmul>
   d804c:	2200      	movs	r2, #0
   d804e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d8052:	4b5f      	ldr	r3, [pc, #380]	; (d81d0 <__ieee754_pow+0xb08>)
   d8054:	4620      	mov	r0, r4
   d8056:	4629      	mov	r1, r5
   d8058:	f000 fc8a 	bl	d8970 <__aeabi_dmul>
   d805c:	4602      	mov	r2, r0
   d805e:	460b      	mov	r3, r1
   d8060:	a14d      	add	r1, pc, #308	; (adr r1, d8198 <__ieee754_pow+0xad0>)
   d8062:	e9d1 0100 	ldrd	r0, r1, [r1]
   d8066:	f000 facf 	bl	d8608 <__aeabi_dsub>
   d806a:	4622      	mov	r2, r4
   d806c:	462b      	mov	r3, r5
   d806e:	f000 fc7f 	bl	d8970 <__aeabi_dmul>
   d8072:	4602      	mov	r2, r0
   d8074:	460b      	mov	r3, r1
   d8076:	2000      	movs	r0, #0
   d8078:	4956      	ldr	r1, [pc, #344]	; (d81d4 <__ieee754_pow+0xb0c>)
   d807a:	f000 fac5 	bl	d8608 <__aeabi_dsub>
   d807e:	4622      	mov	r2, r4
   d8080:	462b      	mov	r3, r5
   d8082:	4606      	mov	r6, r0
   d8084:	460f      	mov	r7, r1
   d8086:	4620      	mov	r0, r4
   d8088:	4629      	mov	r1, r5
   d808a:	f000 fc71 	bl	d8970 <__aeabi_dmul>
   d808e:	4602      	mov	r2, r0
   d8090:	460b      	mov	r3, r1
   d8092:	4630      	mov	r0, r6
   d8094:	4639      	mov	r1, r7
   d8096:	f000 fc6b 	bl	d8970 <__aeabi_dmul>
   d809a:	a341      	add	r3, pc, #260	; (adr r3, d81a0 <__ieee754_pow+0xad8>)
   d809c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d80a0:	f000 fc66 	bl	d8970 <__aeabi_dmul>
   d80a4:	4602      	mov	r2, r0
   d80a6:	460b      	mov	r3, r1
   d80a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d80ac:	f000 faac 	bl	d8608 <__aeabi_dsub>
   d80b0:	4602      	mov	r2, r0
   d80b2:	460b      	mov	r3, r1
   d80b4:	4604      	mov	r4, r0
   d80b6:	460d      	mov	r5, r1
   d80b8:	4640      	mov	r0, r8
   d80ba:	4649      	mov	r1, r9
   d80bc:	f000 faa6 	bl	d860c <__adddf3>
   d80c0:	4642      	mov	r2, r8
   d80c2:	464b      	mov	r3, r9
   d80c4:	2000      	movs	r0, #0
   d80c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d80ca:	f000 fa9d 	bl	d8608 <__aeabi_dsub>
   d80ce:	4602      	mov	r2, r0
   d80d0:	460b      	mov	r3, r1
   d80d2:	4620      	mov	r0, r4
   d80d4:	4629      	mov	r1, r5
   d80d6:	f000 fa97 	bl	d8608 <__aeabi_dsub>
   d80da:	4680      	mov	r8, r0
   d80dc:	4689      	mov	r9, r1
   d80de:	e5a5      	b.n	d7c2c <__ieee754_pow+0x564>
   d80e0:	4632      	mov	r2, r6
   d80e2:	463b      	mov	r3, r7
   d80e4:	2000      	movs	r0, #0
   d80e6:	4939      	ldr	r1, [pc, #228]	; (d81cc <__ieee754_pow+0xb04>)
   d80e8:	f000 fd6c 	bl	d8bc4 <__aeabi_ddiv>
   d80ec:	ec41 0b10 	vmov	d0, r0, r1
   d80f0:	f7ff bb33 	b.w	d775a <__ieee754_pow+0x92>
   d80f4:	a32c      	add	r3, pc, #176	; (adr r3, d81a8 <__ieee754_pow+0xae0>)
   d80f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d80fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d80fe:	f000 fc37 	bl	d8970 <__aeabi_dmul>
   d8102:	a329      	add	r3, pc, #164	; (adr r3, d81a8 <__ieee754_pow+0xae0>)
   d8104:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8108:	f000 fc32 	bl	d8970 <__aeabi_dmul>
   d810c:	ec41 0b10 	vmov	d0, r0, r1
   d8110:	f7ff bb23 	b.w	d775a <__ieee754_pow+0x92>
   d8114:	f1be 0f00 	cmp.w	lr, #0
   d8118:	f47f ab2a 	bne.w	d7770 <__ieee754_pow+0xa8>
   d811c:	f1c3 0314 	rsb	r3, r3, #20
   d8120:	fa48 f203 	asr.w	r2, r8, r3
   d8124:	fa02 f303 	lsl.w	r3, r2, r3
   d8128:	4598      	cmp	r8, r3
   d812a:	d027      	beq.n	d817c <__ieee754_pow+0xab4>
   d812c:	46f3      	mov	fp, lr
   d812e:	f7ff baf7 	b.w	d7720 <__ieee754_pow+0x58>
   d8132:	4b28      	ldr	r3, [pc, #160]	; (d81d4 <__ieee754_pow+0xb0c>)
   d8134:	4598      	cmp	r8, r3
   d8136:	f73f adde 	bgt.w	d7cf6 <__ieee754_pow+0x62e>
   d813a:	e9dd 3400 	ldrd	r3, r4, [sp]
   d813e:	469a      	mov	sl, r3
   d8140:	469b      	mov	fp, r3
   d8142:	e607      	b.n	d7d54 <__ieee754_pow+0x68c>
   d8144:	4602      	mov	r2, r0
   d8146:	460b      	mov	r3, r1
   d8148:	f7ff bb89 	b.w	d785e <__ieee754_pow+0x196>
   d814c:	ed9f 7b18 	vldr	d7, [pc, #96]	; d81b0 <__ieee754_pow+0xae8>
   d8150:	ed8d 7b08 	vstr	d7, [sp, #32]
   d8154:	ed9f 7b18 	vldr	d7, [pc, #96]	; d81b8 <__ieee754_pow+0xaf0>
   d8158:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d815c:	ed9f 7b18 	vldr	d7, [pc, #96]	; d81c0 <__ieee754_pow+0xaf8>
   d8160:	f44f 2880 	mov.w	r8, #262144	; 0x40000
   d8164:	ed8d 7b06 	vstr	d7, [sp, #24]
   d8168:	f7ff bbd4 	b.w	d7914 <__ieee754_pow+0x24c>
   d816c:	4658      	mov	r0, fp
   d816e:	ec43 2b10 	vmov	d0, r2, r3
   d8172:	f000 f9b1 	bl	d84d8 <scalbn>
   d8176:	ec51 0b10 	vmov	r0, r1, d0
   d817a:	e69d      	b.n	d7eb8 <__ieee754_pow+0x7f0>
   d817c:	f002 0201 	and.w	r2, r2, #1
   d8180:	f1c2 0b02 	rsb	fp, r2, #2
   d8184:	f7ff bacc 	b.w	d7720 <__ieee754_pow+0x58>
   d8188:	60000000 	.word	0x60000000
   d818c:	3ff71547 	.word	0x3ff71547
   d8190:	f85ddf44 	.word	0xf85ddf44
   d8194:	3e54ae0b 	.word	0x3e54ae0b
   d8198:	55555555 	.word	0x55555555
   d819c:	3fd55555 	.word	0x3fd55555
   d81a0:	652b82fe 	.word	0x652b82fe
   d81a4:	3ff71547 	.word	0x3ff71547
   d81a8:	8800759c 	.word	0x8800759c
   d81ac:	7e37e43c 	.word	0x7e37e43c
   d81b0:	40000000 	.word	0x40000000
   d81b4:	3fe2b803 	.word	0x3fe2b803
   d81b8:	43cfd006 	.word	0x43cfd006
   d81bc:	3e4cfdeb 	.word	0x3e4cfdeb
   d81c0:	00000000 	.word	0x00000000
   d81c4:	3ff80000 	.word	0x3ff80000
   d81c8:	3feffffe 	.word	0x3feffffe
   d81cc:	3ff00000 	.word	0x3ff00000
   d81d0:	3fd00000 	.word	0x3fd00000
   d81d4:	3fe00000 	.word	0x3fe00000

000d81d8 <__ieee754_sqrt>:
   d81d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d81dc:	4965      	ldr	r1, [pc, #404]	; (d8374 <__ieee754_sqrt+0x19c>)
   d81de:	ec55 4b10 	vmov	r4, r5, d0
   d81e2:	460e      	mov	r6, r1
   d81e4:	4029      	ands	r1, r5
   d81e6:	42b1      	cmp	r1, r6
   d81e8:	f000 8097 	beq.w	d831a <__ieee754_sqrt+0x142>
   d81ec:	2d00      	cmp	r5, #0
   d81ee:	462b      	mov	r3, r5
   d81f0:	ee10 2a10 	vmov	r2, s0
   d81f4:	dd74      	ble.n	d82e0 <__ieee754_sqrt+0x108>
   d81f6:	152f      	asrs	r7, r5, #20
   d81f8:	d07f      	beq.n	d82fa <__ieee754_sqrt+0x122>
   d81fa:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   d81fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
   d8202:	07f9      	lsls	r1, r7, #31
   d8204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8208:	d465      	bmi.n	d82d6 <__ieee754_sqrt+0xfe>
   d820a:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
   d820e:	2600      	movs	r6, #0
   d8210:	440b      	add	r3, r1
   d8212:	107f      	asrs	r7, r7, #1
   d8214:	0052      	lsls	r2, r2, #1
   d8216:	46b6      	mov	lr, r6
   d8218:	2016      	movs	r0, #22
   d821a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   d821e:	eb0e 0401 	add.w	r4, lr, r1
   d8222:	429c      	cmp	r4, r3
   d8224:	ea4f 75d2 	mov.w	r5, r2, lsr #31
   d8228:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d822c:	dc03      	bgt.n	d8236 <__ieee754_sqrt+0x5e>
   d822e:	1b1b      	subs	r3, r3, r4
   d8230:	eb04 0e01 	add.w	lr, r4, r1
   d8234:	440e      	add	r6, r1
   d8236:	3801      	subs	r0, #1
   d8238:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   d823c:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d8240:	d1ed      	bne.n	d821e <__ieee754_sqrt+0x46>
   d8242:	4684      	mov	ip, r0
   d8244:	2420      	movs	r4, #32
   d8246:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   d824a:	e009      	b.n	d8260 <__ieee754_sqrt+0x88>
   d824c:	d020      	beq.n	d8290 <__ieee754_sqrt+0xb8>
   d824e:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   d8252:	3c01      	subs	r4, #1
   d8254:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d8258:	442b      	add	r3, r5
   d825a:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d825e:	d020      	beq.n	d82a2 <__ieee754_sqrt+0xca>
   d8260:	459e      	cmp	lr, r3
   d8262:	eb01 050c 	add.w	r5, r1, ip
   d8266:	daf1      	bge.n	d824c <__ieee754_sqrt+0x74>
   d8268:	2d00      	cmp	r5, #0
   d826a:	eb05 0c01 	add.w	ip, r5, r1
   d826e:	db09      	blt.n	d8284 <__ieee754_sqrt+0xac>
   d8270:	46f0      	mov	r8, lr
   d8272:	4295      	cmp	r5, r2
   d8274:	ebce 0303 	rsb	r3, lr, r3
   d8278:	d900      	bls.n	d827c <__ieee754_sqrt+0xa4>
   d827a:	3b01      	subs	r3, #1
   d827c:	1b52      	subs	r2, r2, r5
   d827e:	4408      	add	r0, r1
   d8280:	46c6      	mov	lr, r8
   d8282:	e7e4      	b.n	d824e <__ieee754_sqrt+0x76>
   d8284:	f1bc 0f00 	cmp.w	ip, #0
   d8288:	dbf2      	blt.n	d8270 <__ieee754_sqrt+0x98>
   d828a:	f10e 0801 	add.w	r8, lr, #1
   d828e:	e7f0      	b.n	d8272 <__ieee754_sqrt+0x9a>
   d8290:	4295      	cmp	r5, r2
   d8292:	d81e      	bhi.n	d82d2 <__ieee754_sqrt+0xfa>
   d8294:	2d00      	cmp	r5, #0
   d8296:	eb05 0c01 	add.w	ip, r5, r1
   d829a:	db50      	blt.n	d833e <__ieee754_sqrt+0x166>
   d829c:	4698      	mov	r8, r3
   d829e:	2300      	movs	r3, #0
   d82a0:	e7ec      	b.n	d827c <__ieee754_sqrt+0xa4>
   d82a2:	4313      	orrs	r3, r2
   d82a4:	d004      	beq.n	d82b0 <__ieee754_sqrt+0xd8>
   d82a6:	1c42      	adds	r2, r0, #1
   d82a8:	d04d      	beq.n	d8346 <__ieee754_sqrt+0x16e>
   d82aa:	f000 0301 	and.w	r3, r0, #1
   d82ae:	4418      	add	r0, r3
   d82b0:	0840      	lsrs	r0, r0, #1
   d82b2:	1071      	asrs	r1, r6, #1
   d82b4:	07f3      	lsls	r3, r6, #31
   d82b6:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   d82ba:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   d82be:	bf48      	it	mi
   d82c0:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   d82c4:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   d82c8:	4602      	mov	r2, r0
   d82ca:	ec43 2b10 	vmov	d0, r2, r3
   d82ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d82d2:	4673      	mov	r3, lr
   d82d4:	e7bb      	b.n	d824e <__ieee754_sqrt+0x76>
   d82d6:	005b      	lsls	r3, r3, #1
   d82d8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   d82dc:	0052      	lsls	r2, r2, #1
   d82de:	e794      	b.n	d820a <__ieee754_sqrt+0x32>
   d82e0:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
   d82e4:	4321      	orrs	r1, r4
   d82e6:	d028      	beq.n	d833a <__ieee754_sqrt+0x162>
   d82e8:	bbad      	cbnz	r5, d8356 <__ieee754_sqrt+0x17e>
   d82ea:	462f      	mov	r7, r5
   d82ec:	0ad3      	lsrs	r3, r2, #11
   d82ee:	3f15      	subs	r7, #21
   d82f0:	0552      	lsls	r2, r2, #21
   d82f2:	2b00      	cmp	r3, #0
   d82f4:	d0fa      	beq.n	d82ec <__ieee754_sqrt+0x114>
   d82f6:	02dd      	lsls	r5, r3, #11
   d82f8:	d428      	bmi.n	d834c <__ieee754_sqrt+0x174>
   d82fa:	2100      	movs	r1, #0
   d82fc:	e000      	b.n	d8300 <__ieee754_sqrt+0x128>
   d82fe:	4601      	mov	r1, r0
   d8300:	005b      	lsls	r3, r3, #1
   d8302:	02dc      	lsls	r4, r3, #11
   d8304:	f101 0001 	add.w	r0, r1, #1
   d8308:	d5f9      	bpl.n	d82fe <__ieee754_sqrt+0x126>
   d830a:	f1c0 0420 	rsb	r4, r0, #32
   d830e:	fa22 f404 	lsr.w	r4, r2, r4
   d8312:	4323      	orrs	r3, r4
   d8314:	1a7f      	subs	r7, r7, r1
   d8316:	4082      	lsls	r2, r0
   d8318:	e76f      	b.n	d81fa <__ieee754_sqrt+0x22>
   d831a:	ee10 2a10 	vmov	r2, s0
   d831e:	462b      	mov	r3, r5
   d8320:	ee10 0a10 	vmov	r0, s0
   d8324:	4629      	mov	r1, r5
   d8326:	f000 fb23 	bl	d8970 <__aeabi_dmul>
   d832a:	4622      	mov	r2, r4
   d832c:	462b      	mov	r3, r5
   d832e:	f000 f96d 	bl	d860c <__adddf3>
   d8332:	ec41 0b10 	vmov	d0, r0, r1
   d8336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d833a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d833e:	f1bc 0f00 	cmp.w	ip, #0
   d8342:	daa2      	bge.n	d828a <__ieee754_sqrt+0xb2>
   d8344:	e7aa      	b.n	d829c <__ieee754_sqrt+0xc4>
   d8346:	3601      	adds	r6, #1
   d8348:	4620      	mov	r0, r4
   d834a:	e7b2      	b.n	d82b2 <__ieee754_sqrt+0xda>
   d834c:	2420      	movs	r4, #32
   d834e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d8352:	2000      	movs	r0, #0
   d8354:	e7db      	b.n	d830e <__ieee754_sqrt+0x136>
   d8356:	ee10 2a10 	vmov	r2, s0
   d835a:	462b      	mov	r3, r5
   d835c:	4620      	mov	r0, r4
   d835e:	4629      	mov	r1, r5
   d8360:	f000 f952 	bl	d8608 <__aeabi_dsub>
   d8364:	4602      	mov	r2, r0
   d8366:	460b      	mov	r3, r1
   d8368:	f000 fc2c 	bl	d8bc4 <__aeabi_ddiv>
   d836c:	ec41 0b10 	vmov	d0, r0, r1
   d8370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8374:	7ff00000 	.word	0x7ff00000

000d8378 <fabs>:
   d8378:	ec53 2b10 	vmov	r2, r3, d0
   d837c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   d8380:	ec43 2b10 	vmov	d0, r2, r3
   d8384:	4770      	bx	lr
   d8386:	bf00      	nop

000d8388 <finite>:
   d8388:	ee10 3a90 	vmov	r3, s1
   d838c:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
   d8390:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   d8394:	0fc0      	lsrs	r0, r0, #31
   d8396:	4770      	bx	lr

000d8398 <matherr>:
   d8398:	2000      	movs	r0, #0
   d839a:	4770      	bx	lr
   d839c:	0000      	movs	r0, r0
	...

000d83a0 <nan>:
   d83a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; d83a8 <nan+0x8>
   d83a4:	4770      	bx	lr
   d83a6:	bf00      	nop
   d83a8:	00000000 	.word	0x00000000
   d83ac:	7ff80000 	.word	0x7ff80000

000d83b0 <rint>:
   d83b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d83b2:	ec53 2b10 	vmov	r2, r3, d0
   d83b6:	f3c3 560a 	ubfx	r6, r3, #20, #11
   d83ba:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   d83be:	2813      	cmp	r0, #19
   d83c0:	b083      	sub	sp, #12
   d83c2:	4619      	mov	r1, r3
   d83c4:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   d83c8:	ee10 5a10 	vmov	r5, s0
   d83cc:	dc2f      	bgt.n	d842e <rint+0x7e>
   d83ce:	2800      	cmp	r0, #0
   d83d0:	db49      	blt.n	d8466 <rint+0xb6>
   d83d2:	4e3f      	ldr	r6, [pc, #252]	; (d84d0 <rint+0x120>)
   d83d4:	4106      	asrs	r6, r0
   d83d6:	ea03 0706 	and.w	r7, r3, r6
   d83da:	4317      	orrs	r7, r2
   d83dc:	d02c      	beq.n	d8438 <rint+0x88>
   d83de:	0876      	lsrs	r6, r6, #1
   d83e0:	4033      	ands	r3, r6
   d83e2:	431d      	orrs	r5, r3
   d83e4:	d00c      	beq.n	d8400 <rint+0x50>
   d83e6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   d83ea:	2813      	cmp	r0, #19
   d83ec:	ea21 0606 	bic.w	r6, r1, r6
   d83f0:	fa43 f100 	asr.w	r1, r3, r0
   d83f4:	ea41 0106 	orr.w	r1, r1, r6
   d83f8:	bf0c      	ite	eq
   d83fa:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   d83fe:	2500      	movne	r5, #0
   d8400:	4834      	ldr	r0, [pc, #208]	; (d84d4 <rint+0x124>)
   d8402:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   d8406:	462a      	mov	r2, r5
   d8408:	e9d4 4500 	ldrd	r4, r5, [r4]
   d840c:	4610      	mov	r0, r2
   d840e:	462b      	mov	r3, r5
   d8410:	4622      	mov	r2, r4
   d8412:	f000 f8fb 	bl	d860c <__adddf3>
   d8416:	e9cd 0100 	strd	r0, r1, [sp]
   d841a:	4622      	mov	r2, r4
   d841c:	462b      	mov	r3, r5
   d841e:	e9dd 0100 	ldrd	r0, r1, [sp]
   d8422:	f000 f8f1 	bl	d8608 <__aeabi_dsub>
   d8426:	ec41 0b10 	vmov	d0, r0, r1
   d842a:	b003      	add	sp, #12
   d842c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d842e:	2833      	cmp	r0, #51	; 0x33
   d8430:	dd06      	ble.n	d8440 <rint+0x90>
   d8432:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   d8436:	d042      	beq.n	d84be <rint+0x10e>
   d8438:	ec43 2b10 	vmov	d0, r2, r3
   d843c:	b003      	add	sp, #12
   d843e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8440:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   d8444:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d8448:	40f0      	lsrs	r0, r6
   d844a:	4202      	tst	r2, r0
   d844c:	d0f4      	beq.n	d8438 <rint+0x88>
   d844e:	0840      	lsrs	r0, r0, #1
   d8450:	4202      	tst	r2, r0
   d8452:	d0d5      	beq.n	d8400 <rint+0x50>
   d8454:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d8458:	ea25 0000 	bic.w	r0, r5, r0
   d845c:	fa43 f606 	asr.w	r6, r3, r6
   d8460:	ea46 0500 	orr.w	r5, r6, r0
   d8464:	e7cc      	b.n	d8400 <rint+0x50>
   d8466:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   d846a:	4310      	orrs	r0, r2
   d846c:	ee10 7a10 	vmov	r7, s0
   d8470:	d0e2      	beq.n	d8438 <rint+0x88>
   d8472:	f3c3 0013 	ubfx	r0, r3, #0, #20
   d8476:	4307      	orrs	r7, r0
   d8478:	4278      	negs	r0, r7
   d847a:	4307      	orrs	r7, r0
   d847c:	4815      	ldr	r0, [pc, #84]	; (d84d4 <rint+0x124>)
   d847e:	0c59      	lsrs	r1, r3, #17
   d8480:	0b3f      	lsrs	r7, r7, #12
   d8482:	0449      	lsls	r1, r1, #17
   d8484:	f407 2700 	and.w	r7, r7, #524288	; 0x80000
   d8488:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   d848c:	ea47 0301 	orr.w	r3, r7, r1
   d8490:	e9d0 6700 	ldrd	r6, r7, [r0]
   d8494:	4619      	mov	r1, r3
   d8496:	4610      	mov	r0, r2
   d8498:	463b      	mov	r3, r7
   d849a:	4632      	mov	r2, r6
   d849c:	f000 f8b6 	bl	d860c <__adddf3>
   d84a0:	e9cd 0100 	strd	r0, r1, [sp]
   d84a4:	463b      	mov	r3, r7
   d84a6:	4632      	mov	r2, r6
   d84a8:	e9dd 0100 	ldrd	r0, r1, [sp]
   d84ac:	f000 f8ac 	bl	d8608 <__aeabi_dsub>
   d84b0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d84b4:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   d84b8:	ec41 0b10 	vmov	d0, r0, r1
   d84bc:	e7be      	b.n	d843c <rint+0x8c>
   d84be:	ee10 0a10 	vmov	r0, s0
   d84c2:	4619      	mov	r1, r3
   d84c4:	f000 f8a2 	bl	d860c <__adddf3>
   d84c8:	ec41 0b10 	vmov	d0, r0, r1
   d84cc:	e7b6      	b.n	d843c <rint+0x8c>
   d84ce:	bf00      	nop
   d84d0:	000fffff 	.word	0x000fffff
   d84d4:	000d9e08 	.word	0x000d9e08

000d84d8 <scalbn>:
   d84d8:	ec53 2b10 	vmov	r2, r3, d0
   d84dc:	b570      	push	{r4, r5, r6, lr}
   d84de:	f3c3 540a 	ubfx	r4, r3, #20, #11
   d84e2:	4619      	mov	r1, r3
   d84e4:	4605      	mov	r5, r0
   d84e6:	bb14      	cbnz	r4, d852e <scalbn+0x56>
   d84e8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   d84ec:	4311      	orrs	r1, r2
   d84ee:	d02a      	beq.n	d8546 <scalbn+0x6e>
   d84f0:	4619      	mov	r1, r3
   d84f2:	2200      	movs	r2, #0
   d84f4:	4b38      	ldr	r3, [pc, #224]	; (d85d8 <scalbn+0x100>)
   d84f6:	4e39      	ldr	r6, [pc, #228]	; (d85dc <scalbn+0x104>)
   d84f8:	ee10 0a10 	vmov	r0, s0
   d84fc:	f000 fa38 	bl	d8970 <__aeabi_dmul>
   d8500:	42b5      	cmp	r5, r6
   d8502:	4602      	mov	r2, r0
   d8504:	460b      	mov	r3, r1
   d8506:	db1f      	blt.n	d8548 <scalbn+0x70>
   d8508:	f3c1 540a 	ubfx	r4, r1, #20, #11
   d850c:	3c36      	subs	r4, #54	; 0x36
   d850e:	442c      	add	r4, r5
   d8510:	f240 70fe 	movw	r0, #2046	; 0x7fe
   d8514:	4284      	cmp	r4, r0
   d8516:	dc1f      	bgt.n	d8558 <scalbn+0x80>
   d8518:	2c00      	cmp	r4, #0
   d851a:	dd2d      	ble.n	d8578 <scalbn+0xa0>
   d851c:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   d8520:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   d8524:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   d8528:	ec43 2b10 	vmov	d0, r2, r3
   d852c:	bd70      	pop	{r4, r5, r6, pc}
   d852e:	f240 70ff 	movw	r0, #2047	; 0x7ff
   d8532:	4284      	cmp	r4, r0
   d8534:	d1eb      	bne.n	d850e <scalbn+0x36>
   d8536:	ee10 0a10 	vmov	r0, s0
   d853a:	4619      	mov	r1, r3
   d853c:	f000 f866 	bl	d860c <__adddf3>
   d8540:	ec41 0b10 	vmov	d0, r0, r1
   d8544:	bd70      	pop	{r4, r5, r6, pc}
   d8546:	bd70      	pop	{r4, r5, r6, pc}
   d8548:	a31f      	add	r3, pc, #124	; (adr r3, d85c8 <scalbn+0xf0>)
   d854a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d854e:	f000 fa0f 	bl	d8970 <__aeabi_dmul>
   d8552:	ec41 0b10 	vmov	d0, r0, r1
   d8556:	bd70      	pop	{r4, r5, r6, pc}
   d8558:	ec43 2b11 	vmov	d1, r2, r3
   d855c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; d85d0 <scalbn+0xf8>
   d8560:	f000 f840 	bl	d85e4 <copysign>
   d8564:	a31a      	add	r3, pc, #104	; (adr r3, d85d0 <scalbn+0xf8>)
   d8566:	e9d3 2300 	ldrd	r2, r3, [r3]
   d856a:	ec51 0b10 	vmov	r0, r1, d0
   d856e:	f000 f9ff 	bl	d8970 <__aeabi_dmul>
   d8572:	ec41 0b10 	vmov	d0, r0, r1
   d8576:	bd70      	pop	{r4, r5, r6, pc}
   d8578:	f114 0f35 	cmn.w	r4, #53	; 0x35
   d857c:	da13      	bge.n	d85a6 <scalbn+0xce>
   d857e:	f24c 3150 	movw	r1, #50000	; 0xc350
   d8582:	428d      	cmp	r5, r1
   d8584:	ec43 2b11 	vmov	d1, r2, r3
   d8588:	dce8      	bgt.n	d855c <scalbn+0x84>
   d858a:	ed9f 0b0f 	vldr	d0, [pc, #60]	; d85c8 <scalbn+0xf0>
   d858e:	f000 f829 	bl	d85e4 <copysign>
   d8592:	a30d      	add	r3, pc, #52	; (adr r3, d85c8 <scalbn+0xf0>)
   d8594:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8598:	ec51 0b10 	vmov	r0, r1, d0
   d859c:	f000 f9e8 	bl	d8970 <__aeabi_dmul>
   d85a0:	ec41 0b10 	vmov	d0, r0, r1
   d85a4:	bd70      	pop	{r4, r5, r6, pc}
   d85a6:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   d85aa:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   d85ae:	3436      	adds	r4, #54	; 0x36
   d85b0:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   d85b4:	4610      	mov	r0, r2
   d85b6:	4619      	mov	r1, r3
   d85b8:	2200      	movs	r2, #0
   d85ba:	4b09      	ldr	r3, [pc, #36]	; (d85e0 <scalbn+0x108>)
   d85bc:	f000 f9d8 	bl	d8970 <__aeabi_dmul>
   d85c0:	ec41 0b10 	vmov	d0, r0, r1
   d85c4:	bd70      	pop	{r4, r5, r6, pc}
   d85c6:	bf00      	nop
   d85c8:	c2f8f359 	.word	0xc2f8f359
   d85cc:	01a56e1f 	.word	0x01a56e1f
   d85d0:	8800759c 	.word	0x8800759c
   d85d4:	7e37e43c 	.word	0x7e37e43c
   d85d8:	43500000 	.word	0x43500000
   d85dc:	ffff3cb0 	.word	0xffff3cb0
   d85e0:	3c900000 	.word	0x3c900000

000d85e4 <copysign>:
   d85e4:	ec53 2b10 	vmov	r2, r3, d0
   d85e8:	ee11 0a90 	vmov	r0, s3
   d85ec:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   d85f0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   d85f4:	ea41 0300 	orr.w	r3, r1, r0
   d85f8:	ec43 2b10 	vmov	d0, r2, r3
   d85fc:	4770      	bx	lr
   d85fe:	bf00      	nop

000d8600 <__aeabi_drsub>:
   d8600:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d8604:	e002      	b.n	d860c <__adddf3>
   d8606:	bf00      	nop

000d8608 <__aeabi_dsub>:
   d8608:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d860c <__adddf3>:
   d860c:	b530      	push	{r4, r5, lr}
   d860e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d8612:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d8616:	ea94 0f05 	teq	r4, r5
   d861a:	bf08      	it	eq
   d861c:	ea90 0f02 	teqeq	r0, r2
   d8620:	bf1f      	itttt	ne
   d8622:	ea54 0c00 	orrsne.w	ip, r4, r0
   d8626:	ea55 0c02 	orrsne.w	ip, r5, r2
   d862a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d862e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8632:	f000 80e2 	beq.w	d87fa <__adddf3+0x1ee>
   d8636:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d863a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d863e:	bfb8      	it	lt
   d8640:	426d      	neglt	r5, r5
   d8642:	dd0c      	ble.n	d865e <__adddf3+0x52>
   d8644:	442c      	add	r4, r5
   d8646:	ea80 0202 	eor.w	r2, r0, r2
   d864a:	ea81 0303 	eor.w	r3, r1, r3
   d864e:	ea82 0000 	eor.w	r0, r2, r0
   d8652:	ea83 0101 	eor.w	r1, r3, r1
   d8656:	ea80 0202 	eor.w	r2, r0, r2
   d865a:	ea81 0303 	eor.w	r3, r1, r3
   d865e:	2d36      	cmp	r5, #54	; 0x36
   d8660:	bf88      	it	hi
   d8662:	bd30      	pophi	{r4, r5, pc}
   d8664:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8668:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d866c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d8670:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d8674:	d002      	beq.n	d867c <__adddf3+0x70>
   d8676:	4240      	negs	r0, r0
   d8678:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d867c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d8680:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8684:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d8688:	d002      	beq.n	d8690 <__adddf3+0x84>
   d868a:	4252      	negs	r2, r2
   d868c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d8690:	ea94 0f05 	teq	r4, r5
   d8694:	f000 80a7 	beq.w	d87e6 <__adddf3+0x1da>
   d8698:	f1a4 0401 	sub.w	r4, r4, #1
   d869c:	f1d5 0e20 	rsbs	lr, r5, #32
   d86a0:	db0d      	blt.n	d86be <__adddf3+0xb2>
   d86a2:	fa02 fc0e 	lsl.w	ip, r2, lr
   d86a6:	fa22 f205 	lsr.w	r2, r2, r5
   d86aa:	1880      	adds	r0, r0, r2
   d86ac:	f141 0100 	adc.w	r1, r1, #0
   d86b0:	fa03 f20e 	lsl.w	r2, r3, lr
   d86b4:	1880      	adds	r0, r0, r2
   d86b6:	fa43 f305 	asr.w	r3, r3, r5
   d86ba:	4159      	adcs	r1, r3
   d86bc:	e00e      	b.n	d86dc <__adddf3+0xd0>
   d86be:	f1a5 0520 	sub.w	r5, r5, #32
   d86c2:	f10e 0e20 	add.w	lr, lr, #32
   d86c6:	2a01      	cmp	r2, #1
   d86c8:	fa03 fc0e 	lsl.w	ip, r3, lr
   d86cc:	bf28      	it	cs
   d86ce:	f04c 0c02 	orrcs.w	ip, ip, #2
   d86d2:	fa43 f305 	asr.w	r3, r3, r5
   d86d6:	18c0      	adds	r0, r0, r3
   d86d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d86dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d86e0:	d507      	bpl.n	d86f2 <__adddf3+0xe6>
   d86e2:	f04f 0e00 	mov.w	lr, #0
   d86e6:	f1dc 0c00 	rsbs	ip, ip, #0
   d86ea:	eb7e 0000 	sbcs.w	r0, lr, r0
   d86ee:	eb6e 0101 	sbc.w	r1, lr, r1
   d86f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d86f6:	d31b      	bcc.n	d8730 <__adddf3+0x124>
   d86f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d86fc:	d30c      	bcc.n	d8718 <__adddf3+0x10c>
   d86fe:	0849      	lsrs	r1, r1, #1
   d8700:	ea5f 0030 	movs.w	r0, r0, rrx
   d8704:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d8708:	f104 0401 	add.w	r4, r4, #1
   d870c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d8710:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d8714:	f080 809a 	bcs.w	d884c <__adddf3+0x240>
   d8718:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d871c:	bf08      	it	eq
   d871e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8722:	f150 0000 	adcs.w	r0, r0, #0
   d8726:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d872a:	ea41 0105 	orr.w	r1, r1, r5
   d872e:	bd30      	pop	{r4, r5, pc}
   d8730:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d8734:	4140      	adcs	r0, r0
   d8736:	eb41 0101 	adc.w	r1, r1, r1
   d873a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d873e:	f1a4 0401 	sub.w	r4, r4, #1
   d8742:	d1e9      	bne.n	d8718 <__adddf3+0x10c>
   d8744:	f091 0f00 	teq	r1, #0
   d8748:	bf04      	itt	eq
   d874a:	4601      	moveq	r1, r0
   d874c:	2000      	moveq	r0, #0
   d874e:	fab1 f381 	clz	r3, r1
   d8752:	bf08      	it	eq
   d8754:	3320      	addeq	r3, #32
   d8756:	f1a3 030b 	sub.w	r3, r3, #11
   d875a:	f1b3 0220 	subs.w	r2, r3, #32
   d875e:	da0c      	bge.n	d877a <__adddf3+0x16e>
   d8760:	320c      	adds	r2, #12
   d8762:	dd08      	ble.n	d8776 <__adddf3+0x16a>
   d8764:	f102 0c14 	add.w	ip, r2, #20
   d8768:	f1c2 020c 	rsb	r2, r2, #12
   d876c:	fa01 f00c 	lsl.w	r0, r1, ip
   d8770:	fa21 f102 	lsr.w	r1, r1, r2
   d8774:	e00c      	b.n	d8790 <__adddf3+0x184>
   d8776:	f102 0214 	add.w	r2, r2, #20
   d877a:	bfd8      	it	le
   d877c:	f1c2 0c20 	rsble	ip, r2, #32
   d8780:	fa01 f102 	lsl.w	r1, r1, r2
   d8784:	fa20 fc0c 	lsr.w	ip, r0, ip
   d8788:	bfdc      	itt	le
   d878a:	ea41 010c 	orrle.w	r1, r1, ip
   d878e:	4090      	lslle	r0, r2
   d8790:	1ae4      	subs	r4, r4, r3
   d8792:	bfa2      	ittt	ge
   d8794:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d8798:	4329      	orrge	r1, r5
   d879a:	bd30      	popge	{r4, r5, pc}
   d879c:	ea6f 0404 	mvn.w	r4, r4
   d87a0:	3c1f      	subs	r4, #31
   d87a2:	da1c      	bge.n	d87de <__adddf3+0x1d2>
   d87a4:	340c      	adds	r4, #12
   d87a6:	dc0e      	bgt.n	d87c6 <__adddf3+0x1ba>
   d87a8:	f104 0414 	add.w	r4, r4, #20
   d87ac:	f1c4 0220 	rsb	r2, r4, #32
   d87b0:	fa20 f004 	lsr.w	r0, r0, r4
   d87b4:	fa01 f302 	lsl.w	r3, r1, r2
   d87b8:	ea40 0003 	orr.w	r0, r0, r3
   d87bc:	fa21 f304 	lsr.w	r3, r1, r4
   d87c0:	ea45 0103 	orr.w	r1, r5, r3
   d87c4:	bd30      	pop	{r4, r5, pc}
   d87c6:	f1c4 040c 	rsb	r4, r4, #12
   d87ca:	f1c4 0220 	rsb	r2, r4, #32
   d87ce:	fa20 f002 	lsr.w	r0, r0, r2
   d87d2:	fa01 f304 	lsl.w	r3, r1, r4
   d87d6:	ea40 0003 	orr.w	r0, r0, r3
   d87da:	4629      	mov	r1, r5
   d87dc:	bd30      	pop	{r4, r5, pc}
   d87de:	fa21 f004 	lsr.w	r0, r1, r4
   d87e2:	4629      	mov	r1, r5
   d87e4:	bd30      	pop	{r4, r5, pc}
   d87e6:	f094 0f00 	teq	r4, #0
   d87ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d87ee:	bf06      	itte	eq
   d87f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d87f4:	3401      	addeq	r4, #1
   d87f6:	3d01      	subne	r5, #1
   d87f8:	e74e      	b.n	d8698 <__adddf3+0x8c>
   d87fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d87fe:	bf18      	it	ne
   d8800:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8804:	d029      	beq.n	d885a <__adddf3+0x24e>
   d8806:	ea94 0f05 	teq	r4, r5
   d880a:	bf08      	it	eq
   d880c:	ea90 0f02 	teqeq	r0, r2
   d8810:	d005      	beq.n	d881e <__adddf3+0x212>
   d8812:	ea54 0c00 	orrs.w	ip, r4, r0
   d8816:	bf04      	itt	eq
   d8818:	4619      	moveq	r1, r3
   d881a:	4610      	moveq	r0, r2
   d881c:	bd30      	pop	{r4, r5, pc}
   d881e:	ea91 0f03 	teq	r1, r3
   d8822:	bf1e      	ittt	ne
   d8824:	2100      	movne	r1, #0
   d8826:	2000      	movne	r0, #0
   d8828:	bd30      	popne	{r4, r5, pc}
   d882a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d882e:	d105      	bne.n	d883c <__adddf3+0x230>
   d8830:	0040      	lsls	r0, r0, #1
   d8832:	4149      	adcs	r1, r1
   d8834:	bf28      	it	cs
   d8836:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d883a:	bd30      	pop	{r4, r5, pc}
   d883c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d8840:	bf3c      	itt	cc
   d8842:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d8846:	bd30      	popcc	{r4, r5, pc}
   d8848:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d884c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d8850:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8854:	f04f 0000 	mov.w	r0, #0
   d8858:	bd30      	pop	{r4, r5, pc}
   d885a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d885e:	bf1a      	itte	ne
   d8860:	4619      	movne	r1, r3
   d8862:	4610      	movne	r0, r2
   d8864:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d8868:	bf1c      	itt	ne
   d886a:	460b      	movne	r3, r1
   d886c:	4602      	movne	r2, r0
   d886e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8872:	bf06      	itte	eq
   d8874:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d8878:	ea91 0f03 	teqeq	r1, r3
   d887c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d8880:	bd30      	pop	{r4, r5, pc}
   d8882:	bf00      	nop

000d8884 <__aeabi_ui2d>:
   d8884:	f090 0f00 	teq	r0, #0
   d8888:	bf04      	itt	eq
   d888a:	2100      	moveq	r1, #0
   d888c:	4770      	bxeq	lr
   d888e:	b530      	push	{r4, r5, lr}
   d8890:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8894:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8898:	f04f 0500 	mov.w	r5, #0
   d889c:	f04f 0100 	mov.w	r1, #0
   d88a0:	e750      	b.n	d8744 <__adddf3+0x138>
   d88a2:	bf00      	nop

000d88a4 <__aeabi_i2d>:
   d88a4:	f090 0f00 	teq	r0, #0
   d88a8:	bf04      	itt	eq
   d88aa:	2100      	moveq	r1, #0
   d88ac:	4770      	bxeq	lr
   d88ae:	b530      	push	{r4, r5, lr}
   d88b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d88b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d88b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d88bc:	bf48      	it	mi
   d88be:	4240      	negmi	r0, r0
   d88c0:	f04f 0100 	mov.w	r1, #0
   d88c4:	e73e      	b.n	d8744 <__adddf3+0x138>
   d88c6:	bf00      	nop

000d88c8 <__aeabi_f2d>:
   d88c8:	0042      	lsls	r2, r0, #1
   d88ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d88ce:	ea4f 0131 	mov.w	r1, r1, rrx
   d88d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d88d6:	bf1f      	itttt	ne
   d88d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d88dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d88e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d88e4:	4770      	bxne	lr
   d88e6:	f092 0f00 	teq	r2, #0
   d88ea:	bf14      	ite	ne
   d88ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d88f0:	4770      	bxeq	lr
   d88f2:	b530      	push	{r4, r5, lr}
   d88f4:	f44f 7460 	mov.w	r4, #896	; 0x380
   d88f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d88fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8900:	e720      	b.n	d8744 <__adddf3+0x138>
   d8902:	bf00      	nop

000d8904 <__aeabi_ul2d>:
   d8904:	ea50 0201 	orrs.w	r2, r0, r1
   d8908:	bf08      	it	eq
   d890a:	4770      	bxeq	lr
   d890c:	b530      	push	{r4, r5, lr}
   d890e:	f04f 0500 	mov.w	r5, #0
   d8912:	e00a      	b.n	d892a <__aeabi_l2d+0x16>

000d8914 <__aeabi_l2d>:
   d8914:	ea50 0201 	orrs.w	r2, r0, r1
   d8918:	bf08      	it	eq
   d891a:	4770      	bxeq	lr
   d891c:	b530      	push	{r4, r5, lr}
   d891e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d8922:	d502      	bpl.n	d892a <__aeabi_l2d+0x16>
   d8924:	4240      	negs	r0, r0
   d8926:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d892a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d892e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8932:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d8936:	f43f aedc 	beq.w	d86f2 <__adddf3+0xe6>
   d893a:	f04f 0203 	mov.w	r2, #3
   d893e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8942:	bf18      	it	ne
   d8944:	3203      	addne	r2, #3
   d8946:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d894a:	bf18      	it	ne
   d894c:	3203      	addne	r2, #3
   d894e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d8952:	f1c2 0320 	rsb	r3, r2, #32
   d8956:	fa00 fc03 	lsl.w	ip, r0, r3
   d895a:	fa20 f002 	lsr.w	r0, r0, r2
   d895e:	fa01 fe03 	lsl.w	lr, r1, r3
   d8962:	ea40 000e 	orr.w	r0, r0, lr
   d8966:	fa21 f102 	lsr.w	r1, r1, r2
   d896a:	4414      	add	r4, r2
   d896c:	e6c1      	b.n	d86f2 <__adddf3+0xe6>
   d896e:	bf00      	nop

000d8970 <__aeabi_dmul>:
   d8970:	b570      	push	{r4, r5, r6, lr}
   d8972:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8976:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d897a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d897e:	bf1d      	ittte	ne
   d8980:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8984:	ea94 0f0c 	teqne	r4, ip
   d8988:	ea95 0f0c 	teqne	r5, ip
   d898c:	f000 f8de 	bleq	d8b4c <__aeabi_dmul+0x1dc>
   d8990:	442c      	add	r4, r5
   d8992:	ea81 0603 	eor.w	r6, r1, r3
   d8996:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d899a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d899e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d89a2:	bf18      	it	ne
   d89a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d89a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d89ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d89b0:	d038      	beq.n	d8a24 <__aeabi_dmul+0xb4>
   d89b2:	fba0 ce02 	umull	ip, lr, r0, r2
   d89b6:	f04f 0500 	mov.w	r5, #0
   d89ba:	fbe1 e502 	umlal	lr, r5, r1, r2
   d89be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d89c2:	fbe0 e503 	umlal	lr, r5, r0, r3
   d89c6:	f04f 0600 	mov.w	r6, #0
   d89ca:	fbe1 5603 	umlal	r5, r6, r1, r3
   d89ce:	f09c 0f00 	teq	ip, #0
   d89d2:	bf18      	it	ne
   d89d4:	f04e 0e01 	orrne.w	lr, lr, #1
   d89d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d89dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d89e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d89e4:	d204      	bcs.n	d89f0 <__aeabi_dmul+0x80>
   d89e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d89ea:	416d      	adcs	r5, r5
   d89ec:	eb46 0606 	adc.w	r6, r6, r6
   d89f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d89f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d89f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d89fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d8a00:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d8a04:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8a08:	bf88      	it	hi
   d8a0a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8a0e:	d81e      	bhi.n	d8a4e <__aeabi_dmul+0xde>
   d8a10:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d8a14:	bf08      	it	eq
   d8a16:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d8a1a:	f150 0000 	adcs.w	r0, r0, #0
   d8a1e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8a22:	bd70      	pop	{r4, r5, r6, pc}
   d8a24:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d8a28:	ea46 0101 	orr.w	r1, r6, r1
   d8a2c:	ea40 0002 	orr.w	r0, r0, r2
   d8a30:	ea81 0103 	eor.w	r1, r1, r3
   d8a34:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d8a38:	bfc2      	ittt	gt
   d8a3a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8a3e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8a42:	bd70      	popgt	{r4, r5, r6, pc}
   d8a44:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8a48:	f04f 0e00 	mov.w	lr, #0
   d8a4c:	3c01      	subs	r4, #1
   d8a4e:	f300 80ab 	bgt.w	d8ba8 <__aeabi_dmul+0x238>
   d8a52:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d8a56:	bfde      	ittt	le
   d8a58:	2000      	movle	r0, #0
   d8a5a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d8a5e:	bd70      	pople	{r4, r5, r6, pc}
   d8a60:	f1c4 0400 	rsb	r4, r4, #0
   d8a64:	3c20      	subs	r4, #32
   d8a66:	da35      	bge.n	d8ad4 <__aeabi_dmul+0x164>
   d8a68:	340c      	adds	r4, #12
   d8a6a:	dc1b      	bgt.n	d8aa4 <__aeabi_dmul+0x134>
   d8a6c:	f104 0414 	add.w	r4, r4, #20
   d8a70:	f1c4 0520 	rsb	r5, r4, #32
   d8a74:	fa00 f305 	lsl.w	r3, r0, r5
   d8a78:	fa20 f004 	lsr.w	r0, r0, r4
   d8a7c:	fa01 f205 	lsl.w	r2, r1, r5
   d8a80:	ea40 0002 	orr.w	r0, r0, r2
   d8a84:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d8a88:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8a8c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8a90:	fa21 f604 	lsr.w	r6, r1, r4
   d8a94:	eb42 0106 	adc.w	r1, r2, r6
   d8a98:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8a9c:	bf08      	it	eq
   d8a9e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8aa2:	bd70      	pop	{r4, r5, r6, pc}
   d8aa4:	f1c4 040c 	rsb	r4, r4, #12
   d8aa8:	f1c4 0520 	rsb	r5, r4, #32
   d8aac:	fa00 f304 	lsl.w	r3, r0, r4
   d8ab0:	fa20 f005 	lsr.w	r0, r0, r5
   d8ab4:	fa01 f204 	lsl.w	r2, r1, r4
   d8ab8:	ea40 0002 	orr.w	r0, r0, r2
   d8abc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8ac0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8ac4:	f141 0100 	adc.w	r1, r1, #0
   d8ac8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8acc:	bf08      	it	eq
   d8ace:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8ad2:	bd70      	pop	{r4, r5, r6, pc}
   d8ad4:	f1c4 0520 	rsb	r5, r4, #32
   d8ad8:	fa00 f205 	lsl.w	r2, r0, r5
   d8adc:	ea4e 0e02 	orr.w	lr, lr, r2
   d8ae0:	fa20 f304 	lsr.w	r3, r0, r4
   d8ae4:	fa01 f205 	lsl.w	r2, r1, r5
   d8ae8:	ea43 0302 	orr.w	r3, r3, r2
   d8aec:	fa21 f004 	lsr.w	r0, r1, r4
   d8af0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8af4:	fa21 f204 	lsr.w	r2, r1, r4
   d8af8:	ea20 0002 	bic.w	r0, r0, r2
   d8afc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8b00:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8b04:	bf08      	it	eq
   d8b06:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8b0a:	bd70      	pop	{r4, r5, r6, pc}
   d8b0c:	f094 0f00 	teq	r4, #0
   d8b10:	d10f      	bne.n	d8b32 <__aeabi_dmul+0x1c2>
   d8b12:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d8b16:	0040      	lsls	r0, r0, #1
   d8b18:	eb41 0101 	adc.w	r1, r1, r1
   d8b1c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8b20:	bf08      	it	eq
   d8b22:	3c01      	subeq	r4, #1
   d8b24:	d0f7      	beq.n	d8b16 <__aeabi_dmul+0x1a6>
   d8b26:	ea41 0106 	orr.w	r1, r1, r6
   d8b2a:	f095 0f00 	teq	r5, #0
   d8b2e:	bf18      	it	ne
   d8b30:	4770      	bxne	lr
   d8b32:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d8b36:	0052      	lsls	r2, r2, #1
   d8b38:	eb43 0303 	adc.w	r3, r3, r3
   d8b3c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d8b40:	bf08      	it	eq
   d8b42:	3d01      	subeq	r5, #1
   d8b44:	d0f7      	beq.n	d8b36 <__aeabi_dmul+0x1c6>
   d8b46:	ea43 0306 	orr.w	r3, r3, r6
   d8b4a:	4770      	bx	lr
   d8b4c:	ea94 0f0c 	teq	r4, ip
   d8b50:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8b54:	bf18      	it	ne
   d8b56:	ea95 0f0c 	teqne	r5, ip
   d8b5a:	d00c      	beq.n	d8b76 <__aeabi_dmul+0x206>
   d8b5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8b60:	bf18      	it	ne
   d8b62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8b66:	d1d1      	bne.n	d8b0c <__aeabi_dmul+0x19c>
   d8b68:	ea81 0103 	eor.w	r1, r1, r3
   d8b6c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8b70:	f04f 0000 	mov.w	r0, #0
   d8b74:	bd70      	pop	{r4, r5, r6, pc}
   d8b76:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8b7a:	bf06      	itte	eq
   d8b7c:	4610      	moveq	r0, r2
   d8b7e:	4619      	moveq	r1, r3
   d8b80:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8b84:	d019      	beq.n	d8bba <__aeabi_dmul+0x24a>
   d8b86:	ea94 0f0c 	teq	r4, ip
   d8b8a:	d102      	bne.n	d8b92 <__aeabi_dmul+0x222>
   d8b8c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d8b90:	d113      	bne.n	d8bba <__aeabi_dmul+0x24a>
   d8b92:	ea95 0f0c 	teq	r5, ip
   d8b96:	d105      	bne.n	d8ba4 <__aeabi_dmul+0x234>
   d8b98:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d8b9c:	bf1c      	itt	ne
   d8b9e:	4610      	movne	r0, r2
   d8ba0:	4619      	movne	r1, r3
   d8ba2:	d10a      	bne.n	d8bba <__aeabi_dmul+0x24a>
   d8ba4:	ea81 0103 	eor.w	r1, r1, r3
   d8ba8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8bac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8bb0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8bb4:	f04f 0000 	mov.w	r0, #0
   d8bb8:	bd70      	pop	{r4, r5, r6, pc}
   d8bba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8bbe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d8bc2:	bd70      	pop	{r4, r5, r6, pc}

000d8bc4 <__aeabi_ddiv>:
   d8bc4:	b570      	push	{r4, r5, r6, lr}
   d8bc6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8bca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8bce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8bd2:	bf1d      	ittte	ne
   d8bd4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8bd8:	ea94 0f0c 	teqne	r4, ip
   d8bdc:	ea95 0f0c 	teqne	r5, ip
   d8be0:	f000 f8a7 	bleq	d8d32 <__aeabi_ddiv+0x16e>
   d8be4:	eba4 0405 	sub.w	r4, r4, r5
   d8be8:	ea81 0e03 	eor.w	lr, r1, r3
   d8bec:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8bf0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8bf4:	f000 8088 	beq.w	d8d08 <__aeabi_ddiv+0x144>
   d8bf8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8bfc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d8c00:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d8c04:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d8c08:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d8c0c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d8c10:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d8c14:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d8c18:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d8c1c:	429d      	cmp	r5, r3
   d8c1e:	bf08      	it	eq
   d8c20:	4296      	cmpeq	r6, r2
   d8c22:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d8c26:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d8c2a:	d202      	bcs.n	d8c32 <__aeabi_ddiv+0x6e>
   d8c2c:	085b      	lsrs	r3, r3, #1
   d8c2e:	ea4f 0232 	mov.w	r2, r2, rrx
   d8c32:	1ab6      	subs	r6, r6, r2
   d8c34:	eb65 0503 	sbc.w	r5, r5, r3
   d8c38:	085b      	lsrs	r3, r3, #1
   d8c3a:	ea4f 0232 	mov.w	r2, r2, rrx
   d8c3e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d8c42:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d8c46:	ebb6 0e02 	subs.w	lr, r6, r2
   d8c4a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8c4e:	bf22      	ittt	cs
   d8c50:	1ab6      	subcs	r6, r6, r2
   d8c52:	4675      	movcs	r5, lr
   d8c54:	ea40 000c 	orrcs.w	r0, r0, ip
   d8c58:	085b      	lsrs	r3, r3, #1
   d8c5a:	ea4f 0232 	mov.w	r2, r2, rrx
   d8c5e:	ebb6 0e02 	subs.w	lr, r6, r2
   d8c62:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8c66:	bf22      	ittt	cs
   d8c68:	1ab6      	subcs	r6, r6, r2
   d8c6a:	4675      	movcs	r5, lr
   d8c6c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d8c70:	085b      	lsrs	r3, r3, #1
   d8c72:	ea4f 0232 	mov.w	r2, r2, rrx
   d8c76:	ebb6 0e02 	subs.w	lr, r6, r2
   d8c7a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8c7e:	bf22      	ittt	cs
   d8c80:	1ab6      	subcs	r6, r6, r2
   d8c82:	4675      	movcs	r5, lr
   d8c84:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d8c88:	085b      	lsrs	r3, r3, #1
   d8c8a:	ea4f 0232 	mov.w	r2, r2, rrx
   d8c8e:	ebb6 0e02 	subs.w	lr, r6, r2
   d8c92:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8c96:	bf22      	ittt	cs
   d8c98:	1ab6      	subcs	r6, r6, r2
   d8c9a:	4675      	movcs	r5, lr
   d8c9c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d8ca0:	ea55 0e06 	orrs.w	lr, r5, r6
   d8ca4:	d018      	beq.n	d8cd8 <__aeabi_ddiv+0x114>
   d8ca6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d8caa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d8cae:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d8cb2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d8cb6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d8cba:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d8cbe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d8cc2:	d1c0      	bne.n	d8c46 <__aeabi_ddiv+0x82>
   d8cc4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8cc8:	d10b      	bne.n	d8ce2 <__aeabi_ddiv+0x11e>
   d8cca:	ea41 0100 	orr.w	r1, r1, r0
   d8cce:	f04f 0000 	mov.w	r0, #0
   d8cd2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d8cd6:	e7b6      	b.n	d8c46 <__aeabi_ddiv+0x82>
   d8cd8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8cdc:	bf04      	itt	eq
   d8cde:	4301      	orreq	r1, r0
   d8ce0:	2000      	moveq	r0, #0
   d8ce2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8ce6:	bf88      	it	hi
   d8ce8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8cec:	f63f aeaf 	bhi.w	d8a4e <__aeabi_dmul+0xde>
   d8cf0:	ebb5 0c03 	subs.w	ip, r5, r3
   d8cf4:	bf04      	itt	eq
   d8cf6:	ebb6 0c02 	subseq.w	ip, r6, r2
   d8cfa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8cfe:	f150 0000 	adcs.w	r0, r0, #0
   d8d02:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8d06:	bd70      	pop	{r4, r5, r6, pc}
   d8d08:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d8d0c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d8d10:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d8d14:	bfc2      	ittt	gt
   d8d16:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8d1a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8d1e:	bd70      	popgt	{r4, r5, r6, pc}
   d8d20:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8d24:	f04f 0e00 	mov.w	lr, #0
   d8d28:	3c01      	subs	r4, #1
   d8d2a:	e690      	b.n	d8a4e <__aeabi_dmul+0xde>
   d8d2c:	ea45 0e06 	orr.w	lr, r5, r6
   d8d30:	e68d      	b.n	d8a4e <__aeabi_dmul+0xde>
   d8d32:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8d36:	ea94 0f0c 	teq	r4, ip
   d8d3a:	bf08      	it	eq
   d8d3c:	ea95 0f0c 	teqeq	r5, ip
   d8d40:	f43f af3b 	beq.w	d8bba <__aeabi_dmul+0x24a>
   d8d44:	ea94 0f0c 	teq	r4, ip
   d8d48:	d10a      	bne.n	d8d60 <__aeabi_ddiv+0x19c>
   d8d4a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8d4e:	f47f af34 	bne.w	d8bba <__aeabi_dmul+0x24a>
   d8d52:	ea95 0f0c 	teq	r5, ip
   d8d56:	f47f af25 	bne.w	d8ba4 <__aeabi_dmul+0x234>
   d8d5a:	4610      	mov	r0, r2
   d8d5c:	4619      	mov	r1, r3
   d8d5e:	e72c      	b.n	d8bba <__aeabi_dmul+0x24a>
   d8d60:	ea95 0f0c 	teq	r5, ip
   d8d64:	d106      	bne.n	d8d74 <__aeabi_ddiv+0x1b0>
   d8d66:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8d6a:	f43f aefd 	beq.w	d8b68 <__aeabi_dmul+0x1f8>
   d8d6e:	4610      	mov	r0, r2
   d8d70:	4619      	mov	r1, r3
   d8d72:	e722      	b.n	d8bba <__aeabi_dmul+0x24a>
   d8d74:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8d78:	bf18      	it	ne
   d8d7a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8d7e:	f47f aec5 	bne.w	d8b0c <__aeabi_dmul+0x19c>
   d8d82:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d8d86:	f47f af0d 	bne.w	d8ba4 <__aeabi_dmul+0x234>
   d8d8a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d8d8e:	f47f aeeb 	bne.w	d8b68 <__aeabi_dmul+0x1f8>
   d8d92:	e712      	b.n	d8bba <__aeabi_dmul+0x24a>

000d8d94 <__gedf2>:
   d8d94:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d8d98:	e006      	b.n	d8da8 <__cmpdf2+0x4>
   d8d9a:	bf00      	nop

000d8d9c <__ledf2>:
   d8d9c:	f04f 0c01 	mov.w	ip, #1
   d8da0:	e002      	b.n	d8da8 <__cmpdf2+0x4>
   d8da2:	bf00      	nop

000d8da4 <__cmpdf2>:
   d8da4:	f04f 0c01 	mov.w	ip, #1
   d8da8:	f84d cd04 	str.w	ip, [sp, #-4]!
   d8dac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8db0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8db4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8db8:	bf18      	it	ne
   d8dba:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d8dbe:	d01b      	beq.n	d8df8 <__cmpdf2+0x54>
   d8dc0:	b001      	add	sp, #4
   d8dc2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d8dc6:	bf0c      	ite	eq
   d8dc8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d8dcc:	ea91 0f03 	teqne	r1, r3
   d8dd0:	bf02      	ittt	eq
   d8dd2:	ea90 0f02 	teqeq	r0, r2
   d8dd6:	2000      	moveq	r0, #0
   d8dd8:	4770      	bxeq	lr
   d8dda:	f110 0f00 	cmn.w	r0, #0
   d8dde:	ea91 0f03 	teq	r1, r3
   d8de2:	bf58      	it	pl
   d8de4:	4299      	cmppl	r1, r3
   d8de6:	bf08      	it	eq
   d8de8:	4290      	cmpeq	r0, r2
   d8dea:	bf2c      	ite	cs
   d8dec:	17d8      	asrcs	r0, r3, #31
   d8dee:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d8df2:	f040 0001 	orr.w	r0, r0, #1
   d8df6:	4770      	bx	lr
   d8df8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8dfc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8e00:	d102      	bne.n	d8e08 <__cmpdf2+0x64>
   d8e02:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d8e06:	d107      	bne.n	d8e18 <__cmpdf2+0x74>
   d8e08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8e0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8e10:	d1d6      	bne.n	d8dc0 <__cmpdf2+0x1c>
   d8e12:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d8e16:	d0d3      	beq.n	d8dc0 <__cmpdf2+0x1c>
   d8e18:	f85d 0b04 	ldr.w	r0, [sp], #4
   d8e1c:	4770      	bx	lr
   d8e1e:	bf00      	nop

000d8e20 <__aeabi_cdrcmple>:
   d8e20:	4684      	mov	ip, r0
   d8e22:	4610      	mov	r0, r2
   d8e24:	4662      	mov	r2, ip
   d8e26:	468c      	mov	ip, r1
   d8e28:	4619      	mov	r1, r3
   d8e2a:	4663      	mov	r3, ip
   d8e2c:	e000      	b.n	d8e30 <__aeabi_cdcmpeq>
   d8e2e:	bf00      	nop

000d8e30 <__aeabi_cdcmpeq>:
   d8e30:	b501      	push	{r0, lr}
   d8e32:	f7ff ffb7 	bl	d8da4 <__cmpdf2>
   d8e36:	2800      	cmp	r0, #0
   d8e38:	bf48      	it	mi
   d8e3a:	f110 0f00 	cmnmi.w	r0, #0
   d8e3e:	bd01      	pop	{r0, pc}

000d8e40 <__aeabi_dcmpeq>:
   d8e40:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8e44:	f7ff fff4 	bl	d8e30 <__aeabi_cdcmpeq>
   d8e48:	bf0c      	ite	eq
   d8e4a:	2001      	moveq	r0, #1
   d8e4c:	2000      	movne	r0, #0
   d8e4e:	f85d fb08 	ldr.w	pc, [sp], #8
   d8e52:	bf00      	nop

000d8e54 <__aeabi_dcmplt>:
   d8e54:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8e58:	f7ff ffea 	bl	d8e30 <__aeabi_cdcmpeq>
   d8e5c:	bf34      	ite	cc
   d8e5e:	2001      	movcc	r0, #1
   d8e60:	2000      	movcs	r0, #0
   d8e62:	f85d fb08 	ldr.w	pc, [sp], #8
   d8e66:	bf00      	nop

000d8e68 <__aeabi_dcmple>:
   d8e68:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8e6c:	f7ff ffe0 	bl	d8e30 <__aeabi_cdcmpeq>
   d8e70:	bf94      	ite	ls
   d8e72:	2001      	movls	r0, #1
   d8e74:	2000      	movhi	r0, #0
   d8e76:	f85d fb08 	ldr.w	pc, [sp], #8
   d8e7a:	bf00      	nop

000d8e7c <__aeabi_dcmpge>:
   d8e7c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8e80:	f7ff ffce 	bl	d8e20 <__aeabi_cdrcmple>
   d8e84:	bf94      	ite	ls
   d8e86:	2001      	movls	r0, #1
   d8e88:	2000      	movhi	r0, #0
   d8e8a:	f85d fb08 	ldr.w	pc, [sp], #8
   d8e8e:	bf00      	nop

000d8e90 <__aeabi_dcmpgt>:
   d8e90:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8e94:	f7ff ffc4 	bl	d8e20 <__aeabi_cdrcmple>
   d8e98:	bf34      	ite	cc
   d8e9a:	2001      	movcc	r0, #1
   d8e9c:	2000      	movcs	r0, #0
   d8e9e:	f85d fb08 	ldr.w	pc, [sp], #8
   d8ea2:	bf00      	nop

000d8ea4 <__aeabi_dcmpun>:
   d8ea4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8ea8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8eac:	d102      	bne.n	d8eb4 <__aeabi_dcmpun+0x10>
   d8eae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d8eb2:	d10a      	bne.n	d8eca <__aeabi_dcmpun+0x26>
   d8eb4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8eb8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8ebc:	d102      	bne.n	d8ec4 <__aeabi_dcmpun+0x20>
   d8ebe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d8ec2:	d102      	bne.n	d8eca <__aeabi_dcmpun+0x26>
   d8ec4:	f04f 0000 	mov.w	r0, #0
   d8ec8:	4770      	bx	lr
   d8eca:	f04f 0001 	mov.w	r0, #1
   d8ece:	4770      	bx	lr

000d8ed0 <__aeabi_d2f>:
   d8ed0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8ed4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d8ed8:	bf24      	itt	cs
   d8eda:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d8ede:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d8ee2:	d90d      	bls.n	d8f00 <__aeabi_d2f+0x30>
   d8ee4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d8ee8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d8eec:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d8ef0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d8ef4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d8ef8:	bf08      	it	eq
   d8efa:	f020 0001 	biceq.w	r0, r0, #1
   d8efe:	4770      	bx	lr
   d8f00:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d8f04:	d121      	bne.n	d8f4a <__aeabi_d2f+0x7a>
   d8f06:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d8f0a:	bfbc      	itt	lt
   d8f0c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d8f10:	4770      	bxlt	lr
   d8f12:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8f16:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d8f1a:	f1c2 0218 	rsb	r2, r2, #24
   d8f1e:	f1c2 0c20 	rsb	ip, r2, #32
   d8f22:	fa10 f30c 	lsls.w	r3, r0, ip
   d8f26:	fa20 f002 	lsr.w	r0, r0, r2
   d8f2a:	bf18      	it	ne
   d8f2c:	f040 0001 	orrne.w	r0, r0, #1
   d8f30:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8f34:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d8f38:	fa03 fc0c 	lsl.w	ip, r3, ip
   d8f3c:	ea40 000c 	orr.w	r0, r0, ip
   d8f40:	fa23 f302 	lsr.w	r3, r3, r2
   d8f44:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d8f48:	e7cc      	b.n	d8ee4 <__aeabi_d2f+0x14>
   d8f4a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d8f4e:	d107      	bne.n	d8f60 <__aeabi_d2f+0x90>
   d8f50:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d8f54:	bf1e      	ittt	ne
   d8f56:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d8f5a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d8f5e:	4770      	bxne	lr
   d8f60:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d8f64:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d8f68:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d8f6c:	4770      	bx	lr
   d8f6e:	bf00      	nop

000d8f70 <__aeabi_frsub>:
   d8f70:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   d8f74:	e002      	b.n	d8f7c <__addsf3>
   d8f76:	bf00      	nop

000d8f78 <__aeabi_fsub>:
   d8f78:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000d8f7c <__addsf3>:
   d8f7c:	0042      	lsls	r2, r0, #1
   d8f7e:	bf1f      	itttt	ne
   d8f80:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   d8f84:	ea92 0f03 	teqne	r2, r3
   d8f88:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   d8f8c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   d8f90:	d06a      	beq.n	d9068 <__addsf3+0xec>
   d8f92:	ea4f 6212 	mov.w	r2, r2, lsr #24
   d8f96:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   d8f9a:	bfc1      	itttt	gt
   d8f9c:	18d2      	addgt	r2, r2, r3
   d8f9e:	4041      	eorgt	r1, r0
   d8fa0:	4048      	eorgt	r0, r1
   d8fa2:	4041      	eorgt	r1, r0
   d8fa4:	bfb8      	it	lt
   d8fa6:	425b      	neglt	r3, r3
   d8fa8:	2b19      	cmp	r3, #25
   d8faa:	bf88      	it	hi
   d8fac:	4770      	bxhi	lr
   d8fae:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   d8fb2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d8fb6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   d8fba:	bf18      	it	ne
   d8fbc:	4240      	negne	r0, r0
   d8fbe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8fc2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   d8fc6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   d8fca:	bf18      	it	ne
   d8fcc:	4249      	negne	r1, r1
   d8fce:	ea92 0f03 	teq	r2, r3
   d8fd2:	d03f      	beq.n	d9054 <__addsf3+0xd8>
   d8fd4:	f1a2 0201 	sub.w	r2, r2, #1
   d8fd8:	fa41 fc03 	asr.w	ip, r1, r3
   d8fdc:	eb10 000c 	adds.w	r0, r0, ip
   d8fe0:	f1c3 0320 	rsb	r3, r3, #32
   d8fe4:	fa01 f103 	lsl.w	r1, r1, r3
   d8fe8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   d8fec:	d502      	bpl.n	d8ff4 <__addsf3+0x78>
   d8fee:	4249      	negs	r1, r1
   d8ff0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   d8ff4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   d8ff8:	d313      	bcc.n	d9022 <__addsf3+0xa6>
   d8ffa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   d8ffe:	d306      	bcc.n	d900e <__addsf3+0x92>
   d9000:	0840      	lsrs	r0, r0, #1
   d9002:	ea4f 0131 	mov.w	r1, r1, rrx
   d9006:	f102 0201 	add.w	r2, r2, #1
   d900a:	2afe      	cmp	r2, #254	; 0xfe
   d900c:	d251      	bcs.n	d90b2 <__addsf3+0x136>
   d900e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   d9012:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   d9016:	bf08      	it	eq
   d9018:	f020 0001 	biceq.w	r0, r0, #1
   d901c:	ea40 0003 	orr.w	r0, r0, r3
   d9020:	4770      	bx	lr
   d9022:	0049      	lsls	r1, r1, #1
   d9024:	eb40 0000 	adc.w	r0, r0, r0
   d9028:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   d902c:	f1a2 0201 	sub.w	r2, r2, #1
   d9030:	d1ed      	bne.n	d900e <__addsf3+0x92>
   d9032:	fab0 fc80 	clz	ip, r0
   d9036:	f1ac 0c08 	sub.w	ip, ip, #8
   d903a:	ebb2 020c 	subs.w	r2, r2, ip
   d903e:	fa00 f00c 	lsl.w	r0, r0, ip
   d9042:	bfaa      	itet	ge
   d9044:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   d9048:	4252      	neglt	r2, r2
   d904a:	4318      	orrge	r0, r3
   d904c:	bfbc      	itt	lt
   d904e:	40d0      	lsrlt	r0, r2
   d9050:	4318      	orrlt	r0, r3
   d9052:	4770      	bx	lr
   d9054:	f092 0f00 	teq	r2, #0
   d9058:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   d905c:	bf06      	itte	eq
   d905e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   d9062:	3201      	addeq	r2, #1
   d9064:	3b01      	subne	r3, #1
   d9066:	e7b5      	b.n	d8fd4 <__addsf3+0x58>
   d9068:	ea4f 0341 	mov.w	r3, r1, lsl #1
   d906c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   d9070:	bf18      	it	ne
   d9072:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   d9076:	d021      	beq.n	d90bc <__addsf3+0x140>
   d9078:	ea92 0f03 	teq	r2, r3
   d907c:	d004      	beq.n	d9088 <__addsf3+0x10c>
   d907e:	f092 0f00 	teq	r2, #0
   d9082:	bf08      	it	eq
   d9084:	4608      	moveq	r0, r1
   d9086:	4770      	bx	lr
   d9088:	ea90 0f01 	teq	r0, r1
   d908c:	bf1c      	itt	ne
   d908e:	2000      	movne	r0, #0
   d9090:	4770      	bxne	lr
   d9092:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   d9096:	d104      	bne.n	d90a2 <__addsf3+0x126>
   d9098:	0040      	lsls	r0, r0, #1
   d909a:	bf28      	it	cs
   d909c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   d90a0:	4770      	bx	lr
   d90a2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   d90a6:	bf3c      	itt	cc
   d90a8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   d90ac:	4770      	bxcc	lr
   d90ae:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   d90b2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   d90b6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d90ba:	4770      	bx	lr
   d90bc:	ea7f 6222 	mvns.w	r2, r2, asr #24
   d90c0:	bf16      	itet	ne
   d90c2:	4608      	movne	r0, r1
   d90c4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   d90c8:	4601      	movne	r1, r0
   d90ca:	0242      	lsls	r2, r0, #9
   d90cc:	bf06      	itte	eq
   d90ce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   d90d2:	ea90 0f01 	teqeq	r0, r1
   d90d6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   d90da:	4770      	bx	lr

000d90dc <__aeabi_ui2f>:
   d90dc:	f04f 0300 	mov.w	r3, #0
   d90e0:	e004      	b.n	d90ec <__aeabi_i2f+0x8>
   d90e2:	bf00      	nop

000d90e4 <__aeabi_i2f>:
   d90e4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   d90e8:	bf48      	it	mi
   d90ea:	4240      	negmi	r0, r0
   d90ec:	ea5f 0c00 	movs.w	ip, r0
   d90f0:	bf08      	it	eq
   d90f2:	4770      	bxeq	lr
   d90f4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   d90f8:	4601      	mov	r1, r0
   d90fa:	f04f 0000 	mov.w	r0, #0
   d90fe:	e01c      	b.n	d913a <__aeabi_l2f+0x2a>

000d9100 <__aeabi_ul2f>:
   d9100:	ea50 0201 	orrs.w	r2, r0, r1
   d9104:	bf08      	it	eq
   d9106:	4770      	bxeq	lr
   d9108:	f04f 0300 	mov.w	r3, #0
   d910c:	e00a      	b.n	d9124 <__aeabi_l2f+0x14>
   d910e:	bf00      	nop

000d9110 <__aeabi_l2f>:
   d9110:	ea50 0201 	orrs.w	r2, r0, r1
   d9114:	bf08      	it	eq
   d9116:	4770      	bxeq	lr
   d9118:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   d911c:	d502      	bpl.n	d9124 <__aeabi_l2f+0x14>
   d911e:	4240      	negs	r0, r0
   d9120:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9124:	ea5f 0c01 	movs.w	ip, r1
   d9128:	bf02      	ittt	eq
   d912a:	4684      	moveq	ip, r0
   d912c:	4601      	moveq	r1, r0
   d912e:	2000      	moveq	r0, #0
   d9130:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   d9134:	bf08      	it	eq
   d9136:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   d913a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   d913e:	fabc f28c 	clz	r2, ip
   d9142:	3a08      	subs	r2, #8
   d9144:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   d9148:	db10      	blt.n	d916c <__aeabi_l2f+0x5c>
   d914a:	fa01 fc02 	lsl.w	ip, r1, r2
   d914e:	4463      	add	r3, ip
   d9150:	fa00 fc02 	lsl.w	ip, r0, r2
   d9154:	f1c2 0220 	rsb	r2, r2, #32
   d9158:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d915c:	fa20 f202 	lsr.w	r2, r0, r2
   d9160:	eb43 0002 	adc.w	r0, r3, r2
   d9164:	bf08      	it	eq
   d9166:	f020 0001 	biceq.w	r0, r0, #1
   d916a:	4770      	bx	lr
   d916c:	f102 0220 	add.w	r2, r2, #32
   d9170:	fa01 fc02 	lsl.w	ip, r1, r2
   d9174:	f1c2 0220 	rsb	r2, r2, #32
   d9178:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   d917c:	fa21 f202 	lsr.w	r2, r1, r2
   d9180:	eb43 0002 	adc.w	r0, r3, r2
   d9184:	bf08      	it	eq
   d9186:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   d918a:	4770      	bx	lr

000d918c <__aeabi_ldivmod>:
   d918c:	b97b      	cbnz	r3, d91ae <__aeabi_ldivmod+0x22>
   d918e:	b972      	cbnz	r2, d91ae <__aeabi_ldivmod+0x22>
   d9190:	2900      	cmp	r1, #0
   d9192:	bfbe      	ittt	lt
   d9194:	2000      	movlt	r0, #0
   d9196:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   d919a:	e006      	blt.n	d91aa <__aeabi_ldivmod+0x1e>
   d919c:	bf08      	it	eq
   d919e:	2800      	cmpeq	r0, #0
   d91a0:	bf1c      	itt	ne
   d91a2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   d91a6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   d91aa:	f000 b9b1 	b.w	d9510 <__aeabi_idiv0>
   d91ae:	f1ad 0c08 	sub.w	ip, sp, #8
   d91b2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d91b6:	2900      	cmp	r1, #0
   d91b8:	db09      	blt.n	d91ce <__aeabi_ldivmod+0x42>
   d91ba:	2b00      	cmp	r3, #0
   d91bc:	db1a      	blt.n	d91f4 <__aeabi_ldivmod+0x68>
   d91be:	f000 f835 	bl	d922c <__udivmoddi4>
   d91c2:	f8dd e004 	ldr.w	lr, [sp, #4]
   d91c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d91ca:	b004      	add	sp, #16
   d91cc:	4770      	bx	lr
   d91ce:	4240      	negs	r0, r0
   d91d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d91d4:	2b00      	cmp	r3, #0
   d91d6:	db1b      	blt.n	d9210 <__aeabi_ldivmod+0x84>
   d91d8:	f000 f828 	bl	d922c <__udivmoddi4>
   d91dc:	f8dd e004 	ldr.w	lr, [sp, #4]
   d91e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d91e4:	b004      	add	sp, #16
   d91e6:	4240      	negs	r0, r0
   d91e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d91ec:	4252      	negs	r2, r2
   d91ee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d91f2:	4770      	bx	lr
   d91f4:	4252      	negs	r2, r2
   d91f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d91fa:	f000 f817 	bl	d922c <__udivmoddi4>
   d91fe:	f8dd e004 	ldr.w	lr, [sp, #4]
   d9202:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d9206:	b004      	add	sp, #16
   d9208:	4240      	negs	r0, r0
   d920a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d920e:	4770      	bx	lr
   d9210:	4252      	negs	r2, r2
   d9212:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d9216:	f000 f809 	bl	d922c <__udivmoddi4>
   d921a:	f8dd e004 	ldr.w	lr, [sp, #4]
   d921e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d9222:	b004      	add	sp, #16
   d9224:	4252      	negs	r2, r2
   d9226:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d922a:	4770      	bx	lr

000d922c <__udivmoddi4>:
   d922c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9230:	468c      	mov	ip, r1
   d9232:	460e      	mov	r6, r1
   d9234:	4604      	mov	r4, r0
   d9236:	9d08      	ldr	r5, [sp, #32]
   d9238:	2b00      	cmp	r3, #0
   d923a:	d150      	bne.n	d92de <__udivmoddi4+0xb2>
   d923c:	428a      	cmp	r2, r1
   d923e:	4617      	mov	r7, r2
   d9240:	d96c      	bls.n	d931c <__udivmoddi4+0xf0>
   d9242:	fab2 fe82 	clz	lr, r2
   d9246:	f1be 0f00 	cmp.w	lr, #0
   d924a:	d00b      	beq.n	d9264 <__udivmoddi4+0x38>
   d924c:	f1ce 0420 	rsb	r4, lr, #32
   d9250:	fa20 f404 	lsr.w	r4, r0, r4
   d9254:	fa01 f60e 	lsl.w	r6, r1, lr
   d9258:	ea44 0c06 	orr.w	ip, r4, r6
   d925c:	fa02 f70e 	lsl.w	r7, r2, lr
   d9260:	fa00 f40e 	lsl.w	r4, r0, lr
   d9264:	ea4f 4917 	mov.w	r9, r7, lsr #16
   d9268:	0c22      	lsrs	r2, r4, #16
   d926a:	fbbc f0f9 	udiv	r0, ip, r9
   d926e:	fa1f f887 	uxth.w	r8, r7
   d9272:	fb09 c610 	mls	r6, r9, r0, ip
   d9276:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d927a:	fb00 f308 	mul.w	r3, r0, r8
   d927e:	42b3      	cmp	r3, r6
   d9280:	d909      	bls.n	d9296 <__udivmoddi4+0x6a>
   d9282:	19f6      	adds	r6, r6, r7
   d9284:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   d9288:	f080 8122 	bcs.w	d94d0 <__udivmoddi4+0x2a4>
   d928c:	42b3      	cmp	r3, r6
   d928e:	f240 811f 	bls.w	d94d0 <__udivmoddi4+0x2a4>
   d9292:	3802      	subs	r0, #2
   d9294:	443e      	add	r6, r7
   d9296:	1af6      	subs	r6, r6, r3
   d9298:	b2a2      	uxth	r2, r4
   d929a:	fbb6 f3f9 	udiv	r3, r6, r9
   d929e:	fb09 6613 	mls	r6, r9, r3, r6
   d92a2:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d92a6:	fb03 f808 	mul.w	r8, r3, r8
   d92aa:	45a0      	cmp	r8, r4
   d92ac:	d909      	bls.n	d92c2 <__udivmoddi4+0x96>
   d92ae:	19e4      	adds	r4, r4, r7
   d92b0:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
   d92b4:	f080 810a 	bcs.w	d94cc <__udivmoddi4+0x2a0>
   d92b8:	45a0      	cmp	r8, r4
   d92ba:	f240 8107 	bls.w	d94cc <__udivmoddi4+0x2a0>
   d92be:	3b02      	subs	r3, #2
   d92c0:	443c      	add	r4, r7
   d92c2:	ebc8 0404 	rsb	r4, r8, r4
   d92c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d92ca:	2100      	movs	r1, #0
   d92cc:	2d00      	cmp	r5, #0
   d92ce:	d062      	beq.n	d9396 <__udivmoddi4+0x16a>
   d92d0:	fa24 f40e 	lsr.w	r4, r4, lr
   d92d4:	2300      	movs	r3, #0
   d92d6:	602c      	str	r4, [r5, #0]
   d92d8:	606b      	str	r3, [r5, #4]
   d92da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d92de:	428b      	cmp	r3, r1
   d92e0:	d907      	bls.n	d92f2 <__udivmoddi4+0xc6>
   d92e2:	2d00      	cmp	r5, #0
   d92e4:	d055      	beq.n	d9392 <__udivmoddi4+0x166>
   d92e6:	2100      	movs	r1, #0
   d92e8:	e885 0041 	stmia.w	r5, {r0, r6}
   d92ec:	4608      	mov	r0, r1
   d92ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d92f2:	fab3 f183 	clz	r1, r3
   d92f6:	2900      	cmp	r1, #0
   d92f8:	f040 8090 	bne.w	d941c <__udivmoddi4+0x1f0>
   d92fc:	42b3      	cmp	r3, r6
   d92fe:	d302      	bcc.n	d9306 <__udivmoddi4+0xda>
   d9300:	4282      	cmp	r2, r0
   d9302:	f200 80f8 	bhi.w	d94f6 <__udivmoddi4+0x2ca>
   d9306:	1a84      	subs	r4, r0, r2
   d9308:	eb66 0603 	sbc.w	r6, r6, r3
   d930c:	2001      	movs	r0, #1
   d930e:	46b4      	mov	ip, r6
   d9310:	2d00      	cmp	r5, #0
   d9312:	d040      	beq.n	d9396 <__udivmoddi4+0x16a>
   d9314:	e885 1010 	stmia.w	r5, {r4, ip}
   d9318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d931c:	b912      	cbnz	r2, d9324 <__udivmoddi4+0xf8>
   d931e:	2701      	movs	r7, #1
   d9320:	fbb7 f7f2 	udiv	r7, r7, r2
   d9324:	fab7 fe87 	clz	lr, r7
   d9328:	f1be 0f00 	cmp.w	lr, #0
   d932c:	d135      	bne.n	d939a <__udivmoddi4+0x16e>
   d932e:	1bf3      	subs	r3, r6, r7
   d9330:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d9334:	fa1f fc87 	uxth.w	ip, r7
   d9338:	2101      	movs	r1, #1
   d933a:	fbb3 f0f8 	udiv	r0, r3, r8
   d933e:	0c22      	lsrs	r2, r4, #16
   d9340:	fb08 3610 	mls	r6, r8, r0, r3
   d9344:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d9348:	fb0c f300 	mul.w	r3, ip, r0
   d934c:	42b3      	cmp	r3, r6
   d934e:	d907      	bls.n	d9360 <__udivmoddi4+0x134>
   d9350:	19f6      	adds	r6, r6, r7
   d9352:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   d9356:	d202      	bcs.n	d935e <__udivmoddi4+0x132>
   d9358:	42b3      	cmp	r3, r6
   d935a:	f200 80ce 	bhi.w	d94fa <__udivmoddi4+0x2ce>
   d935e:	4610      	mov	r0, r2
   d9360:	1af6      	subs	r6, r6, r3
   d9362:	b2a2      	uxth	r2, r4
   d9364:	fbb6 f3f8 	udiv	r3, r6, r8
   d9368:	fb08 6613 	mls	r6, r8, r3, r6
   d936c:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d9370:	fb0c fc03 	mul.w	ip, ip, r3
   d9374:	45a4      	cmp	ip, r4
   d9376:	d907      	bls.n	d9388 <__udivmoddi4+0x15c>
   d9378:	19e4      	adds	r4, r4, r7
   d937a:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
   d937e:	d202      	bcs.n	d9386 <__udivmoddi4+0x15a>
   d9380:	45a4      	cmp	ip, r4
   d9382:	f200 80b5 	bhi.w	d94f0 <__udivmoddi4+0x2c4>
   d9386:	4613      	mov	r3, r2
   d9388:	ebcc 0404 	rsb	r4, ip, r4
   d938c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d9390:	e79c      	b.n	d92cc <__udivmoddi4+0xa0>
   d9392:	4629      	mov	r1, r5
   d9394:	4628      	mov	r0, r5
   d9396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d939a:	f1ce 0120 	rsb	r1, lr, #32
   d939e:	fa06 f30e 	lsl.w	r3, r6, lr
   d93a2:	fa07 f70e 	lsl.w	r7, r7, lr
   d93a6:	fa20 f901 	lsr.w	r9, r0, r1
   d93aa:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d93ae:	40ce      	lsrs	r6, r1
   d93b0:	ea49 0903 	orr.w	r9, r9, r3
   d93b4:	fbb6 faf8 	udiv	sl, r6, r8
   d93b8:	ea4f 4419 	mov.w	r4, r9, lsr #16
   d93bc:	fb08 661a 	mls	r6, r8, sl, r6
   d93c0:	fa1f fc87 	uxth.w	ip, r7
   d93c4:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
   d93c8:	fb0a f20c 	mul.w	r2, sl, ip
   d93cc:	429a      	cmp	r2, r3
   d93ce:	fa00 f40e 	lsl.w	r4, r0, lr
   d93d2:	d90a      	bls.n	d93ea <__udivmoddi4+0x1be>
   d93d4:	19db      	adds	r3, r3, r7
   d93d6:	f10a 31ff 	add.w	r1, sl, #4294967295	; 0xffffffff
   d93da:	f080 8087 	bcs.w	d94ec <__udivmoddi4+0x2c0>
   d93de:	429a      	cmp	r2, r3
   d93e0:	f240 8084 	bls.w	d94ec <__udivmoddi4+0x2c0>
   d93e4:	f1aa 0a02 	sub.w	sl, sl, #2
   d93e8:	443b      	add	r3, r7
   d93ea:	1a9b      	subs	r3, r3, r2
   d93ec:	fa1f f989 	uxth.w	r9, r9
   d93f0:	fbb3 f1f8 	udiv	r1, r3, r8
   d93f4:	fb08 3311 	mls	r3, r8, r1, r3
   d93f8:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
   d93fc:	fb01 f60c 	mul.w	r6, r1, ip
   d9400:	429e      	cmp	r6, r3
   d9402:	d907      	bls.n	d9414 <__udivmoddi4+0x1e8>
   d9404:	19db      	adds	r3, r3, r7
   d9406:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
   d940a:	d26b      	bcs.n	d94e4 <__udivmoddi4+0x2b8>
   d940c:	429e      	cmp	r6, r3
   d940e:	d969      	bls.n	d94e4 <__udivmoddi4+0x2b8>
   d9410:	3902      	subs	r1, #2
   d9412:	443b      	add	r3, r7
   d9414:	1b9b      	subs	r3, r3, r6
   d9416:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   d941a:	e78e      	b.n	d933a <__udivmoddi4+0x10e>
   d941c:	f1c1 0e20 	rsb	lr, r1, #32
   d9420:	fa22 f40e 	lsr.w	r4, r2, lr
   d9424:	408b      	lsls	r3, r1
   d9426:	4323      	orrs	r3, r4
   d9428:	fa20 f70e 	lsr.w	r7, r0, lr
   d942c:	fa06 f401 	lsl.w	r4, r6, r1
   d9430:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   d9434:	fa26 f60e 	lsr.w	r6, r6, lr
   d9438:	433c      	orrs	r4, r7
   d943a:	fbb6 f9fc 	udiv	r9, r6, ip
   d943e:	0c27      	lsrs	r7, r4, #16
   d9440:	fb0c 6619 	mls	r6, ip, r9, r6
   d9444:	fa1f f883 	uxth.w	r8, r3
   d9448:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   d944c:	fb09 f708 	mul.w	r7, r9, r8
   d9450:	42b7      	cmp	r7, r6
   d9452:	fa02 f201 	lsl.w	r2, r2, r1
   d9456:	fa00 fa01 	lsl.w	sl, r0, r1
   d945a:	d908      	bls.n	d946e <__udivmoddi4+0x242>
   d945c:	18f6      	adds	r6, r6, r3
   d945e:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   d9462:	d241      	bcs.n	d94e8 <__udivmoddi4+0x2bc>
   d9464:	42b7      	cmp	r7, r6
   d9466:	d93f      	bls.n	d94e8 <__udivmoddi4+0x2bc>
   d9468:	f1a9 0902 	sub.w	r9, r9, #2
   d946c:	441e      	add	r6, r3
   d946e:	1bf6      	subs	r6, r6, r7
   d9470:	b2a0      	uxth	r0, r4
   d9472:	fbb6 f4fc 	udiv	r4, r6, ip
   d9476:	fb0c 6614 	mls	r6, ip, r4, r6
   d947a:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
   d947e:	fb04 f808 	mul.w	r8, r4, r8
   d9482:	45b8      	cmp	r8, r7
   d9484:	d907      	bls.n	d9496 <__udivmoddi4+0x26a>
   d9486:	18ff      	adds	r7, r7, r3
   d9488:	f104 30ff 	add.w	r0, r4, #4294967295	; 0xffffffff
   d948c:	d228      	bcs.n	d94e0 <__udivmoddi4+0x2b4>
   d948e:	45b8      	cmp	r8, r7
   d9490:	d926      	bls.n	d94e0 <__udivmoddi4+0x2b4>
   d9492:	3c02      	subs	r4, #2
   d9494:	441f      	add	r7, r3
   d9496:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
   d949a:	ebc8 0707 	rsb	r7, r8, r7
   d949e:	fba0 8902 	umull	r8, r9, r0, r2
   d94a2:	454f      	cmp	r7, r9
   d94a4:	4644      	mov	r4, r8
   d94a6:	464e      	mov	r6, r9
   d94a8:	d314      	bcc.n	d94d4 <__udivmoddi4+0x2a8>
   d94aa:	d029      	beq.n	d9500 <__udivmoddi4+0x2d4>
   d94ac:	b365      	cbz	r5, d9508 <__udivmoddi4+0x2dc>
   d94ae:	ebba 0304 	subs.w	r3, sl, r4
   d94b2:	eb67 0706 	sbc.w	r7, r7, r6
   d94b6:	fa07 fe0e 	lsl.w	lr, r7, lr
   d94ba:	40cb      	lsrs	r3, r1
   d94bc:	40cf      	lsrs	r7, r1
   d94be:	ea4e 0303 	orr.w	r3, lr, r3
   d94c2:	e885 0088 	stmia.w	r5, {r3, r7}
   d94c6:	2100      	movs	r1, #0
   d94c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d94cc:	4613      	mov	r3, r2
   d94ce:	e6f8      	b.n	d92c2 <__udivmoddi4+0x96>
   d94d0:	4610      	mov	r0, r2
   d94d2:	e6e0      	b.n	d9296 <__udivmoddi4+0x6a>
   d94d4:	ebb8 0402 	subs.w	r4, r8, r2
   d94d8:	eb69 0603 	sbc.w	r6, r9, r3
   d94dc:	3801      	subs	r0, #1
   d94de:	e7e5      	b.n	d94ac <__udivmoddi4+0x280>
   d94e0:	4604      	mov	r4, r0
   d94e2:	e7d8      	b.n	d9496 <__udivmoddi4+0x26a>
   d94e4:	4611      	mov	r1, r2
   d94e6:	e795      	b.n	d9414 <__udivmoddi4+0x1e8>
   d94e8:	4681      	mov	r9, r0
   d94ea:	e7c0      	b.n	d946e <__udivmoddi4+0x242>
   d94ec:	468a      	mov	sl, r1
   d94ee:	e77c      	b.n	d93ea <__udivmoddi4+0x1be>
   d94f0:	3b02      	subs	r3, #2
   d94f2:	443c      	add	r4, r7
   d94f4:	e748      	b.n	d9388 <__udivmoddi4+0x15c>
   d94f6:	4608      	mov	r0, r1
   d94f8:	e70a      	b.n	d9310 <__udivmoddi4+0xe4>
   d94fa:	3802      	subs	r0, #2
   d94fc:	443e      	add	r6, r7
   d94fe:	e72f      	b.n	d9360 <__udivmoddi4+0x134>
   d9500:	45c2      	cmp	sl, r8
   d9502:	d3e7      	bcc.n	d94d4 <__udivmoddi4+0x2a8>
   d9504:	463e      	mov	r6, r7
   d9506:	e7d1      	b.n	d94ac <__udivmoddi4+0x280>
   d9508:	4629      	mov	r1, r5
   d950a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d950e:	bf00      	nop

000d9510 <__aeabi_idiv0>:
   d9510:	4770      	bx	lr
   d9512:	bf00      	nop

000d9514 <__cxa_atexit>:
   d9514:	b510      	push	{r4, lr}
   d9516:	4c05      	ldr	r4, [pc, #20]	; (d952c <__cxa_atexit+0x18>)
   d9518:	4613      	mov	r3, r2
   d951a:	b12c      	cbz	r4, d9528 <__cxa_atexit+0x14>
   d951c:	460a      	mov	r2, r1
   d951e:	4601      	mov	r1, r0
   d9520:	2002      	movs	r0, #2
   d9522:	f3af 8000 	nop.w
   d9526:	bd10      	pop	{r4, pc}
   d9528:	4620      	mov	r0, r4
   d952a:	bd10      	pop	{r4, pc}
   d952c:	00000000 	.word	0x00000000

000d9530 <memcpy>:
   d9530:	b510      	push	{r4, lr}
   d9532:	1e43      	subs	r3, r0, #1
   d9534:	440a      	add	r2, r1
   d9536:	4291      	cmp	r1, r2
   d9538:	d004      	beq.n	d9544 <memcpy+0x14>
   d953a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d953e:	f803 4f01 	strb.w	r4, [r3, #1]!
   d9542:	e7f8      	b.n	d9536 <memcpy+0x6>
   d9544:	bd10      	pop	{r4, pc}

000d9546 <memset>:
   d9546:	4402      	add	r2, r0
   d9548:	4603      	mov	r3, r0
   d954a:	4293      	cmp	r3, r2
   d954c:	d002      	beq.n	d9554 <memset+0xe>
   d954e:	f803 1b01 	strb.w	r1, [r3], #1
   d9552:	e7fa      	b.n	d954a <memset+0x4>
   d9554:	4770      	bx	lr
	...

000d9558 <srand>:
   d9558:	b538      	push	{r3, r4, r5, lr}
   d955a:	4b12      	ldr	r3, [pc, #72]	; (d95a4 <srand+0x4c>)
   d955c:	681c      	ldr	r4, [r3, #0]
   d955e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9560:	4605      	mov	r5, r0
   d9562:	b9d3      	cbnz	r3, d959a <srand+0x42>
   d9564:	2018      	movs	r0, #24
   d9566:	f7fc fa93 	bl	d5a90 <malloc>
   d956a:	f243 330e 	movw	r3, #13070	; 0x330e
   d956e:	63a0      	str	r0, [r4, #56]	; 0x38
   d9570:	8003      	strh	r3, [r0, #0]
   d9572:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d9576:	8043      	strh	r3, [r0, #2]
   d9578:	f241 2334 	movw	r3, #4660	; 0x1234
   d957c:	8083      	strh	r3, [r0, #4]
   d957e:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d9582:	80c3      	strh	r3, [r0, #6]
   d9584:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d9588:	8103      	strh	r3, [r0, #8]
   d958a:	2305      	movs	r3, #5
   d958c:	8143      	strh	r3, [r0, #10]
   d958e:	230b      	movs	r3, #11
   d9590:	8183      	strh	r3, [r0, #12]
   d9592:	2201      	movs	r2, #1
   d9594:	2300      	movs	r3, #0
   d9596:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d959a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d959c:	2200      	movs	r2, #0
   d959e:	611d      	str	r5, [r3, #16]
   d95a0:	615a      	str	r2, [r3, #20]
   d95a2:	bd38      	pop	{r3, r4, r5, pc}
   d95a4:	2003e41c 	.word	0x2003e41c

000d95a8 <strdup>:
   d95a8:	4b02      	ldr	r3, [pc, #8]	; (d95b4 <strdup+0xc>)
   d95aa:	4601      	mov	r1, r0
   d95ac:	6818      	ldr	r0, [r3, #0]
   d95ae:	f000 b803 	b.w	d95b8 <_strdup_r>
   d95b2:	bf00      	nop
   d95b4:	2003e41c 	.word	0x2003e41c

000d95b8 <_strdup_r>:
   d95b8:	b570      	push	{r4, r5, r6, lr}
   d95ba:	4606      	mov	r6, r0
   d95bc:	4608      	mov	r0, r1
   d95be:	460c      	mov	r4, r1
   d95c0:	f000 f80d 	bl	d95de <strlen>
   d95c4:	1c45      	adds	r5, r0, #1
   d95c6:	4629      	mov	r1, r5
   d95c8:	4630      	mov	r0, r6
   d95ca:	f7fc fa89 	bl	d5ae0 <_malloc_r>
   d95ce:	4606      	mov	r6, r0
   d95d0:	b118      	cbz	r0, d95da <_strdup_r+0x22>
   d95d2:	462a      	mov	r2, r5
   d95d4:	4621      	mov	r1, r4
   d95d6:	f7ff ffab 	bl	d9530 <memcpy>
   d95da:	4630      	mov	r0, r6
   d95dc:	bd70      	pop	{r4, r5, r6, pc}

000d95de <strlen>:
   d95de:	4603      	mov	r3, r0
   d95e0:	f813 2b01 	ldrb.w	r2, [r3], #1
   d95e4:	2a00      	cmp	r2, #0
   d95e6:	d1fb      	bne.n	d95e0 <strlen+0x2>
   d95e8:	1a18      	subs	r0, r3, r0
   d95ea:	3801      	subs	r0, #1
   d95ec:	4770      	bx	lr

000d95ee <link_code_end>:
	...

000d95f0 <dynalib_user>:
   d95f0:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d9600:	0000 0000                                   ....

000d9604 <_ZTV16JsonWriterStaticILj256EE>:
	...
   d960c:	40b9 000d 40cd 000d 6941 2072 7551 6c61     .@...@..Air Qual
   d961c:	7469 2079 6553 736e 726f 7220 6165 7964     ity Sensor ready
   d962c:	002e 6941 2072 7551 6c61 7469 2079 6553     ..Air Quality Se
   d963c:	736e 726f 4520 5252 524f 0021 6150 7472     nsor ERROR!.Part
   d964c:	6369 656c 4100 7269 5120 6175 696c 7974     icle.Air Quality
   d965c:	4d00 6e6f 7469 726f 4200 454d 3832 2030     .Monitor.BME280 
   d966c:	6553 736e 726f 7220 6165 7964 002e 4d42     Sensor ready..BM
   d967c:	3245 3038 5320 6e65 6f73 2072 5245 4f52     E280 Sensor ERRO
   d968c:	2152 4e00 6e6f 0065 6144 676e 7265 4800     R!.None.Danger.H
   d969c:	6769 2068 6f50 6c6c 7475 6f69 006e 6f4c     igh Pollution.Lo
   d96ac:	2077 6f50 6c6c 7475 6f69 006e 7246 7365     w Pollution.Fres
   d96bc:	2068 6941 0072 504c 3a4f 2520 0064 6152     h Air.LPO: %d.Ra
   d96cc:	6974 3a6f 2520 2566 0025 6f43 636e 6e65     tio: %f%%.Concen
   d96dc:	7274 7461 6f69 3a6e 2520 2066 6370 2f73     tration: %f pcs/
   d96ec:	004c 6554 706d 203a 4300 4800 6d75 6469     L.Temp: .C.Humid
   d96fc:	7469 3a79 0020 7250 7365 3a73 0020 6820     ity: .Press: . h
   d970c:	6150 4400 7375 3a74 0020 6574 706d 6800     Pa.Dust: .temp.h
   d971c:	6d75 6469 7469 0079 7270 7365 7573 6572     umidity.pressure
   d972c:	6100 7269 712d 6175 696c 7974 6400 7375     .air-quality.dus
   d973c:	2d74 706c 006f 6c25 0075 7564 7473 722d     t-lpo.%lu.dust-r
   d974c:	7461 6f69 6400 7375 2d74 6f63 636e 6e65     atio.dust-concen
   d975c:	7274 7461 6f69 006e 6e65 2d76 6176 736c     tration.env-vals
   d976c:	4100 7269 5120 6175 696c 7974 203a 7325     .Air Quality: %s
   d977c:	5400 6d65 3a70 2520 0064 7250 7365 7573     .Temp: %d.Pressu
   d978c:	6572 203a 6425 4800 6d75 6469 7469 3a79     re: %d.Humidity:
   d979c:	2520 0064                                    %d.

000d97a0 <_ZN16AirQualitySensor13LOW_POLLUTIONE>:
   d97a0:	0002 0000                                   ....

000d97a4 <_ZN16AirQualitySensor9FRESH_AIRE>:
   d97a4:	0003 0000                                   ....

000d97a8 <_ZN16AirQualitySensor14HIGH_POLLUTIONE>:
   d97a8:	0001 0000                                   ....

000d97ac <_ZN16AirQualitySensor12FORCE_SIGNALE>:
   d97ac:	0000 0000                                   ....

000d97b0 <_ZTVN8particle13__SPISettingsE>:
	...
   d97b8:	4865 000d 6564 6166 6c75 2074 4d00 4253     eH..default .MSB
   d97c8:	4c00 4253 3c00 5053 5349 7465 6974 676e     .LSB.<SPISetting
   d97d8:	2073 6564 6166 6c75 3e74 3c00 5053 5349     s default>.<SPIS
   d97e8:	7465 6974 676e 2073 7325 6c25 2075 7325     ettings %s%lu %s
   d97f8:	4d20 444f 2545 3e64 0000                          MODE%d>.

000d9801 <_ZL9BasicFont>:
	...
   d9809:	0000 005f 0000 0000 0000 0007 0007 0000     .._.............
   d9819:	1400 147f 147f 0000 2400 7f2a 122a 0000     .........$*.*...
   d9829:	2300 0813 6264 0000 3600 5549 5022 0000     .#..db...6IU"P..
   d9839:	0000 0305 0000 0000 1c00 4122 0000 0000     .........."A....
   d9849:	4100 1c22 0000 0000 0800 1c2a 082a 0000     .A".......*.*...
   d9859:	0800 3e08 0808 0000 a000 0060 0000 0000     ...>......`.....
   d9869:	0800 0808 0808 0000 6000 0060 0000 0000     .........``.....
   d9879:	2000 0810 0204 0000 3e00 4951 3e45 0000     . .......>QIE>..
   d9889:	0000 7f42 0040 0000 6200 4951 4649 0000     ..B.@....bQIIF..
   d9899:	2200 4941 3649 0000 1800 1214 107f 0000     ."AII6..........
   d98a9:	2700 4545 3945 0000 3c00 494a 3049 0000     .'EEE9...<JII0..
   d98b9:	0100 0971 0305 0000 3600 4949 3649 0000     ..q......6III6..
   d98c9:	0600 4949 1e29 0000 0000 3636 0000 0000     ..II).....66....
   d98d9:	0000 6cac 0000 0000 0800 2214 0041 0000     ...l......."A...
   d98e9:	1400 1414 1414 0000 4100 1422 0008 0000     .........A".....
   d98f9:	0200 5101 0609 0000 3200 7949 3e41 0000     ...Q.....2IyA>..
   d9909:	7e00 0909 7e09 0000 7f00 4949 3649 0000     .~...~....III6..
   d9919:	3e00 4141 2241 0000 7f00 4141 1c22 0000     .>AAA"....AA"...
   d9929:	7f00 4949 4149 0000 7f00 0909 0109 0000     ..IIIA..........
   d9939:	3e00 4141 7251 0000 7f00 0808 7f08 0000     .>AAQr..........
   d9949:	4100 417f 0000 0000 2000 4140 013f 0000     .A.A..... @A?...
   d9959:	7f00 1408 4122 0000 7f00 4040 4040 0000     ...."A....@@@@..
   d9969:	7f00 0c02 7f02 0000 7f00 0804 7f10 0000     ................
   d9979:	3e00 4141 3e41 0000 7f00 0909 0609 0000     .>AAA>..........
   d9989:	3e00 5141 5e21 0000 7f00 1909 4629 0000     .>AQ!^......)F..
   d9999:	2600 4949 3249 0000 0100 7f01 0101 0000     .&III2..........
   d99a9:	3f00 4040 3f40 0000 1f00 4020 1f20 0000     .?@@@?.... @ ...
   d99b9:	3f00 3840 3f40 0000 6300 0814 6314 0000     .?@8@?...c...c..
   d99c9:	0300 7804 0304 0000 6100 4951 4345 0000     ...x.....aQIEC..
   d99d9:	7f00 4141 0000 0000 0200 0804 2010 0000     ..AA......... ..
   d99e9:	4100 7f41 0000 0000 0400 0102 0402 0000     .AA.............
   d99f9:	8000 8080 8080 0000 0100 0402 0000 0000     ................
   d9a09:	2000 5454 7854 0000 7f00 4448 3844 0000     . TTTx....HDD8..
   d9a19:	3800 4444 0028 0000 3800 4444 7f48 0000     .8DD(....8DDH...
   d9a29:	3800 5454 1854 0000 0800 097e 0002 0000     .8TTT.....~.....
   d9a39:	1800 a4a4 7ca4 0000 7f00 0408 7804 0000     .....|.......x..
   d9a49:	0000 007d 0000 0000 8000 7d84 0000 0000     ..}........}....
   d9a59:	7f00 2810 0044 0000 4100 407f 0000 0000     ...(D....A.@....
   d9a69:	7c00 1804 7804 0000 7c00 0408 007c 0000     .|...x...|..|...
   d9a79:	3800 4444 0038 0000 fc00 2424 0018 0000     .8DD8.....$$....
   d9a89:	1800 2424 00fc 0000 0000 087c 0004 0000     ..$$......|.....
   d9a99:	4800 5454 0024 0000 0400 447f 0000 0000     .HTT$......D....
   d9aa9:	3c00 4040 007c 0000 1c00 4020 1c20 0000     .<@@|..... @ ...
   d9ab9:	3c00 3040 3c40 0000 4400 1028 4428 0000     .<@0@<...D(.(D..
   d9ac9:	1c00 a0a0 007c 0000 4400 5464 444c 0000     ....|....DdTLD..
   d9ad9:	0800 4136 0000 0000 0000 007f 0000 0000     ..6A............
   d9ae9:	4100 0836 0000 0000 0200 0101 0102 0000     .A6.............
   d9af9:	0200 0505 0002 0000 0000 0000                    ...........

000d9b04 <_ZTV10JsonBuffer>:
	...
   d9b0c:	5339 000d 5355 000d                         9S..US..

000d9b14 <_ZTV10JsonWriter>:
	...
   d9b1c:	5369 000d 537d 000d 3025 7834 5c00 2575     iS..}S..%04x.\u%
   d9b2c:	3430 0058 7274 6575 6600 6c61 6573 2500     04X.true.false.%
   d9b3c:	2a2e 0066 6625 2500 2a2e 666c 2500 666c     .*f.%f.%.*lf.%lf
   d9b4c:	0000 0000                                   ....

000d9b50 <_ZTVN5spark13CellularClassE>:
	...
   d9b58:	5c0b 000d 5c01 000d 5bf7 000d 5bad 000d     .\...\...[...[..
   d9b68:	5beb 000d 5bdf 000d 5bd3 000d 5bcb 000d     .[...[...[...[..
   d9b78:	5bc1 000d 5bb7 000d 6661 000d               .[...[..af..

000d9b84 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d9b8c:	5c45 000d 5c4b 000d 5ca1 000d 5c59 000d     E\..K\...\..Y\..
   d9b9c:	5c47 000d                                   G\..

000d9ba0 <_ZTVN5spark13EthernetClassE>:
	...
   d9ba8:	625b 000d 6251 000d 6247 000d 623d 000d     [b..Qb..Gb..=b..
   d9bb8:	6231 000d 6225 000d 6219 000d 6211 000d     1b..%b...b...b..
   d9bc8:	6207 000d 61fd 000d 6661 000d               .b...a..af..

000d9bd4 <_ZTV7TwoWire>:
	...
   d9bdc:	6279 000d 62c3 000d 629b 000d 627b 000d     yb...b...b..{b..
   d9bec:	62a3 000d 62ab 000d 62b3 000d 62bb 000d     .b...b...b...b..

000d9bfc <_ZTV9IPAddress>:
	...
   d9c04:	6397 000d 6387 000d 6389 000d 6162 6475     .c...c...c..baud
   d9c14:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d9c24:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d9c34:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d9c44:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d9c54:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d9c64:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d9c74:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d9c84:	7070 2500 3130 7530 0020 205d 2c00 0020     pp.%010u .] ., .
   d9c94:	2928 203a 2000 005b 6f63 6564 3d20 0020     (): . [.code = .
   d9ca4:	6925 6400 7465 6961 736c 3d20 0020 0a0d     %i.details = ...
   d9cb4:	6c00 006e 6e66 6300 646f 0065 6564 6174     .ln.fn.code.deta
   d9cc4:	6c69 6e00 6e6f 0065 7274 6361 0065 6e69     il.none.trace.in
   d9cd4:	6f66 7700 7261 006e 7265 6f72 0072 6170     fo.warn.error.pa
   d9ce4:	696e 0063 6c61 006c                         nic.all.

000d9cec <_ZTVN5spark9MeshClassE>:
	...
   d9cf4:	64db 000d 64d1 000d 64c7 000d 64bd 000d     .d...d...d...d..
   d9d04:	64b1 000d 64a5 000d 6499 000d 6491 000d     .d...d...d...d..
   d9d14:	6487 000d 647d 000d 6661 000d               .d..}d..af..

000d9d20 <_ZTVN5spark12NetworkClassE>:
	...
   d9d28:	65f9 000d 6603 000d 660d 000d 6617 000d     .e...f...f...f..
   d9d38:	6621 000d 662d 000d 6639 000d 6645 000d     !f..-f..9f..Ef..
   d9d48:	664d 000d 6657 000d 6661 000d               Mf..Wf..af..

000d9d54 <_ZTV8SPIClass>:
	...
   d9d5c:	68a5 000d 68a7 000d                         .h...h..

000d9d64 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d9d64:	0800 1810 2820 3830 005a 2b25 3330 3a64     .... (08Z.%+03d:
   d9d74:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
   d9d84:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
   d9d94:	0000 0000                                   ....

000d9d98 <_ZTV11USARTSerial>:
	...
   d9da0:	6bad 000d 6bfd 000d 6c0b 000d 6741 000d     .k...k...l..Ag..
   d9db0:	6bc1 000d 6be3 000d 6bcf 000d 6bf7 000d     .k...k...k...k..
   d9dc0:	6baf 000d 6bb3 000d                         .k...k..

000d9dc8 <_ZTV9USBSerial>:
	...
   d9dd0:	6ce9 000d 6d39 000d 6d47 000d 6741 000d     .l..9m..Gm..Ag..
   d9de0:	6d25 000d 6ceb 000d 6d01 000d 6d33 000d     %m...l...m..3m..
   d9df0:	6d17 000d 6ce5 000d                         .m...l..

000d9df8 <_ZSt7nothrow>:
   d9df8:	0000 0000 6f70 0077 0000 0000 0000 0000     ....pow.........

000d9e08 <TWO52>:
   d9e08:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

000d9e18 <__sf_fake_stdin>:
	...

000d9e38 <__sf_fake_stdout>:
	...

000d9e58 <__sf_fake_stderr>:
	...

000d9e78 <link_const_variable_data_end>:
   d9e78:	000d476d 	.word	0x000d476d
   d9e7c:	000d4861 	.word	0x000d4861
   d9e80:	000d514d 	.word	0x000d514d
   d9e84:	000d5335 	.word	0x000d5335
   d9e88:	000d5605 	.word	0x000d5605
   d9e8c:	000d5b85 	.word	0x000d5b85
   d9e90:	000d5c15 	.word	0x000d5c15
   d9e94:	000d6265 	.word	0x000d6265
   d9e98:	000d646d 	.word	0x000d646d
   d9e9c:	000d65a9 	.word	0x000d65a9
   d9ea0:	000d672d 	.word	0x000d672d
   d9ea4:	000d6889 	.word	0x000d6889
   d9ea8:	000d6b65 	.word	0x000d6b65
   d9eac:	000d6b99 	.word	0x000d6b99
   d9eb0:	000d70fd 	.word	0x000d70fd
   d9eb4:	000d71c1 	.word	0x000d71c1
   d9eb8:	000d7245 	.word	0x000d7245
   d9ebc:	000d72c9 	.word	0x000d72c9
